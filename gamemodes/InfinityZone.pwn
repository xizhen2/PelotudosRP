/*============================================================================//









							  InfinityZone (c)









//==============================| Includes |===================================*/
//#include <a_mysql>
#include <a_samp>
#include <a_http>
#include <crashdetect>
#include <streamer>
#include <sscanf2>
#include <zcmd>
#include <progress>
#include <foreach>


#pragma dynamic 15000
#define SERVER_VERSION	"Apple (1.0.0)"
#define VERSION_DATE	"13/12/2021"

/*#define MYSQL_HOST "144.217.92.54" //host mysql
#define MYSQL_USER "SAMPDB12" //usuario mysql
#define MYSQL_DATABASE "SAMPDB12" //base de datos mysql
#define MYSQL_PASSWORD "gt0pijpy5h" //contraseña mysql*/

#define VERSION_BUILD	"04"
#define BUILD_DATE		"13/12/2021 17:48"


#define TwoAdminPass "221122"


/* LIMITES JUGADOR */
#define MAX_NU_VEHICLES		2
#define MAX_NU_PROPERTIES	1
#define MAX_NU_WORKS		1
#define MAX_NU_TOYS   		2
#define MAX_NU_VOBJECTS   	2

#define MAX_SU_VEHICLES  	8
#define MAX_SU_PROPERTIES  	4
#define MAX_SU_WORKS  		2
//#define MAX_SU_TOYS			MAX_PLAYER_ATTACHED_OBJECTS
#define MAX_SU_VOBJECTS		10

#define MAX_ANUNCIOS 		3

//new RespawnTimer;
//new PaydayTime;
new // Valores por defecto (si no se carga de ECO.txt)
	Float:MULTIPLIER_PROPERITES =	1.00,
	Float:MULTIPLIER_VEHICLES 	=	1.00,
	Float:MULTIPLIER_TOYS		=	1.00,
	Float:MULTIPLIER_SKINS		=	1.00,
	Float:MULTIPLIER_WEAPONS	=	1.00,
	SD_VALUE					=	100000,
	SU_SD_PRICE					=	18,
	SU_WORK_EXTRA_PAY			=	1800;

new DB:Database, Float:New_User_Pos[4] = {1768.3622, -1897.9207, 13.5644, 270.9868},
	SERVER_TIME[2], SERVER_WEATHER = 0,
	Lumberjack_Area,
	Harvest_Area,
	Jail_Areas[3];

#undef MAX_PLAYERS
#define MAX_PLAYERS	100

new PLAYERS_IN_GAME;
new Iterator:PLAYERS_IN_CHOFER<MAX_PLAYERS>,
    Iterator:PLAYERS_IN_TAXI<MAX_PLAYERS>,
    Iterator:PLAYERS_IN_MECANICO<MAX_PLAYERS>,
    Iterator:PLAYERS_IN_MEDICO<MAX_PLAYERS>,
    Iterator:PLAYERS_IN_RACE<MAX_PLAYERS>;

#define PRESSED(%0) (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define RELEASED(%0) (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

/* Colores */
#define COLOR_FADE1 	0xE6E6E6E6
#define COLOR_FADE2 	0xC8C8C8C8
#define COLOR_FADE3 	0xAAAAAAAA
#define COLOR_FADE4 	0x8C8C8C8C
#define COLOR_FADE5 	0x6E6E6E6E
#define PLAYER_COLOR	0xCCCCCC00
#define SPECIAL_ACTION_PISSING 68

main()
{
	print("--- > Infinity Zone < --- ");
}

enum
{
	CHEAT_WEAPON,
	CHEAT_AMMO,
	CHEAT_CAR_MOD,
	CHEAT_VEHICLE_SPEED_HACK,
	CHEAT_POS,
	CHEAT_TEXT_SPAMMER,
	CHEAT_COMMAND_SPAMMER,
	CHEAT_DEATH_SPAMMER,
	CHEAT_STATE_SPAMMER,
	CHEAT_VEHICLE_ENTER_SPAMMER,
	CHEAT_JETPACK,
	CHEAT_PLAYER_SPEED,
	CHEAT_PLAYER_HEALTH,
	CHEAT_PLAYER_ARMOUR,
	CHEAT_VEHICLE_HEALTH,
	CHEAT_PLAYER_VEHICLE_WORK, //Entra a un vehiculo que no es de su trabajo
	CHEAT_PLAYER_VEHICLE_DOORS,
	CHEAT_VEHICLE_NOFUEL,
	CHEAT_SPECTATE,
	CHEAT_UNDETECTED_WEAPON,
	CHEAT_DRIVE_BY,
	CHEAT_UNOCCUPIED_VEHICLE,
	CHEAT_HIGH_POS,
	CHEAT_OCCUPIED_VEHICLE_ENTER
};

enum e_ac_Info
{
	ac_Name[24],
	bool:ac_Enabled,
	bool:ac_Kick, // 1 = kickea, 0 = avisa a admins
	ac_Detections, //enviar aviso cuando llege a este num en los seg de abajo
	ac_Interval
};
new ac_Info[][e_ac_Info] = /* Valores por defecto si no se carga de AC.txt */
{
	{"armas",					true, true,		1, 0},
	{"municion",				true, true,		1, 0},
	{"mod car",					true, true,		1, 0},
	{"vehicle speed",			true, true,		1, 0},
	{"pos",						true, false,	3, 10},
	{"text spammer",			true, true,		10, 5},
	{"command spammer",			true, true,		5, 5},
	{"death spammer",			true, false,	1, 0},
	{"state change spammer",	true, false,	1, 0},
	{"vehicle enter spammer",	true, false,	1, 0},
	{"jetpack",					true, true,		1, 0},
	{"player speed",			true, true,		1, 0},
	{"player health",			true, true,		1, 0},
	{"player armour",			true, true,		1, 0},
	{"vehicle health",			true, true,		1, 0},
	{"pwork != vwork",			true, true,		1, 0},
	{"enter closed vehicle",	true, false,	1, 0},
	{"vehicle nofuel cs",		true, false,	50, 10},
	{"player spectate",			true, false,	1, 0},
	{"pweapon != sweapon",		true, false,	1, 0},
	{"drive by",				true, false,	1, 0},
	{"unoccupied veh",			true, true,		1, 0},
	{"high pos",				true, true,		1, 0},
	{"enter occupied veh",		true, true,		1, 0}
};

enum e_PLAYER_AC_INFO
{
	p_ac_info_DETECTIONS,
	p_ac_info_LAST_DETECTION,
	p_ac_info_IMMUNITY //gettime + seconds
};
new PLAYER_AC_INFO[MAX_PLAYERS][sizeof(ac_Info)][e_PLAYER_AC_INFO];

new ObjectPP[MAX_PLAYERS];
new YaUsoNombre[MAX_PLAYERS];
new PlayerBar:barra[MAX_PLAYERS];
new PlayerBar:barratemp[MAX_PLAYERS];
new PlayerBar:barrahungry[MAX_PLAYERS];
new PlayerBar:barrased[MAX_PLAYERS];
new PlayerBar:barrarep[MAX_PLAYERS];
//Duelo de carrera izi
new PLAYER_IN_RACE[MAX_PLAYERS];
new ARENA_RACE;
new BET_RACE = 0;
new COUNTDOWN_RACE = 10;
new bool:CHECKPOINT_RACE[MAX_PLAYERS];

new AntiBots;

enum
{
	TYPE_LEGAL,
	TYPE_ILLEGAL
};

enum
{
	DIALOG_REGISTER,
	DIALOGO_RECIBED_STATS,
	DIALOG_SEXO_XD,
	DIALOG_REGISTER_EMAIL,
	DIALOG_LOGIN,
 	DIALOG_SECURITY_PASS,
	DIALOG_INFO,
	DIALOG_DOUBT_CHANNEL_POST,
	DIALOG_FOOD_PIZZA,
	DIALOG_FOOD_CLUCKIN,
 	DIALOG_FOOD_BURGER,
 	DIALOG_FOOD_DONUT,
 	DIALOG_FOOD_CAFE,
 	DIALOG_FOOD_TACO,
 	DIALOG_FOOD_STEAK,
	DIALOG_FERRETERIA,
	DIALOG_PLAYER_MP3,
	DIALOG_PLAYER_TOYS,
	DIALOG_PLAYER_TOY_MENU,
	DIALOG_PLAYER_TOY_EDIT_NAME,
	DIALOG_PLAYER_TOY_CONFIRMDELETE,
	DIALOG_PLAYER_TOY_EDIT_BONE,
	DIALOG_PLAYER_TOY_SELECT_BONE,
	DIALOG_PLAYER_TOY_COLOR_1,
	DIALOG_PLAYER_TOY_COLOR_2,
	DIALOG_PLAYER_TOY_DELETE_ALL,
	DIALOG_TOYS_TYPE,
	DIALOG_BANK,
	DIALOG_BANK_WITHDRAW,
	DIALOG_BANK_DEPOSIT,
	DIALOG_BANK_TRANSFER,
	DIALOG_BANK_TRANSFER_SEND,
	DIALOG_BANK_TRANSACTIONS,
	DIALOG_CREATE_BANK_ACCOUNT,
	DIALOG_247_LIST,
	DIALOG_PLAYER_POCKET,
	DIALOG_PLAYER_POCKET_OPTIONS,
	DIALOG_PLAYER_POCKET_DELETE_ALL,
	DIALOG_SHUTDOWN_IPHONE,
	DIALOG_PHONE,
	DIALOG_PHONE_BOOK,
	DIALOG_PHONE_BOOK_ADD_NUMBER,
	DIALOG_PHONE_BOOK_ADD_NAME,
	DIALOG_PHONE_BOOK_OPTIONS,
	DIALOG_PHONE_BOOK_CHANGE_NAME,
	DIALOG_PHONE_BOOK_CONFIRM_DELET,
	DIALOG_PHONE_BOOK_DELETE_ALL,
	DIALOG_PHONE_CALL_NUMBER,
	DIALOG_PHONE_SMS_NUMBER,
	DIALOG_PHONE_SMS_MESSAGE,
	DIALOG_PHONE_BOOK_SEND_MESSAGE,
	DIALOG_PHONE_SENT_MESSAGES,
	DIALOG_PHONE_RECEIVED_MESSAGES,
	DIALOG_CONFIRM_BUY_PROPERTY,
	DIALOG_PLAYER_GPS,
	DIALOG_PLAYER_GPS_PLAYER,
	DIALOG_PLAYER_GPS_PLAYER_ADD,
	DIALOG_PLAYER_GPS_PLAYER_OPTION,
	DIALOG_PLAYER_GPS_CHANGE_NAME,
	DIALOG_PLAYER_GPS_CONFIRM_DELET,
	DIALOG_PLAYER_GPS_SITES,
	DIALOG_PLAYER_GPS_WORKS,
	DIALOG_PLAYER_GPS_DELETE_ALL,
	DIALOG_PLAYER_GPS_SITE_0,
	DIALOG_PLAYER_GPS_SITE_1,
	DIALOG_PLAYER_GPS_SITE_2,
	DIALOG_PLAYER_GPS_SITE_3,
	DIALOG_PLAYER_GPS_SITE_4,
	DIALOG_PLAYER_GPS_SITE_5,
	DIALOG_PLAYER_GPS_SITE_6,
	DIALOG_PLAYER_GPS_SITE_7,
	DIALOG_PLAYER_GPS_SITE_8,
	DIALOG_PLAYER_GPS_SITE_9,
	DIALOG_PLAYER_GPS_SITE_10,
	DIALOG_PLAYER_GPS_SITE_11,
	DIALOG_PLAYER_GPS_PROPERTIES,
	DIALOG_PLAYER_GPS_VEHICLES,
	DIALOG_PROPERTY_OPTIONS,
	DIALOG_PROPERTY_NAME,
	DIALOG_PROPERTY_BANK_SELL,
	DIALOG_PLAYER_MUSICA,
	DIALOG_BUY_VEHICLE,
	DIALOG_NOTARY_HOUSE,
	DIALOG_NOTARY_VEHICLE,
	DIALOG_NOTARY_SELECT_PROPERTY,
	DIALOG_PROPERTY_SELL_PRICE,
	DIALOG_PROPERTY_SELL_TO_PLAYER,
	DIALOG_SELL_CONFIRM_PROPERTY,
	DIALOG_NOTARY_SELECT_VEHICLE,
	DIALOG_VEHICLE_BANK_SELL,
	DIALOG_VEHICLE_SELL_PRICE,
	DIALOG_VEHICLE_SELL_TO_PLAYER,
	DIALOG_SELL_CONFIRM_VEHICLE,
	DIALOG_SELECT_TRUCK_TYPE,
	DIALOG_TUNING_MENU_PART,
	DIALOG_TUNING_MENU_COMPONENT,
	DIALOG_MECHANIC_MENU,
	DIALOG_MECHANIC_REPAIR_PRICE,
	DIALOG_MECHANIC_COLOR_PRICE,
	DIALOG_MECHANIC_TUNING_PRICE,
	DIALOG_MECHANIC_PAINTJOB_PRICE,
	DIALOG_MECHANIC_ACCEPT,
	DIALOG_MECHANIC_SELECT_COL_SLOT,
	DIALOG_MECHANIC_SELECT_COLOR,
	DIALOG_MECHANIC_REMOVE_COMPONEN,
	DIALOG_TUNING_PAINTJOB,
	DIALOG_SELECT_TRASH_ROUTE,
	DIALOG_FARMACY,
	DIALOG_MARIA,
	DIALOG_SEED_LIST,
	DIALOG_SEED_BUY,
	DIALOG_PLANT_PLANTS,
	DIALOG_BLACK_MARKET_SELECT_WEA,
	DIALOG_BLACK_MARKET_AMMO,
	DIALOG_PLAYER_WEAPONS,
	DIALOG_PLAYER_WEAPONS_DELETE_A,
	DIALOG_PLAYER_WEAPONS_DELETE,
	DIALOG_ANIMS,
	DIALOG_SEX_ANIMS,
	DIALOG_TRICKS_FOOD,
	DIALOG_TRICKS_MEDICINE,
	DIALOG_TRICKS_CANNABIS,
	DIALOG_TRICKS_CRACK,
	DIALOG_TRICKS_SU,
	DIALOG_TRICKS_WOOD,
	DIALOG_TRICKS_IRON,
	DIALOG_TRICKS_WEAPON,
	DIALOG_VEHICLE_BOOT,
	DIALOG_VEHICLE_BOOT_DELETE_ALL,
	DIALOG_VEHICLE_BOOT_OPTIONS,
	DIALOG_VEHICLE_BOOT_DELETE,
	DIALOG_SELECT_POLICE_SKIN,
	DIALOG_POLICE_RADIOS,
	DIALOG_POLICE_LIST,
	DIALOG_POLICE_MODIFY,
	DIALOG_POLICE_SHOP,
	DIALOG_POLICE_SELECT_WEAPON,
	DIALOG_POLICE_AMMO,
	DIALOG_POLICE_ARMOUR,
	DIALOG_POLICE_WEAPONS,
	DIALOG_ADMIN_CMDS,
	DIALOG_ADMIN_AYUDANTE,
	DIALOG_ADMIN_MOD,
	DIALOG_ADMIN_ADMINISTRADOR,
	DIALOG_ANNOUNCES,
	DIALOG_HELP,
	DIALOG_HELP_GENERAL,
	DIALOG_HELP_INFO,
	DIALOG_HELP_SD,
	DIALOG_HELP_CONCEPTOS,
	DIALOG_HELP_CHARACTER,
	DIALOG_HELP_PROPERTIES,
	DIALOG_HELP_REPORT,
	DIALOG_HELP_VEHICLES,
	DIALOG_HELP_WORKS,
	DIALOG_HELP_CREWS,
	DIALOG_WORKS_TAXI,
	DIALOG_WORKS_CAMIONERO,
	DIALOG_WORKS_MECANICO,
	DIALOG_WORKS_COSECHADOR,
	DIALOG_WORKS_FUMIGADOR,
	DIALOG_WORKS_BASURERO,
	DIALOG_WORKS_LENADOR,
	DIALOG_WORKS_POLICIA,
	DIALOG_WORKS_PIZZERO,
	DIALOG_WORKS_MEDICO,
	DIALOG_WORKS_ARMERO,
	DIALOG_ADMIN_LIST,
	DIALOG_SANS_LIST,
	DIALOG_ADMIN_MODIFY,
	DIALOG_SANS_MODIFY,
	DIALOG_CHANGE_PASSWORD,
	DIALOG_CHANGE_PASSWORD_PASS,
	DIALOG_ANTI_CHEAT,
	DIALOG_ANTI_CHEAT_MODIFY,
	DIALOG_ANTI_CHEAT_MODIFY_DETECT,
	DIALOG_SHOP_ARTICLE_MODIFY,
	DIALOG_SHOP_ARTICLE_REMOVE,
	DIALOG_SHOP_ADD,
	DIALOG_SHOP_ADD_TEXT,
	DIALOG_SHOP_ADD_PRICE,
	DIALOG_CRANE_SELECT_VEHICLE,
	DIALOG_CREATE_CREW,
	DIALOG_CREATE_CREW_NAME,
	DIALOG_CREATE_CREW_COLOR,
	DIALOG_CREATE_CREW_CONFIRM,
	DIALOG_CREW_MENU,
	DIALOG_CREW_MEMBER_LIST,
	DIALOG_CREW_CHANGE_NAME,
	DIALOG_CREW_MEMBER_LIST_DELETE,
	DIALOG_CREW_CAST_MEMBER_CONFIRM,
	DIALOG_CREW_INVITE_RANK,
	DIALOG_CREW_INVITE_ACCEPT,
	DIALOG_CREW_RANKS,
	DIALOG_CREW_RANK_MODIFY,
	DIALOG_CREW_RANK_MODIFY_NAME,
	DIALOG_CREW_RANK_MODIFY_PERMISS,
	DIALOG_CREW_RANK_DELETE,
	DIALOG_CREW_RANK_DELETE_CONFIRM,
	DIALOG_CREW_RANK_CREATE,
	DIALOG_CREW_MODIFY_COLOR,
	DIALOG_CREW_DELETE,
	DIALOG_CREW_LEAVE,
	DIALOG_CREW_MODIFY_MEMBERS,
	DIALOG_CREW_MODIFY_MEMBER,
	DIALOG_CREW_PROPERTY_CONFIRM,
	DIALOG_CREW_LEAVE_TERRITORY,
	DIALOG_CREW_LEAVE_PROPERTY,
	DIALOG_POLICE_PENALTY,
	DIALOG_SERVER_ECO,
	DIALOG_SERVER_ECO_MODIFY,
	DIALOG_SU_BUY,
	DIALOG_SU,
	DIALOG_SD,
	DIALOG_METAL_BUY,
	DIALOG_REPUESTOS_BUY,
	DIALOG_EMISORAS,
	DIALOG_VOBJECT_MENU,
	DIALOG_VOBJECT_OBJECTS,
	DIALOG_VOBJECT_OBJECT,
	DIALOG_VOBJECT_OBJECT_CNAME,
	DIALOG_VOBJECT_OBJECT_COLORS,
	DIALOG_VOBJECT_OBJECT_COLOR,
	DIALOG_VOBJECT_OBJECT_COLOR_HEX,
	DIALOG_VOBJECT_OBJECT_CDELETE,
	DIALOG_VOBJECT_DELETE_ALL,
	DIALOG_VOBJECT_TEXT_MENU,
	DIALOG_VOBJECT_TEXT_TEXT,
	DIALOG_VOBJECT_TEXT_FONT,
	DIALOG_VOBJECT_TEXT_FONT_SIZE,
	DIALOG_VOBJECT_TEXT_FONT_COLOR,
	DIALOG_VOBJECT_COUNTRY
};

enum
{
	ROLEPLAY_STATE_NORMAL,
	ROLEPLAY_STATE_HOSPITAL,
	ROLEPLAY_STATE_INTERIOR,
	ROLEPLAY_STATE_OWN_PROPERTY,
	ROLEPLAY_STATE_GUEST_PROPERTY,
	ROLEPLAY_STATE_ARRESTED,
	ROLEPLAY_STATE_JAIL,
	ROLEPLAY_STATE_CRACK
};

enum
{
	GAME_STATE_NONE,
	GAME_STATE_CONNECTED,
	GAME_STATE_OCCUPIED,
	GAME_STATE_DEAD, // Pantalla de la muerte solo (wasted)
	GAME_STATE_NORMAL
};

#define MAX_BAD_LOGIN_ATTEMPS 3
#define MAX_TIMERS_PER_PLAYER 23
#define TIME_FOR_REP 3600000 // 1 hora minutos para obtener reputacion
#define REP_FOR_PAYDAY 1

/* Timers
0 = Kick
1 = Gangzone daño Rojo
2 = Añadir reputacion
3 = un/freeze player
4 = recuperar vida
5 = restart hambre sed
6 = esperando llamada
7 = esperar arrancar veh
8 = speedo
9 = cargando camion
10 = reciclando
11 = talando
12 = plantando
13 = gps mapa
14 = esposar
15 = jail time
16 = health down
*/


/* TUNING SYSTEM */
#define TOTAL_TUNING_PARTS	14
#define MAX_TUNING_PARTS_COMPONENTS	20
enum PLAYER_TUNING_MENU_Info
{
	tuning_menu_NAME[24], // o part
	tuning_menu_ID,
	tuning_menu_PIECES
};
new PLAYER_TUNING_MENU[MAX_PLAYERS][MAX_TUNING_PARTS_COMPONENTS][PLAYER_TUNING_MENU_Info];

/* GLOBAL_VEHICLES */
#define MAX_VEHICLE_COMPONENTS	14
#define MIN_VEHICLE_HEALTH		350.0
forward Float:GetDistanceBetweenPoints3D(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2);
forward Float:GetVehicleSpeed(vehicleid);
forward Float:frandom(Float:max, Float:min, dp);

new VEHICLE_COLORS[256] = //SA-MP Wiki
{
	// The existing colours from San Andreas
	0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
	0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
	0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
	0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
	0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
	0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
	0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
	0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
	0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
	0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
	0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
	0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
	0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF,
	// SA-MP extended colours (0.3x)
	0x177517FF, 0x210606FF, 0x125478FF, 0x452A0DFF, 0x571E1EFF, 0x010701FF, 0x25225AFF, 0x2C89AAFF, 0x8A4DBDFF, 0x35963AFF,
	0xB7B7B7FF, 0x464C8DFF, 0x84888CFF, 0x817867FF, 0x817A26FF, 0x6A506FFF, 0x583E6FFF, 0x8CB972FF, 0x824F78FF, 0x6D276AFF,
	0x1E1D13FF, 0x1E1306FF, 0x1F2518FF, 0x2C4531FF, 0x1E4C99FF, 0x2E5F43FF, 0x1E9948FF, 0x1E9999FF, 0x999976FF, 0x7C8499FF,
	0x992E1EFF, 0x2C1E08FF, 0x142407FF, 0x993E4DFF, 0x1E4C99FF, 0x198181FF, 0x1A292AFF, 0x16616FFF, 0x1B6687FF, 0x6C3F99FF,
	0x481A0EFF, 0x7A7399FF, 0x746D99FF, 0x53387EFF, 0x222407FF, 0x3E190CFF, 0x46210EFF, 0x991E1EFF, 0x8D4C8DFF, 0x805B80FF,
	0x7B3E7EFF, 0x3C1737FF, 0x733517FF, 0x781818FF, 0x83341AFF, 0x8E2F1CFF, 0x7E3E53FF, 0x7C6D7CFF, 0x020C02FF, 0x072407FF,
	0x163012FF, 0x16301BFF, 0x642B4FFF, 0x368452FF, 0x999590FF, 0x818D96FF, 0x99991EFF, 0x7F994CFF, 0x839292FF, 0x788222FF,
	0x2B3C99FF, 0x3A3A0BFF, 0x8A794EFF, 0x0E1F49FF, 0x15371CFF, 0x15273AFF, 0x375775FF, 0x060820FF, 0x071326FF, 0x20394BFF,
	0x2C5089FF, 0x15426CFF, 0x103250FF, 0x241663FF, 0x692015FF, 0x8C8D94FF, 0x516013FF, 0x090F02FF, 0x8C573AFF, 0x52888EFF,
	0x995C52FF, 0x99581EFF, 0x993A63FF, 0x998F4EFF, 0x99311EFF, 0x0D1842FF, 0x521E1EFF, 0x42420DFF, 0x4C991EFF, 0x082A1DFF,
	0x96821DFF, 0x197F19FF, 0x3B141FFF, 0x745217FF, 0x893F8DFF, 0x7E1A6CFF, 0x0B370BFF, 0x27450DFF, 0x071F24FF, 0x784573FF,
	0x8A653AFF, 0x732617FF, 0x319490FF, 0x56941DFF, 0x59163DFF, 0x1B8A2FFF, 0x38160BFF, 0x041804FF, 0x355D8EFF, 0x2E3F5BFF,
	0x561A28FF, 0x4E0E27FF, 0x706C67FF, 0x3B3E42FF, 0x2E2D33FF, 0x7B7E7DFF, 0x4A4442FF, 0x28344EFF
};

new Float:HARVEST_CHECKPOINTS[][] =
{
	{-328.332305, -1546.391357, 16.15409},
	{-250.803207, -1553.425415, 4.534295},
	{-224.260910, -1485.022827, 8.041003},
	{-308.437896, -1476.776977, 11.40934},
	{-283.487731, -1553.320068, 7.445997},
	{-258.756164, -1426.692993, 9.493670},
	{-178.887649, -1406.682250, 3.996473},
	{-177.676818, -1322.970581, 6.885325},
	{-305.899322, -1318.196533, 10.12089},
	{-325.471008, -1412.821777, 15.12606},
	{-191.962982, -1384.020019, 6.075732},
	{-214.637603, -1321.270507, 10.79362},
	{-263.975738, -1375.987426, 11.41642},
	{-308.705474, -1424.302001, 15.52844},
	{-287.710388, -1497.158325, 8.503927},
	{-387.908111, -1532.118774, 23.47214}
};

new Float:FUMIGATOR_CHECKPOINTS[][] =
{
	{2269.9844, -1752.4072, 14.0079},
	{2727.2280, -2407.6431, 14.0825},
	{2440.1704, -2660.5483, 14.1507},
 	{1824.2396, -1890.8203, 13.9662},
	{1532.6001, -1656.6104, 14.0090},
	{1484.8978, -1049.4637, 24.2801},
	{2599.7244, -1050.3679, 70.0404},
	{2524.5664, -1501.4458, 24.4534},
	{2630.8853, -2089.0403, 14.1702}
};

enum
{
	VEHICLE_TYPE_NONE,
	VEHICLE_TYPE_TEST,
	VEHICLE_TYPE_SELL,
	VEHICLE_TYPE_PERSONAL,
	VEHICLE_TYPE_WORK
};

enum
{
	VEHICLE_STATE_NORMAL,
	VEHICLE_STATE_DAMAGED
};

enum Global_Vehicles_Info
{
	bool:gb_vehicle_VALID,
	bool:gb_vehicle_OCCUPIED,
	gb_vehicle_TYPE,
	gb_vehicle_MODELID,
	gb_vehicle_NUMBER_PLATE[32],
	Float:gb_vehicle_POS[3],
	Float:gb_vehicle_SPAWN_X,
	Float:gb_vehicle_SPAWN_Y,
	Float:gb_vehicle_SPAWN_Z,
	Float:gb_vehicle_SPAWN_ANGLE,
	Float:gb_vehicle_HEALTH,
	gb_vehicle_DAMAGE_PANELS,
	gb_vehicle_DAMAGE_DOORS,
	gb_vehicle_DAMAGE_LIGHTS,
	gb_vehicle_DAMAGE_TIRES,
	gb_vehicle_COLOR_1,
	gb_vehicle_COLOR_2,
	gb_vehicle_PAINTJOB,
	Float:gb_vehicle_GAS,
	Float:gb_vehicle_MAX_GAS,
	gb_vehicle_COMPONENTS[MAX_VEHICLE_COMPONENTS],
	gb_vehicle_STATE,
	gb_vehicle_INTERIOR,
	gb_vehicle_WORLD,
	gb_vehicle_PARAMS_ENGINE,
	gb_vehicle_PARAMS_LIGHTS,
	gb_vehicle_PARAMS_ALARM,
	gb_vehicle_PARAMS_DOORS,
	gb_vehicle_PARAMS_BONNET,
	gb_vehicle_PARAMS_BOOT,
	gb_vehicle_PARAMS_OBJECTIVE,
	gb_vehicle_DRIVER,
	gb_vehicle_LAST_DRIVER,
	gb_vehicle_LAST_CLOSED_TIME,
	gb_vehicle_OBJECT,

	bool:gb_vehicle_SPAWNED,
	gb_vehicle_TP_IMMUNITY
};
new GLOBAL_VEHICLES[MAX_VEHICLES][Global_Vehicles_Info];

enum Player_Vehicles_Info
{
	bool:player_vehicle_VALID,
	player_vehicle_ID,
	player_vehicle_OWNER_ID,
	bool:player_vehicle_ACCESSIBLE
};
new PLAYER_VEHICLES[MAX_VEHICLES][Player_Vehicles_Info];

#define MAX_VEHICLE_OBJECTS_INDEXS	5
enum
{
	VOBJECT_TYPE_OBJECT,
	VOBJECT_TYPE_TEXT,
	VOBJECT_TYPE_COUNTRY_FLAG,
	VOBJECT_TYPE_COUNTRY_PANEL
};
enum e_VEHICLE_OBJECTS
{
	bool:vobject_VALID,
	vobject_TYPE,
	vobject_NAME[32],
	vobject_ID,
	vobject_OBJECT_ID,
	vobject_MODELID,
	Float:vobject_OFFSET[3],
	Float:vobject_ROT[3],
	vobject_ATTACHED,
	vobject_COLORS[MAX_VEHICLE_OBJECTS_INDEXS],

	vobject_text_TEXT[32],
	vobject_text_FONT[24],
	vobject_text_FONT_SIZE,
	vobject_text_BOLD,
	vobject_text_FONT_COLOR
};
new VEHICLE_OBJECTS[MAX_VEHICLES][MAX_SU_VOBJECTS][e_VEHICLE_OBJECTS];

enum
{
	WORK_TYPE_NONE,
	WORK_TYPE_NORMAL,
	WORK_TYPE_FAMILY
};
enum
{
	WORK_NONE,
	WORK_TAXI,
	WORK_TRUCK,
	WORK_MECHANIC,
	WORK_HARVESTER,
	WORK_FUMIGATOR,
	WORK_TRASH,
	WORK_LUMBERJACK,
	WORK_FARMER,
	WORK_POLICE,
	WORK_PIZZA,
	WORK_MEDIC,
	WORK_ARMERO,
	WORK_LADRON
};
enum work_info_info
{
	work_info_TYPE,
	work_info_LEVEL,
	bool:work_info_BANK,
	work_info_NAME[24],
	bool:work_info_NEED_DUTY, 	//si este trabajo es normal y tiene vehiculos indica si es necesario que el jugador este de servicio para subirse
	work_info_EXTRA_PAY,		//dejar en 0 para no paga extra.......Paga extra de 'work_info_EXTRA_PAY' cada 'work_info_EXTRA_PAY_EXP' con un limite de 'work_info_EXTRA_PAY_LIMIT'
	work_info_EXTRA_PAY_EXP,
	work_info_EXTRA_PAY_LIMIT	// dejar en 0 para sin limites
};
new work_info[][work_info_info] =
{
	{WORK_TYPE_NONE, 0, false, "ninguno",					false, 0, 0, 0},
	{WORK_TYPE_NORMAL, 1, false, "taxista",					false, 0, 0, 0},
	{WORK_TYPE_NORMAL, 1, true, "camionero",				false, 60, 50, 2000},
	{WORK_TYPE_NORMAL, 1, false, "mecánico",				true, 0, 0, 0},
	{WORK_TYPE_NORMAL, 1, false, "cosechador",				false, 20, 30, 800},
	{WORK_TYPE_NORMAL, 1, true, "chofer",					false, 20, 30, 800},
	{WORK_TYPE_NORMAL, 1, true, "basurero", 				true, 60, 50, 2000},
	{WORK_TYPE_NORMAL, 1, false, "leñador",					false, 20, 30, 800},
	{WORK_TYPE_FAMILY, 5, false, "agricultor",				false, 0, 0, 0},
	{WORK_TYPE_NORMAL, 7, true, "policía",					true, 2500, 1, 0},
	{WORK_TYPE_NORMAL, 7, true, "piloto",					true, 60, 20, 800},
	{WORK_TYPE_NORMAL, 2, true, "médico",					true, 60, 50, 2000},
	{WORK_TYPE_NORMAL, 5, false, "armero",					false, 0, 0, 0},
	{WORK_TYPE_FAMILY, 8, false, "ladron",					false, 0, 0, 0}
};

new PLAYER_WORKS[MAX_PLAYERS][sizeof(work_info)];
new PLAYER_SKILLS[MAX_PLAYERS][sizeof(work_info)];


/* Tuning Object System */

enum e_Tuning_Shop_Objects
{
	tuning_object_MODELID,
	tuning_object_NAME[24],
	tuning_object_PRICE
};
new Tuning_Shop_Objects[][e_Tuning_Shop_Objects] =
{
    {1142, "AirCircular", 1000},
    {1144, "AirCuadrado", 1000},
    {19314, "Cuernos", 20000},
    {19917, "Motor", 30000},
    {1112, "RollsArrow", 50000},
    {1111, "RollsPlate", 50000},
    {19078, "Wladimir", 10000},
    {19580, "Pizza", 10000},
   	{19873, "Paper", 8000},
   	{2406, "SurfTableV", 2500},
    {1136, "Mofle", 10000},
    {1135, "MofleDuple", 12000},
    {1029, "MofleGris", 20000},
    {1028, "MofleDorado", 20000},
    {1128, "CapotableFijo", 40000},
    {1130, "CapotableFijo2", 45000},
    {1131, "CapotablePlegable", 50000},
	{1160, "FaciaV1", 10000},
	{1169, "FaciaV2", 10000},
	{1171, "FaciaV3", 10000},
	{1166, "FaciaV4", 10000},
	{1155, "FaciaV5", 10000},
	{1140, "DefensaV1", 10000},
	{1148, "DefensaV2", 10000},
	{1141, "DefensaV3", 10000},
	{1150, "DefensaV4", 10000},
	{1164, "SpoilerV1", 12000},
	{1163, "SpoilerV2", 12000},
	{1158, "SpoilerV3", 12000},
	{1146, "SpoilerV4", 12000},
	{1139, "SpoilerV5", 12000},
	{1003, "SpoilerV6", 12000},
	{1001, "SpoilerV7", 12000},
	{1041, "FaldonDer" , 8000},
	{1039, "FaldonIzq" , 8000},
	{1005, "TomaAire", 14000},
	{1006, "TomaAire", 14000},
    {19308, "Taxi", 25000},
    {1550, "Dinero", 80000}
};

//ZONAS
enum
{
	AREA_TYPE_NONE,
	AREA_TYPE_GANGZONE
};

#define MAX_TERRITORIES 50
enum enum_TERRITORIES
{
	bool:territory_VALID,
	territory_ID,
	territory_NAME[32],
	bool:territory_OCCUPIED,
	territory_CREW_ID,
	territory_CREW_INDEX,
	territory_COLOR,
	Float:territory_MIN_X,
	Float:territory_MIN_Y,
	Float:territory_MIN_Z,
	Float:territory_MAX_X,
	Float:territory_MAX_Y,
	Float:territory_MAX_Z,

	territory_AREA,
	territory_GANG_ZONE,

	bool:territory_WAR,
	territory_ATTACKER_CREW_INDEX,
	territory_WAR_TIME_LEFT,
	Text:territory_TEXTDRAW,
	territory_TIMER,
	territory_LAST_ATTACK
};
new TERRITORIES[MAX_TERRITORIES][enum_TERRITORIES];

// Crews
#define MAX_CREWS		50
#define MAX_CREW_RANKS	10

enum enum_CREW_INFO
{
	bool:crew_VALID,
	crew_ID,
	crew_NAME[32],
	crew_COLOR,

	bool:crew_FIGHTING,
	crew_LAST_ATTACK,

	crew_MEMBERS,
	crew_ONLINE_MEMBERS
};
new CREW_INFO[MAX_CREWS][enum_CREW_INFO];


new RandomColors[] =
{
	0xFFFFFFFF,
	0x000000FF,
    0x99CC00FF,
    0xFF9900FF,
	0x6699CCFF,
	0x0099FFFF,
	0xCCCC99FF,

	0xFF8C13FF,	0xC715FFFF,	0x20B2AAFF,	0xDC143CFF,	0x6495EDFF,	0xf0e68cFF,	0x778899FF,	0xFF1493FF,	0xF4A460FF,
	0xEE82EEFF,	0xFFD720FF,	0x8b4513FF,	0x4949A0FF,	0x148b8bFF,	0x14ff7fFF,	0x556b2fFF,	0x0FD9FAFF,	0x10DC29FF,
	0x534081FF,	0x0495CDFF,	0xEF6CE8FF,	0xBD34DAFF,	0x247C1BFF,	0x0C8E5DFF,	0x635B03FF,	0xCB7ED3FF,	0x65ADEBFF,
	0x5C1ACCFF,	0xF2F853FF,	0x11F891FF,	0x7B39AAFF,	0x53EB10FF,	0x54137DFF,	0x275222FF,	0xF09F5BFF,	0x3D0A4FFF,
	0x22F767FF,	0xD63034FF,	0x9A6980FF,	0xDFB935FF,	0x3793FAFF,	0x90239DFF,	0xE9AB2FFF,	0xAF2FF3FF,	0x057F94FF,
	0xB98519FF,	0x388EEAFF,	0x028151FF,	0xA55043FF,	0x0DE018FF,	0x93AB1CFF,	0x95BAF0FF,	0x369976FF,	0x18F71FFF,
	0x4B8987FF,	0x491B9EFF,	0x829DC7FF,	0xBCE635FF,	0xCEA6DFFF,	0x20D4ADFF,	0x2D74FDFF,	0x3C1C0DFF,	0x12D6D4FF,
	0x48C000FF,	0x2A51E2FF,	0xE3AC12FF,	0xFC42A8FF,	0x2FC827FF,	0x1A30BFFF,	0xB740C2FF,	0x42ACF5FF,	0x2FD9DEFF,
	0xFAFB71FF,	0x05D1CDFF,	0xC471BDFF,	0x94436EFF,	0xC1F7ECFF,	0xCE79EEFF,	0xBD1EF2FF,	0x93B7E4FF,	0x3214AAFF,
	0x184D3BFF,	0xAE4B99FF,	0x7E49D7FF,	0x4C436EFF,	0xFA24CCFF,	0xCE76BEFF,	0xA04E0AFF,	0x9F945CFF,	0xDCDE3DFF,
	0x10C9C5FF,	0x70524DFF,	0x0BE472FF,	0x8A2CD7FF,	0x6152C2FF,	0xCF72A9FF,	0xE59338FF,	0xEEDC2DFF,	0xD8C762FF,
	0xD8C762FF,	0xFF8C13FF,	0xC715FFFF,	0x20B2AAFF,	0xDC143CFF,	0x6495EDFF,	0xf0e68cFF,	0x778899FF,	0xFF1493FF,
	0xF4A460FF,	0xEE82EEFF,	0xFFD720FF,	0x8b4513FF,	0x4949A0FF,	0x148b8bFF,	0x14ff7fFF,	0x556b2fFF,	0x0FD9FAFF,
	0x10DC29FF,	0x534081FF,	0x0495CDFF,	0xEF6CE8FF,	0xBD34DAFF,	0x247C1BFF,	0x0C8E5DFF,	0x635B03FF,	0xCB7ED3FF,
	0x65ADEBFF,	0x5C1ACCFF,	0xF2F853FF,	0x11F891FF,	0x7B39AAFF,	0x53EB10FF,	0x54137DFF,	0x275222FF,	0xF09F5BFF,
	0x3D0A4FFF,	0x22F767FF,	0xD63034FF,	0x9A6980FF,	0xDFB935FF,	0x3793FAFF,	0x90239DFF,	0xE9AB2FFF,	0xAF2FF3FF,
	0x057F94FF,	0xB98519FF,	0x388EEAFF,	0x028151FF,	0xA55043FF,	0x0DE018FF,	0x93AB1CFF,	0x95BAF0FF,	0x369976FF,
	0x18F71FFF,	0x4B8987FF,	0x491B9EFF,	0x829DC7FF,	0xBCE635FF,	0xCEA6DFFF,	0x20D4ADFF,	0x2D74FDFF,	0x3C1C0DFF,
	0x12D6D4FF,	0x48C000FF,	0x2A51E2FF,	0xE3AC12FF,	0xFC42A8FF,	0x2FC827FF,	0x1A30BFFF,	0xB740C2FF,	0x42ACF5FF,
	0x2FD9DEFF,	0xFAFB71FF,	0x05D1CDFF,	0xC471BDFF,	0x94436EFF,	0xC1F7ECFF,	0xCE79EEFF,	0xBD1EF2FF,	0x93B7E4FF,
	0x3214AAFF,	0x184D3BFF,	0xAE4B99FF,	0x7E49D7FF,	0x4C436EFF,	0xFA24CCFF,	0xCE76BEFF,	0xA04E0AFF,	0x9F945CFF,
	0xDCDE3DFF,	0x10C9C5FF,	0x70524DFF,	0x0BE472FF,	0x8A2CD7FF,	0x6152C2FF,	0xCF72A9FF,	0xE59338FF,	0xEEDC2DFF,
	0xD8C762FF,	0xD8C762FF
};


/*
Permisos de rangos

0 - cambiar nombre
1 - invitar
2 - echar
3 - cambiar rango de miembros
4 - crear rangos y modificar rangos
5 - poner casas personales a casas de banda
6 - vender casas de banda
7 - cambiar color de la banda
8 - abandonar territorio
9 - destruir cbanda
*/

//permisos
enum
{
	CREW_RANK_CHANGE_NAME,
	CREW_RANK_INVITE,
	CREW_RANK_CAST_MEMBERS,
	CREW_RANK_MODIFY_MEMBERS,
	CREW_RANK_MODIFY_RANKS,
	CREW_RANK_ADD_PROPERTIES,
	CREW_RANK_DELETE_PROPERTIES,
	CREW_RANK_CHANGE_COLOR,
	CREW_RANK_LEAVE_TERRITORY,
	CREW_RANK_DELETE,

	CREW_RANK_SIZE // dejar siempre el ultimo
};

new CREW_RANKS_PERMISSIONS[][] =
{
	"cambiar nombre de la banda",
	"invitar jugadores",
	"echar miembros",
	"cambiar rangos de miembros",
	"crear rangos o modificarlos",
	"poner propiedades de banda",
	"liberar propiedades de banda",
	"cambiar color de la banda",
	"abandonar territorios",
	"eliminar banda"
};

enum enum_CREW_RANK_INFO
{
	bool:crew_rank_VALID,
	crew_rank_ID,
	crew_rank_NAME[32],
	crew_rank_PERMISSION[CREW_RANK_SIZE]
};
new CREW_RANK_INFO[MAX_CREWS][MAX_CREW_RANKS][enum_CREW_RANK_INFO];

enum enum_PLAYER_CREW
{
	bool:player_crew_VALID,
	player_crew_ID,
	player_crew_RANK,
	player_crew_INDEX
};
new PLAYER_CREW[MAX_PLAYERS][enum_PLAYER_CREW];




enum
{
	MISC_MECHANIC_PIECES,
	MISC_FUEL_DRUM,
	MISC_SEED_MEDICINE,
	MISC_SEED_CANNABIS,
	MISC_SEED_CRACK,
	MISC_MEDICINE,
	MISC_CANNABIS,
	MISC_CRACK,
	MISC_RECIBIR_STATS,
	MISC_BLOQ_STATS,
	MISC_PIECES_WEAPON,
	MISC_WOOD,
	MISC_LATA_PINTURA,
	MISC_HERRAMIENTA,
	MISC_RECIBIR_BONIFC,
	MISC_LICENCIA_TAXI,

	MISC_SIZE //Dejar siempre este al final
};
new PLAYER_MISC[MAX_PLAYERS][MISC_SIZE];

enum obtain_work_coords_info
{
	Float:obtain_work_X,
	Float:obtain_work_Y,
	Float:obtain_work_Z,
	obtain_work_INTERIOR,
	bool:obtain_work_MAP_ICON,
	obtain_work_MAP_ICON_ID,
	Float:obtain_work_MAP_ICON_X,
	Float:obtain_work_MAP_ICON_Y,
	Float:obtain_work_MAP_ICON_Z,
};
new Float:obtain_work_coords[][obtain_work_coords_info] =
{
	{0.0, 0.0, 0.0, 0,	false, 0, 0.0, 0.0, 0.0},
	{1777.5929, -1884.8784, 1176.0859, 3,	true, 61, 1752.603881, -1894.155883, 13.557376},//Taxista
	{2741.7739,-2477.2117,13.8662, 0, true, 61, 2741.7739,-2477.2117,13.8662},//Camionero
	{2531.9421,-1518.6353,24.0192, 0, true, 27, 2531.9421,-1518.6353,24.0192},//Mecanico
	{2347.6138,-647.1254,128.0547, 0,	true, 61, 2347.6138,-647.1254,128.0547}, //Cosechador
	{2631.5940,-2099.7546,13.5844, 0, true, 61, 2631.5940,-2099.7546,13.5844}, //Busero
	{2506.3950,-2639.7764,13.8623, 0, true, 61, 2506.3950,-2639.7764,13.8623}, //Basurero
	{2350.8540, -649.0869,128.0547, 0, true, 61, 2350.8540,-649.0869,128.0547},//leñador
	{999.999,999.255302,999.164062, 0, true, 61, 999.864257,999.255302,999.164062},//agricultor
	{1473.7002,-1737.2172,1479.7959, 20,	false, 0, 1153.8264,-1772.4121,16.5992}, // policia
	{1636.2417,-2483.9773,901.6032, 1, false, 0, 1642.8949,-2291.5054,-1.1953},//piloto
	{3922.2842,-692.1495,102.6516, 3, false, 0, 0.0, 0.0, 0.0},//Medico
	{1291.0656, -64.7352, 1002.4962, 18, false, 61, -86.3446,-299.4968,2.7646}
};

enum Work_Vehicles_Info
{
	bool:work_vehicle_VALID,
	work_vehicle_WORK,
	work_vehicle_EXP,
	bool:work_vehicle_NEED_DUTY
};
new WORK_VEHICLES[MAX_VEHICLES][Work_Vehicles_Info];

new valid_work_vehicle_colors[] = {84, 63, 91, 63, 102, 65, 105, 72, 110, 93, 121, 93, 12, 95, 23, 1};
enum San_Andreas_Vehicles_Info
{
	san_andreas_vehicle_TYPE,
	san_andreas_vehicle_TYPE_IN,
	san_andreas_vehicle_TYPE_IN_EXP,
	san_andreas_vehicle_MODELID,
	Float:san_andreas_vehicle_SPAWN_X,
	Float:san_andreas_vehicle_SPAWN_Y,
	Float:san_andreas_vehicle_SPAWN_Z,
	Float:san_andreas_vehicle_SPAWN_ANGLE,
	san_andreas_vehicle_COLOR_1,
	san_andreas_vehicle_COLOR_2,
	san_andreas_vehicle_SIREN
};
new San_Andreas_Vehicles[][San_Andreas_Vehicles_Info] =
{
	//taxi ls
	{VEHICLE_TYPE_WORK,  WORK_TAXI, 0, 420, 1802.2953, -1906.2178, 13.0384, 90.0000, 6, 1, false},
	{VEHICLE_TYPE_WORK,  WORK_TAXI, 0, 420, 1802.2953, -1912.2178, 13.0384, 90.0000, 6, 1, false},
	{VEHICLE_TYPE_WORK,  WORK_TAXI, 0, 420, 1802.2953, -1918.2178, 13.0384, 90.0000, 6, 1, false},
	{VEHICLE_TYPE_WORK,  WORK_TAXI, 0, 438, 1802.2953, -1924.2178, 13.0384, 90.0000, 6, 1, false},
	{VEHICLE_TYPE_WORK,  WORK_TAXI, 0, 438, 1802.2953, -1930.2178, 13.0384, 90.0000, 6, 1, false},

	//nivel 1 camionsitos
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, 2747.5251, -2463.1404, 13.5569, -90.0000, 1, 1, false},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 498, 2747.2732, -2443.6677, 13.5569, -90.0000, 1, 1, false},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 499, 2748.0002, -2432.8928, 13.5569, -90.0000, 1, 1, false},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, 2744.8853, -2422.0613, 13.5569, -47.0000, 1, 1, false},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 414, 2747.4172, -2454.0386, 13.5569, -90.0000, 1, 1, false},
	/*nivel 2 linneruner
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 1, 578, 2784.4868, -2386.0977, 14.0669, 90.0000, 1, 1, false},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 1, 578, 2783.5032, -2396.7739, 14.0669, 90.0000, 1, 1, false},
	//nivel 3 roadtrain
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 2, 578, 2763.4121, -2376.2590, 14.4709, 180.0000, 1, 1, false},
	//nivel 4 dft
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 3, 578, 2777.1375, -2377.5447, 14.0630, 180.0000, 1, 1, false},
	//nivel 5 tank
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 4, 578, 2771.4597, -2377.3933, 14.1658, 180.0000, 1, 1, false},
 	*/
	//Chofer
	{VEHICLE_TYPE_WORK, WORK_FUMIGATOR, 0, 437, 2654.5654, -2086.2598, 13.6802, 180.5376, 1, 1, false},
	{VEHICLE_TYPE_WORK, WORK_FUMIGATOR, 0, 437, 2664.9658, -2086.0374, 13.6803, 178.0697, 1, 1, false},
	{VEHICLE_TYPE_WORK, WORK_FUMIGATOR, 0, 437, 2675.7566, -2086.1941, 13.6802, 179.1943, 1, 1, false},
	{VEHICLE_TYPE_WORK, WORK_FUMIGATOR, 0, 437, 2693.6282, -2094.0042, 13.6819, 91.9241, 1, 1, false},
	{VEHICLE_TYPE_WORK, WORK_FUMIGATOR, 0, 437, 2693.7361, -2104.2671, 13.6821, 92.8460, 1, 1, false},
	{VEHICLE_TYPE_WORK, WORK_FUMIGATOR, 0, 437, 2693.3342, -2115.1892, 13.6821, 90.3723, 1, 1, false},
	//Basurero
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, 2463.1638, -2627.3867, 14.0908, -90.0000, 2, 2, false},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, 2463.1638, -2558.9377, 14.0908, -90.0000, 2, 2, false},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, 2463.1638, -2617.1648, 14.0908, -90.0000, 2, 2, false},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, 2463.1638, -2606.2559, 14.0908, -90.0000, 2, 2, false},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, 2463.1638, -2569.5813, 14.0908, -90.0000, 2, 2, false},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, 2463.1638, -2548.8721, 14.0908, -90.0000, 2, 2, false},
	//policia
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1,  596, 1098.3773, -1769.7482, 13.2264, 90.0000, 7, 1, true},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1,  596, 1098.3854, -1757.9431, 13.2264, 90.0000, 7, 1, true},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1,  596, 1098.2505, -1763.7795, 13.2264, 90.0000, 7, 1, true},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1,  596, 1098.1581, -1775.6183, 13.2264, 90.0000, 7, 1, true},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2,  599, 1080.3424, -1772.5217, 13.5848, -91.0000, 7, 1, true},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2,  599, 1080.0245, -1766.6449, 13.4848, -91.0000, 7, 1, true},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 3,  601, 1080.1682, -1754.8926, 13.0852, 90.0000, 7, 1, true},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 3,  601, 1079.9890, -1760.7678, 13.0852, 90.0000, 7, 1, true},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 3,  490, 1062.2107, -1763.7345, 13.7616, 90.0000, 7, 1, true},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 3,  490, 1061.9639, -1769.7122, 13.7616, 90.0000, 7, 1, true},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 3,  427, 1062.4762, -1757.8473, 13.3283, 90.0000, 7, 1, true},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 3,  427, 1062.3763, -1751.9642, 13.4283, 90.0000, 7, 1, true},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 3,  541, 1062.3478, -1743.1907, 13.0601, 90.0000, 7, 1, true},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 4,  411, 1062.6250, -1740.0676, 13.1813, 90.0000, 7, 1, true},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1,  523, 1098.4880, -1772.7136, 12.7508, 90.0000, 7, 1, true},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1,  523, 1098.5112, -1760.9591, 12.7508, 90.0000, 7, 1, true},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1,  523, 1098.5613, -1766.7639, 12.7508, 90.0000, 7, 1, true},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1,  554, 1062.4513, -1737.2661, 13.5879, 90.0000, 7, 1, true},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1,  554, 1062.5332, -1746.1920, 13.5879, 90.3060, 7, 1, true},
	
	{VEHICLE_TYPE_WORK, WORK_POLICE, 3,  497, 1144.0453, -1821.1129, 35.2616, 3.9531, 16, 1, true},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 3,  497, 1111.4333, -1820.6333, 35.2607, 34.5282, 16, 1, true},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 5,  425, 1145.1678, -1785.5084, 35.6632, 321.2458, 16, 1, true},
	//piloto
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 593, 1986.5968, -2250.4297, 13.9359, 90.0000, 1, 2, false},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 593, 1986.8146, -2316.2021, 13.9359, 90.0000, 1, 2, false},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 593, 1986.9969, -2381.7302, 13.9359, 90.0000, 1, 2, false},
	//{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 577, 1644.4266, -2431.3235, 13.2369, 0.0000, 1, 2, false},
	//{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 577, 1564.5856, -2433.7319, 13.2369, 0.0000, 1, 2, false},
	//{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 577, 1725.0068, -2432.0493, 13.2369, 0.0000, 1, 2, false},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 519, 1889.8934, -2626.4453, 14.4858, 0.0000, 1, 2, false},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 519, 1825.2660, -2625.3293, 14.4858, 0.0000, 1, 2, false},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 519, 1753.9387, -2626.7959, 14.4858, 0.0000, 1, 2, false},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 519, 1685.8712, -2625.4136, 14.4858, 0.0000, 1, 2, false},
	//ambulancias
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 2036.2555, -1429.4966, 17.0571, 180.00, 1, 3, false},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 2036.4742, -1439.7246, 17.0571, 180.00, 1, 3, false},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 2016.8370, -1411.2896, 17.0571, 90.000, 1, 3, false},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 2017.1022, -1416.2045, 17.0571, 90.000, 1, 3, false},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1180.2153, -1308.2330, 13.8244, -90.00, 1, 3, false},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1180.4480, -1338.4403, 13.8244, -90.00, 1, 3, false},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1226.9530, 302.3792, 19.7678, 66.10860, 1, 3, false},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2202.2329, -2294.7314, 30.7048, 320.0, 1, 3, false},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2544.5457, 610.1262, 14.4484, 90.0000, 1, 3, false},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2544.9500, 604.4023, 14.4484, 90.0000, 1, 3, false},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2545.0088, 598.3672, 14.4484, 90.0000, 1, 3, false},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2544.8770, 593.1545, 14.4484, 90.0000, 1, 3, false},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2545.2927, 587.3546, 14.4484, 90.0000, 1, 3, false},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -330.0057, 1062.9534, 19.7507, -90.000, 1, 3, false},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -1508.8683, 2526.5510, 55.9118, 0.0000, 1, 3, false},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -1504.4027, 2526.4734, 55.9118, 0.0000, 1, 3, false},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1617.1790, 1841.2314, 10.6855, 0.00000, 1, 3, false},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1612.3330, 1841.6625, 10.6855, 0.00000, 1, 3, false},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1607.3164, 1841.8850, 10.6855, 0.00000, 1, 3, false},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1602.5084, 1841.9370, 10.6855, 0.00000, 1, 3, false},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1597.7699, 1841.7919, 10.6855, 0.00000, 1, 3, false}

};
new recibioStats;
enum San_Andreas_Barriers_Info
{
	barrier_VEHICLE_TYPE,
	barrier_VEHICLE_TYPE_IN,
	Float:barrier_X,
	Float:barrier_Y,
	Float:barrier_Z,
	Float:barrier_ROTATION,
	barrier_INTERIOR,
	barrier_WORLD,
	barrier_OBJECT_ID,
	barrier_TIMER,
	bool:barrier_CLOSING
};
new San_Andreas_Barriers[][San_Andreas_Barriers_Info] = // usar VEHICLE_TYPE_NONE para que puedan pasar todos
{
	{VEHICLE_TYPE_WORK, WORK_TAXI, 1811.32373, -1886.26331, 12.36843, 90.00000, 0, 0, INVALID_STREAMER_ID, -1, false}, // barrera taxi ls
	{VEHICLE_TYPE_WORK, WORK_TAXI, 1717.0457, 1308.0387, 9.7157, 90.0, 0, 0, INVALID_STREAMER_ID, -1, false}, // barrera taxi lv
	{VEHICLE_TYPE_WORK, WORK_TRUCK, -2044.25745, -102.58762, 34.13560, 180.0, 0, 0, INVALID_STREAMER_ID, -1, false} // barrera camioneros
};

new Gate;

enum VEHICLE_INFO_enum
{
	bool:vehicle_info_VALID,
	vehicle_info_NAME[24],
	Float:vehicle_info_MAX_GAS, // Por defecto
	Float:vehicle_info_MAX_VEL,
	vehicle_info_PRICE,
	vehicle_info_LEVEL,
	vehicle_info_EXTRA,
	vehicle_info_BOOT_SLOTS,
	vehicle_info_SEATS,
	bool:vehicle_info_ENGINE,
	bool:vehicle_info_DRIVER_DOOR,
	bool:vehicle_info_PASSENGER_DOOR,
	vehicle_info_COINS,
	vehicle_info_REPUESTOS
};
new VEHICLE_INFO[][VEHICLE_INFO_enum] =
{
	{true, "Landstalker", 80.0, 159.00, 35000, 0, 0, 6			, 4		, true, true, true, 0, 8},//Numero de repuestos para reparar ese vehiculo, que necesitará el mecanico
	{true, "Bravura", 45.0, 148.00, 5500, 0, 0, 4				, 2		, true, true, true, 0, 3},
	{true, "Buffalo", 30.0, 188.00, 150000, 0, 0, 4				, 2		, true, true, true, 0, 12},
	{true, "Linerunner", 100.0, 110.00, 300000, 0, 0, 0			, 2		, true, true, true, 0, 0},
	{true, "Perennial", 50.0, 134.00, 2500, 0, 0, 4				, 4		, true, true, true, 0, 5},
	{true, "Sentinel", 45.0, 165.00, 25000, 0, 0, 4				, 4		, true, true, true, 0, 8},
	{true, "Dumper", 20.0, 111.00, 800000, 0, 0, 0				, 1		, true, true, true, 0, 0},
	{true, "Firetruck", 120.0, 149.00, 500000, 0, 0, 0			, 2		, true, true, true, 0, 0},
	{true, "Trashmaster", 80.0, 101.00, 300000, 0, 0, 0			, 2		, true, true, true, 0, 1},
	{true, "Stretch", 70.0, 159.00, 1, 0, 0, 4					, 4		, true, true, true, 10, 15},
	{true, "Manana", 40.0, 131.00, 1500, 0, 0, 4				, 2		, true, true, true, 0, 3},
	{true, "Infernus", 30.0, 223.00, 1, 0, 0, 4					, 2		, true, true, true, 7, 28},
	{true, "Voodoo", 45.0, 170.00, 20000, 0, 0, 4				, 2		, true, true, true, 0, 6},
	{true, "Pony", 60.0, 111.00, 50000, 0, 0, 6					, 4		, true, true, true, 0, 0},
	{true, "Mule", 60.0, 106.00, 80000, 0, 0, 0					, 2		, true, true, true, 0, 0},
	{true, "Cheetah", 30.0, 194.00, 1, 0, 0, 4					, 2		, true, true, true, 5, 25},
	{true, "Ambulance", 120.0, 155.00, 600000, 0, 0, 0			, 4		, true, true, true, 0, 0},
	{false, "Leviathan", 1.0, 1.00, 1, 0, 0, 0					, 2		, true, true, true, 5, 0},
	{true, "Moonbeam", 60.0, 116.00, 7500, 0, 0, 6				, 4		, true, true, true, 0, 4},
	{true, "Esperanto", 40.0, 150.00, 1500, 0, 0, 4				, 2		, true, true, true, 0, 3},
	{true, "Taxi", 60.0, 146.00, 18000, 0, 0, 4					, 4		, true, true, true, 0, 0},
	{true, "Washington", 50.0, 155.00, 10500, 0, 0, 4			, 4		, true, true, true, 0, 5},
	{true, "Bobcat", 70.0, 141.00, 25000, 0, 0, 6				, 2		, true, true, true, 0, 8},
	{true, "MrWhoopee", 60.0, 99.00, 1, 0, 0, 6					, 2		, true, true, true, 3, 12},
	{true, "BFInjection", 30.0, 136.00, 1, 0, 0, 4				, 2		, true, true, false, 4, 15},
	{false, "Hunter", 1.0, 1.00, 3000000, 0, 0, 0				, 1		, true, true, true, 0, 0},
	{true, "Premier", 70.0, 175.00, 15000, 0, 0, 4				, 4		, true, true, true, 0, 6},
	{true, "Enforcer", 120.0, 167.00, 200000, 0, 0, 0			, 4		, true, true, true, 0, 0},
	{true, "Securicar", 80.0, 158.00, 150000, 0, 0, 6			, 4		, true, true, true, 0, 0},
	{true, "Banshee", 35.0, 203.00, 1, 0, 0, 4					, 2		, true, true, true, 6, 27},
	{false, "Predator", 1.0, 1.00, 80000, 0, 0, 0				, 1		, true, true, true, 0, 0},
	{true, "Bus", 180.0, 131.00, 500000, 0, 0, 6				, 500	, true, true, true, 0, 0},
	{true, "Rhino", 200.0, 95.00, 10000000, 0, 0, 0				, 1		, true, true, true, 0, 0},
	{true, "Barracks", 150.0, 111.00, 600000, 0, 0, 0			, 2		, true, true, true, 0, 0},
	{true, "Hotknife", 50.0, 168.00, 1, 0, 0, 4					, 2		, true, true, true, 6, 5},
	{false, "Trailer1", 1.0, 1.00, 1000000, 0, 0, 0				, 0		, false, false, false, 0, 0},
	{true, "Previon", 40.0, 150.00, 6500, 0, 0, 4				, 2		, true, true, true, 0, 4},
	{true, "Coach", 150.0, 159.00, 450000, 0, 0, 6				, 500	, true, true, true, 0, 0},
	{true, "Cabbie", 80.0, 144.00, 19500, 0, 0, 4				, 4		, true, true, true, 0, 0},
	{true, "Stallion", 60.0, 170.00, 30000, 0, 0, 4				, 2		, true, true, true, 0, 6},
	{true, "Rumpo", 60.0, 137.00, 35000, 0, 0, 6				, 4		, true, true, true, 0, 6},
	{false, "RCBandit", 1.0, 1.00, 500, 0, 0, 0					, 1		, true, true, true, 0, 0},
	{true, "Romero", 60.0, 140.00, 100000, 0, 0, 0				, 2		, true, true, true, 0, 5},
	{true, "Packer", 150.0, 127.00, 500000, 0, 0, 0				, 2		, true, true, true, 0, 7},
	{true, "Monster", 80.0, 111.00, 1, 0, 0, 6					, 2		, true, true, true, 7, 12},
	{true, "Admiral", 65.0, 165.00, 17500, 0, 0, 4				, 4		, true, true, true, 0, 3},
	{false, "Squalo", 1.0, 1.00, 1200000, 0, 0, 0				, 1		, true, true, true, 0, 0},
	{false, "Seasparrow", 1.0, 1.00, 500000, 0, 0, 0			, 2		, true, true, true, 0, 0},
	{true, "Pizzaboy", 20.0, 116.00, 1600, 0, 0, 2				, 1		, true, true, true, 0, 4},
	{false, "Tram", 1.0, 1.00, 0, 0, 0, 0						, 0		, false, false, false, 0, 0},
	{false, "Trailer2", 1.0, 1.00, 0, 0, 0, 0					, 0		, false, false, false, 0, 0},
	{true, "Turismo", 30.0, 195.00, 1, 0, 0, 4					, 2		, true, true, true, 5, 26},
	{false, "Speeder", 1.0, 1.00, 1500000, 0, 0, 0				, 1		, true, true, true, 0, 0},
	{false, "Reefer", 1.0, 1.00, 800000, 0, 0, 0				, 1		, true, true, true, 0, 0},
	{false, "Tropic", 1.0, 1.00, 1600000, 0, 0, 0				, 1		, true, true, true, 0, 0},
	{true, "Flatbed", 120.0, 159.00, 50000, 0, 0, 0				, 2		, true, true, true, 0, 8},
	{true, "Yankee", 50.0, 107.00, 80000, 0, 0, 0				, 2		, true, true, true, 0, 0},
	{true, "Caddy", 10.0, 96.00, 1, 0, 0, 2						, 2		, true, true, false, 0, 5},
	{true, "Solair", 80.0, 158.00, 15500, 0, 0, 4				, 4		, true, true, true, 0, 6},
	{true, "BerkleyRCVan", 60.0, 137.00, 30000, 0, 0, 6			, 4		, true, true, true, 0, 5},
	{false, "Skimmer", 1.0, 1.00, 160000, 0, 0, 0				, 2		, true, true, true, 0, 0},
	{true, "PCJ-600", 45.0, 167.00, 65000, 0, 0, 2				, 2		, true, true, false, 0, 12},
	{true, "Faggio", 20.0, 107.00, 2500, 0, 0, 2				, 2		, true, true, false, 0, 6},
	{true, "Freeway", 60.0, 142.00, 1, 0, 0, 2					, 2		, true, true, false, 5, 10},
	{false, "RCBaron", 1.0, 1.00, 500, 0, 0, 0					, 1		, true, true, true, 0, 0},
	{false, "RCRaider", 1.0, 1.00, 500, 0, 0, 0					, 1		, true, true, true, 0, 0},
	{true, "Glendale", 50.0, 148.00, 1500, 0, 0, 4				, 4		, true, true, true, 0, 3},
	{true, "Oceanic", 50.0, 141.00, 7500, 0, 0, 4				, 4		, true, true, true, 0, 3},
	{true, "Sanchez", 40.0, 143.00, 50000, 0, 0, 2				, 2		, true, true, false, 0, 10},
	{false, "Sparrow", 1.0, 1.00, 500000, 0, 0, 0				, 2		, true, true, true, 0, 0},
	{true, "Patriot", 120.0, 158.00, 80500, 0, 0, 6				, 4		, true, true, true, 0, 20},
	{true, "Quad", 25.0, 111.00, 1, 0, 0, 2						, 2		, true, true, false, 3, 7},
	{false, "Coastguard", 1.0, 1.00, 150000, 0, 0, 0			, 1		, true, true, true, 0, 0},
	{false, "Dinghy", 1.0, 1.00, 10000, 0, 0, 0					, 1		, true, true, true, 0, 0},
	{true, "Hermes", 80.0, 150.00, 12500, 0, 0, 4				, 2		, true, true, true, 0, 4},
	{true, "Sabre", 45.0, 174.00, 28000, 0, 0, 4				, 2		, true, true, true, 0, 4},
	{false, "Rustler", 1.0, 1.00, 1, 0, 0, 0					, 1		, true, true, true, 10, 0},
	{true, "ZR-350", 40.0, 188.00, 1, 0, 0, 4					, 2		, true, true, true, 5, 21},
	{true, "Walton", 50.0, 118.00, 3000, 0, 0, 6				, 2		, true, true, true, 0, 3},
	{true, "Regina", 80.0, 141.00, 50000, 0, 0, 6				, 4		, true, true, true, 0, 4},
	{true, "Comet", 45.0, 186.00, 1, 0, 4, 4					, 2		, true, true, true, 5, 5},
	{false, "BMX", 1.0, 1.00, 150, 0, 0, 0						, 1		, true, true, true, 0, 0},
	{true, "Burrito", 60.0, 158.00, 80000, 0, 0, 6				, 4		, true, true, true, 0, 5},
	{true, "Camper", 50.0, 124.00, 1, 0, 0, 6					, 3		, true, true, true, 7, 5},
	{false, "Marquis", 1.0, 1.00, 6000000, 0, 0, 0				, 1		, true, true, true, 0, 0},
	{true, "Baggage", 20.0, 100.00, 1000, 0, 0, 4				, 1		, true, true, true, 0, 3},
	{true, "Dozer", 25.0, 65.00, 50000, 0, 0, 0					, 1		, true, true, true, 0, 4},
	{false, "Maverick", 1.0, 1.00, 1, 0, 0, 0					, 4		, true, true, true, 8, 0},
	{false, "NewsChopper", 1.0, 1.00, 1, 0, 0, 0				, 2		, true, true, true, 7, 0},
	{true, "Rancher", 90.0, 140.00, 31000, 0, 0, 6				, 2		, true, true, true, 0, 5},
	{true, "FBIRancher", 90.0, 158.00, 80000, 0, 0, 6			, 4		, true, true, true, 0, 0},
	{true, "Virgo", 45.0, 150.00, 6000, 0, 0, 4					, 2		, true, true, true, 0, 4},
	{true, "Greenwood", 45.0, 141.00, 9000, 0, 0, 4				, 4		, true, true, true, 0, 4},
	{false, "Jetmax", 1.0, 1.00, 5000000, 0, 0, 0				, 1		, true, true, true, 0, 0},
	{true, "Hotring", 25.0, 216.00, 320000, 0, 0, 4				, 2		, true, true, true, 0, 17},
	{true, "Sandking", 60.0, 178.00, 50000, 0, 0, 6				, 2		, true, true, true, 0, 10},
	{true, "Blista Compact", 60.0, 164.00, 12000, 0, 0, 4		, 2		, true, true, true, 0, 4},
	{false, "Police Maverick", 1.0, 1.00, 600000, 0, 0, 0		, 4		, true, true, true, 0, 0},
	{true, "Boxville", 60.0, 109.00, 80000, 0, 0, 0				, 4		, true, true, true, 0, 0},
	{true, "Benson", 70.0, 124.00, 80000, 0, 0, 0				, 2		, true, true, true, 0, 0},
	{true, "Mesa", 60.0, 141.00, 35000, 0, 0, 6					, 2		, true, true, true, 0, 7},
	{false, "RCGoblin", 1.0, 1.00, 500, 0, 0, 0					, 1		, true, true, true, 0, 0},
	{true, "HotringRacer A", 80.0, 216.00, 320000, 0, 0, 4		, 2		, true, true, true, 0, 17},
	{true, "HotringRacer B", 80.0, 216.00, 320000, 0, 0, 4		, 2		, true, true, true, 0, 17},
	{true, "BloodringBanger", 40.0, 174.00, 80000, 0, 0, 4		, 2		, true, true, true, 0, 11},
	{true, "Rancher B", 80.0, 140.00, 31000, 0, 0, 6			, 2		, true, true, true, 0, 5},
	{true, "SuperGT", 30.0, 180.00, 350000, 0, 0, 4				, 2		, true, true, true, 0, 23},
	{true, "Elegant", 65.0, 167.00, 35000, 0, 0, 4				, 4		, true, true, true, 0, 6},
	{true, "Journey", 90.0, 108.00, 1, 0, 0, 6					, 2		, true, true, true, 4, 5},
	{false, "Bike", 1.0, 1.00, 500, 0, 0, 0						, 1		, true, true, true, 0, 0},
	{false, "MountainBike", 1.0, 1.00, 500, 0, 0, 0				, 1		, true, true, true, 0, 0},
	{false, "Beagle", 1.0, 1.00, 420000, 0, 0, 0				, 2		, true, true, true, 0, 0},
	{false, "Cropdust", 1.0, 1.00, 258000, 0, 0, 0				, 1		, true, true, true, 0, 0},
	{false, "Stunt", 1.0, 1.00, 1, 0, 0, 0						, 1		, true, true, true, 2, 0},
	{true, "Tanker", 130.0, 121.00, 500000, 0, 0, 0				, 2		, true, true, true, 0, 4},
	{true, "Roadtrain", 150.0, 143.00, 500000, 0, 0, 0			, 2		, true, true, true, 0, 4},
	{true, "Nebula", 60.0, 158.00, 18000, 0, 0, 4				, 4		, true, true, true, 0, 5},
	{true, "Majestic", 45.0, 158.00, 9500, 0, 0, 4				, 2		, true, true, true, 0, 4},
	{true, "Buccaneer", 50.0, 165.00, 9500, 0, 0, 4				, 2		, true, true, true, 0, 4},
	{false, "Shamal", 1.0, 1.00, 1, 0, 0, 0						, 1		, true, true, true, 15, 0},
	{false, "Hydra", 1.0, 1.00	, 50000000, 0, 0, 0				, 1		, true, true, true, 0, 0},
	{true, "FCR-900", 50.0, 169.00, 30000, 0, 0, 2				, 2		, true, true, false, 0, 11},
	{true, "NRG-500", 40.0, 190.00, 1, 0, 0, 2					, 2		, true, true, false, 7, 15},
	{true, "HPV1000", 60.0, 168.00, 50000, 0, 0, 2				, 2		, true, true, false, 0, 0},
	{true, "CementTruck", 30.0, 131.00, 80000, 0, 0, 0			, 2		, true, true, true, 0, 5},
	{true, "TowTruck", 60.0, 162.00, 30000, 0, 0, 2				, 2		, true, true, true, 0, 0},
	{true, "Fortune", 40.0, 159.00, 25000, 0, 0, 4				, 2		, true, true, true, 0, 6},
	{true, "Cadrona", 45.0, 150.00, 20000, 0, 0, 4				, 2		, true, true, true, 0, 6},
	{true, "FBITruck", 80.0, 178.00, 150000, 0, 0, 6			, 2		, true, true, true, 0, 0},
	{true, "Willard", 55.0, 150.00, 10500, 0, 0, 4				, 4		, true, true, true, 0, 5},
	{true, "Forklift", 10.0, 61.00, 1, 0, 0, 0					, 1		, true, true, true, 2, 5},
	{true, "Tractor", 30.0, 71.00, 2000, 0, 0, 0				, 1		, true, true, true, 0, 5},
	{true, "Combine", 20.0, 111.00, 10000, 0, 0, 0				, 1		, true, true, true, 0, 0},
	{true, "Feltzer", 50.0, 168.00, 55000, 0, 0, 4				, 2		, true, true, true, 0, 13},
	{true, "Remington", 60.0, 170.00, 35000, 0, 0, 4			, 2		, true, true, true, 0, 7},
	{true, "Slamvan", 60.0, 159.00, 55000, 0, 0, 4				, 2		, true, true, true, 0, 11},
	{true, "Blade", 62.0, 174.00, 58000, 0, 0, 6				, 2		, true, true, true, 0, 10},
	{false, "Freight", 1.0, 1.00, 1000000, 0, 0, 0				, 500	, true, true, true, 0, 0},
	{false, "Streak", 1.0, 1.00, 1000000, 0, 0, 0				, 500	, true, true, true, 0, 0},
	{true, "Vortex", 20.0, 100.00, 1, 0, 0, 2					, 1		, true, true, true, 3, 5},
	{true, "Vincent", 40.0, 150.00, 18000, 0, 0, 4				, 4		, true, true, true, 0, 7},
	{true, "Bullet", 60.0, 204.00, 1, 0, 0, 4					, 2		, true, true, true, 6, 24},
	{true, "Clover", 45.0, 165.00, 1500, 0, 0, 4				, 2		, true, true, true, 0, 3},
	{true, "Sadler", 60.0, 152.00, 2000, 0, 0, 6				, 2		, true, true, true, 0, 3},
	{true, "FiretruckLA", 120.0, 149.00, 2000000, 0, 0, 0		, 2		, true, true, true, 0, 0},
	{true, "Hustler", 80.0, 148.00, 1, 0, 0, 4					, 2		, true, true, true, 5, 5},
	{true, "Intruder", 60.0, 150.00, 18000, 0, 0, 4				, 4		, true, true, true, 0, 6},
	{true, "Primo", 55.0, 144.00, 3500, 0, 0, 4					, 4		, true, true, true, 0, 6},
	{false, "Cargobob", 1.0, 1.00, 1, 0, 0, 0					, 2		, true, true, true, 6, 0},
	{true, "Tampa", 60.0, 154.00, 24500, 0, 0, 4				, 2		, true, true, true, 0, 4},
	{true, "Sunrise", 60.0, 146.00, 18000, 0, 0, 4				, 4		, true, true, true, 0, 8},
	{true, "Merit", 55.0, 158.00, 22000, 0, 0, 4				, 4		, true, true, true, 0, 7},
	{true, "Utility", 60.0, 122.00, 30000, 0, 0, 4				, 2		, true, true, true, 0, 4},
	{false, "Nevada", 1.0, 1.00, 1, 0, 0, 0						, 1		, true, true, true, 6, 0},
	{true, "Yosemite", 60.0, 145.00, 1, 0, 0, 6					, 2		, true, true, true, 3, 6},
	{true, "Windsor", 45.0, 159.00, 26000, 0, 0, 4				, 2		, true, true, true, 0, 9},
	{true, "MonsterA", 45.0, 111.00, 1, 0, 0, 6					, 2		, true, true, true, 7, 15},
	{true, "MonsterB", 60.0, 111.00, 1, 0, 0, 6					, 2		, true, true, true, 7, 15},
	{true, "Uranus", 80.0, 157.00, 55000, 0, 0, 4				, 2		, true, true, true, 0, 10},
	{true, "Jester", 60.0, 179.00, 75000, 0, 0, 4				, 2		, true, true, true, 0, 16},
	{true, "Sultan", 60.0, 170.00, 70000, 0, 0, 4				, 4		, true, true, true, 0, 17},
	{true, "Stratum", 60.0, 155.00, 50000, 0, 0, 6				, 4		, true, true, true, 0, 15},
	{true, "Elegy", 60.0, 179.00, 72000, 0, 0, 4				, 2		, true, true, true, 0, 19},
	{false, "Raindance", 1.0, 1.00, 1, 0, 0, 0					, 2		, true, true, true, 4, 0},
	{false, "RC Tiger", 1.0, 1.00, 500, 0, 0, 0					, 1		, true, true, true, 0, 0},
	{true, "Flash", 60.0, 166.00, 65000, 0, 0, 4				, 2		, true, true, true, 0, 14},
	{true, "Tahoma", 40.0, 161.00, 12500, 0, 0, 4				, 4		, true, true, true, 0, 4},
	{true, "Savanna", 50.0, 174.00, 41000, 0, 0, 4				, 4		, true, true, true, 0, 9},
	{true, "Bandito", 30.0, 147.00, 1, 0, 0, 4					, 1		, true, true, true, 4, 14},
	{false, "FreightFlat", 1.0, 1.00, 5000000, 0, 0, 0			, 0		, true, true, true, 0, 0},
	{false, "StreakCarriage", 1.0, 1.00, 5000000, 0, 0, 0		, 0		, true, true, true, 0, 0},
	{true, "Kart", 10.0, 94.00, 1, 0, 0, 2						, 1		, true, true, true, 3, 5},
	{true, "Mower", 15.0, 61.00, 1, 0, 0, 2						, 1		, true, true, true, 3, 5},
	{true, "Duneride", 80.0, 111.00, 1, 0, 0, 0					, 2		, true, true, true, 5, 10},
	{true, "Sweeper", 20.0, 61.00, 1, 0, 0, 2					, 1		, true, true, true, 2, 3},
	{true, "Broadway", 45.0, 159.00, 35000, 0, 0, 4				, 2		, true, true, true, 0, 8},
	{true, "Tornado", 40.0, 159.00, 21000, 0, 0, 4				, 2		, true, true, true, 0, 9},
	{false, "AT-400", 1.0, 1.00, 10000000, 0, 0, 0				, 1		, true, true, true, 0, 0},
	{true, "DFT-30", 80.0, 131.00, 100000, 0, 0, 0				, 2		, true, true, true, 0, 5},
	{true, "Huntley", 80.0, 159.00, 40000, 0, 0, 6				, 4		, true, true, true, 0, 11},
	{true, "Stafford", 60.0, 154.00, 12000, 0, 0, 4				, 4		, true, true, true, 0, 10},
	{true, "BF-400", 35.0, 168.00, 14000, 0, 0, 2				, 2		, true, true, false, 0, 13},
	{true, "Newsvan", 60.0, 137.00, 35000, 0, 0, 6				, 4		, false, false, false, 0, 6},
	{true, "Tug", 15.0, 86.00, 1, 0, 0, 2						, 1		, true, true, true, 2, 3},
	{false, "Trailer 3", 1.0, 1.00, 160000, 0, 0, 0				, 0		, true, true, true, 0, 0},
	{true, "Emperor", 60.0, 154.00, 9000, 0, 0, 4				, 4		, true, true, true, 0, 7},
	{true, "Wayfarer", 50.0, 158.00, 1, 0, 0, 2					, 2		, true, true, false, 2, 8},
	{true, "Euros", 50.0, 166.00, 95000, 0, 0, 4				, 2		, true, true, true, 0, 13},
	{true, "Hotdog", 60.0, 109.00, 1, 0, 0, 6					, 2		, true, true, true, 3, 5},
	{true, "Club", 65.0, 164.00, 50000, 0, 0, 4					, 2		, true, true, true, 0, 12},
	{false, "FreightCarriage", 1.0, 1.00, 1000000, 0, 0, 0		, 0		, false, false, false, 0, 0},
	{false, "Trailer3", 1.0, 1.00, 1000000, 0, 0, 0				, 0		, false, false, false, 0, 0},
	{false, "Andromada", 1.0, 1.00, 1000000, 0, 0, 0			, 500	, true, true, true, 0, 0},
	{false, "Dodo", 1.0, 1.00, 1, 0, 0, 0						, 2		, true, true, true, 5, 0},
	{false, "RCCam", 1.0, 1.00, 500, 0, 0, 0					, 2		, true, true, true, 0, 0},
	{false, "Launch", 1.0, 1.00, 800000, 0, 0, 0				, 1		, true, true, true, 0, 0},
	{true, "LSPD", 60.0, 177.00, 50000, 0, 0, 4					, 4		, true, true, true, 0, 0},
	{true, "SFPD", 60.0, 177.00, 50000, 0, 0, 4					, 4		, true, true, true, 0, 0},
	{true, "LVPD", 60.0, 177.00, 50000, 0, 0, 4					, 4		, true, true, true, 0, 0},
	{true, "PoliceRanger", 90.0, 159.00, 70000, 0, 0, 4			, 2		, true, true, true, 0, 0},
	{true, "Picador", 40.0, 152.00, 4500, 0, 0, 6				, 2		, true, true, true, 0, 4},
	{true, "S.W.A.T.Van", 30.0, 111.00, 4000000, 0, 0, 0		, 2		, true, true, true, 0, 0},
	{true, "Alpha", 60.0, 170.00, 120000, 0, 0, 4				, 2		, true, true, true, 0, 17},
	{true, "Phoenix", 60.0, 172.00, 45000, 0, 0, 4				, 2		, true, true, true, 0, 22},
	{true, "Glendale", 30.0, 148.00, 1500, 0, 0, 4				, 4		, true, true, true, 0, 3},
	{true, "Sadler", 40.0, 152.00, 1600, 0, 0, 6				, 2		, true, true, true, 0, 3},
	{false, "LuggageTrailerA", 1.0, 1.00, 500, 0, 0, 0			, 0		, true, true, true, 0, 0},
	{false, "LuggageTrailerB", 1.0, 1.00, 500, 0, 0, 0			, 0		, true, true, true, 0, 0},
	{false, "StairTrailer", 1.0, 1.00, 500, 0, 0, 0				, 0		, true, true, true, 0, 0},
	{true, "Boxville", 90.0, 108.00, 60000, 0, 0, 0				, 4		, true, true, true, 0, 0},
	{false, "FarmPlow", 1.0, 1.00, 3000, 0, 0, 0				, 0		, true, true, true, 0, 0},
	{false, "UtilityTrailer", 1.0, 1.00, 1000, 0, 0, 0         	, 0		, true, true, true, 0, 0}
};

#define MAX_BOOT_SLOTS	20
enum
{
	BOOT_TYPE_WEAPON
};
enum enum_VEHICLE_BOOT
{
	bool:vehicle_boot_VALID,
	vehicle_boot_OBJECT_ID,
	vehicle_boot_TYPE,
	vehicle_boot_INT,
	vehicle_boot_INT_EXTRA
};
new VEHICLE_BOOT[MAX_VEHICLES][MAX_BOOT_SLOTS][enum_VEHICLE_BOOT];

enum SELL_INFO_VEHICLES_Enum
{
	sel_info_vehicle_MODELID,
	Float:sell_info_SPAWN_X,
	Float:sell_info_SPAWN_Y,
	Float:sell_info_SPAWN_Z,
	Float:sell_info_SPAWN_ANGLE,
	sell_info_COLOR_1,
	sell_info_COLOR_2,
	sell_info_SHOP
};
new SELL_INFO_VEHICLES[][SELL_INFO_VEHICLES_Enum] =
{
	{400, 2148.6155, -1166.2764, 23.8252, -90.0000, 1, 2, 0},//offroad
	{413, 2148.8799, -1138.5997, 25.4827, -90.0000, 3, 3, 0},
	{418, 2148.3647, -1170.9364, 23.7142, -90.0000, 3, 3, 0},
	{422, 2134.6660, -1148.1915, 24.6137, 60.0000, 1, 6, 0},
	{470, 2161.1316, -1148.3436, 24.4413, 90.0000, -1, -1, 0},
	{444, 2121.5847, -1134.2340, 25.7757, -55.0000, 6, 6, 0},
	{482, 2148.6191, -1147.8595, 24.5125, -90.0000, 25, 25, 0},
	{495, 2148.4399, -1152.8217, 23.9004, -90.0000, 1, 6, 0},
	{489, 2148.7070, -1157.2610, 23.8836, -90.0000, 25, 25, 0},
	{478, 2134.1494, -1139.5963, 25.7757, 60.0000, 2, 2, 0},
	{543, 2134.3164, -1143.8768, 24.8651, 60.0000, 1, 1, 0},
	{554, 2134.1868, -1134.9946, 25.7757, 60.0000, 3, 3, 0},
	{424, 2120.1528, -1123.5757, 25.0666, -55.0000, 2, 2, 0},
	{557, 2120.8193, -1148.1067, 24.6360, -55.0000, -1, -1, 0},
	{556, 2121.3826, -1141.1071, 25.7757, -55.0000, -1, -1, 0},
	{568, 2119.9536, -1128.7100, 25.2574, -55.0000, 1, 3, 0},
	{440, 2148.7058, -1143.0525, 25.1158, -90.0000, -1, -1, 0},
	{573, 2134.9600, -1128.8340, 26.0787, 87.0000, 3, 3, 0},
	{552, 2161.6838, -1163.1803, 23.3793, 90.0000, 25, 25, 0},
	{582, 2161.2322, -1158.1581, 23.8578, 90.0000, 7, 7, 0},
	{500, 2161.5767, -1152.7144, 24.0531, 90.0000, 1, 30, 0},
	{579, 2148.7302, -1161.5348, 23.6822, -90.0000, -1, -1, 0},

	{405, 550.3978, -1298.9218, 16.8717, 0.0000, 25, 25, 1},//grotti
	{421, 546.8909, -1298.9669, 17.0306, 0.0000, 25, 25, 1},
	{426, 536.5724, -1298.4192, 17.1211, 0.0000, 3, 3, 1},
	{445, 543.5295, -1298.7943, 16.8450, 0.0000, 25, 25, 1},
	{475, 557.5463, -1298.9934, 16.8533, 0.0000, 16, 16, 1},
	{480, 550.2979, -1267.1913, 17.1792, -105.0000, 2, 2, 1},
	{496, 564.3171, -1299.1798, 17.0384, 0.0000, 3, 25, 1},
	{527, 560.8440, -1299.0288, 16.9356, 0.0000, 7, 7, 1},
	{458, 539.9547, -1298.7319, 16.9356, 0.0000, 7, 7, 1},
	{492, 553.9727, -1298.8928, 16.9356, 0.0000, 6, 1, 1},
	{507, 532.8884, -1298.6133, 16.9356, 0.0000, 3, 3, 1},
	{516, 529.1434, -1298.6967, 16.9356, 0.0000, 30, 30, 1},
	{551, 525.5027, -1298.6268, 16.9356, 0.0000, 25, 25, 1},
	{526, 522.0060, -1298.4563, 16.9356, 0.0000, 16, 16, 1},
	{529, 513.0057, -1311.7075, 16.9356, 91.0000, 3, 3, 1},
	{533, 534.8088, -1278.3510, 17.1792, -105.0000, 3, 3, 1},
	{540, 512.9750, -1307.9819, 16.9356, 91.0000, 3, 3, 1},
	{546, 512.8446, -1304.0878, 16.9356, 91.0000, 3, 3, 1},
	{550, 512.5743, -1299.9840, 16.9356, 91.0000, 17, 17, 1},
	{555, 540.1652, -1274.5133, 17.1792, -105.0000, 17, 0, 1},
	{585, 512.7247, -1295.8590, 16.9356, 91.0000, 17, 17, 1},
	{603, 545.0585, -1270.8815, 17.1792, -105.0000, 25, 1, 1},
	{439, 529.0914, -1282.8658, 17.1792, -105.0000, 1, 1, 1},

	{461, 1722.1875, -1134.6166, 23.6810, 135.0000, 16, 16, 2},//motos
	{586, 1731.9387, -1127.6019, 23.6729, 180.0000, 25, 25, 2},
	{462, 1731.7886, -1134.7792, 23.5784, 90.0000, 30, 30, 2},
	{463, 1717.5449, -1127.4868, 23.6730, 180.0000, 6, 6, 2},
	{468, 1710.4944, -1127.4346, 23.7945, 180.0000, 1, 2, 2},
	{521, 1702.9325, -1127.5092, 23.6724, 180.0000, 7, 7, 2},
	{522, 1712.7159, -1134.7733, 23.6725, -135.0000, 1, 3, 2},
	{581, 1724.8699, -1127.4805, 23.6728, 180.0000, 25, 25, 2},
	{510, 1719.1090, -1143.8413, 23.6764, 0.0000, 3, 1, 2},
	{471, 1702.6874, -1143.6227, 23.4764, -90.0000, 6, 6, 2},


	{404, 1646.2638, -1903.0845, 13.1330, 15.0000, 8, 8, 3},//unity
	{410, 1665.0615, -1900.1967, 13.1752, 18.0000, 55, 55, 3},
	{419, 1669.3488, -1896.2122, 13.1752, 40.0000, 41, 41, 3},
	{401, 1669.9392, -1890.5291, 13.1752, 40.0000, 76, -1, 3},
	{436, 1659.5637, -1899.6404, 13.1330, 356.7492, 76, 76, 3},
	{467, 1640.4156, -1905.0857, 13.1330, 15.0000, 12, 12, 3},
	{466, 1633.7993, -1906.0308, 13.1330, 353.9090, 42, 42, 3},
	//taxis
	{438, 1778.7683, -1928.2554, 13.2044, 270.5381, 6, 1, 3},
	{420, 1778.9365, -1923.0736, 13.0044, 270.5381, 6, 1, 3},

	{411, 1340.1611, -1544.2373, 13.1745, 173.5225, 3, 3, 4},//supercars
	{506, 1352.4076, -1548.6541, 19.7350, 66.0000, 25, 25, 4},
	{477, 1329.0959, -1557.1107, 19.7350, -86.0000, 7, 7, 4},
	{451, 1338.9606, -1554.4849, 19.7350, -22.0000, 2, 2, 4},
	{541, 1345.4231, -1551.9701, 19.7350, -7.0000, 6, 6, 4},
	{589, 1334.4647, -1542.9399, 27.2556, 244.0000, 17, 1, 4},
	{587, 1342.2035, -1552.5237, 27.2556, 23.0000, 30, 30, 4},
	{415, 1330.5294, -1556.2533, 27.2556, 304.0000, 17, 17, 4},
	{402, 1331.8813, -1548.7040, 27.2556, 245.0000, 25, 25, 4},
	{429, 1339.3129, -1553.9392, 13.1618, 144.0000, 25, 25, 4},

	//airplane
	{487, 1797.1410, -2450.4082, 13.5641, 151.0000, -1, -1, 5},
	{519, 1853.4637, -2450.5061, 13.8671, 151.0000, -1, -1, 5},
	{513, 1814.8621, -2450.0679, 14.3711, 151.0000, -1, -1, 5},
	{593, 1831.3947, -2451.8450, 14.3772, 151.0000, -1, -1, 5},

	{452, 126.6318, -1854.3678, 0.3131, 0.0000, -1, -1, 6},
	{446, 134.6040, -1854.8380, -0.7256, 0.0000, -1, -1, 6},
	{454, 118.4910, -1854.1250, 0.3131, 0.0000, -1, -1, 6},
	{484, 118.0176, -1871.8896, 0.3131, 180.0000, -1, -1, 6},
	{473, 126.7287, -1866.8619, 0.3131, 180.0000, -1, -1, 6},
	{493, 134.5470, -1868.6544, 0.3131, 180.0000, -1, -1, 6},
	{460, 106.6980, -1861.9827, 1.8747, 90.0000, -1, -1, 6},

	{567, 1292.2290, -1875.3381, 13.3511, 331.0000, 17, 17, 7},//low
	{575, 1298.1531, -1874.4911, 13.3511, -25.0000, 25, 25, 7},
	{576, 1298.8684, -1865.2327, 13.3511, 98.0000, 25, 25, 7},
	{412, 1291.9437, -1877.7185, 17.4322, -69.0000, 7, 7, 7},
	{534, 1291.9644, -1873.7665, 17.4322, -69.0000, 3, 3, 7},
	{535, 1291.7009, -1865.0616, 17.4322, -69.0000, 7, 7, 7},
	{536, 1291.9688, -1869.6233, 17.4322, -69.0000, 2, 2, 7},

	{409, 996.8439, -1435.3829, 13.2194, -46.0000, -1, -1, 8},//especiales
	{434, 1009.8784, -1436.4969, 19.1086, 0.0000, -1, -1, 8},
	{508, 997.4119, -1436.1268, 19.5167, 0.0000, -1, -1, 8},
	{539, 1039.6263, -1425.2000, 13.2351, 41.3969, -1, -1, 8},
	{545, 995.2846, -1426.4349, 19.0847, -124.0000, -1, -1, 8},
	{571, 1006.7577, -1420.2297, 12.9155, -181.0000, -1, -1, 8},
	{588, 998.4615, -1421.6355, 13.5225, -91.0000, -1, -1, 8},
	{423, 1011.1551, -1436.5114, 13.6306, 0.0000, -1, -1, 8},
	{483, 1005.1543, -1436.3397, 13.6306, 0.0000, -1, -1, 8},
	{572, 1009.8960, -1420.3221, 13.1092, 180.0000, -1, -1, 8},
	
	{583, 1013.5063, -1420.4286, 13.1092, 180.0000, -1, -1, 8},//especiales y tuneables
	{574, 1025.4353, -1420.3823, 13.4122, 180.0000, -1, -1, 8},
	{530, 1020.7918, -1420.4712, 13.2045, 180.0000, -1, -1, 8},
	{558, 970.6693, -1451.5231, 13.2975, -90.0000, -1, -1, 8},
	{559, 970.5342, -1447.3761, 13.2975, -90.0000, -1, -1, 8},
	{560, 970.3007, -1443.1375, 13.2975, -90.0000, -1, -1, 8},
	{561, 970.3259, -1438.8779, 13.2975, -90.0000, -1, -1, 8},
	{565, 970.5164, -1434.2921, 13.2975, -90.0000, -1, -1, 8},
	{562, 970.2922, -1429.4937, 13.2975, -90.0000, -1, -1, 8}
};
new Float:SELL_VEHICLES_SHOPS_SPAWN[][] =
{
	{2129.3140, -1118.0704, 25.8716, -7.0000},//offroad
	{563.774475, -1273.510986, 16.867170, 12.636687},
	{1742.5380, -1140.3715, 23.8115, 176.6076},//motos
 	{1655.5879, -1885.3351, 13.1470, 71.406616},//unity cars
	{1319.7932, -1549.8423, 13.1934, 173.7567},//supercars
	{1758.6379, -2462.5444, 13.8671, 180.0000}, //aviones
	{278.9193, -2005.3251, 1.1333, 180.0000},//barkos
	{1290.6841, -1862.8479, 13.5394, 359.7923},//lowriders
	{978.2838, -1423.2212, 13.7857, 0.0000} //speciales
};

enum SELL_VEHICLES_Enum
{
	bool:sell_vehicle_VALID,
	sell_vehicle_SHOP,
	sell_vehicle_PRICE,
	sell_vehicle_LEVEL,
	sell_vehicle_EXTRA,
	Text3D:sell_vehicle_LABEL_ID
};
new SELL_VEHICLES[MAX_VEHICLES][SELL_VEHICLES_Enum];

// AGRICULTOR
enum
{
	PLANT_TYPE_MEDICINE, 	// VIDA
	PLANT_TYPE_CANNABIS,	// YOKSETIOXD
	PLANT_TYPE_CRACK		//CHALECO
}

enum seed_info_enum
{
	seed_info_TYPE,
	seed_info_PLANT_TYPE,
	seed_info_EXP,
	seed_info_NAME[24],
	seed_info_PRICE
};
new seed_info[][seed_info_enum] =
{
	{TYPE_LEGAL, PLANT_TYPE_MEDICINE, 0, "Semilla de medicamento", 200},
	{TYPE_ILLEGAL, PLANT_TYPE_CRACK, 100, "Semilla de coca", 200},
	{TYPE_ILLEGAL, PLANT_TYPE_CANNABIS, 200, "Semilla de marihuana", 500}
};

enum plant_info_enum
{
	plant_info_SEEDS,
	plant_info_NAME[24]
};
new plant_info[][plant_info_enum] =
{
	{2, "Medicamento"},
	{4, "Crack"},
	{10, "Marihuana"}
};


#define MAX_PLANTS	500
enum PLANTS_ENUM
{
	bool:plant_VALID,
	bool:plant_GROWING,
	bool:plant_INVISIBLE,
	Float:plant_GROWING_PROGRESS,
	plant_TYPE,
	plant_PLANTED_BY_ACCOUNT_ID,
	plant_PLANTED_BY_NAME[24],
	plant_OBJECT_ID,
	Text3D:plant_LABEL_ID,
	plant_EXPIRE_TIME,
	plant_TIMER
};
new PLANTS[MAX_PLANTS][PLANTS_ENUM];

enum
{
	OBJECT_TYPE_NONE,
	OBJECT_TYPE_PLANT
};

/* SYSTEM - GPS */
enum
{
	CHECKPOINT_TYPE_NONE,
	CHECKPOINT_TYPE_GPS,
	CHECKPOINT_TYPE_UNLOAD_TRUCK,
	CHECKPOINT_TYPE_FINISH_TRUCK,
	CHECKPOINT_TYPE_HARVEST,
	CHECKPOINT_TYPE_FUMIGATOR,
	CHECKPOINT_TYPE_TRASH,
	CHECKPOINT_TYPE_FINISH_TRASH,
	CHECKPOINT_TYPE_LUMBERJACK,
	CHECKPOINT_TYPE_PIZZA_DEL,
	CHECKPOINT_TYPE_PIZZA_FINISH
};

#define MAX_PLAYER_GPS_SAVES	10
#define MAX_LISTITEMS			35
enum Player_GPS_Enum
{
	player_gps_VALID,
	player_gps_ID,
	player_gps_NAME[24],
	Float:player_gps_X,
	Float:player_gps_Y,
	Float:player_gps_Z,
	player_gps_WORLD,
	player_gps_INTERIOR
};
new PLAYER_GPS[MAX_PLAYERS][MAX_PLAYER_GPS_SAVES][Player_GPS_Enum];

/* SYSTEM - PLAYER OBJECTS */
enum Player_Objects_Enum
{
	po_GPS,
	po_MP3,
	po_PHONE_RESOLVER
};
new PLAYER_OBJECT[MAX_PLAYERS][Player_Objects_Enum];

/* SYSTEM - PHONE */
enum
{
	CALL_GAME_STATE_NONE,
	CALL_STATE_WAITING_RESPONSE,
	CALL_STATE_INCOMING_CALL,
	CALL_STATE_ESTABLISHED
};

enum
{
 	PHONE_STATE_ON,
	PHONE_STATE_OFF
};
enum Phone_Info_Enum
{
	player_phone_VALID,
	player_phone_NUMBER,
	player_phone_STATE,
	player_phone_VISIBLE_NUMBER // para elegir si quieres aparecer en la guia o no
};
new PLAYER_PHONE[MAX_PLAYERS][Phone_Info_Enum]; //PPI (PlayerPhoneInfo)

#define MAX_PHONE_CONTACTS 40
enum Phone_Book_Enum
{
	phone_book_contact_VALID,

	phone_book_contact_ID,
	phone_book_contact_NAME[24],
	phone_book_contact_PHONE_NUMBER
};
new PLAYER_PHONE_BOOK[MAX_PLAYERS][MAX_PHONE_CONTACTS][Phone_Book_Enum]; //PB = PhoneBook

enum
{
	SEX_MALE,
	SEX_FEMALE
};

enum e_ZONEINFO
{
	z_Name[45],
    Float:z_MinX,
    Float:z_MinY,
    Float:z_MinZ,
    Float:z_MaxX,
    Float:z_MaxY,
    Float:z_MaxZ
};
new g_Zones[][e_ZONEINFO] =
{
	{"Las Colinas",                  1994.30, -1100.80,   -89.00,  1994.30, -1100.80,   -89.00},
	{"Las Colinas",                  2056.80, -1126.30,   -89.00,  2170.2065, -970.9831, 110.90},
	{"Las Colinas",                  2185.30, -1154.50,   -89.00,  2281.40,  -934.40,   110.90},
	{"Las Colinas",                  2126.80, -1126.30,   -89.00,  2185.30,  -934.40,   110.90},
	{"Las Colinas",                  2747.70, -1120.00,   -89.00,  2959.30,  -945.00,   110.90},
	{"Las Colinas",                  2632.70, -1135.00,   -89.00,  2747.70,  -945.00,   110.90},
	{"Las Colinas",                  2281.40, -1135.00,   -89.00,  2632.70,  -945.00,   110.90},
    {"Las Payasadas",                -354.30,  2580.30,     2.00,  -133.60,  2816.80,   200.00},
	{"Las Venturas Airport",         1236.60,  1203.20,   -89.00,  1457.30,  1883.10,   110.90},
	{"Las Venturas Airport",         1457.30,  1203.20,   -89.00,  1777.30,  1883.10,   110.90},
	{"Las Venturas Airport",         1457.30,  1143.20,   -89.00,  1777.40,  1203.20,   110.90},
	{"Las Venturas Airport",         1515.80,  1586.40,   -12.50,  1729.90,  1714.50,    87.50},
	{"Last Dime Motel",              1823.00,   596.30,   -89.00,  1997.20,   823.20,   110.90},
	{"Leafy Hollow",                -1166.90, -1856.00,     0.00,  -815.60, -1602.00,   200.00},
	{"Lil' Probe Inn",                -90.20,  1286.80,    -3.00,   153.80,  1554.10,   200.00},
	{"Linden Side",                  2749.90,   943.20,   -89.00,  2923.30,  1198.90,   110.90},
	{"Linden Station",               2749.90,  1198.90,   -89.00,  2923.30,  1548.90,   110.90},
	{"Linden Station",               2811.20,  1229.50,   -39.50,  2861.20,  1407.50,    60.40},
	{"Little Mexico",                1701.90, -1842.20,   -89.00,  1812.60, -1722.20,   110.90},
	{"Little Mexico",                1758.90, -1722.20,   -89.00,  1812.60, -1577.50,   110.90},
	{"Los Flores",                   2581.70, -1454.30,   -89.00,  2632.80, -1393.40,   110.90},
	{"Los Flores",                   2581.70, -1393.40,   -89.00,  2747.70, -1135.00,   110.90},
	{"Los Santos International",     1249.60, -2394.30,   -89.00,  1852.00, -2179.20,   110.90},
	{"Los Santos International",     1852.00, -2394.30,   -89.00,  2089.00, -2179.20,   110.90},
	{"Los Santos International",     1382.70, -2730.80,   -89.00,  2201.80, -2394.30,   110.90},
	{"Los Santos International",     1974.60, -2394.30,   -39.00,  2089.00, -2256.50,    60.90},
	{"Los Santos International",     1400.90, -2669.20,   -39.00,  2189.80, -2597.20,    60.90},
	{"Los Santos International",     2051.60, -2597.20,   -39.00,  2152.40, -2394.30,    60.90},
	{"Marina",                        647.70, -1804.20,   -89.00,   851.40, -1577.50,   110.90},
	{"Marina",                        647.70, -1577.50,   -89.00,   807.90, -1416.20,   110.90},
	{"Marina",                        807.90, -1577.50,   -89.00,   926.90, -1416.20,   110.90},
	{"Market",                        787.40, -1416.20,   -89.00,  1072.60, -1310.20,   110.90},
	{"Market",                        952.60, -1310.20,   -89.00,  1072.60, -1130.80,   110.90},
	{"Market",                       1072.60, -1416.20,   -89.00,  1370.80, -1130.80,   110.90},
	{"Market",                        926.90, -1577.50,   -89.00,  1370.80, -1416.20,   110.90},
	{"Market Station",                787.40, -1410.90,   -34.10,   866.00, -1310.20,    65.80},
	{"Martin Bridge",                -222.10,   293.30,     0.00,  -122.10,   476.40,   200.00},
	{"Missionary Hill",             -2994.40,  -811.20,     0.00, -2178.60,  -430.20,   200.00},
	{"Montgomery",                   1119.50,   119.50,    -3.00,  1451.40,   493.30,   200.00},
	{"Montgomery",                   1451.40,   347.40,    -6.10,  1582.40,   420.80,   200.00},
	{"Montgomery Intersection",      1546.60,   208.10,     0.00,  1745.80,   347.40,   200.00},
	{"Montgomery Intersection",      1582.40,   347.40,     0.00,  1664.60,   401.70,   200.00},
	{"Mulholland",                   1414.00,  -768.00,   -89.00,  1667.60,  -452.40,   110.90},
	{"Mulholland",                   1281.10,  -452.40,   -89.00,  1641.10,  -290.90,   110.90},
	{"Mulholland",                   1269.10,  -768.00,   -89.00,  1414.00,  -452.40,   110.90},
	{"Mulholland",                   1357.00,  -926.90,   -89.00,  1463.90,  -768.00,   110.90},
	{"Mulholland",                   1318.10,  -910.10,   -89.00,  1357.00,  -768.00,   110.90},
	{"Mulholland",                   1169.10,  -910.10,   -89.00,  1318.10,  -768.00,   110.90},
	{"Mulholland",                    768.60,  -954.60,   -89.00,   952.60,  -860.60,   110.90},
	{"Mulholland",                    687.80,  -860.60,   -89.00,   911.80,  -768.00,   110.90},
	{"Mulholland",                    737.50,  -768.00,   -89.00,  1142.20,  -674.80,   110.90},
	{"Mulholland",                   1096.40,  -910.10,   -89.00,  1169.10,  -768.00,   110.90},
	{"Mulholland",                    952.60,  -937.10,   -89.00,  1096.40,  -860.60,   110.90},
	{"Mulholland",                    911.80,  -860.60,   -89.00,  1096.40,  -768.00,   110.90},
	{"Mulholland",                    861.00,  -674.80,   -89.00,  1156.50,  -600.80,   110.90},
	{"Mulholland Intersection",      1463.90, -1150.80,   -89.00,  1812.60,  -768.00,   110.90},
	{"North Rock",                   2285.30,  -768.00,     0.00,  2770.50,  -269.70,   200.00},
	{"Ocean Docks",                  2373.70, -2697.00,   -89.00,  2809.20, -2330.40,   110.90},
	{"Ocean Docks",                  2201.80, -2418.30,   -89.00,  2324.00, -2095.00,   110.90},
	{"Ocean Docks",                  2324.00, -2302.30,   -89.00,  2703.50, -2145.10,   110.90},
	{"Ocean Docks",                  2089.00, -2394.30,   -89.00,  2201.80, -2235.80,   110.90},
	{"Ocean Docks",                  2201.80, -2730.80,   -89.00,  2324.00, -2418.30,   110.90},
	{"Ocean Docks",                  2703.50, -2302.30,   -89.00,  2959.30, -2126.90,   110.90},
	{"Ocean Docks",                  2324.00, -2145.10,   -89.00,  2703.50, -2059.20,   110.90},
	{"Ocean Flats",                 -2994.40,   277.40,    -9.10, -2867.80,   458.40,   200.00},
	{"Ocean Flats",                 -2994.40,  -222.50,    -0.00, -2593.40,   277.40,   200.00},
	{"Ocean Flats",                 -2994.40,  -430.20,    -0.00, -2831.80,  -222.50,   200.00},
	{"Octane Springs",                338.60,  1228.50,     0.00,   664.30,  1655.00,   200.00},
	{"Old Venturas Strip",           2162.30,  2012.10,   -89.00,  2685.10,  2202.70,   110.90},
	{"Palisades",                   -2994.40,   458.40,    -6.10, -2741.00,  1339.60,   200.00},
	{"Palomino Creek",               2160.20,  -149.00,     0.00,  2576.90,   228.30,   200.00},
	{"Paradiso",                    -2741.00,   793.40,    -6.10, -2533.00,  1268.40,   200.00},
	{"Pershing Square",              1440.90, -1722.20,   -89.00,  1583.50, -1577.50,   110.90},
	{"Pilgrim",                      2437.30,  1383.20,   -89.00,  2624.40,  1783.20,   110.90},
	{"Pilgrim",                      2624.40,  1383.20,   -89.00,  2685.10,  1783.20,   110.90},
	{"Pilson Intersection",          1098.30,  2243.20,   -89.00,  1377.30,  2507.20,   110.90},
	{"Pirates in Men's Pants",       1817.30,  1469.20,   -89.00,  2027.40,  1703.20,   110.90},
	{"Playa del Seville",            2703.50, -2126.90,   -89.00,  2959.30, -1852.80,   110.90},
	{"Prickle Pine",                 1534.50,  2583.20,   -89.00,  1848.40,  2863.20,   110.90},
	{"Prickle Pine",                 1117.40,  2507.20,   -89.00,  1534.50,  2723.20,   110.90},
	{"Prickle Pine",                 1848.40,  2553.40,   -89.00,  1938.80,  2863.20,   110.90},
	{"Prickle Pine",                 1938.80,  2624.20,   -89.00,  2121.40,  2861.50,   110.90},
	{"Queens",                      -2533.00,   458.40,     0.00, -2329.30,   578.30,   200.00},
	{"Queens",                      -2593.40,    54.70,     0.00, -2411.20,   458.40,   200.00},
	{"Queens",                      -2411.20,   373.50,     0.00, -2253.50,   458.40,   200.00},
	{"Randolph Industrial Estate",   1558.00,   596.30,   -89.00,  1823.00,   823.20,   110.90},
	{"Redsands East",                1817.30,  2011.80,   -89.00,  2106.70,  2202.70,   110.90},
	{"Redsands East",                1817.30,  2202.70,   -89.00,  2011.90,  2342.80,   110.90},
	{"Redsands East",                1848.40,  2342.80,   -89.00,  2011.90,  2478.40,   110.90},
	{"Redsands West",                1236.60,  1883.10,   -89.00,  1777.30,  2142.80,   110.90},
	{"Redsands West",                1297.40,  2142.80,   -89.00,  1777.30,  2243.20,   110.90},
	{"Redsands West",                1377.30,  2243.20,   -89.00,  1704.50,  2433.20,   110.90},
	{"Redsands West",                1704.50,  2243.20,   -89.00,  1777.30,  2342.80,   110.90},
	{"Regular Tom",                  -405.70,  1712.80,    -3.00,  -276.70,  1892.70,   200.00},
	{"Richman",                       647.50, -1118.20,   -89.00,   787.40,  -954.60,   110.90},
	{"Richman",                       647.50,  -954.60,   -89.00,   768.60,  -860.60,   110.90},
	{"Richman",                       225.10, -1369.60,   -89.00,   334.50, -1292.00,   110.90},
	{"Richman",                       225.10, -1292.00,   -89.00,   466.20, -1235.00,   110.90},
	{"Richman",                        72.60, -1404.90,   -89.00,   225.10, -1235.00,   110.90},
	{"Richman",                        72.60, -1235.00,   -89.00,   321.30, -1008.10,   110.90},
	{"Richman",                       321.30, -1235.00,   -89.00,   647.50, -1044.00,   110.90},
	{"Richman",                       321.30, -1044.00,   -89.00,   647.50,  -860.60,   110.90},
	{"Richman",                       321.30,  -860.60,   -89.00,   687.80,  -768.00,   110.90},
	{"Richman",                       321.30,  -768.00,   -89.00,   700.70,  -674.80,   110.90},
	{"Robada Intersection",         -1119.00,  1178.90,   -89.00,  -862.00,  1351.40,   110.90},
	{"Roca Escalante",               2237.40,  2202.70,   -89.00,  2536.40,  2542.50,   110.90},
	{"Roca Escalante",               2536.40,  2202.70,   -89.00,  2625.10,  2442.50,   110.90},
	{"Rockshore East",               2537.30,   676.50,   -89.00,  2902.30,   943.20,   110.90},
	{"Rockshore West",               1997.20,   596.30,   -89.00,  2377.30,   823.20,   110.90},
	{"Rockshore West",               2377.30,   596.30,   -89.00,  2537.30,   788.80,   110.90},
	{"Rodeo",                          72.60, -1684.60,   -89.00,   225.10, -1544.10,   110.90},
	{"Rodeo",                          72.60, -1544.10,   -89.00,   225.10, -1404.90,   110.90},
	{"Rodeo",                         225.10, -1684.60,   -89.00,   312.80, -1501.90,   110.90},
	{"Rodeo",                         225.10, -1501.90,   -89.00,   334.50, -1369.60,   110.90},
	{"Rodeo",                         334.50, -1501.90,   -89.00,   422.60, -1406.00,   110.90},
	{"Rodeo",                         312.80, -1684.60,   -89.00,   422.60, -1501.90,   110.90},
	{"Rodeo",                         422.60, -1684.60,   -89.00,   558.00, -1570.20,   110.90},
	{"Rodeo",                         558.00, -1684.60,   -89.00,   647.50, -1384.90,   110.90},
	{"Rodeo",                         466.20, -1570.20,   -89.00,   558.00, -1385.00,   110.90},
	{"Rodeo",                         422.60, -1570.20,   -89.00,   466.20, -1406.00,   110.90},
	{"Rodeo",                         466.20, -1385.00,   -89.00,   647.50, -1235.00,   110.90},
	{"Rodeo",                         334.50, -1406.00,   -89.00,   466.20, -1292.00,   110.90},
	{"Royal Casino",                 2087.30,  1383.20,   -89.00,  2437.30,  1543.20,   110.90},
	{"San Andreas Sound",            2450.30,   385.50,  -100.00,  2759.20,   562.30,   200.00},
	{"Santa Flora",                 -2741.00,   458.40,    -7.60, -2533.00,   793.40,   200.00},
	{"Santa Maria Beach",             342.60, -2173.20,   -89.00,   647.70, -1684.60,   110.90},
	{"Santa Maria Beach",              72.60, -2173.20,   -89.00,   342.60, -1684.60,   110.90},
	{"Shady Cabin",                 -1632.80, -2263.40,    -3.00, -1601.30, -2231.70,   200.00},
	{"Shady Creeks",                -1820.60, -2643.60,    -8.00, -1226.70, -1771.60,   200.00},
	{"Shady Creeks",                -2030.10, -2174.80,    -6.10, -1820.60, -1771.60,   200.00},
	{"Sobell Rail Yards",            2749.90,  1548.90,   -89.00,  2923.30,  1937.20,   110.90},
	{"Spinybed",                     2121.40,  2663.10,   -89.00,  2498.20,  2861.50,   110.90},
	{"Starfish Casino",              2437.30,  1783.20,   -89.00,  2685.10,  2012.10,   110.90},
	{"Starfish Casino",              2437.30,  1858.10,   -39.00,  2495.00,  1970.80,    60.90},
	{"Starfish Casino",              2162.30,  1883.20,   -89.00,  2437.30,  2012.10,   110.90},
	{"Temple",                       1252.30, -1130.80,   -89.00,  1378.30, -1026.30,   110.90},
	{"Temple",                       1252.30, -1026.30,   -89.00,  1391.00,  -926.90,   110.90},
	{"Temple",                       1252.30,  -926.90,   -89.00,  1357.00,  -910.10,   110.90},
	{"Temple",                        952.60, -1130.80,   -89.00,  1096.40,  -937.10,   110.90},
	{"Temple",                       1096.40, -1130.80,   -89.00,  1252.30, -1026.30,   110.90},
	{"Temple",                       1096.40, -1026.30,   -89.00,  1252.30,  -910.10,   110.90},
	{"The Camel's Toe",              2087.30,  1203.20,   -89.00,  2640.40,  1383.20,   110.90},
	{"The Clown's Pocket",           2162.30,  1783.20,   -89.00,  2437.30,  1883.20,   110.90},
	{"The Emerald Isle",             2011.90,  2202.70,   -89.00,  2237.40,  2508.20,   110.90},
	{"The Farm",                    -1209.60, -1317.10,   114.90,  -908.10,  -787.30,   251.90},
	{"The Four Dragons Casino",      1817.30,   863.20,   -89.00,  2027.30,  1083.20,   110.90},
	{"The High Roller",              1817.30,  1283.20,   -89.00,  2027.30,  1469.20,   110.90},
	{"The Mako Span",                1664.60,   401.70,     0.00,  1785.10,   567.20,   200.00},
	{"The Panopticon",               -947.90,  -304.30,    -1.10,  -319.60,   327.00,   200.00},
	{"The Pink Swan",                1817.30,  1083.20,   -89.00,  2027.30,  1283.20,   110.90},
	{"The Sherman Dam",              -968.70,  1929.40,    -3.00,  -481.10,  2155.20,   200.00},
	{"The Strip",                    2027.40,   863.20,   -89.00,  2087.30,  1703.20,   110.90},
	{"The Strip",                    2106.70,  1863.20,   -89.00,  2162.30,  2202.70,   110.90},
	{"The Strip",                    2027.40,  1783.20,   -89.00,  2162.30,  1863.20,   110.90},
	{"The Strip",                    2027.40,  1703.20,   -89.00,  2137.40,  1783.20,   110.90},
	{"The Visage",                   1817.30,  1863.20,   -89.00,  2106.70,  2011.80,   110.90},
	{"The Visage",                   1817.30,  1703.20,   -89.00,  2027.40,  1863.20,   110.90},
	{"Unity Station",                1692.60, -1971.80,   -20.40,  1812.60, -1932.80,    79.50},
	{"Valle Ocultado",               -936.60,  2611.40,     2.00,  -715.90,  2847.90,   200.00},
	{"Verdant Bluffs",                930.20, -2488.40,   -89.00,  1249.60, -2006.70,   110.90},
	{"Verdant Bluffs",               1073.20, -2006.70,   -89.00,  1249.60, -1842.20,   110.90},
	{"Verdant Bluffs",               1249.60, -2179.20,   -89.00,  1692.60, -1842.20,   110.90},
	{"Verdant Meadows",                37.00,  2337.10,    -3.00,   435.90,  2677.90,   200.00},
	{"Verona Beach",                  647.70, -2173.20,   -89.00,   930.20, -1804.20,   110.90},
	{"Verona Beach",                  930.20, -2006.70,   -89.00,  1073.20, -1804.20,   110.90},
	{"Verona Beach",                  851.40, -1804.20,   -89.00,  1046.10, -1577.50,   110.90},
	{"Verona Beach",                 1161.50, -1722.20,   -89.00,  1323.90, -1577.50,   110.90},
	{"Verona Beach",                 1046.10, -1722.20,   -89.00,  1161.50, -1577.50,   110.90},
	{"Vinewood",                      787.40, -1310.20,   -89.00,   952.60, -1130.80,   110.90},
	{"Vinewood",                      787.40, -1130.80,   -89.00,   952.60,  -954.60,   110.90},
	{"Vinewood",                      647.50, -1227.20,   -89.00,   787.40, -1118.20,   110.90},
	{"Vinewood",                      647.70, -1416.20,   -89.00,   787.40, -1227.20,   110.90},
	{"Whitewood Estates",             883.30,  1726.20,   -89.00,  1098.30,  2507.20,   110.90},
	{"Whitewood Estates",            1098.30,  1726.20,   -89.00,  1197.30,  2243.20,   110.90},
	{"Willowfield",                  1970.60, -2179.20,   -89.00,  2089.00, -1852.80,   110.90},
	{"Willowfield",                  2089.00, -2235.80,   -89.00,  2201.80, -1989.90,   110.90},
	{"Willowfield",                  2089.00, -1989.90,   -89.00,  2324.00, -1852.80,   110.90},
	{"Willowfield",                  2201.80, -2095.00,   -89.00,  2324.00, -1989.90,   110.90},
	{"Willowfield",                  2541.70, -1941.40,   -89.00,  2703.50, -1852.80,   110.90},
	{"Willowfield",                  2324.00, -2059.20,   -89.00,  2541.70, -1852.80,   110.90},
	{"Willowfield",                  2541.70, -2059.20,   -89.00,  2703.50, -1941.40,   110.90},
	{"Yellow Bell Station",          1377.40,  2600.40,   -21.90,  1492.40,  2687.30,    78.00}
};
new g_Cities[][e_ZONEINFO] =
{
	// Main Zones
	{"Los Santos",                     44.60, -2892.90,  -242.90,  2997.00,  -768.00,   900.00},
	{"Las Venturas",                  869.40,   596.30,  -242.90,  2997.00,  2993.80,   900.00},
	{"Bone County",                  -480.50,   596.30,  -242.90,   869.40,  2993.80,   900.00},
	{"Tierra Robada",               -2997.40,  1659.60,  -242.90,  -480.50,  2993.80,   900.00},
	{"Tierra Robada",               -1213.90,   596.30,  -242.90,  -480.50,  1659.60,   900.00},
	{"San Fierro",                  -2997.40, -1115.50,  -242.90, -1213.90,  1659.60,   900.00},
	{"Red County",                  -1213.90,  -768.00,  -242.90,  2997.00,   596.30,   900.00},
	{"Flint County",                -1213.90, -2892.90,  -242.90,    44.60,  -768.00,   900.00},
	{"Whetstone",                   -2997.40, -2892.90,  -242.90, -1213.90, -1115.50,   900.00}
};

/* Rangos Policias */
enum enum_POLICE_SHOP_WEAPONS
{
	police_shop_RANK,
	police_shop_WEAPON_ID,
	police_shop_WEAPON_PRICE
};
new POLICE_SHOP_WEAPONS[][enum_POLICE_SHOP_WEAPONS] =
{
	//cadete
	{1, 3, 0},
	{1, 22, 500},
	{1, 23, 600},
	//oficial
	{2, 25, 1500},
	{2, 28, 1200},
	{2, 32, 1200},
	//cabo
	{3, 24, 3500},
	{3, 29, 3200},
	//sargento
	{4, 30, 8500},
	{4, 31, 8500},
	{4, 33, 8000},
	//comisario
	{5, 27, 10500},
	{5, 8, 5000},
	{5, 34, 16500}
};


enum enum_POLICE_SKINS
{
	police_skin_TYPE,
	police_skin_SKIN,
	police_skin_RANK
};
new POLICE_SKINS[][enum_POLICE_SKINS] =
{
	//rango cadete
	{SEX_MALE, 71, 1},
	{SEX_FEMALE, 308, 1},
	//rango oficial
	{SEX_MALE, 311, 2},
	{SEX_FEMALE, 309, 2},
	//rango cabo
	{SEX_MALE, 300, 3},
	{SEX_FEMALE, 306, 3},
	//rango sargento
	{SEX_MALE, 285, 4},
	{SEX_FEMALE, 285, 4},
	//rango comisario
	{SEX_MALE, 286, 5},
	{SEX_FEMALE, 211, 5},
	//rango delegado
	{SEX_MALE, 165, 6},
	{SEX_FEMALE, 141, 6}
};

new POLICE_RANKS[][] =
{
	"Civil",
	"Cadete",	//1
	"Oficial",	//2
	"Cabo",	//3
	"Sargento",	//4
	"Comisario",	//5
	"Delegado"
};

enum enum_POLICE_GARAGE_DOORS
{
	police_gdoor_MODELID,
	Float:police_gdoor_CLOSED_X,
	Float:police_gdoor_CLOSED_Y,
	Float:police_gdoor_CLOSED_Z,
	Float:police_gdoor_CLOSED_RX,
	Float:police_gdoor_CLOSED_RY,
	Float:police_gdoor_CLOSED_RZ,
	Float:police_gdoor_OPENED_X,
	Float:police_gdoor_OPENED_Y,
	Float:police_gdoor_OPENED_Z,
	Float:police_gdoor_OPENED_RX,
	Float:police_gdoor_OPENED_RY,
	Float:police_gdoor_OPENED_RZ,
	Float:police_gdoor_MOVE_SPEED,
	bool:police_gdoor_CLOSING,
	police_gdoor_OBJECT_ID,
	police_gdoor_TIMER
};
new POLICE_GARAGE_DOORS[][enum_POLICE_GARAGE_DOORS] =
{
	{3055, 1588.48853, -1637.85852, 14.57500, 0.0, 0.0, 0.0, 1588.48853, -1637.85852, 16.45880, 90.0, 0.0, 0.0, 1.3, false, INVALID_STREAMER_ID, -1},
	{3055, 2294.04102, 2498.81396, 4.47113,   0.00000, 0.00000, 90.00000, 2294.0410, 2498.8140, 9.0059, 0.0, 0.0, 90.0, 1.6, false, INVALID_STREAMER_ID, -1},
	{3055, 2335.13086, 2443.66895, 6.97370,   0.00000, 0.00000, 60.00000, 2335.1309, 2443.6689, 11.6876, 0.0, 0.0, 60.0, 1.6, false, INVALID_STREAMER_ID, -1},
	{10184, -1631.69556, 688.56641, 8.70960,   0.00000, 0.00000, 90.00000, -1631.6956, 688.5664, 13.2064, 0.0, 0.0, 90.0, 1.6, false, INVALID_STREAMER_ID, -1}
};

enum enum_POLICE_DOORS
{
	police_door_MODELID,
	Float:police_door_X,
	Float:police_door_Y,
	Float:police_door_Z,
	Float:police_door_RZ,
	police_door_INTERIOR,
	police_door_WORLD,
	bool:police_door_CLOSED,
	police_door_OBJECT_ID,
	police_door_TIMER
};
new POLICE_DOORS[][enum_POLICE_DOORS] =
{
	{1495, 1467.656005, -1720.702148, 1478.735961, 0.0, 20, 0, true, INVALID_STREAMER_ID, -1},//lspd
	{1495, 1467.676025, -1705.339843, 1478.735961, 0.0, 20, 0, true, INVALID_STREAMER_ID, -1}
};


/* SYSTEM - PROPERTIES */
#define MAX_PROPERTIES	2000
enum Property_Info_Enum
{
	property_VALID,
	property_ID,
	Float:property_EXT_X,
	Float:property_EXT_Y,
	Float:property_EXT_Z,
	Float:property_EXT_ANGLE,
	property_EXT_INTERIOR,
	property_EXT_FREEZE,
	property_ID_INTERIOR,

	bool:property_SOLD,
	bool:property_CREW,
	property_OWNER_ID,
	property_CREW_ID,
	property_NAME[24],
	property_PRICE,
	property_LEVEL,
	property_EXTRA,
	property_TYPE,

	Text3D:property_EXT_LABEL_ID,
	Text3D:property_INT_LABEL_ID,
	property_EXT_PICKUP_ID,
	property_INT_PICKUP_ID,

	property_PRICE_BASE
};
new PROPERTY_INFO[MAX_PROPERTIES][Property_Info_Enum];


/* PROPERTY CONSTRUCTOR */
new TOTAL_PROPERTIES_LOADED;
enum PROPERTY_INTERIOR_ENUM
{
	property_creator_LEVEL,
	property_creator_PRICE,
	Float:property_INT_X,
	Float:property_INT_Y,
	Float:property_INT_Z,
	Float:property_INT_ANGLE,
	property_INT_INTERIOR,
	bool:property_INT_FREEZE,
	property_creator_TYPE,
};
new PROPERTY_INTERIORS[][PROPERTY_INTERIOR_ENUM] =
{
	{6, 180000, 140.249008, 1366.197509, 1083.859375, 0.0, 5, false, 0},
	{6, 160000, 2324.530029, -1149.540039, 1050.710083, 0.0, 12, false, 0},
	{6, 270000, 225.679992, 1021.450012, 1084.017700, 0.0, 7, false, 0},
	{6, 190000, 234.190002, 1063.729980, 1084.212280, 0.0, 6, false, 0},
	{6, 120000, 226.300003, 1114.239990, 1080.992919, 270.0, 5, false, 0},
	{6, 180000, 2317.889892, -1026.760009, 1050.217773, 0.0, 9, false, 0},
	{6, 120000, 2495.979980, -1692.079956, 1014.742187, 180.0, 3, false, 0},
	{6, 90000,  2196.626464, -1204.321411, 1049.023437, 90.0, 6, false, 0},
	{6, 105000, 2270.143554, -1210.490600, 1047.562500, 90.0, 10, false, 0},
	{4, 90000,  2365.199951, -1135.595825, 1050.882568, 0.0, 8, false, 0},
	{3, 75000,  2237.590087, -1081.640014, 1049.023437, 0.0, 2, false, 0},
	{4, 65000,  2468.840087, -1698.239990, 1013.507812, 90.0, 2, false, 0},
	{3, 45000,  2282.928955, -1140.004516, 1050.898437, 0.0, 11, false, 0},
	{4, 50000,  2308.775878, -1212.731689, 1049.023437, 0.0, 6, false, 0},
	{6, 135000, 2233.681396, -1114.973510, 1050.882812, 0.0, 5, false, 0},
	{6, 230000, 2218.162597, -1076.148315, 1050.484375, 90.0, 1, false, 0},
	{6, 220000, 266.654327, 304.961791, 999.148437, 270.0, 2, false, 0},
	{6, 30000,  243.720001, 304.910003, 999.148437, 270.0, 1, false, 0},
	{6, 65000,  2259.440673, -1135.905883, 1050.640258, 270.0, 10, false, 0},
	{12, 3000000, 1260.910034, -785.320068, 1091.906250, 280.0, 5, false, 0},
	{5, 40000, 2523.960000, -1544.450000, 2024.760000, 280.0, 1, true, 2},
	{5, 150000, 2352.1003, -1115.6572, 1030.6010, 358.4842, 1, true, 4},
	{5, 140000, 2403.7600, -1107.2654, 1030.6010, 177.3992, 1, true, 4},
	{7, 1000000,  1403.6003, -20.9603, 1000.9092, 88.7952, 1, true, 0},
	{4, 570500,  1056.4907, -1755.1863, 535.5806, 181.1608, 1, true, 0}

};

enum PLAYER_PROPERTY_CONSTRUCTOR_ENU
{
	bool:player_property_creator_ENABLED,
	player_property_creator_INTERIO,
	Float:player_property_creator_EXT_X,
	Float:player_property_creator_EXT_Y,
	Float:player_property_creator_EXT_Z,
	Float:player_property_creator_EXT_ANG,
	player_property_creator_EXT_INT
};
new PLAYER_PROPERTY_CONSTRUCTOR[MAX_PLAYERS][PLAYER_PROPERTY_CONSTRUCTOR_ENU];

//Taxis
enum TAXI_METER_VEHICLE_Info
{
	bool:veh_taxi_meter_ENABLED,
	veh_taxi_meter_PRICE,
	veh_taxi_meter_PAYMENT,
	Float:veh_taxi_meter_OLD_X,
	Float:veh_taxi_meter_OLD_Y,
	Float:veh_taxi_meter_OLD_Z,
	Float:veh_taxi_meter_DISTANCE,
	veh_taxi_meter_TIMER
};
new TAXI_METER_VEHICLE[MAX_VEHICLES][TAXI_METER_VEHICLE_Info];


// Grua
new Float:CRANE_POINTS[][] =
{
	{-0.6643,-301.1001,5.7999,269.8946},
	{-1.2499,-308.1924,5.8026,269.8858},
	{-1.1510,-315.1754,5.8047,269.6207},
	{-0.9605,-322.2884,5.8047,269.8277},
	{-1.5604,-329.3277,5.8047,269.7875},
	{-1.0681,-336.4353,5.8046,269.8661},
	{-0.6031,-343.4990,5.8047,269.4760},
	{-1.1665,-350.4567,5.8046,270.0562},
	{-0.9453,-357.5758,5.8047,269.8594},
	{-1.4020,-364.6235,5.8047,269.4049},
	{0.2731,-376.7908,5.8047,179.5663},
	{-6.4354,-376.7790,5.8047,180.3590},
	{-13.0746,-376.8425,5.8047,180.5696},
	{-19.8726,-376.3349,5.8046,179.8614},
	{-26.4464,-376.6240,5.8047,180.3014},
	{-33.1569,-376.8195,5.8046,180.6158},
	{-39.7585,-376.5342,5.8046,180.3691},
	{-46.5218,-376.7277,5.8047,180.2662},
	{-53.1534,-376.9861,5.8048,180.0664},
	{-59.9191,-377.1908,5.8046,180.1547},
	{-66.5384,-377.2409,5.8047,179.8638}
};

//Pizzero
new Float:PIZZA_DELIVERY_POINT[][] =
{
	{-1363.1888, -488.3995, 15.5443, 267.344024 },
	{1579.8773, 1187.3395, 12.1816, 174.783370  },
	{404.0033, 2454.5283, 17.4222, 179.8466 	}
};

enum PIZZA_VEHICLE_Info
{
	bool:pizza_vehicle_STARTED,
	pizza_vehicle_DRIVER_AID,
	pizza_vehicle_PIZZAS,
	pizza_vehicle_PIZZA_POINT,
	bool:pizza_vehicle_PIZZA_POINT_DELI
};
new PIZZA_VEHICLE[MAX_VEHICLES][PIZZA_VEHICLE_Info];

//Camioneros
enum TRUCK_VEHICLE_Info
{
	bool:truck_vehicle_LOADED,
	bool:truck_vehicle_LOADING,
	bool:truck_vehicle_UNLOADING,
	bool:truck_vehicle_DELIVERED,
	truck_vehicle_DRIVER_USER_ID,
	truck_vehicle_POINT,
};
new TRUCK_VEHICLE[MAX_VEHICLES][TRUCK_VEHICLE_Info];

enum Truck_Content_Info
{
	truck_content_EXP,
	truck_content_NAME[64],
	truck_content_MONEY,
	truck_content_PIEZAS,
	truck_content_SEMILLAS,
	truck_content_MEDICAMENTOS,
	truck_content_WOOD,
	truck_content_METAL,
	Float:truck_content_X,
	Float:truck_content_Y,
	Float:truck_content_Z
};
new Truck_Contents[][Truck_Content_Info] =
{
	{0, "Semillas (+2 semillas de marihuana, +1 medicamento)", 800, 0, 2, 0, 0, 0, 2536.8193, -1494.4299, 23.7595},//medio
	{5, "Repuestos de mecánico (+1 repuesto)", 700, 1, 0, 0, 0, 0, 2507.6572, -1519.0969, 23.6646},//medio
	{15, "Madera (+1 pieza de madera)", 1300, 0, 0, 0, 1, 0, 2361.3425, -648.4427, 127.7521},//lejos
	{15, "Piezas  (+1 pieza de arma)", 1500, 0, 0, 0, 0, 1, 93.3411, -199.7184, 1.2080},//muy lejos
	{100, "Paquetes de piezas (+5 piezas de Arma)", 3000, 0, 0, 0, 0, 5, 93.3411, -199.7184, 1.2080}//muy lejos
};

/* LENADOR */
enum
{
	LUMBER_TREE_STATE_NORMAL,
	LUMBER_TREE_STATE_CUTTING,
	LUMBER_TREE_STATE_CUTTED
}
enum LUMBER_TREES_Info
{
	lumber_tree_MODELID,
	Float:lumber_tree_X,
	Float:lumber_tree_Y,
	Float:lumber_tree_Z,
	Float:lumber_tree_RX,
	Float:lumber_tree_RY,
	Float:lumber_tree_RZ,
	lumber_tree_OBJECT_ID,
	Text3D:lumber_tree_LABEL,
	lumber_tree_STATE,
	lumber_tree_GROW_TIMER,
	lumber_tree_GROW_COUNTER
};
new LUMBER_TREES[][LUMBER_TREES_Info] =
{
	{657, 2336.76978, -690.42023, 131.81311,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, 2310.15454, -657.45282, 129.66843,   0.00000, 0.00000, 162.76967, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, 2317.49512, -697.07458, 130.19447,   0.00000, 0.00000, 322.30685, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, 2312.51489, -634.73865, 132.53239,   0.00000, 0.00000, 170.76399, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, 2328.51318, -616.97058, 129.00046,   0.00000, 0.00000, 170.76399, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, 2356.38867, -691.63892, 130.99898,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, 2323.05225, -673.06274, 129.98323,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, 2288.74268, -645.76337, 132.42729,   0.00000, 0.00000, 215.58604, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1}
};

/* Basurero */

#define MAX_ROUTES	5
#define MAX_OBJECTS_PER_ROUTE	20

enum Trash_Object_Info
{
	bool:trash_route_VALID,
	trash_route_OBJECTS,
	Float:trash_route_DISTANCE,
	trash_route_MONEY,
	trash_object_MODELID[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_X[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_Y[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_Z[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_RX[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_RY[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_RZ[MAX_OBJECTS_PER_ROUTE]
};
new TRASH_OBJECTS[MAX_ROUTES][Trash_Object_Info];
new TRASH_PLAYER_OBJECTS[MAX_PLAYERS][MAX_OBJECTS_PER_ROUTE];

enum TRASH_VEHICLES_INFO
{
	bool:trash_vehicle_JOB_STARTED,
	trash_vehicle_ROUTE,
	trash_vehicle_CP,
	trash_vehicle_DRIVER_ID,
	trash_vehicle_PASSENGER_ID
};
new TRASH_VEHICLES[MAX_VEHICLES][TRASH_VEHICLES_INFO];

/* SYSTEM - PLAYERTEMP */
enum
{
	PED_STOPPED,
	PED_WALKING,
	PED_RUNNING,
	PED_SPRINTING,
	PED_BYCICLING
};

enum Temp_Enum
{
	pt_GAME_STATE,
	pt_NAME[24],
	pt_IP[16],
	bool:pt_USER_EXIT, // Esta registrado?
	bool:pt_USER_LOGGED, // 1 = ha cargado todos los datos del user
	pt_TIME_PLAYING, // tiempo jugando en segundos sesion actual
	pt_ANTIFLOOD_COMMANDS,
	pt_ANTIFLOOD_TALK,
	pt_TIMERS[MAX_TIMERS_PER_PLAYER],
	bool:pt_USER_VALID_NAME,
	pt_RP_NAME[24],
	pt_BAD_LOGIN_ATTEMP,
	pt_DOUBT_CHANNEL_TIME,
	pt_CAMION_TIME_KICK,
	pt_DOUBT_CHANNEL_MESSAGE[128],
	pt_LAST_PICKUP_ID,
	pt_HOSPITAL,
	Float:pt_HOSPITAL_LIFE,
	pt_TIME_PASSED_LAST_REP,
	pt_INTERIOR_INDEX,
	pt_CLOTHING_SHOP,
	pt_CLOTHING_SHOP_SELECTED_SKIN,
	bool:pt_SELECT_TEXTDRAW,
	bool:pt_HUD_TEXTDRAWS, // Barra de hambre y sed
	pt_PED_STATE,
	pt_HUNGRY_THIRST_DISCOUNT_TIME,
	pt_HUNGRY_THIRST_TIME,
	pt_CONSUMIR_MEDICINE_TIME,
	pt_CONSUMIR_MARIHUANA_TIME,
	pt_CONSUMIR_CRACK_TIME,
	pt_PAYDAY_TIME,
	pt_PP,
	bool:pt_THIRST_MESSAGE,
	bool:pt_HUNGRY_MESSAGE,
	bool:pt_SHOW_IPHONE,
	bool:pt_SHOW_IPHONE_HOUR,
	bool:pt_PLAYER_IN_ROB,
	bool:pt_TOYS_SHOP,
	pt_TOYS_SHOP_TYPE,
	pt_TOYS_SHOP_TOY_SELECTED,
	pt_SELECTED_TOY_SLOT,
	pt_SELECT_BANK_TRANSFER_ACCOUNT,
	bool:pt_PLAYER_IN_ATM,
	pt_POCKET_SLOT_SELECTED,
	bool:pt_PHONE_COMMANDS_MESSAGE,
	bool:pt_PLAYER_IN_CALL,
	pt_PLAYER_PHONE_CALL_STATE,
	pt_PLAYER_PHONE_CALL_PLAYERID,
	pt_PLAYER_LISTITEM[MAX_LISTITEMS],
	pt_PLAYER_PHONE_BOOK_ADD_NUMBER,
	pt_PLAYER_PHONE_BOOK_SELECTED,
	pt_PLAYER_PHONE_NUMBER_SELECTED,
	pt_BUY_HOUSE_INDEX,
	bool:pt_PLAYER_FINISH_HOSPITAL,
	pt_ANTIFLOOD_KNOCK_PROPERTY,
	pt_KNOCK_PLAYER_ID,
	pt_GPS_CHECKPOINT,
	pt_GPS_PLAYER_SELECTED,
	pt_PLAYER_GPS_SELECTED_PROPERTY[MAX_SU_PROPERTIES],
	pt_PLAYER_PROPERTY_SELECTED,
	pt_CJ_WARNINGS,
	bool:pt_MUSIC_FOR_PROPERTY,
	bool:pt_MUSIC_FOR_VEHICLE,
	pt_FUEL_DOWN_TIME,
	pt_SELECTED_BUY_VEHICLE_ID,
	pt_LAST_VEHICLE_ID,
	pt_NOTARY_OPTION, //0 al banco, 1 a persona
	pt_NOTARY_PRICE,
	pt_NOTARY_TO_PLAYER,
	pt_PLAYER_VEHICLE_SELECTED,
	bool:pt_TAXI_METER_ENABLED,
	bool:pt_WANT_TAXI,
	bool:pt_WANT_MEDIC,
	Float:pt_TRUCK_LOADING_VALUE,
	pt_TRUCK_CHECKPOINT,
	pt_TUNING_SELECTED_PART[24],
	pt_TUNING_SELECTED_COMPONENT[24],
	pt_TUNING_SELECTED_COMPONENT_ID,
	pt_TUNING_SELECTED_PIECES,
	pt_PAINTJOB_SELECTED_ID,
	pt_WORKING_IN,
	pt_SELECTED_MECHANIC_VEHICLE_ID,
	pt_MECHANIC_COLOR_SLOT,
	bool:pt_WANT_MECHANIC,
	pt_HARVERT_CHECKPOINT,
	pt_HARVERT_PROCCESS,
	pt_FUMIGATOR_CHECKPOINT,
	pt_FUMIGATOR_PROCCESS,
	pt_PIZZA_CHECKPOINT,
	bool:pt_TRASH_DRIVER,
	bool:pt_TRASH_PASSENGER,
	pt_TRASH_VEHICLE_ID,
	pt_TRASH_CHECKPOINT,
	Float:pt_RECYCLE_BIN_VALUE,
	bool:pt_PLAYER_CARRYING_TREE,
	pt_PLAYER_LUMBERJACK_TREE,
	Float:pt_PLAYER_LUMBERJACK_TREE_PROG,
	pt_LUMBERJACK_CHECKPOINT,
	pt_LAST_GIVE_MONEY_TIME,
	pt_LAST_GIVE_SD_TIME,
	pt_SELECTED_BUY_SEED_ID,
	Float:pt_PLANTING_PROGRESS,
	bool:pt_PLANTING,
	pt_PLANTING_PLANT_SELECTED,
	bool:pt_GPS_MAP,
	pt_PROPERTY_INDEX,
	bool:pt_KICKED,
	pt_SELECTED_DIALOG_WEAPON_SLOT,
	pt_TRICK_SELLER_PID,
	pt_TRICK_SELLER_AID,
	pt_TRICK_SELLER_EXTRA,
	pt_TRICK_PRICE,
	pt_TRICK_TIME,
	pt_DIALOG_BOT_VEHICLE,
	pt_DIALOG_BOT_VEHICLE_BOOT_SLOT,
	pt_POLICE_RADIO,
	bool:pt_CUFFING,
	bool:pt_CUFFED,
	bool:pt_TEASERING,
	pt_ENTER_JAIL_TIME,
	pt_DIALOG_DB_LIMIT,
	pt_DIALOG_DB_PAGE,
	pt_SELECTED_DB_AC_ID,
	bool:pt_POLICE_CALL_NAME,
	bool:pt_POLICE_CALL_DESCRIPTION,
	pt_POLICE_CALL_NAME_STR[24],
	pt_SAVE_ACCOUNT_TIME,
	pt_TIME_TO_HEAL,
	pt_ANTIFLOOD_REPORT,
	bool:pt_SEE_ACMD_LOG,
	pt_LAST_CHEAT_DETECTED_TIME,
	bool:pt_SEE_AC_LOG,
	pt_ANTIFLOOD_DEATH,
	pt_ANTIFLOOD_STATE,
	pt_ANTIFLOOD_ENTER_VEHICLE,
	pt_SELECTED_AC_LISTITEM,
	pt_ADMIN_PM_PID,
	pt_ADMIN_PM_AID,
	pt_ADMIN_PM_TIME,
	pt_MECHANIC_PID,
	pt_MECHANIC_AID,
	pt_MECHANIC_PRICE,
	pt_MECHANIC_TEXT[64],
	pt_MECHANIC_TYPE,
	pt_MECHANIC_EXTRA,
	pt_MECHANIC_VEHICLE_ID,
	pt_MECHANIC_PIECES,
	pt_MECHANIC_TIME,
	pt_MECHANIC_SELECTED_COLOR,
	bool:pt_SHOP,
	pt_SHOP_STATE,
	pt_SHOP_ARTICLE_ID[6],
	pt_SHOP_SELECTED_ARTICLE_ID,
	bool:pt_SHOP_COME_FROM_MY_ADS,
	pt_ANTIFLOOD_SHOP,
	pt_SHOP_ADD_TYPE,
	pt_SHOP_ADD_TEXT[24],
	pt_SHOP_ADD_MODELID,
	pt_SHOP_ADD_VCOL1,
	pt_SHOP_ADD_VCOL2,
	pt_VIRTUAL_WORLD,
	bool:pt_PLAYER_SPECTATE,
	pt_LAST_BM_BUY,
	pt_PIZZA_PROCCESS,
	pt_DELIVERED_PIZZAS,
	pt_LAST_PLANT_TIME,
	pt_LAST_SET_WANTED_LEVEL,
	Float:pt_INJURED_POS[4],
	pt_CREATE_CREW_NAME[32],
	pt_CREATE_CREW_COLOR,
	pt_CREW_INVITE_PID,
	pt_CREW_INVITE_AID,
	pt_CREW_INVITE_INFO[4],
	pt_CREW_SELECTED_RANK,
	pt_CREW_SELECTED_NEW_RANK,
	pt_LAST_TERRITORY,
	pt_PLAYER_TERRITORY_PRO,
	pt_PLAYER_COLOR,
	pt_LAST_GOT_CREW,
	pt_POLICE_PEN_PID,
	pt_POLICE_PEN_AID,
	pt_POLICE_PEN_IM,
	pt_POLICE_PEN_TIME,
	pt_DIALOG_ECO_SELECTED,
	pt_LAST_SU_CHECK,
	pt_PIVOT_OBJECT,
	pt_SELECT_TUNING_OBJECT,
	pt_TUNING_PICKUP,
	bool:pt_IN_TUNING_GARAGE,
	bool:pt_TUNING_GARAGE_SHOP,
	pt_TUNING_GARAGE_VEHICLEID,
	pt_TUNING_EDIT_SLOT,
	Float:pt_OLD_EDIT_VOBJECT_POS[6],
	pt_TUNING_EDIT_COLOR_SLOT,
	pt_COUNTRY_TYPE,
	pt_LAST_SHOT_TIME
};
new PLAYER_TEMP[MAX_PLAYERS][Temp_Enum]; // PT (PlayerTemp), variables que no van a ser guardadas en base de datos.

#define MAX_ADS_PER_PLAYER	3
enum
{
	PLAYER_SHOP_STATE_ALL,
	PLAYER_SHOP_STATE_AD,
	PLAYER_SHOP_STATE_MY_ADS
};

enum
{
	SHOP_ARTICLE_TYPE_PROPERTY,
	SHOP_ARTICLE_TYPE_VEHICLE,
	SHOP_ARTICLE_TYPE_OTHER
};

enum
{
	MECHANIC_OPTION_REPAIR,
	MECHANIC_OPTION_COLOR_1,
	MECHANIC_OPTION_COLOR_2,
	MECHANIC_OPTION_TUNING,
	MECHANIC_OPTION_PAINTJOB
};

//EnterExits
enum
{
	INTERIOR_NO_INFO,
	INTERIOR_GENERAL_HOSPITAL,
	INTERIOR_BINCO,
	INTERIOR_SUBURBAN,
	INTERIOR_PROLAPS,
	INTERIOR_DIDIER_SACHS,
	INTERIOR_VICTIM,
	INTERIOR_ZIP,
	INTERIOR_247,
	INTERIOR_PIZZA,
	INTERIOR_CLUCKIN_BELL,
	INTERIOR_BURGER_SHOT,
	INTERIOR_DONUT,
	INTERIOR_BAR,
	INTERIOR_CAFE,
	INTERIOR_TACO,
	INTERIOR_STEAK,
	INTERIOR_GYM_LS,
	INTERIOR_GYM_SF,
	INTERIOR_GYM_LV,
	INTERIOR_BANK_LS,
	INTERIOR_CITY_HALL_LS,
	INTERIOR_UNITY_STATION,
	INTERIOR_ARMY,
	INTERIOR_POLICE_LS,
	INTERIOR_POLICE_SF,
	INTERIOR_POLICE_LV,
	INTERIOR_ALHAMBRA,
	INTERIOR_POLICE_GARAGE,
	INTERIOR_HOSPITAL,
	INTERIOR_CLUB,
	INTERIOR_AEROPUERTO,
	INTERIOR_SALON,
	INTERIOR_FERRETERIA
};
enum Enter_Exits
{
	ee_ID,
	ee_NAME[32],

	ee_INTERIOR_TYPE,

	ee_INT_MAPICON,
	ee_INT_FREEZE,
	ee_INT_WORLD,
	ee_INT_INTERIOR,
	Float:ee_INT_X,
	Float:ee_INT_Y,
	Float:ee_INT_Z,
	Float:ee_INT_ANGLE,

	ee_EXT_MAPICON,
	ee_EXT_FREEZE,
	ee_EXT_WORLD,
	ee_EXT_INTERIOR,
	Float:ee_EXT_X,
	Float:ee_EXT_Y,
	Float:ee_EXT_Z,
	Float:ee_EXT_ANGLE,

	ee_TIME_OPEN,
	ee_TIME_CLOSE,

	ee_INT_MAPICON_ID,
	ee_EXT_MAPICON_ID,
	Text3D:ee_INT_LABEL_ID,
	Text3D:ee_EXT_LABEL_ID,


	ee_INT_PICKUP_ID,	/* No son pickups decorativos */
	ee_EXT_PICKUP_ID	/* Son pickups para identificar el id */
};

new ENTER_EXIT[][Enter_Exits] = // EE = EnterExits
{
	//{-1, "Hospital General", INTERIOR_GENERAL_HOSPITAL, -1, true, 0, 10, 1976.126342, 1163.504028, -5.208700, 90.0,		-1, false, 0, 0, 1172.832763, -1323.269531, 15.400051, 270.0, 0, 0,		-1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Binco", INTERIOR_BINCO, -1, false, 0, 15, 207.744949, -111.073318, 1005.132812, 0.0,	45, false, 0, 0, 2244.484863, -1665.223510, 15.476562, 0.0, 9, 20, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Binco", INTERIOR_BINCO, -1, false, 1, 15, 207.744949, -111.073318, 1005.132812, 0.0,	45, false, 0, 0, -2374.125976, 910.103271, 45.433864, 90.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Binco", INTERIOR_BINCO, -1, false, 2, 15, 207.744949, -111.073318, 1005.132812, 0.0,	45, false, 0, 0, 2101.902832, 2257.391845, 11.023437, 270.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Binco", INTERIOR_BINCO, -1, false, 3, 15, 207.744949, -111.073318, 1005.132812, 0.0,	45, false, 0, 0, 1656.993408, 1733.450195, 10.828111, 90.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "SubUrban", INTERIOR_SUBURBAN, -1, false, 0, 1, 203.906326, -50.494247, 1001.804687, 0.0,	45, false, 0, 0, 2112.835205, -1211.456665, 23.962865, 180.0, 9, 21, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "SubUrban", INTERIOR_SUBURBAN, -1, false, 1, 1, 203.906326, -50.494247, 1001.804687, 0.0,	45, false, 0, 0, -2490.140869, -29.123632, 25.617187, 90.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "SubUrban", INTERIOR_SUBURBAN, -1, false, 2, 1, 203.906326, -50.494247, 1001.804687, 0.0,	45, false, 0, 0, 2779.590087, 2453.658203, 11.062500, 136.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "ProLaps", INTERIOR_PROLAPS, -1, false, 0, 3, 206.995925, -140.021163, 1003.507812, 0.0,	45, false, 0, 0, 499.498168, -1360.616088, 16.368682, 340.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "ProLaps", INTERIOR_PROLAPS, -1, false, 1, 3, 206.995925, -140.021163, 1003.507812, 0.0,	45, false, 0, 0, 2825.891357, 2407.322265, 11.062500, 133.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Didier Sachs", INTERIOR_DIDIER_SACHS, -1, false, 0, 14, 204.348281, -168.678985, 1000.523437, 0.0,	45, false, 0, 0, 453.858032, -1478.098632, 30.813968, 111.110641, 8, 23, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Didier Sachs", INTERIOR_DIDIER_SACHS, -1, false, 1, 14, 204.348281, -168.678985, 1000.523437, 0.0,	-1, false, 0, 0, 1642.838012, -2284.760742, -1.195312, 270.0, 8, 23, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Victim", INTERIOR_VICTIM, -1, false, 0, 5, 227.350250, -8.188652, 1002.210937, 90.0,	45, false, 0, 0, 461.541320, -1500.892333, 31.049194, 98.0, 8, 21, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Victim", INTERIOR_VICTIM, -1, false, 1, 5, 227.350250, -8.188652, 1002.210937, 90.0,	45, false, 0, 0, -1694.747558, 951.613464, 24.890625, 135.0, 8, 21, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Victim", INTERIOR_VICTIM, -1, false, 2, 5, 227.350250, -8.188652, 1002.210937, 90.0,	45, false, 0, 0, 2802.926269, 2430.682861, 11.062500, 130.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "ZIP", INTERIOR_ZIP, -1, false, 0, 18, 161.401184, -96.887367, 1001.804687, 0.0,	45, false, 0, 0, 1456.611816, -1137.818969, 23.961400, 215.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "ZIP", INTERIOR_ZIP, -1, false, 1, 18, 161.401184, -96.887367, 1001.804687, 0.0,	45, false, 0, 0, -1882.421997, 866.394836, 35.171875, 138.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "ZIP", INTERIOR_ZIP, -1, false, 2, 18, 161.401184, -96.887367, 1001.804687, 0.0,	45, false, 0, 0, 2090.534667, 2224.481933, 11.023437, 180.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "ZIP", INTERIOR_ZIP, -1, false, 3, 18, 161.401184, -96.887367, 1001.804687, 0.0,	45, false, 0, 0, 2572.074218, 1904.711181, 11.023437, 180.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 0, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2194.734130, 1991.022216, 12.296875, 90.0,	0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 1, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -180.966003, 1034.823242, 19.742187, 90.0,	0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 2, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1352.314941, -1758.961425, 13.507812, 0.0,	0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 3, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1833.540771, -1842.542724, 13.578125, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 4, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2884.694335, 2453.865478, 11.068956, 225.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 5, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2097.616210, 2224.081298, 11.023437, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 6, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2247.650146, 2396.417236, 10.820312, 0.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 7, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1315.453247, -897.967102, 39.578125, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 8, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1000.317199, -919.933349, 42.328125, 105.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 9, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2452.572021, 2064.924316, 10.820312, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 10, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2546.502929, 1972.397338, 10.820312, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 11, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1937.592773, 2307.269042, 10.820312, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 12, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -1562.437744, -2733.189941, 48.743457, 234.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "24/7", INTERIOR_247, -1, false, 13, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -2442.718994, 755.316589, 35.171875, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Tienda", INTERIOR_247, -1, false, 14, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1693.9897,2208.9109,11.0692, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Tienda", INTERIOR_247, -1, false, 15, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -832.3333,1482.8275,18.3706, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Tienda", INTERIOR_247, -1, false, 16, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -857.9996,1535.4655,22.5870, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Tienda", INTERIOR_247, -1, false, 17, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -19.1584,1175.2258,19.5634, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Tienda", INTERIOR_247, -1, false, 18, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -1531.0189,2591.6567,55.8359, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Tienda", INTERIOR_247, -1, false, 19, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -1267.0712,2715.7310,50.2663, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Tienda", INTERIOR_247, -1, false, 20, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2490.0908,2064.8779,10.8203, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Tienda", INTERIOR_247, -1, false, 21, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -2431.9746,-183.0490,35.3125, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Tienda", INTERIOR_247, -1, false, 22, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -2510.8591,-49.9210,25.6834, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Tienda", INTERIOR_247, -1, false, 23, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -2510.8064,10.7304,25.7560, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Tienda", INTERIOR_247, -1, false, 24, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -282.9071,-2174.4768,28.6602, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Tienda", INTERIOR_247, -1, false, 25, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 561.9512,-1506.7164,14.5492, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Tienda", INTERIOR_247, -1, false, 26, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1104.8578,-1370.0316,13.9844, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Autoservicios", INTERIOR_247, -1, false, 27, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -1320.4709,2698.5972,50.2663, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Autoservicios", INTERIOR_247, -1, false, 28, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -792.0301,1627.8425,27.1563, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Autoservicios", INTERIOR_247, -1, false, 29, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 638.9690,1683.2715,7.1875, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Autoservicios", INTERIOR_247, -1, false, 30, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2150.6785,2733.8665,11.1763, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Autoservicios", INTERIOR_247, -1, false, 31, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2187.7109,2469.6414,11.2422, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Autoservicios", INTERIOR_247, -1, false, 32, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1599.1187,2221.8530,11.0625, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Autoservicios", INTERIOR_247, -1, false, 33, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2637.3228,1129.6781,11.1797, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Autoservicios", INTERIOR_247, -1, false, 34, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2117.5059,896.7790,11.1797, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Autoservicios", INTERIOR_247, -1, false, 35, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -1465.7489,1873.4229,32.6328, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Autoservicios", INTERIOR_247, -1, false, 36, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -2420.1565,969.7993,45.2969, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Autoservicios", INTERIOR_247, -1, false, 37, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -1676.1777,432.0349,7.1797, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Autoservicios", INTERIOR_247, -1, false, 38, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 661.0364,-573.4200,16.3359, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Autoservicios", INTERIOR_247, -1, false, 39, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1928.9801, -1776.5087, 13.5469, 271.1092, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 0, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2105.234619, -1806.479614, 13.554687, 90.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 1, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, -1721.211425, 1359.705932, 7.185316, 90.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 2, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2756.652099, 2477.132812, 11.062500, 135.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 3, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2083.380615, 2224.687988, 11.023437, 180.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 4, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2351.770996, 2533.328369, 10.820312, 180.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 5, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2638.568847, 1849.818481, 11.023437, 90.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 6, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 372.310729, -133.246292, 1001.492187, 0.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 7, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 375.114501, -117.272621, 1001.492187, 180.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 8, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2332.1233, 75.0558, 26.6210, 90.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 9, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 1367.4249, 248.2912, 19.5669, 180.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 10, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 203.4724, -201.9359, 1.5781, 180.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 0, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2419.926025, -1509.024780, 24.000000, 270.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 1, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2397.772949, -1898.847778, 13.546875, 0.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 2, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 928.553466, -1352.848876, 13.343750, 90.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 3, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2838.312011, 2407.552978, 11.068956, 225.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 4, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2101.901367, 2228.776855, 11.023437, 270.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 5, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2393.372070, 2041.856323, 10.820312, 0.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 6, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2638.423828, 1671.904296, 11.023437, 90.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 7, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, -1816.567382, 618.417419, 35.171875, 180.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 8, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, -2671.401611, 257.927551, 4.632812, 0.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 9, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 364.914093, -11.778851, 1001.851562, 0.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 10, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 368.652679, -4.492218, 1001.851562, 180.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 11, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, -2155.2222, -2460.3188, 30.8516, 180.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 12, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 172.7107,1176.7681,14.7578, 180.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 13, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, -1213.8391,1830.3751,41.9297, 180.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 0, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 810.715270, -1616.163330, 13.546875, 270.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 1, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 1199.272216, -918.372253, 43.121376, 180.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 2, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 2366.805419, 2071.106201, 10.820312, 90.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 3, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 2472.626464, 2034.173339, 11.062500, 90.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 4, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 1872.485351, 2071.812255, 11.062500, 270.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 5, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 2169.620117, 2795.799072, 10.820312, 270.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 6, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 1157.925659, 2072.159912, 11.062500, 270.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 7, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, -2356.003173, 1008.051147, 50.898437, 90.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 8, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, -2336.861816, -166.945022, 35.554687, 270.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 9, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, -1912.406860, 827.900634, 35.227863, 315.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Rusty Browns", INTERIOR_DONUT, -1, false, 0, 17, 377.1947,-193.3029,1000.6328,357.7353,	25, false, 0, 0, -143.9915, 1225.2164, 19.8992, 315.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Rusty Browns", INTERIOR_DONUT, -1, false, 1, 17, 377.1947,-193.3029,1000.6328,357.7353,	25, false, 0, 0, 475.8020, -1279.4025, 16.4826, 315.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Rusty Browns", INTERIOR_DONUT, -1, false, 2, 17, 377.1947,-193.3029,1000.6328,357.7353,	25, false, 0, 0, 1038.1555,-1340.3438,13.7404, 315.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Tuff Nut Donuts", INTERIOR_DONUT, -1, false, 3, 17, 377.1947,-193.3029,1000.6328,357.7353,	25, false, 0, 0, -2767.7153,788.7709,52.7813, 315.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Bar", INTERIOR_BAR, -1, false, 0, 11, 502.0464, -67.5653, 998.7578, 181.5667, 49, false, 0, 0, 2309.9417, -1643.6584 ,14.8270, 315.0, 20, 5, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Bar", INTERIOR_BAR, -1, false, 1, 11, 502.0464, -67.5653, 998.7578, 181.5667, 49, false, 0, 0, 2348.5298, -1373.0708, 24.3984, 315.0, 20, 5, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Bar", INTERIOR_BAR, -1, false, 2, 11, 502.0464, -67.5653, 998.7578, 181.5667, 49, false, 0, 0, -179.7251, 1087.4768, 19.7422, 315.0, 20, 5, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Bar", INTERIOR_BAR, -1, false, 3, 11, 502.0464, -67.5653, 998.7578, 181.5667, 49, false, 0, 0, 2441.0835, 2065.4829, 10.8203, 315.0, 20, 5, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Bar", INTERIOR_BAR, -1, false, 4, 11, 502.0464, -67.5653, 998.7578, 181.5667, 49, false, 0, 0, 681.5565, -473.8127, 16.5363, 315.0, 20, 5, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Bar", INTERIOR_BAR, -1, false, 5, 11, 502.0464, -67.5653, 998.7578, 181.5667, 49, false, 0, 0, -2242.2864, -88.2532, 35.3203, 315.0, 20, 5, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Bar", INTERIOR_BAR, -1, false, 6, 11, 502.0464, -67.5653, 998.7578, 181.5667, 49, false, 0, 0, -2103.8855, -2432.3594, 30.6250, 315.0, 20, 5, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Bar", INTERIOR_BAR, -1, false, 7, 18, -229.2923, 1401.2604, 27.7656, 267.3975, 49, false, 0, 0, -89.6057,1378.2021,10.4698, 315.0, 20, 5, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cafetería", INTERIOR_CAFE, -1, false, 0, 4, 460.5542, -88.6004, 999.5547, 91.3492, 16, false, 0, 0, 1244.7546,205.3190,19.6454, 315.0, 14, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cafetería", INTERIOR_CAFE, -1, false, 1, 4, 460.5542, -88.6004, 999.5547, 91.3492, 16, false, 0, 0, -187.6201,1210.7145,19.7053, 315.0, 14, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cafetería", INTERIOR_CAFE, -1, false, 2, 4, 460.5542, -88.6004, 999.5547, 91.3492, 16, false, 0, 0, -2157.9744,-2336.6213,30.6250, 315.0, 14, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "GYM Los Santos", INTERIOR_GYM_LS, -1, true, 0, 5, 772.2800, -5.1876, 1000.7286, 359.6141,	54, false, 0, 0, 2229.415000, -1721.970800, 13.568100, 180.0, 8, 24, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "GYM San Fierro", INTERIOR_GYM_SF, -1, true, 0, 6, 774.213989, -48.924297, 1000.585937, 90.0,	54, false, 0, 0, -2270.104700, -155.917800, 35.320300, 180.0, 8, 24, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "GYM Las Venturas", INTERIOR_GYM_LV, -1, true, 0, 7, 773.8987, -78.7267, 1000.6626, 354.7786, 54, false, 0, 0, 1968.908300, 2295.269000, 16.455900, 180.0, 8, 24, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Banco MTL", INTERIOR_BANK_LS, -1, true, 0, 1, 1904.3640, -3526.0986, 993.6496, 356.0006,	52, false, 0, 0, 1477.7253, -1010.5855, 26.8438, 178.4752, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Gobierno San Andreas", INTERIOR_CITY_HALL_LS, -1, true, 20, 20, 230.9811, 2348.4058, 1017.1257, 94.3882, 3, false, 0, 0, 1481.2369, -1772.1158, 18.7958, 357.1895, 6, 21, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Unity Station", INTERIOR_UNITY_STATION, -1, true, 0, 3, 1780.4526, -1884.7614, 1176.0859, 92.1209, -1, false, 0, 0, 1752.603881, -1894.155883, 13.557376, 270.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Los Santos Police Departament", INTERIOR_POLICE_LS, -1, true, 0, 20, 1478.5822, -1712.8932, 1479.7959, 91.4234, 30, false, 0, 0, 1153.8264, -1772.4121, 16.5992, 2.0992, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Cárcel", INTERIOR_POLICE_LS, -1, true, 0, 20, 1578.3816,-1776.7115,1434.9430, 88.6125, 30, true, 0, 20, 1468.3993, -1699.0769, 1479.7959, 169.1870, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Helipuerto LSPD", -1, -1, false, 0, 0, 1177.6747, -1788.4189, 33.9639, 88.6361, -1, false, 0, 0, 1139.3942, -1762.0176, 13.5956, 356.3432, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	// {-1, "Los Santos Police Departament", INTERIOR_POLICE_GARAGE, -1, true, 0, 20, 1456.1891, -1730.3164, 1479.7959, 251.6831, -1, false, 0, 0, 1110.1753, -1796.0734, 16.5938, 91.5450, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1}, // garaje lspd
	//{-1, "Policía San Fierro", INTERIOR_POLICE_SF, -1, false, 0, 10, 246.425857, 107.400123, 1003.218750, 0.0, 30, false, 0, 0, -1605.511840, 710.382507, 13.867187, 0.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	//{-1, "Policía Las Venturas", INTERIOR_POLICE_LV, -1, false, 0, 3, 238.758178, 138.726867, 1003.023437, 0.0, 30, false, 0, 0, 2287.059082, 2432.260742, 10.820312, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Club Alhambra", INTERIOR_ALHAMBRA, -1, false, 0, 17, 493.487731, -24.662528, 1000.679687, 0.0, 48, false, 0, 0, 1836.876586, -1682.407104, 13.329626, 90.0, 22, 8, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	//{-1, "Policía San Fierro", INTERIOR_POLICE_GARAGE, -1, false, 0, 10, 278.369232, 117.561325, 1004.617187, 90.0, -1, false, 0, 0, -1594.110107, 716.163024, -4.906250, 270.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1}, // garaje lspd
	//{-1, "Policía Las Venturas", INTERIOR_POLICE_GARAGE, -1, false, 0, 3, 231.671142, 181.048477, 1003.031250, 90.0, -1, false, 0, 0, 2282.221923, 2423.218505, 3.476562, 0.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1}, // garaje lspd
	{-1, "Hospital Central", INTERIOR_HOSPITAL, -1, true, 0, 3, 3911.8435, -679.1714, 102.6516, 179.3630, 22, false, 0, 0,	1172.832763, -1323.269531, 15.400051, 270.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Hospital County General", INTERIOR_HOSPITAL, -1, true, 1, 3, 3911.8435, -679.1714, 102.6516, 179.3630, 22, false, 0, 0, 2033.9872, -1402.9672, 17.2930, 352.1042, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Club", INTERIOR_CLUB, -1, false, 0, 3, 1212.160522, -26.097007, 1000.953125, 180.0, 21, false, 0, 0, 2421.5754, -1219.4316, 25.5493, 176.6281, 20, 8, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Aeropuerto Internacional", INTERIOR_AEROPUERTO, -1, true, 1, 1, 1656.7648, -2483.9507, 901.6032, 0.0,	5, false, 0, 0, 1642.8949, -2291.5054, -1.1953, 270.0, 3, 24, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Salón de eventos", INTERIOR_SALON, -1, true, 0, 1, 123.6889, 42.6960, 989.0859, 359.2520, 38, true, 0, 0, 1022.3706, -1121.6890, 23.8717,176.6276, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Club Nocturno", INTERIOR_SALON, -1, true, 0, 1, 1101.0646, 243.9033, 527.3792, 88.3857, 48, true, 0, 0, 940.1923, -1742.8501, 13.5469, 174.7475, 18, 8, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	//{-1, "Vivienda abandonada", INTERIOR_SALON, -1, true, 0, 1, 2258.6445, 800.5668, -79.4457,272.6942, 23, true, 0, 0, 2275.2058,-1785.6400,13.5469,82.9420, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Iglesia", INTERIOR_SALON, -1, true, 0, 1, -1944.7106, 1161.7504, 1380.6705, 178.3626, 40, true, 0, 0, 2233.7532, -1333.4017, 23.9816, 90.1468, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Ferretería", INTERIOR_FERRETERIA, -1, true, 1, 1, 2142.5952, -96.2293, 699.0078, 0.0,	7, false, 0, 0, 1081.2655, -1696.8483, 13.5469, 270.0, 6, 20, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Ferretería", INTERIOR_FERRETERIA, -1, true, 2, 1, 2142.5952, -96.2293, 699.0078, 0.0,	7, false, 0, 0, -2096.8628, 17.4574, 35.3203, 270.0, 6, 20, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Ferretería", INTERIOR_FERRETERIA, -1, true, 3, 1, 2142.5952, -96.2293, 699.0078, 0.0,	7, false, 0, 0, 2192.9978, 2792.5291, 10.8203, 2.5559, 6, 20, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Ferretería", INTERIOR_FERRETERIA, -1, true, 4, 1, 2142.5952, -96.2293, 699.0078, 0.0,	7, false, 0, 0, 1277.0262, 370.8778, 19.5547, 2.5559, 6, 20, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1},
	{-1, "Armero", INTERIOR_ARMY, -1, true, 25, 18, 1290.9949, -61.3377, 1002.4986, 180.0, -1, false, 0, 0, -86.3446, -299.4968, 2.7646, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1}
};

enum enum_JAIL_POSITIONS
{
	jail_INT,
	Float:jail_X,
	Float:jail_Y,
	Float:jail_Z,
	Float:jail_ANGLE,
	jail_INTERIOR
};
new JAIL_POSITIONS[][enum_JAIL_POSITIONS] =
{
    {INTERIOR_POLICE_LS, 1557.1766,-1763.2163,1438.6935,179.7933, 6}, // carcel1
    {INTERIOR_POLICE_LS, 1573.0753,-1763.9095,1434.9430,179.7933, 6}, // carcel2
    {INTERIOR_POLICE_LS, 1577.0562,-1763.9382,1434.9430,179.7933, 6}, // carcel3
    {INTERIOR_POLICE_LS, 1565.1947,-1763.4462,1434.9430,179.7933, 6}, // carcel4
    {INTERIOR_POLICE_LS, 1561.2910,-1763.4633,1434.9430,178.1013, 6}, // carcel5
    {INTERIOR_POLICE_LS, 1557.2443,-1764.1370,1434.9430,178.1013, 6}, // carcel6
    {INTERIOR_POLICE_LS, 1558.0411,-1782.7617,1434.9430,359.6877, 6}, // carcel7
    {INTERIOR_POLICE_LS, 1561.9906,-1782.4595,1434.9430,359.6877, 6}, // carcel8
    {INTERIOR_POLICE_LS, 1566.1306,-1782.6475,1434.9430,359.6877, 6}, // carcel9
    {INTERIOR_POLICE_LS, 1570.0748,-1782.2366,1434.9430,359.6877, 6}, // carcel10
    {INTERIOR_POLICE_LS, 1573.7338,-1782.6366,1434.9430,359.6877, 6}, // carce111
    {INTERIOR_POLICE_LS, 1577.5863,-1782.7192,1434.9430,359.6877, 6}, // carce112
    {INTERIOR_POLICE_LS, 1569.1355,-1763.7369,1434.9430,179.9813, 6}, // carce113
    {INTERIOR_POLICE_LS, 1561.0345,-1763.5850,1438.6935,179.7933, 6}, // carce144
    {INTERIOR_POLICE_LS, 1565.0198,-1763.7755,1438.6935,179.7933, 6}, // carce115
    {INTERIOR_POLICE_LS, 1569.0759,-1763.8748,1438.6935,179.7933, 6}, // carce116
    {INTERIOR_POLICE_LS, 1572.8199,-1763.8054,1438.6935,179.7933, 6}, // carce117
    {INTERIOR_POLICE_LS, 1577.0457,-1763.8928,1438.6935,179.7933, 6}, // carce118
    {INTERIOR_POLICE_LS, 1577.6157,-1783.3934,1438.7173,1.2150, 6}, // carce119
    {INTERIOR_POLICE_LS, 1573.8793,-1783.3484,1438.7173,1.2150, 6}, // carce120
    {INTERIOR_POLICE_LS, 1569.8856,-1783.3103,1438.7173,1.2150, 6}, // carce121
    {INTERIOR_POLICE_LS, 1565.7758,-1783.4854,1438.7173,1.2150, 6}, // carce122
    {INTERIOR_POLICE_LS, 1561.8307,-1783.1821,1438.7173,1.2150, 6}, // carce123
    {INTERIOR_POLICE_LS, 1557.9155,-1783.4351,1438.7173,1.2150, 6} // carce124
};



enum
{
	PRODUCT_TYPE_NONE,
	PRODUCT_TYPE_FOOD,
	PRODUCT_TYPE_PHONE,
	PRODUCT_TYPE_GPS,
	PRODUCT_TYPE_MP3,
	PRODUCT_TYPE_PHONE_RESOLVER
};
enum Supermarket_Enum
{
	product_TYPE,
	product_NAME[24],
	product_PRICE,
	Float:product_HUNGRY,
	Float:product_THIRST,
	product_DRUNK
};
new Supermarket_Product_List[][Supermarket_Enum] =
{
	{PRODUCT_TYPE_PHONE, "iPhone con chip", 2500, 0.0, 0.0, 0},
	{PRODUCT_TYPE_PHONE_RESOLVER, "Guía telefónica", 150, 0.0, 0.0, 0},
	{PRODUCT_TYPE_GPS, "Localizador GPS", 600, 0.0, 0.0, 0},
	{PRODUCT_TYPE_MP3, "Audifonos", 800, 0.0, 0.0, 0},
	{PRODUCT_TYPE_FOOD, "Botella de agua", 10, 0.0, 25.0, 0},
	{PRODUCT_TYPE_FOOD, "CocaCola", 50, 0.0, 10.0, 0},
	{PRODUCT_TYPE_FOOD, "Pepsi", 40, 0.0, 10.0, 0},
	{PRODUCT_TYPE_FOOD, "Sprite", 35, 0.0, 10.0, 0},
	{PRODUCT_TYPE_FOOD, "Empanada de carne", 60, 20.0, 0.0, 0},
	{PRODUCT_TYPE_FOOD, "Galletas Oreo", 20, 10.0, 0.0, 0},
	{PRODUCT_TYPE_FOOD, "Yogurt", 25, 8.0, 8.0, 0},
	{PRODUCT_TYPE_FOOD, "Chocolates Kisses", 40, 10.0, 0.0, 0},
	{PRODUCT_TYPE_FOOD, "Cerveza Corona", 100, 0.0, 3.0, 1000},
	{PRODUCT_TYPE_FOOD, "Vino en cartón", 30, 0.0, 3.0, 1500},
	{PRODUCT_TYPE_FOOD, "Champagne Moet", 9700, 10.0, 50.0, 2000},
	{PRODUCT_TYPE_FOOD, "Tonayán", 10, 0.0, 3.0, 3000}
};


enum Clothing_Shop_Info
{
	clothing_shop_INTERIOR_TYPE,
	clothing_shop_NAME[24],
	Float:clothing_shop_X,
	Float:clothing_shop_Y,
	Float:clothing_shop_Z,
	Float:clothing_shop_ANGLE,
	clothing_shop_INTERIOR
};
new Clothing_Shop_Positions[][Clothing_Shop_Info] =
{
	{INTERIOR_BINCO, "Binco", 207.733657, -100.633468, 1005.257812, 180.0, 15}, //Binco
	{INTERIOR_SUBURBAN, "SubUrban", 203.905395, -43.450450, 1001.804687, 180.0, 1}, //SubUrban
	{INTERIOR_PROLAPS, "ProLaps", 207.049148, -129.177581, 1003.507812, 180.0, 3}, //prolaps
	{INTERIOR_DIDIER_SACHS, "Didier Sachs", 204.348281, -159.493728, 1000.523437, 180.0, 14}, //Didier
	{INTERIOR_VICTIM, "Victim", 206.374328, -7.241514, 1001.210937, 270.0, 5}, //Victim
	{INTERIOR_ZIP, "ZIP", 161.443634, -83.589271, 1001.804687, 180.0, 18} //Zip
};


enum Fast_Food_Info
{
	fast_food_INTERIOR_TYPE,
	fast_food_NAME[24],
	Float:fast_food_X,
	Float:fast_food_Y,
	Float:fast_food_Z,
	fast_food_INTERIOR
};
new Fast_Food_Positions[][Fast_Food_Info] =
{
	{INTERIOR_BURGER_SHOT, "Burger Shot", 375.913238, -67.435272, 1001.507812, 10}, // BurgerShot
	{INTERIOR_PIZZA, "Well Stacked Pizza", 375.254730, -118.804710, 1001.499511, 5}, //Pizza
	{INTERIOR_AEROPUERTO, "Comida rápida", 1651.4037, -2472.9634, 901.6032, 1}, //Pizza
	{INTERIOR_CLUCKIN_BELL, "Cluckin Bell", 368.757904, -6.018908, 1001.851562, 9}, //Cluckin Bell
	{INTERIOR_DONUT, "Donuts", 379.2333, -187.9051, 1000.6328, 17}, // Donuts
	{INTERIOR_CAFE, "Café", 450.3702, -83.6535, 999.5547, 4}, // Cafes
	{INTERIOR_TACO, "Taquería", 450.3702, -83.6535, 999.5547, 4}, // Cafes
	{INTERIOR_STEAK, "Tortería", 2404.8811, -1110.1249, 1030.6010, 4} // Cafes
};

enum atm_bank_info
{
	atm_modelid,
	Float:atm_X,
	Float:atm_Y,
	Float:atm_Z,
	Float:atm_RX,
	Float:atm_RY,
	Float:atm_RZ,
	atm_WORLD,
	atm_INTERIOR
};
new ATM_BANK[][atm_bank_info] =
{
	{2754, 2833.38672, 2402.91553, 10.93546,   0.00000, 0.00000, 131.44171},
	{2754, 2088.78442, 1510.00574, 10.69234,   0.00000, 0.00000, 45.39682},
	{2754, 1662.92346, 1723.03162, 10.53258,   0.00000, 0.00000, 90.27153},
	{2754, -16.17070, 1219.33813, 19.17369,   0.00000, 0.00000, 179.53238},
	{2754, -1505.91687, 2612.09058, 55.63910,   0.00000, 0.00000, 178.85609},
	{2754, -2540.67188, 2340.96143, 4.79166,   0.00000, 0.00000, 90.97625},
	{2754, -1690.23547, 1327.11902, 7.04427,   0.00000, 0.00000, 43.44909},
	{2754, -1980.48608, 155.24883, 27.49554,   0.00000, 0.00000, 359.06995},
	{2754, -2631.60693, -6.86652, 5.97444,   0.00000, 0.00000, 181.99303},
	{2754, -2146.54395, -2332.90283, 30.43888,   0.00000, 0.00000, 232.48808},
	{2754, 574.90155, -1419.96509, 14.22211,   0.00000, 0.00000, 283.89526},
	{2754, 1227.24524, -1428.54846, 13.29063,   0.00000, 0.00000, 269.20294},
	{2754, 1810.57153, -1873.97852, 13.38759,   0.00000, 0.00000, 180.44339},
	{2754, 1493.07471, -1022.08618, 23.63997,   0.00000, 0.00000, 91.19178},
	{2754, 2330.78149, 81.79469, 26.33336,   0.00000, 0.00000, 269.20883},
	{2754, 711.71503, -542.69287, 16.04271,   0.00000, 0.00000, 180.17184},
	{2754, 242.68755, -54.72442, 1.31352,   0.00000, 0.00000, 0.00000},
	{2754, 1381.12219, 233.81693, 19.28907,   0.00000, 0.00000, 154.79193}
};

#define MAX_BANK_TRANSACTIONS_DIALOG	20
enum
{
	BANK_TRANSACTION_WITHDRAW,
	BANK_TRANSACTION_DEPOSIT,
	BANK_TRANSACTION_TRANSFER_SENT,
	BANK_TRANSACTION_TRANSFER_RECE,
	BANK_TRANSACTION_CREATE_ACCOUNT,
	BANK_TRANSACTION_BUY_PROPERTY,
	BANK_TRANSACTION_SOLD_PROPERTY,
	BANK_TRANSACTION_BUY_VEHICLE,
	BANK_TRANSACTION_SOLD_VEHICLE
};
enum Bank_Interior_Info
{
	bank_INTERIOR_TYPE,
	Float:bank_X,
	Float:bank_Y,
	Float:bank_Z,
	bank_WORLD,
	bank_INTERIOR
};
new Bank_Interior_Positions[][Bank_Interior_Info] =
{
	{INTERIOR_BANK_LS, 1909.6217, -3520.7922, 993.6496, 0, 1},
	{INTERIOR_BANK_LS, 1909.6199, -3522.7417, 993.6496, 0, 1},
	{INTERIOR_BANK_LS, 1909.6206, -3518.8193, 993.6496, 0, 1},
	{INTERIOR_BANK_LS, 1909.6215, -3516.8120, 993.6496, 0, 1}
};

enum Food_Info
{
	food_NAME[24],
	food_PRICE,
	Float:food_HUNGRY,
	Float:food_THIRST,
};
new PIZZA_FOOD[][Food_Info] =
{
	{"Pizza básica", 50, 5.0, -2.1},
	{"Pizza italiana", 95, 8.0, -5.1},
	{"Pizza pepperoni", 70, 9.0, -4.1},
	{"Pizza mexicana", 120, 15.0, -5.1},
	{"Pizza jamón/queso", 120, 15.0, -5.1},
	{"Pizza familiar", 280, 20.0, -10.0},
	{"Pizza napolitana", 250, 17.0, -8.1},
	{"Pizza y refresco", 350, 25.0, 10.0}
};
new BURGER_SHOT_FOOD[][Food_Info] =
{
	{"Hamburguesa sencilla", 50, 5.0, -2.1},
	{"Hamburguesa con papas", 80, 8.0, -3.1},
	{"Hamburguesa dietética", 65, 4.0, -0.1},
	{"Hamburguesa BBQ", 120, 8.0, -3.1},
	{"Hamburguesa con queso", 85, 5.0, -2.1},
	{"Hamburguesa picante", 120, 9.0, -4.1},
	{"Hamburguesa y Coca Cola", 250, 10.0, 6.0},
	{"Hamburguesa y Pepsi", 250, 10.0, 6.0}
};
new CLUCKIN_BELL_FOOD[][Food_Info] =
{
	{"Nuggets de pollo", 20, 2.0, -0.1},
	{"Pechuga de pollo", 50, 3.0, -2.0},
	{"Pollo Rostizado", 120, 8.0, -2.0},
	{"Pollo picante", 180, 9.0, -2.5},
	{"Pollo con papas", 200, 5.0, -3.0},
	{"Pollo con refresco", 250, 10.0, 5.0}
};
new DONUT_FOOD[][Food_Info] =
{
	{"Dona sencilla", 20, 3.0, -0.1},
	{"Donas de azúcar", 40, 4.0, -2.5},
	{"Dona glaseada", 50, 5.0, -2.0},
	{"Dona de chocolate", 85, 9.0, -3.0},
	{"Dona de fresa", 85, 10.0, -3.0},
	{"Dona de Oreo", 100, 10.0, -3.0},
	{"Dona con leche", 150, 15.0, 4.0}
};
new CAFE_FOOD[][Food_Info] =
{
	{"Té", 35, 0.0, 3.0},
	{"Café americano", 70, 0.0, 5.0},
	{"Café capuccino", 85, 0.0, 5.5},
	{"Café expresso", 140, 0.0, 8.0},
	{"Café caribeño", 160, 0.0, 8.0},
	{"Frappe", 150, 0.0, 10.0},
	{"Chocolate", 80, 0.0, 8.0},
	{"Café con galletas", 150, 4.0, 8.0}
};
new TACO_FOOD[][Food_Info] =
{
	{"Taco al pastor", 50, -3.0, 3.0},
	{"Taco de suadero", 50, -3.0, 3.0},
	{"Taco de bistek", 60, -3.0, 3.0},
	{"Taco de surtida", 60, -3.0, 3.0},
	{"Taco de maciza", 60, -3.0, 3.0},
	{"Burrito", 100, -3.0, 10.0},
	{"CocaCola", 50, 0.0, 5.0},
	{"Agus de sabor", 50, 0.0, 5.0}
};
new STEAK_FOOD[][Food_Info] =
{
	{"Torta de jamón", 60, 4.0, -2.0},
	{"Torta de pierna", 60, 4.5, -3.0},
	{"Torta de salchicha", 60, 6.0, -4.0},
	{"Torta de huevo", 55, 5.0, -3.0},
	{"Torta de milanesa", 90, 8.0, -4.0},
	{"Torta de chorizo", 70, 8.0, -4.0},
	{"Mega Torta", 200, 10.0, -8.0},
	{"Refresco", 50, 0.0, 5.0}
};


enum Player_Toys_Info
{
	player_toy_VALID,

	player_toy_ID,
	player_toy_NAME[24],
	player_toy_ATTACHED,
	player_toy_MODELID,
	player_toy_BONE,
	Float:player_toy_OFFSET_X,
	Float:player_toy_OFFSET_Y,
	Float:player_toy_OFFSET_Z,
	Float:player_toy_ROT_X,
	Float:player_toy_ROT_Y,
	Float:player_toy_ROT_Z,
	Float:player_toy_SCALE_X,
	Float:player_toy_SCALE_Y,
	Float:player_toy_SCALE_Z,
	player_toy_COLOR_1,
	player_toy_COLOR_2
};
new PLAYER_TOYS[MAX_PLAYERS][MAX_PLAYER_ATTACHED_OBJECTS][Player_Toys_Info]; //PTOYS = PlayerToys

new Toys_Bones[][24] =
{
	{"Espalda"},
	{"Cabeza"},
	{"Brazo izquierdo"},
	{"Brazo derecho"},
	{"Mano izquierda"},
	{"Mano derecha"},
	{"Muslo izquierdo"},
	{"Muslo derecho"},
	{"Pie izquierdo"},
	{"Pie derecho"},
	{"Pantorrilla derecha"},
	{"Pantorrilla izquierda"},
	{"Antebrazo izquierdo"},
	{"Antebrazo derecho"},
	{"Hombro izquierdo"},
	{"Hombro derecho"},
	{"Cuello"},
	{"Boca"}
};

enum Toys_Info_Sombreros
{
	shop_toy_model[24],
	shop_toy_modelid,
	shop_toy_price_base,
	shop_toy_price,
	shop_toy_price_sd,
}
new Toys_Shop_Sombreros[][Toys_Info_Sombreros] =
{
	{"Gorro negro", 	19554, 0, 0, 1},
    {"Gorro fit", 		18953, 5000, 0, -1},
    {"Gorro gangsta", 	19067, 6000, 0, -1},
    {"Gorro camuflaje", 19068, 0, 1, 1},
    {"Gorro death", 	19069, 0, 0, 1},
    {"Boina franc", 	18923, 0, 0, 1},
    {"Boina camuflaje", 18924, 0, 0, 1},
    {"Gorra truck", 	18961, 0, 0, 1},
    {"Gorra negra", 	18941, 0, 0, 1},
    {"Gorra gris", 		18942, 0, 0, 1},
    {"Gorra verde", 	18943, 0, 0, 1},
    {"Gorra dude", 		19160, 0, 0, 1},
    {"Gorro black", 	18964, 0, 0, 1},
    {"Gorro phsy", 		18966, 0, 0, 1},
    {"Gorra pizza", 	19558, 0, 0, 1},
    {"Sombrero blanco", 19488, 10000, 0, -1},
    {"Sombrero tommy", 	18946, 0, 0, 2},
    {"Sombrero vaquero",18639, 0, 0, 1},
    {"Sombrero granjero",19553, 0, 0, 1},
    {"Sombrero kalcor", 19487, 0, 0, 2},
    {"Sombrero inspector",19136, 0, 0, 1}
};

enum Toys_Info_Gafas
{
	shop_toy_model[24],
	shop_toy_modelid,
	shop_toy_price_base,
	shop_toy_price,
	shop_toy_price_sd,
}
new Toys_Shop_Gafas[][Toys_Info_Gafas] =
{
	{"RayBan negros", 	19022, 0, 0, 1},
    {"RayBan azules", 	19023, 0, 0, 1},
    {"RayBan morados", 	19024, 0, 0, 1},
    {"RayBan rosas", 	19025, 0, 0, 1},
    {"RayBan verdes", 	19029, 0, 0, 1},
    {"RayBan rojos", 	19026, 0, 0, 1},
    {"Lentes oscuros", 	19033, 5000, 0, -1},
    {"Lentes aqua", 	19035, 5000, 0, -1},
    {"Lentes aumento", 	19031, 5000, 0, -1},
    {"Gafas sport", 	19017, 0, 0, 1},
    {"Gafas azules", 	19009, 7500, 0, -1},
    {"Gafas negras", 	19011, 7500, 0, -1},
    {"Gafas rojas", 	19006, 7500, 0, -1},
    {"Gafas verdes", 	19008, 7500, 0, -1}
};

enum Toys_Info_Mascaras
{
	shop_toy_model[24],
	shop_toy_modelid,
	shop_toy_price_base,
	shop_toy_price,
	shop_toy_price_sd,
}
new Toys_Shop_Mascaras[][Toys_Info_Mascaras] =
{
	{"Mascara", 		19036, 0, 0, 1},
    {"Mascara de gas", 	19472, 0, 0, 1},
    {"Masoca", 			19801, 0, 0, 1},
    {"Masoca látex", 	19801, 0, 0, 1},
    {"Diablo", 			11704, 0, 0, 1},
    {"Casco motocross", 18976, 0, 0, 1},
    {"Casco blanco", 	18978, 0, 0, 1},
    {"Casco de fuego", 	18645, 0, 0, 1}
};

enum Toys_Info_Mochilas
{
	shop_toy_model[24],
	shop_toy_modelid,
	shop_toy_price_base,
	shop_toy_price,
	shop_toy_price_sd,
}
new Toys_Shop_Mochilas[][Toys_Info_Mochilas] =
{
	{"Paracaidas", 			371, 9000, 0, -1},
    {"Mochila bomba", 		1252, 0, 0, 2},
    {"Mochila campamento", 	19559, 0, 0, 2},
    {"Moneybackpack", 		1550, 0, 0, 2}
};

enum Toys_Info_Relojes
{
	shop_toy_model[24],
	shop_toy_modelid,
	shop_toy_price_base,
	shop_toy_price,
	shop_toy_price_sd,
}
new Toys_Shop_Relojes[][Toys_Info_Relojes] =
{
	{"Rolex de oro", 		19039, 0, 0, 5},
    {"Rolex de plata", 		19040, 0, 0, 2},
    {"Casio de oro", 		19042, 0, 0, 2},
    {"Casio de plata", 		19043, 0, 0, 1},
    {"Face guinda", 		19044, 0, 0, 1},
    {"Face rosa", 			19045, 0, 0, 1},
    {"Face verde", 			19046, 0, 0, 1},
    {"Face morado", 		19047, 0, 0, 1},
    {"Pro aqua", 			19048, 0, 0, 1},
    {"Pro pshy", 			19049, 0, 0, 1},
    {"Pro inf", 			19050, 0, 0, 1},
    {"Pro samp", 			19051, 0, 0, 1},
    {"Pro pink", 			19052, 0, 0, 1},
    {"Pro militar", 		19053, 0, 0, 1}
};

enum Toys_Info_Especiales
{
	shop_toy_model[24],
	shop_toy_modelid,
	shop_toy_price_base,
	shop_toy_price,
	shop_toy_price_sd,
}
new Toys_Shop_Especiales[][Toys_Info_Especiales] =
{
	{"Gorro de bruja", 		19528, 5000, 0, -1},
	{"Gorro de navidad", 	19064, 5000, 0, -1},
	{"Parche", 				19085, 5000, 0, -1},
    {"Guante derecho", 		19555, 10000, 0, -1},
    {"Guante izquierdo", 	19556, 10000, 0, -1},
    {"Banda", 				19469, 5000, 0, -1},
    {"Antifaz", 			18974, 0, 0, 1},
    {"Antifaz de gata", 	19557, 0, 0, 1},
    {"Hamburguesa", 		19094, 0, 0, 2},
    {"Pollo", 				19137, 0, 0, 5},
    {"Audifonos", 			19421, 0, 0, 1},
    {"Bombero", 			19330, 0, 0, 2},
    {"Guitarra", 			19318, 0, 0, 1},
    {"Bajo", 				19317, 0, 0, 1}
};

new
Binco_Shop_Male_Skins[][] =
{
	/* BINCO - HOMBRE */
	{4, 2000      	, 0},
	{5, 2000      	, 0},
	{6, 2000      	, 0},
	{19, 1000      	, 0},
	{21, 200    	, 0},
	{22, 100     	, 0},
	{47, 300    	, 0},
	{66, 500   	, 0},
	{80, 500    	, 0},
	{81, 500    	, 0},
	{86, 2250    	, 0},
	{105, 1500    	, 0},
	{106, 1500    	, 0},
	{107, 1500    	, 0},
	{149, 2250    	, 0},
	{155, 1200    	, 0},
	{156, 1200    	, 0},
	{182, 1000    	, 0},
	{269, 2500   	, 0},
	{270, 2500   	, 0},
	{271, 2500   	, 0},
	{293, 2500    	, 0},
	{188, 500    	, 0},
	{250, 500    	, 0},
	{227, 700    	, 0},
	{228, 900    	, 0},
	{235, 800    	, 0},
	{255, 1200    	, 0},
	{7, 50    	, 0}
},

Binco_Shop_Female_Skins[][] =
{
	/* BINCO - MUJER */
	{13, 200   	, 0},
	{56, 100    	, 0},
	{63, 300   	, 0},
	{65, 2500   	, 0},
	{93, 400   	, 0},
	{195, 2000    	, 0},
	{205, 1000    	, 0},
	{233, 500   	, 0},
	{243, 150 	, 0}
},

Suburban_Shop_Male_Skins[][] =
{
	/* SUBURBAN - HOMBRE */
	{2, 2500   	, 0},
	{14, 150   	, 0},
	{15, 1000  	, 0},
	{20, 700  	, 0},
	{23, 200  	, 0},
	{28, 500  	, 0},
	{48, 100 	, 0},
	{58, 300 	, 0},
	{60, 250  	, 0},
	{67, 2000 	, 0},
	{73, 350 	, 0},
	{79, 50 	, 0},
	{98, 400 	, 0},
	{100, 275 	, 0},
	{101, 125 	, 0},
	{102, 1500 	, 0},
	{103, 1500 	, 0},
	{104, 1500 	, 0},
	{142, 1200   	, 0},
	{143, 550 	, 0},
	{167, 1200 	, 0},
	{179, 1200 	, 0},
	{220, 1200 	, 0},
	{273, 2500 	, 0},
	{203, 1500 	, 0},
	{204, 1500 	, 0},
	{206 , 1200 	, 0},
	{212, 120 	, 0},
	{249, 500 	, 0},
	{258, 600 	, 0},
	{259, 600 	, 0},
	{184, 500 	, 0}
},

Suburban_Shop_Female_Skins[][] =
{
	/* SUBURBAN - MUJER */
	{10, 50  	, 0},
	{41, 100  	, 0},
	{152, 150  	, 0},
	{178, 200 	, 0},
	{191, 1500 	, 0},
	{226, 250  	, 0},
	{223, 300  	, 0},
	{244, 125  	, 0}
},

Prolaps_Shop_Male_Skins[][] =
{
	/* PROLAPS - HOMBRE */
	{3, 1250  	, 0},
	{18, 150  	, 0},
	{25, 750  	, 0},
	{26, 250  	, 0},
	{43, 200  	, 0},
	{52, 225  	, 0},
	{78, 50  	, 0},
	{82, 900 	, 0},
	{96, 275 	, 0},
	{97, 275  	, 0},
	{99, 270  	, 0},
	{119, 2050  	, 0},
	{121, 1500  	, 0},
	{122, 1500  	, 0},
	{123, 1500  	, 0},
	{144, 300  	, 0},
	{176, 1200 	, 0},
	{180, 1000 	, 0},
	{208, 2250  	, 0},
	{209, 900  	, 0},
	{241, 500  	, 0},
	{242, 400  	, 0},
	{247, 300  	, 0},
	{248, 200 	, 0},
	{252, 100 	, 0},
	{260, 1200  	, 0},
	{264, 1600  	, 0},
	{277, 1700  	, 0},
	{221, 700  	, 0},
	{222, 600  	, 0},
	{223, 750  	, 0},
	{240, 2100  	, 0},
	{290, 2500  	, 0},
	{291, 2500  	, 0},
	{294, 2500  	, 0}
},

Prolaps_Shop_Female_Skins[][] =
{
	/* PROLAPS - MUJER */
	{9, 190 	, 0},
	{39, 250 	, 0},
	{55, 460 	, 0},
	{69, 150	, 0},
	{76, 500	, 0},
	{89, 200	, 0},
	{90, 300	, 0},
	{92, 200	, 0},
	{169, 340	, 0},
	{193, 1500	, 0},
	{207, 600	, 0},
	{245, 300	, 0},
	{251, 900	, 0},
	{256, 340	, 0}
},

Didier_Shop_Male_Skins[][] =
{
	/* DIDIER - HOMBRE */
	{24, 900  	, 0},
	{27, 1200  	, 0},
	{30, 600  	, 0},
	{32, 50  	, 0},
	{33, 50  	, 0},
	{34, 50  	, 0},
	{35, 100 	, 0},
	{36, 200 	, 0},
	{42, 2500 	, 0},
	{44, 300 	, 0},
	{49, 1400 	, 0},
	{51, 1000 	, 0},
	{59, 250 	, 0},
	{60, 300 	, 0},
	{68, 1700 	, 0},
	{70, 1800 	, 0},
	{72, 200 	, 0},
	{94, 500 	, 0},
	{111, 1500 	, 0},
	{112, 1500 	, 0},
	{113, 1500 	, 0},
	{114, 250 	, 0},
	{115, 300 	, 0},
	{116, 100 	, 0},
	{134, 125 	, 0},
	{136, 500 	, 0},
	{168, 1200 	, 0},
	{170, 250 	, 0},
	{177, 1250 	, 0},
	{253, 1200 	, 0},
	{289, 2500 	, 0},
	{292, 2500 	, 0},
	{295, 2500 	, 0},
	{296, 2500 	, 0},
	{183, 100 	, 0}
},

Didier_Shop_Female_Skins[][] =
{
	/* DIDIER - MUJER */
	{31, 50  	, 0},
	{38, 300  	, 0},
	{40, 400  	, 0},
	{53, 100  	, 0},
	{64, 150 	, 0},
	{77, 50 	, 0},
	{85, 200 	, 0},
	{88, 250 	, 0},
	{151, 250	, 0},
	{192, 1500 	, 0}
},

Victim_Shop_Male_Skins[][] =
{
	/* VICTIM - HOMBRE */
	{17, 1300   	, 0},
	{29, 700  	, 0},
	{37, 500   	, 0},
	{45, 450   	, 0},
	{46, 600   	, 0},
	{57, 600   	, 0},
	{62, 2000  	, 0},
	{82, 1500  	, 0},
	{83, 1500  	, 0},
	{84, 1500  	, 0},
	{117, 1500  	, 0},
	{118, 1500  	, 0},
	{120, 1500 	, 0},
	{124, 1500	, 0},
	{125, 1500  	, 0},
	{126, 1500  	, 0},
	{127, 1500  	, 0},
	{128, 100  	, 0},
	{132, 100  	, 0},
	{133, 100  	, 0},
	{135, 140  	, 0},
	{137, 140  	, 0},
	{147, 1600 	, 0},
	{153, 1200	, 0},
	{154, 500  	, 0},
	{163, 800  	, 0},
	{164, 800  	, 0},
	{165, 700  	, 0},
	{166, 700 	, 0},
	{171, 1000	, 0},
	{185, 500  	, 0},
	{186, 200  	, 0},
	{187, 1100  	, 0},
	{217, 1100  	, 0},
	{272, 2200  	, 0},
	{297, 2500  	, 0},
	{189, 2100  	, 0}
},

Victim_Shop_Female_Skins[][] =
{
	/* VICTIM - MUJER */
	{11, 1200  	, 0},
	{12, 1000  	, 0},
	{54, 500  	, 0},
	{87, 400   	, 0},
	{91, 950 	, 0},
	{129, 100 	, 0},
	{130, 110  	, 0},
	{131, 120  	, 0},
	{138, 450  	, 0},
	{139, 500  	, 0},
	{140, 500  	, 0},
	{141, 1100   	, 0},
	{148, 1150 	, 0},
	{150, 1125 	, 0},
	{172, 1240  	, 0},
	{211, 1100  	, 0},
	{214, 700  	, 0},
	{215, 400   	, 0},
	{216, 450 	, 0},
	{219, 1125 	, 0},
	{224, 250  	, 0},
	{225, 450 	, 0},
	{237, 125 	, 0},
	{263, 250  	, 0},
	{194, 1500  	, 0}
},

Zip_Shop_Male_Skins[][] =
{
	/* ZIP - HOMBRE */
	{1, 2500  	, 0},
	{8, 1200  	, 0},
	{108, 1500  	, 0},
	{109, 1500  	, 0},
	{110, 1500   	, 0},
	{146, 500  	, 0},
	{158, 55   	, 0},
	{159, 50   	, 0},
	{160, 65   	, 0},
	{161, 70   	, 0},
	{162, 90	, 0},
	{173, 1500  	, 0},
	{174, 1500  	, 0},
	{175, 1500  	, 0},
	{181, 350  	, 0},
	{200, 75  	, 0},
	{202, 100 	, 0},
	{230, 95   	, 0},
	{234, 1200   	, 0},
	{236, 325   	, 0},
	{239, 85	, 0},
	{252, 720  	, 0},
	{261, 1200  	, 0},
	{262, 1200  	, 0},
	{268, 2500  	, 0},
	{299, 2500  	, 0},
	{213, 200  	, 0}
},

Zip_Shop_Female_Skins[][] =
{
	/* ZIP - MUJER */
	{75, 405    	, 0},
	{145, 200  	, 0},
	{157, 65  	, 0},
	{192, 1500   	, 0},
	{196, 60   	, 0},
	{197, 80   	, 0},
	{198, 90   	, 0},
	{201, 110    	, 0},
	{218, 300  	, 0},
	{231, 400  	, 0},
	{232, 500   	, 0},
	{238, 340   	, 0},
	{246, 200   	, 0},
	{257, 222   	, 0},
	{298, 221   	, 0},
	{199, 105   	, 0}
};

enum
{
	PICKUP_TYPE_NONE,
	PICKUP_TYPE_ENTER_EXIT,
	PICKUP_TYPE_ATM,
	PICKUP_TYPE_PROPERTY
};

new Intro_Music[][] =
{
	"https://www.dropbox.com/s/i51f5167vehegb4/DatPhoria%20-%20My%20Own%20Enemy.mp3?dl=1"
};


new Float:Fuel_Stations[][] =
{
	{1940.3751, -1773.0863, 13.3906},//idlewood
	{654.678710, -570.627807, 16.335937},
	{1384.011962, 457.825012, 19.995258},
	{-1669.027221, 411.541076, 7.179687},
	{-2409.644042, 976.147644, 45.307708},
	{-1328.633666, 2675.913818, 50.062500},
	{612.890563, 1692.938720, 6.992187},
	{-1607.715820, -2717.499023, 48.539062},
	{2146.831542, 2743.855224, 10.820312},
	{2197.993408, 2475.015625, 10.820312},
	{2115.124267, 926.094909, 10.960937},
	{1595.974731, 2193.016845, 10.820312},
	{-1477.559326, 1858.962524, 32.639846},
	{-91.0752, -1177.8635, 1.7482}
};

new Float:Hospital_Spawn_Positions[][] =
{
	{2034.197875, -1403.040039, 17.294845, 180.0},
	{1172.832763, -1323.269531, 15.400051, 270.0}
};

new Float:Hospital_Cameras_Positions[][] =
{
	{2007.3301, -1442.3809, 26.7332, 2008.0043, -1441.6445, 26.4982},
	{1209.2427, -1314.4705, 23.4945, 1208.5284, -1315.1681, 23.3195}
};

/* TEXTDRAWS */
#define MAX_PLAYER_MAP_GPS_POINTS 20
enum Player_Textdraws_Enum
{
	PlayerText:ptextdraw_HOSPITAL[3], //Barra recuperando vida despues de morir
	PlayerText:ptextdraw_CLOTHING_SHOP[6], //Tiendas de ropas
	PlayerText:ptextdraw_TOYS_SHOP[10],
	PlayerText:ptextdraw_PROPERTY_CONSTRUCTOR[6],
	PlayerText:ptextdraw_SPEEDO_METER[12],
	PlayerText:ptextdraw_TAXI_METER[6],
	PlayerText:ptextdraw_TRUCK_LOAD[4],
	PlayerText:ptextdraw_RECYCLE_TRASH[4],
	PlayerText:ptextdraw_PLANT_PLANT[4],
	PlayerText:ptextdraw_PLAYER_GPS_MAP[MAX_PLAYER_MAP_GPS_POINTS],
	PlayerText:ptextdraw_WANTED_LEVEL[2],
	PlayerText:ptextdraw_iPhone[17],
	PlayerText:ptextdraw_SHOP_BUTTONS[5],
	PlayerText:ptextdraw_SHOP_ARTICLES_PAGE,
	PlayerText:ptextdraw_SHOP_ARTICLES_MODEL[6],
	PlayerText:ptextdraw_SHOP_ARTICLES_PRICE[6],
	PlayerText:ptextdraw_SHOP_ARTICLE_NUMBER,
	PlayerText:ptextdraw_SHOP_ARTICLE_INFO,
	PlayerText:ptextdraw_SHOP_ARTICLE_MODELID,
	PlayerText:ptextdraw_TUNING_SHOP,
	PlayerText:ptextdraw_MESSAGE,
	PlayerText:ptextdraw_NOTIFY
};
new PlayerTextdraws[MAX_PLAYERS][Player_Textdraws_Enum];

#define map_td_X 484.919342
#define map_td_Y 207.666656
#define map_td_SIZE_X 144.304565
#define map_td_SIZE_Y 161.583358

enum Textdraws_Enum
{
	Text:textdraw_WATER_MARK[4], // Marca de agua "Superlandia Roleplay 1.10"
	Text:textdraw_LOAD_SCREEN[6],
	Text:textdraw_GPS_MAP[3],
	Text:textdraw_SHOP[5],
	Text:textdraw_iPhone[9],
	Text:textdraw_WARNING[9],
	Text:textdraw_SHOP_ARTICLES_BOX[6],
	Text:textdraw_SHOP_ARTICLE_BOX,
	Text:textdraw_TERRITORY_BOX,
	Text:textdraw_SHOP_TUNING[5],
};
new Textdraws[Textdraws_Enum];

new Text:PopUp;
new Text:PopUp1;
new Text:PopUp2;
new not;
new not1;
new not2;


/*enum
{
	ACCOUNT_STATE_NORMAL,
	ACCOUNT_STATE_BANNED,
	ACCOUNT_STATE_TEMPBAN
};*/

#define MIN_PASS_LENGTH	6
#define MAX_PASS_LENGTH	18

enum Account_Enum
{
	ac_ID,
	ac_IP[16],
	ac_NAME[24],
	ac_EMAIL[32],
	ac_PASS[64 + 1],
	ac_SALT[16],
	ac_LAST_CONNECTION[24],
	ac_TIME_PLAYING,
	ac_LEVEL,
	ac_REP,
	ac_STATE,
	reg_DATE[24], //Fecha de registro de la tabla REGISTRO
	ac_DOUBT_CHANNEL,
	ac_TIME_FOR_REP, // En MS
	ac_ADMIN_LEVEL,
	ac_PAYDAY_REP,
	ac_SU,
	ac_SU_EXPIRE_DATE[24],
	ac_SD,
	ac_WARN_STATUS,
	ac_BLACK_SAPD,
	ac_TEMP_LVL_ADM,
	ac_CHECKAFK,
	ac_CHECKAFK_STATUS
};
new ACCOUNT_INFO[MAX_PLAYERS][Account_Enum]; // AI (AccountInfo)

enum Character_Enum
{
	ch_SKIN,
	ch_CASH,
	Float:ch_POS[3],
	Float:ch_ANGLE,
	ch_STATE,
	ch_INTERIOR,
	ch_INTERIOR_EXTRA,
	ch_FIGHT_STYLE,
	Float:ch_HEALTH,
	Float:ch_ARMOUR,
	ch_SEX,
	Float:ch_HUNGRY,
	Float:ch_THIRST,
	ch_BLACK_MARKET_LEVEL,
	ch_WANTED_LEVEL,
	ch_POLICE_JAIL_TIME,
	ch_POLICE_JAIL_ID //interior
};
new CHARACTER_INFO[MAX_PLAYERS][Character_Enum]; // CI (CharacterInfo)

enum Bank_Account_Enum
{
	bank_account_ID,
	bank_account_BALANCE
};
new BANK_ACCOUNT[MAX_PLAYERS][Bank_Account_Enum]; //BA (BankAccount)


#define MAX_PLAYER_POCKET_OBJECTS 10
enum Player_Pocket_Enum
{
	bool:player_pocket_VALID,
	player_pocket_object_ID,
	player_pocket_object_NAME[24],
	Float:player_pocket_object_HUNGRY,
	Float:player_pocket_object_THIRST,
	player_pocket_object_DRUNK
};
new PLAYER_POCKET[MAX_PLAYERS][MAX_PLAYER_POCKET_OBJECTS][Player_Pocket_Enum]; // PP (PlayerPocket)


new
	DIALOG_FOOD_PIZZA_String[800],
	DIALOG_FOOD_CLUCKIN_String[800],
	DIALOG_FOOD_BURGER_String[800],
	DIALOG_FOOD_DONUT_String[800],
	DIALOG_FOOD_CAFE_String[800],
	DIALOG_FOOD_TACO_String[800],
	DIALOG_FOOD_STEAK_String[800],
	DIALOG_247_LIST_String[34 + 55 * sizeof Supermarket_Product_List],
	DIALOG_ANIMS_String[1000],
	DIALOG_PLAYER_GPS_SITE_0_String[90 * (sizeof(Hospital_Spawn_Positions) + 1)],
	DIALOG_PLAYER_GPS_SITE_7_String[90 * (sizeof(SELL_VEHICLES_SHOPS_SPAWN) + 1)],
	DIALOG_CREATE_CREW_COLOR_String[4200];


#define HidePlayerDialog(%1)		ShowPlayerDialog(%1, -1, 0, " ", " ", " ", " ")


// PLAYER WEAPONS
#define NO_WEAPON 0
enum enum_WEAPON_INFO
{
	bool:weapon_info_ANTI_CHEAT,
	bool:weapon_info_AMMO,
	weapon_info_TYPE,
	weapon_info_NAME[32],
	weapon_info_SLOT,
	weapon_info_SHOT_TIME
};
new WEAPON_INFO[][enum_WEAPON_INFO] =
{
	{false, false, NO_WEAPON, "Puño", 0, 250},
	{true, false, WEAPON_BRASSKNUCKLE, "Manopla", 0, 250},
	{true, false, WEAPON_GOLFCLUB, "Palo de golf", 1, 250},
	{true, false, WEAPON_NITESTICK, "Porra", 1, 250},
	{true, false, WEAPON_KNIFE, "Cuchillo", 1, 250},
	{true, false, WEAPON_BAT, "Bate", 1, 250},
	{true, false, WEAPON_SHOVEL, "Pala", 1, 250},
	{true, false, WEAPON_POOLSTICK, "Taco", 1, 250},
	{true, false, WEAPON_KATANA, "Katana", 1, 250},
	{true, false, WEAPON_CHAINSAW, "Motosierra", 1, 30},
	{true, false, WEAPON_DILDO, "Dildo morado", 10, 250},
	{true, false, WEAPON_DILDO2, "Dildo", 10, 250},
	{true, false, WEAPON_VIBRATOR, "Vibrador", 10, 250},
	{true, false, WEAPON_VIBRATOR2, "Vibrador plateado", 10, 250},
	{true, false, WEAPON_FLOWER, "Flores", 10, 250},
	{true, false, WEAPON_CANE, "Bastón", 10, 250},
	{true, true, WEAPON_GRENADE, "Granada", 8, 500},
	{true, true, WEAPON_TEARGAS, "Gas lacrimógeno", 8, 500},
	{true, true, WEAPON_MOLTOV, "Cocktail Molotov", 8, 500},
	{false, false, NO_WEAPON, "", 0, 0},
	{false, false, NO_WEAPON, "", 0, 0},
	{false, false, NO_WEAPON, "", 0, 0},
	{true, true, WEAPON_COLT45, "9mm", 2, 160},
	{true, true, WEAPON_SILENCED, "9mm silenciada", 2, 120},
	{true, true, WEAPON_DEAGLE, "Desert Eagle", 2, 950},
	{true, true, WEAPON_SHOTGUN, "Escopeta", 3, 800},
	{true, true, WEAPON_SAWEDOFF, "Escopeta recortada", 3, 120},
	{true, true, WEAPON_SHOTGSPA, "Escopeta de combate", 3, 120},
	{true, true, WEAPON_UZI, "Micro UZI", 4, 70},
	{true, true, WEAPON_MP5, "MP5", 4, 70},
	{true, true, WEAPON_AK47, "Ak-47", 5, 80},
	{true, true, WEAPON_M4, "M4", 5, 80},
	{true, true, WEAPON_TEC9, "TEC-9", 4, 70},
	{true, true, WEAPON_RIFLE, "Rifle", 6, 1000},
	{true, true, WEAPON_SNIPER, "Sniper", 6, 1000},
	{true, true, WEAPON_ROCKETLAUNCHER, "Lanzacohetes RPG", 7, 1000},
	{true, true, WEAPON_HEATSEEKER, "Lanzacohetes HS", 7, 1000},
	{true, true, WEAPON_FLAMETHROWER, "Lanzallamas", 7, 500},
	{true, true, WEAPON_MINIGUN, "Minigun", 7, 0},
	{true, true, WEAPON_SATCHEL, "Bomba detonadora", 8, 500},
	{false, false, WEAPON_BOMB, "Detonador", 12, 500},
	{true, true, WEAPON_SPRAYCAN, "Bote de spray", 9, 10},
	{true, true, WEAPON_FIREEXTINGUISHER, "Extintor", 9, 10},
	{true, false, WEAPON_CAMERA, "Cámara", 9, 500},
	{true, false, NO_WEAPON, "Gafas de visión nocturna", 11, 0},
	{true, false, NO_WEAPON, "Gafas térmicas", 11, 0},
	{false, false, WEAPON_PARACHUTE, "Paracaídas", 11, 0}
};

enum enum_PLAYER_WEAPONS
{
	bool:player_weapon_VALID,
	player_weapon_DB_ID,
	player_weapon_ID,
	player_weapon_AMMO
};
new PLAYER_WEAPONS[MAX_PLAYERS][13][enum_PLAYER_WEAPONS];


enum
{
	TYPE_WARNING,
	TYPE_KICK,
	TYPE_BAN,
	TYPE_TEMP_BAN
};

new ADMIN_LEVELS[][] =
{
	"Usuario normal",
	"Random",
	"Ayudante XD",
	"Mod",
	"Admin",
	"Pelotudo",
	"Dueño"
};

public OnPlayerConnect(playerid)
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(ACCOUNT_INFO[i][ac_ADMIN_LEVEL] > 2) SendDeathMessageToPlayer(i, INVALID_PLAYER_ID, playerid, 200);
    }
    PLAYERS_IN_GAME++;
	PLAYER_TEMP[playerid][pt_GAME_STATE] = GAME_STATE_CONNECTED;
	PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
	PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;
	PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] = -1;
	PLAYER_TEMP[playerid][pt_HUD_TEXTDRAWS] = false;
	PLAYER_TEMP[playerid][pt_SEE_ACMD_LOG] = true;
	PLAYER_TEMP[playerid][pt_SEE_AC_LOG] = true;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
	PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] = INVALID_VEHICLE_ID;
	PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
	PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] = -1;
	for(new i = 0; i != MAX_OBJECTS_PER_ROUTE; i ++) TRASH_PLAYER_OBJECTS[playerid][i] = INVALID_STREAMER_ID;

	GetPlayerName(playerid, PLAYER_TEMP[playerid][pt_NAME], 24);
	GetPlayerIp(playerid, PLAYER_TEMP[playerid][pt_IP], 16);

	EnablePlayerCameraTarget(playerid, true);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(playerid, true);
	HidePlayerDialog(playerid);
	ResetPlayerMoney(playerid);
	CancelSelectTextDrawEx(playerid);
	SetPlayerTime(playerid, 12, 0);
	SetPlayerWeather(playerid, 0);
	SetPlayerScore(playerid, 0);
	ResetPlayerWeapons(playerid);
	SetPlayerColorEx(playerid, PLAYER_COLOR);
	CancelEdit(playerid);

	for(new i = 0; i != sizeof Textdraws[textdraw_LOAD_SCREEN]; i ++) TextDrawShowForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][i]);

	if(!IsValidName(PLAYER_TEMP[playerid][pt_NAME]) || NickSpam(PLAYER_TEMP[playerid][pt_NAME]) || strfind( PLAYER_TEMP[playerid][pt_NAME], "_", true) == -1 && strcmp(PLAYER_TEMP[playerid][pt_NAME], "Montyy", false) != 0 && strcmp(PLAYER_TEMP[playerid][pt_NAME], "Krowxht", false) != 0 && strcmp(PLAYER_TEMP[playerid][pt_NAME], "Joshua", false) != 0 && strcmp(PLAYER_TEMP[playerid][pt_NAME], "Sebaku", false) != 0 && strcmp(PLAYER_TEMP[playerid][pt_NAME], "Nico", false) != 0 && strcmp(PLAYER_TEMP[playerid][pt_NAME], "Remik", false) != 0 && strcmp(PLAYER_TEMP[playerid][pt_NAME], "Marvin", false) != 0)
	{
		PLAYER_TEMP[playerid][pt_USER_VALID_NAME] = false;
		ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{FF0000}ITZN - Aviso", "{FFFFFF}No puedes ingresar a {00FF00}ITZN{FFFFFF} si no cumples un formato de nick {00FF00}Nombre_Apellido{FFFFFF}.", "Salir", "");
		KickEx(playerid, 500);
		return 1;
	}

    if(AntiBots == 1)
    {
		new num_players_on_ip = GetNumberOfPlayersOnThisIP(PLAYER_TEMP[playerid][pt_IP]);
		if(num_players_on_ip >= 3)
		{
			ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Aviso", "{FFFFFF}No puede conectarse con más de 3 usuarios en una IP", ":(", "");
			KickEx(playerid, 500);
			return 1;
		}
	}


	new DB_Query[550], DBResult:ban_Result;
	format(DB_Query, sizeof DB_Query, "SELECT DATETIME('NOW') AS `NOW`, `BANS`.*, `BAD_HISTORY`.* FROM `BANS`, `BAD_HISTORY` WHERE (`BANS`.`NAME` = '%q' OR `BANS`.`IP` = '%q') AND `BAD_HISTORY`.`ID` = `BANS`.`ID_HISTORY`;", PLAYER_TEMP[playerid][pt_NAME], PLAYER_TEMP[playerid][pt_IP]);
	ban_Result = db_query(Database, DB_Query);

	if(db_num_rows(ban_Result))
	{
		new now[24], name[24], expire_date[24], type, by, text[128], date[24];

		db_get_field_assoc(ban_Result, "NOW", now, 24);
		db_get_field_assoc(ban_Result, "NAME", name, 24);
		db_get_field_assoc(ban_Result, "EXPIRE_DATE", expire_date, 24);
		type = db_get_field_assoc_int(ban_Result, "TYPE");
		by = db_get_field_assoc_int(ban_Result, "BY");
		db_get_field_assoc(ban_Result, "TEXT", text, 128);
		db_get_field_assoc(ban_Result, "DATE", date, 24);

		if(type == TYPE_BAN)
		{
			new dialog[480];
			format(dialog, sizeof dialog,

				"\
					{FFFFFF}Lo sentimos {00FF00}%s{FFFFFF} pero esta cuenta no puede ingresar al servidor.\n\
					\n\
					{FFFFFF}Nombre: {00FF00}%s\n\
					{FFFFFF}Expulsado por: {00FF00}%d\n\
					{FFFFFF}Fecha expulsión: {00FF00}%s\n\
					{FFFFFF}Razón: {00FF00}%s\n\
					\n\
				",
				
				PLAYER_TEMP[playerid][pt_NAME],
				name, by, date, text
			);

			ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{FF0000}ITZN - Aviso", dialog, "Salir", "");
			KickEx(playerid, 500);
		}
		else if(type == TYPE_TEMP_BAN)
		{
			new DBResult:still_banned_Result;
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `BANS` WHERE (`NAME` = '%q' OR `IP` = '%q') AND DATETIME('NOW') >= `EXPIRE_DATE`;", PLAYER_TEMP[playerid][pt_NAME], PLAYER_TEMP[playerid][pt_IP]);
			still_banned_Result = db_query(Database, DB_Query);

			if(db_num_rows(still_banned_Result))
			{
				format(DB_Query, sizeof DB_Query, "DELETE FROM `BANS` WHERE (`NAME` = '%q' OR `IP` = '%q');", PLAYER_TEMP[playerid][pt_NAME], PLAYER_TEMP[playerid][pt_IP]);
				db_query(Database, DB_Query);
			}
			else
			{
				new dialog[600];
				format(dialog, sizeof dialog,

					"\
						{FFFFFF}Lo sentimos {00FF00}%s{FFFFFF} pero esta cuenta no puede ingresar al servidor.\n\
						\n\
						{FFFFFF}Nombre: {00FF00}%s\n\
						{FFFFFF}Expulsado por: {00FF00}%d\n\
						{FFFFFF}Fecha expulsión: {00FF00}%s\n\
						{FFFFFF}Razón: {00FF00}%s\n\
						\n\
						{FFFFFF}Fecha actual: {00FF00}%s\n\
						{FFFFFF}Fecha readmisión: {00FF00}%s\n\
					",

					PLAYER_TEMP[playerid][pt_NAME],
					name, by, date, text, now, expire_date
				);

				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{FF0000}ITZN - Aviso", dialog, "Salir", "");
				KickEx(playerid, 500);
			}
			db_free_result(still_banned_Result);
		}
	}
	db_free_result(ban_Result);

	if(PLAYER_TEMP[playerid][pt_KICKED]) return 1;


	PLAYER_TEMP[playerid][pt_USER_VALID_NAME] = true;
	PLAYER_TEMP[playerid][pt_RP_NAME] = RP_GetPlayerName(playerid);

	new DBResult:Result;
    format(DB_Query, sizeof(DB_Query), "SELECT `NAME`, `PASS`, `SALT`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `NAME` = '%q' COLLATE NOCASE", PLAYER_TEMP[playerid][pt_NAME]);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result))
	{

		db_get_field_assoc(Result, "PASS", ACCOUNT_INFO[playerid][ac_PASS], 64 + 1);
		db_get_field_assoc(Result, "SALT", ACCOUNT_INFO[playerid][ac_SALT], 16);

		ACCOUNT_INFO[playerid][ac_TEMP_LVL_ADM] = db_get_field_assoc_int(Result, "ADMIN_LEVEL");

		PlayAudioStreamForPlayer(playerid, Intro_Music[random(sizeof(Intro_Music))]); // Música
		PLAYER_TEMP[playerid][pt_TIMERS][18] = SetTimerEx("LoginKick", 90000, false, "i", playerid);
		PLAYER_TEMP[playerid][pt_USER_EXIT] = true;
	}
	else
	{
		PlayAudioStreamForPlayer(playerid, Intro_Music[0]); // Música
		// Nuevo usuario
	}
	db_free_result(Result);

	barra[playerid] = CreatePlayerProgressBar(playerid,  580.000000, 388.000000, 58.500000, 3.699999, 0xFFCC00FF, 100.0000, 0);
	barratemp[playerid] = CreatePlayerProgressBar(playerid, 540.000000, 425.000000, 7.000000, 46.700000, 0xFF0000FF, 100.0000, 2);
	barrahungry[playerid] = CreatePlayerProgressBar(playerid, 38.000000, 433.000000, 45.500000, 2.699999, 0xffc75aFF, 100.0000, 0);
	barrased[playerid] = CreatePlayerProgressBar(playerid, 98.000000, 433.000000, 45.500000, 2.699999, 0xff426cFF, 100.0000, 0);
	barrarep[playerid] = CreatePlayerProgressBar(playerid, -5.000000, 445.000000, 652.000000, 3.700000, 0x41ff60FF, 100.0000, 0);
	CreatePlayerTextDraws(playerid);
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(ACCOUNT_INFO[i][ac_ADMIN_LEVEL] > 2) SendDeathMessageToPlayer(i, INVALID_PLAYER_ID, playerid, 201);
    }

    PLAYERS_IN_GAME--;

	foreach(PLAYERS_IN_RACE, i) DisablePlayerCheckpoint(i);
    foreach(PLAYERS_IN_RACE, i) PLAYER_IN_RACE[i] = 0;
	Iter_Remove(PLAYERS_IN_RACE, playerid);
 	BET_RACE = 0;
	ARENA_RACE = 0;

	YaUsoNombre[playerid] = 0;

	if(ACCOUNT_INFO[playerid][ac_ID] != 0)
	{
		new DB_Query[128];
		format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `CONNECTED` = '0', PLAYERID = '-1' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
		db_query(Database, DB_Query);
	}

	if(PLAYER_TEMP[playerid][pt_USER_LOGGED]) // ha pasado la pantalla de registro/login y ha estado jugando
	{
		ACCOUNT_INFO[playerid][ac_TIME_PLAYING] += gettime() - PLAYER_TEMP[playerid][pt_TIME_PLAYING];
		if(PLAYER_TEMP[playerid][pt_USER_EXIT])
		{
			if(PLAYER_CREW[playerid][player_crew_VALID]) CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ONLINE_MEMBERS] --;

			if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] == playerid) GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
			}

			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid)
				{
					GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
					GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
					GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
					GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_OCCUPIED] = false;
				}
			}

			if(PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] != INVALID_OBJECT_ID) DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);

			EndPlayerJob(playerid, false);

			if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL) CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] -= gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME];

			GetPlayerPos(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2]);
			GetPlayerFacingAngle(playerid, CHARACTER_INFO[playerid][ch_ANGLE]);
			CHARACTER_INFO[playerid][ch_INTERIOR] = GetPlayerInterior(playerid);
			PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP] = gettime() * 1000 - PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP];
			ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] -= PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP];

			if(CHARACTER_INFO[playerid][ch_HEALTH] <= 0.0) CHARACTER_INFO[playerid][ch_HEALTH] = 1.0;
			if(CHARACTER_INFO[playerid][ch_HEALTH] > 100.0) CHARACTER_INFO[playerid][ch_HEALTH] = 100.0;
			if(CHARACTER_INFO[playerid][ch_ARMOUR] > 100.0) CHARACTER_INFO[playerid][ch_ARMOUR] = 100.0;

			SaveUserData(playerid);
			SavePlayerToysData(playerid);
			SavePlayerVehicles(playerid, true);
			SavePlayerSkills(playerid);
			SavePlayerWorks(playerid);
			SavePlayerMisc(playerid);
			SavePlayerWeaponsData(playerid);

			HidePlayerProgressBar(playerid, PlayerBar:barra[playerid]);
			HidePlayerProgressBar(playerid, PlayerBar:barratemp[playerid]);
			HidePlayerProgressBar(playerid, PlayerBar:barrahungry[playerid]);
			HidePlayerProgressBar(playerid, PlayerBar:barrased[playerid]);
			HidePlayerProgressBar(playerid, PlayerBar:barrarep[playerid]);
			DestroyPlayerProgressBar(playerid, PlayerBar:barra[playerid]);
			DestroyPlayerProgressBar(playerid, PlayerBar:barratemp[playerid]);
			DestroyPlayerProgressBar(playerid, PlayerBar:barrahungry[playerid]);
			DestroyPlayerProgressBar(playerid, PlayerBar:barrased[playerid]);
			DestroyPlayerProgressBar(playerid, PlayerBar:barrarep[playerid]);

			new disconnect_message[128];
			new message[145];
			switch(reason)
			{
				case 0:
				{
					new string[145], Float:x,Float:y,Float:z;
					GetPlayerPos(playerid, x, y, z);
			        format(string, sizeof(string), " ALERTA  %s {FFFFFF}se crasheó ó perdió la conexión en las coord: {ff782b}%f, %f, %f.", PLAYER_TEMP[playerid][pt_RP_NAME], x, y, z);
					SendMessageToAdmins(0xff782bFF, string);
			 		format(disconnect_message, sizeof disconnect_message, "%s se ha desconectado por error (crash).", PLAYER_TEMP[playerid][pt_RP_NAME]);

					if(PLAYER_WORKS[playerid][WORK_POLICE])
					{
						format(message, sizeof message, "(Canal SAPD) {7cacf9}%s - %s se desconectó (crash).", POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], PLAYER_TEMP[playerid][pt_RP_NAME]);
						SendPoliceRadioMessage(-1, 0x4286f4FF, message);
					}
					if(PLAYER_CREW[playerid][player_crew_VALID])
					{
						format(message, sizeof message, "{%06x}(Radio) %s - %s se desconectó (crash).", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], PLAYER_TEMP[playerid][pt_RP_NAME]);
						SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], -1, message);
					}
	 			}
				case 1:
				{
					format(disconnect_message, sizeof disconnect_message, "%s se ha desconectado.", PLAYER_TEMP[playerid][pt_RP_NAME]);

					if(PLAYER_WORKS[playerid][WORK_POLICE])
					{
						format(message, sizeof message, "(Canal SAPD) {7cacf9}%s - %s se desconectó.", POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], PLAYER_TEMP[playerid][pt_RP_NAME]);
						SendPoliceRadioMessage(-1, 0x4286f4FF, message);
					}
					if(PLAYER_CREW[playerid][player_crew_VALID])
					{
						format(message, sizeof message, "{%06x}(Radio) %s - %s se desconectó.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], PLAYER_TEMP[playerid][pt_RP_NAME]);
						SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], -1, message);
					}
				}
				case 2:
				{
					format(disconnect_message, sizeof disconnect_message, "%s se ha desconectado porque fue expulsado del servidor.", PLAYER_TEMP[playerid][pt_RP_NAME]);
					
					if(PLAYER_WORKS[playerid][WORK_POLICE])
					{
						format(message, sizeof message, "(Canal SAPD) {7cacf9}%s - %s se desconectó (expulsado).", POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], PLAYER_TEMP[playerid][pt_RP_NAME]);
						SendPoliceRadioMessage(-1, 0x4286f4FF, message);
					}
					if(PLAYER_CREW[playerid][player_crew_VALID])
					{
						format(message, sizeof message, "{%06x}(Radio) %s - %s se desconectó (expulsado).", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], PLAYER_TEMP[playerid][pt_RP_NAME]);
						SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], -1, message);
					}
				}
			}
			NearbyMessage(CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_INTERIOR], GetPlayerVirtualWorld(playerid), 15.0, 0x909D95FF, disconnect_message);

			if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) EndPhoneCall(playerid);
		}
	}

	new pip[16]; format(pip, sizeof pip, "%s", PLAYER_TEMP[playerid][pt_IP]);

	DestroyPlayerCheckpoints(playerid);
	DestroyPlayerTextDraws(playerid);
	for(new i = 0; i != MAX_TIMERS_PER_PLAYER; i++) KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][i]);
	ResetPlayerVariables(playerid);

	//BlockIpAddress(pip, 12000);
	return 1;
}

ResetPlayerVariables(playerid)
{
	new temp_PLAYER_TEMP[Temp_Enum]; PLAYER_TEMP[playerid] = temp_PLAYER_TEMP;
	new temp_ACCOUNT_INFO[Account_Enum]; ACCOUNT_INFO[playerid] = temp_ACCOUNT_INFO;
	new temp_CHARACTER_INFO[Character_Enum]; CHARACTER_INFO[playerid] = temp_CHARACTER_INFO;
	new temp_BANK_ACCOUNT[Bank_Account_Enum]; BANK_ACCOUNT[playerid] = temp_BANK_ACCOUNT;

	new temp_PLAYER_TOYS[Player_Toys_Info];
	for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) PLAYER_TOYS[playerid][i] = temp_PLAYER_TOYS;

	new temp_PLAYER_POCKET[Player_Pocket_Enum];
	for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++) PLAYER_POCKET[playerid][i] = temp_PLAYER_POCKET;


	new temp_PLAYER_PHONE[Phone_Info_Enum]; PLAYER_PHONE[playerid] = temp_PLAYER_PHONE;

	new temp_PLAYER_PHONE_BOOK[Phone_Book_Enum];
	for(new i = 0; i != MAX_PHONE_CONTACTS; i ++) PLAYER_PHONE_BOOK[playerid][i] = temp_PLAYER_PHONE_BOOK;

	new temp_PLAYER_GPS[Player_GPS_Enum];
	for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i ++) PLAYER_GPS[playerid][i] = temp_PLAYER_GPS;

	new temp_PLAYER_OBJECT[Player_Objects_Enum]; PLAYER_OBJECT[playerid] = temp_PLAYER_OBJECT;

	for(new i = 0; i != sizeof(PLAYER_SKILLS[]); i ++) PLAYER_SKILLS[playerid][i] = 0;

	for(new i = 0; i != sizeof(PLAYER_WORKS[]); i ++) PLAYER_WORKS[playerid][i] = 0;

	for(new i = 0; i != sizeof(PLAYER_MISC[]); i ++) PLAYER_MISC[playerid][i] = 0;

	new temp_PLAYER_PROPERTY_CONSTRUCTO[PLAYER_PROPERTY_CONSTRUCTOR_ENU]; PLAYER_PROPERTY_CONSTRUCTOR[playerid] = temp_PLAYER_PROPERTY_CONSTRUCTO;

	PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] = INVALID_PLAYER_ID;

	new tmp_PLAYER_WEAPONS[enum_PLAYER_WEAPONS];
	for(new i = 0; i != 13; i ++) PLAYER_WEAPONS[playerid][i] = tmp_PLAYER_WEAPONS;

	new tmp_PLAYER_AC_INFO[e_PLAYER_AC_INFO];
	for(new i = 0; i != sizeof(ac_Info); i ++) PLAYER_AC_INFO[playerid][i] = tmp_PLAYER_AC_INFO;

	new tmp_PLAYER_CREW[enum_PLAYER_CREW]; PLAYER_CREW[playerid] = tmp_PLAYER_CREW;
	return 1;
}

DestroyPlayerCheckpoints(playerid)
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]))
	{
		DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT]))
	{
		DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	return 1;
}

GetEnterExitIndexById(id)
{
	for(new i = 0; i != sizeof ENTER_EXIT; i ++)
	{
		if(ENTER_EXIT[i][ee_ID] == 0) continue;
		if(ENTER_EXIT[i][ee_ID] == id) return i;
	}
	return -1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	if(!success) BlockIpAddress(ip, 12000);
    return 1;
}

public OnPlayerSpawn(playerid)
{
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_OCCUPIED) // Primer spawn
	{
		PLAYER_TEMP[playerid][pt_TIME_PLAYING] = gettime();
		PLAYER_TEMP[playerid][pt_USER_LOGGED] = true;

		SetPlayerGangZones(playerid);
		SetPlayerSkillLevels(playerid);
		ApplyAnimation(playerid,"SWAT","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"MEDIC","null",0.0,0,0,0,0,0);

		switch(CHARACTER_INFO[playerid][ch_STATE])
		{
			case ROLEPLAY_STATE_NORMAL:
			{
				ShowPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
				PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);

				if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] > 0)
				{
					CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] = 0;
					JailPlayer(playerid);
				}
				if(ACCOUNT_INFO[playerid][ac_WARN_STATUS] == 1)
				{
				    InterpolateCameraPos(playerid, 1664.045654, -1667.198608, 151.037017, 1832.894042, -1929.275268, 28.653587, 10000);
					InterpolateCameraLookAt(playerid, 1662.367797, -1662.492309, 151.224472, 1832.223022, -1924.321166, 28.731710, 10000);
					SetPlayerVirtualWorld(playerid, playerid + MAX_PLAYERS);
				}
			}
			case ROLEPLAY_STATE_JAIL:
			{
				CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_JAIL;
				if(CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] < 5) CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 5;
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][15]);
				PLAYER_TEMP[playerid][pt_TIMERS][15] = SetTimerEx("UnjailPlayer", CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] * 1000, false, "i", playerid);

				PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME] = gettime();
				SetPlayerPosEx(playerid, JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);

				new time = CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME]);
				SendClientMessageEx(playerid, -1, "{FFFFFF}Te quedan %s minutos de condena.", TimeConvert(time));

				ShowPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
				PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
			}
			case ROLEPLAY_STATE_ARRESTED:
			{
				if(ACCOUNT_INFO[playerid][ac_SU]) CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 150 * CHARACTER_INFO[playerid][ch_WANTED_LEVEL];
				else CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 300 * CHARACTER_INFO[playerid][ch_WANTED_LEVEL];

				CHARACTER_INFO[playerid][ch_WANTED_LEVEL] = 0;

				CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_JAIL;
				if(CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] < 5) CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 5;
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][15]);
				PLAYER_TEMP[playerid][pt_TIMERS][15] = SetTimerEx("UnjailPlayer", CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] * 1000, false, "i", playerid);

				PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME] = gettime();
				SetPlayerPosEx(playerid, JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);

				new time = CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME]);
				SendClientMessageEx(playerid, -1, "{FFFFFF}Te quedan %s minutos de condena.", TimeConvert(time));

				ShowPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
				PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
			}
			case ROLEPLAY_STATE_OWN_PROPERTY:
			{
				new index = GetPropertyIndexByID(CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA]);
				if(index == -1)
				{
					CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
					CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
					CHARACTER_INFO[playerid][ch_POS][0] = New_User_Pos[0];
					CHARACTER_INFO[playerid][ch_POS][1] = New_User_Pos[1];
					CHARACTER_INFO[playerid][ch_POS][2] = New_User_Pos[2];
					CHARACTER_INFO[playerid][ch_ANGLE] = New_User_Pos[3];
					CHARACTER_INFO[playerid][ch_INTERIOR] = 0;

					SetPlayerPosEx(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], CHARACTER_INFO[playerid][ch_INTERIOR], 0);
				}
				else
				{
					if(PROPERTY_INFO[index][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
					{
						SetPlayerInterior(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_INTERIOR]);
      					SetPlayerVirtualWorld(playerid, PROPERTY_INFO[index][property_ID]);
					}
					else
					{
						CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
						CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
						CHARACTER_INFO[playerid][ch_POS][0] = PROPERTY_INFO[index][property_EXT_X];
						CHARACTER_INFO[playerid][ch_POS][1] = PROPERTY_INFO[index][property_EXT_Y];
						CHARACTER_INFO[playerid][ch_POS][2] = PROPERTY_INFO[index][property_EXT_Z];
						CHARACTER_INFO[playerid][ch_ANGLE] = PROPERTY_INFO[index][property_EXT_ANGLE];
						CHARACTER_INFO[playerid][ch_INTERIOR] = PROPERTY_INFO[index][property_EXT_INTERIOR];

						SetPlayerPosEx(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], CHARACTER_INFO[playerid][ch_INTERIOR], 0);
					}
				}

				ShowPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
				PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
			}
			case ROLEPLAY_STATE_HOSPITAL:
			{
				PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
				PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = false;
				PLAYER_TEMP[playerid][pt_GAME_STATE] = GAME_STATE_DEAD;

				TogglePlayerControllable(playerid, true);
				TogglePlayerSpectatingEx(playerid, true);
				SetPlayerInterior(playerid, 0);
				CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
				PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
				PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;

				PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] = 35.0;
				UpdateHospitalSizeTextdrawLife(playerid);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][4]);
				PLAYER_TEMP[playerid][pt_TIMERS][4] = SetTimerEx("HealthUp", 1000, false, "i", playerid);

				DeleteIlegalInv(playerid);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2]);

				//ClearPlayerChat(playerid);
				if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] > 0)
				{
					if(ACCOUNT_INFO[playerid][ac_SU]) CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 300 * CHARACTER_INFO[playerid][ch_WANTED_LEVEL];
					else CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 150 * CHARACTER_INFO[playerid][ch_WANTED_LEVEL];

					SendClientMessage(playerid, -1, "{FFFFFF}Fuiste ingresado en el centro médico más cercano.");
					SendClientMessage(playerid, -1, "{FFFFFF}Cuando te recuperes serás llevado a la cárcel.");
				}
				else
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Fuiste ingresado en el centro médico más cercano.");
					SendClientMessage(playerid, -1, "{FFFFFF}Espera mientras te recuperas.");
				}

				InterpolateCameraPos(playerid, Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][0], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][1], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][2], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][0], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][1], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][2], 1000, CAMERA_CUT);
				InterpolateCameraLookAt(playerid, Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][3], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][4], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][5], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][3], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][4], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][5], 1000, CAMERA_CUT);
			}
			case ROLEPLAY_STATE_CRACK:
			{
				ShowPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
				PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);

				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][16]);
				PLAYER_TEMP[playerid][pt_TIMERS][16] = SetTimerEx("HealthDown", 3000, false, "i", playerid);

				PLAYER_TEMP[playerid][pt_INJURED_POS][0] = CHARACTER_INFO[playerid][ch_POS][0];
				PLAYER_TEMP[playerid][pt_INJURED_POS][1] = CHARACTER_INFO[playerid][ch_POS][1];
				PLAYER_TEMP[playerid][pt_INJURED_POS][2] = CHARACTER_INFO[playerid][ch_POS][2];
				PLAYER_TEMP[playerid][pt_INJURED_POS][3] = CHARACTER_INFO[playerid][ch_ANGLE];

				ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.1, true, 0, 0, 1, 0, 1);
				SendClientMessage(playerid, -1, "Estás herido, puedes llamar a un médico con {FFFF00}/servicio medico{FFFFFF} o usar {FFFF00}/desmayarse.");
				SendClientMessage(playerid, -1, "Si escoges desmayarte, tendrás que pagar hospital, si usas servicio medico, será gratis.");
			}
		}

		TextDrawShowForPlayer(playerid, Textdraws[textdraw_WATER_MARK][0]);
		TextDrawShowForPlayer(playerid, Textdraws[textdraw_WATER_MARK][1]);
		TextDrawShowForPlayer(playerid, Textdraws[textdraw_WATER_MARK][2]);
		TextDrawShowForPlayer(playerid, Textdraws[textdraw_WATER_MARK][3]);
		ShowPlayerProgressBar(playerid, PlayerBar:barrarep[playerid]);
		UpdateReputationTextDraws(playerid);
		//PreloadAnimations(playerid);

		for(new i = 0; i != sizeof Textdraws[textdraw_LOAD_SCREEN]; i ++) TextDrawHideForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][i]);

		new neccessary_rep = ACCOUNT_INFO[playerid][ac_LEVEL] * 7;
		if(ACCOUNT_INFO[playerid][ac_REP] < neccessary_rep)
		{
			if(ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] > TIME_FOR_REP) ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = TIME_FOR_REP;
			if(ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] <= 900) ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = 3000;
			SendClientMessageEx(playerid, -1, " Última vez conectado {FFFF00}%s.", ACCOUNT_INFO[playerid][ac_LAST_CONNECTION]);
			SendClientMessageEx(playerid, -1, " Eres {FFFF00}nivel %d, {FFFFFF}te faltan {FFFF00}%s minutos {FFFFFF}para subir tú experiencia.", ACCOUNT_INFO[playerid][ac_LEVEL], TimeConvert(ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] / 1000));			PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP] = gettime() * 1000;
			PLAYER_TEMP[playerid][pt_TIMERS][2] = SetTimerEx("AddPlayerReputation", ACCOUNT_INFO[playerid][ac_TIME_FOR_REP], false, "i", playerid);
		}
		else SendClientMessageEx(playerid, -1, "Escribe {FFFF00}/comprar nivel {FFFFFF}para subir al nivel {FFFF00}%d {FFFFFF}por {41f48f}$%d.", ACCOUNT_INFO[playerid][ac_LEVEL] + 1, ACCOUNT_INFO[playerid][ac_LEVEL] * 150), SendClientMessageEx(playerid, -1, " Última vez conectado {FFFF00}%s.", ACCOUNT_INFO[playerid][ac_LAST_CONNECTION]);

		if(PLAYER_PHONE[playerid][player_phone_VALID])
		{
			new DBResult:Result, DB_Query[220];
			format(DB_Query, sizeof(DB_Query),
				"\
					SELECT COUNT() FROM `PHONE_MESSAGES` WHERE `TO` = '%d' AND `OFFLINE` = '1' ORDER BY `DATE` DESC LIMIT 10;\
					UPDATE `PHONE_MESSAGES` SET `OFFLINE` = '0' WHERE `TO` = '%d';\
				",
			PLAYER_PHONE[playerid][player_phone_NUMBER],
			PLAYER_PHONE[playerid][player_phone_NUMBER]);

			Result = db_query(Database, DB_Query);
			if(db_num_rows(Result))
			{
				new new_messages = db_get_field_int(Result, 0);
				if(new_messages > 0) SendClientMessageEx(playerid, -1, "Tienes {FFFF00}%d {FFFFFF}mensajes nuevos desde tu última conexión.", new_messages);
			}
			db_free_result(Result);
		}
	}
	else if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_DEAD) // Viene de morir
	{
		if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_HOSPITAL)
		{
			if(!PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL])
			{
				TogglePlayerSpectatingEx(playerid, true);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = false;
				CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_HOSPITAL;
				CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
				PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
				PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;

				PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] = 35.0;
				UpdateHospitalSizeTextdrawLife(playerid);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][4]);
				PLAYER_TEMP[playerid][pt_TIMERS][4] = SetTimerEx("HealthUp", 1000, false, "i", playerid);

				DeleteIlegalInv(playerid);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2]);

				ClearPlayerChat(playerid);
				if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] > 0 || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Fuiste ingresado en el centro médico más cercano.");
					SendClientMessage(playerid, -1, "{FFFFFF}Cuando te recuperes serás llevado a la cárcel.");
				}
				else
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Fuiste ingresado en el centro médico más cercano.");
					SendClientMessage(playerid, -1, "{FFFFFF}Espera mientras te recuperas.");
				}

				InterpolateCameraPos(playerid, Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][0], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][1], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][2], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][0], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][1], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][2], 1000, CAMERA_CUT);
				InterpolateCameraLookAt(playerid, Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][3], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][4], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][5], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][3], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][4], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][5], 1000, CAMERA_CUT);
			}
		}
		else if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK)
		{
			ShowPlayerHud(playerid);
			SetPlayerHealthEx(playerid, 60.0);
			TogglePlayerControllable(playerid, false);
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
			PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);

			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][16]);
			PLAYER_TEMP[playerid][pt_TIMERS][16] = SetTimerEx("HealthDown", 3000, false, "i", playerid);

			ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.1, true, 0, 0, 1, 0, 1);
			SendClientMessage(playerid, -1, "Estás herido, puedes llamar a un médico con {FFFF00}/servicio medico{FFFFFF} o usar {FFFF00}/desmayarse.");
			SendClientMessage(playerid, -1, "Si escoges desmayarte, tendrás que pagar hospital, si usas servicio medico, será gratis.");
		}
	}

	if(PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL])
	{
		if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL)
		{
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][15]);
			PLAYER_TEMP[playerid][pt_TIMERS][15] = SetTimerEx("UnjailPlayer", CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] * 1000, false, "i", playerid);
		}

		SetPlayerInterior(playerid, CHARACTER_INFO[playerid][ch_INTERIOR]);
		SetPlayerVirtualWorld(playerid, 0);
		ShowPlayerHud(playerid);
		TogglePlayerControllable(playerid, false);
		PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = false;
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
		SetCameraBehindPlayer(playerid);
		PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
	}

	SetPlayerTime(playerid, SERVER_TIME[0], SERVER_TIME[1]);
	SetPlayerWeather(playerid, SERVER_WEATHER);

	PLAYER_TEMP[playerid][pt_GAME_STATE] = GAME_STATE_NORMAL;
	SetPlayerSkin(playerid, CHARACTER_INFO[playerid][ch_SKIN]);
	SetPlayerToys(playerid);
	if(CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_JAIL && CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_CRACK) SetWeaponsForPlayer(playerid);
	if(CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_HOSPITAL) SetPlayerWantedLevelEx(playerid, CHARACTER_INFO[playerid][ch_WANTED_LEVEL], "indefinido");
	SetPlayerArmedWeapon(playerid, 0);
	SetPlayerColorEx(playerid, PLAYER_COLOR);

	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE][p_ac_info_IMMUNITY] = gettime() + 5;

    //PLAYER_TEMP[playerid][pt_TIMERS][19] = SetTimerEx("CheckPlayerPause", 1000, true, "i", playerid);
	return 1;
}


CMD:desbug(playerid, params[])
{
	ARENA_RACE = 0;
	return 1;
}

CMD:desmayarse(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_CRACK) return ShowPlayerMessage(playerid, "No estás delirando", 3);

	PLAYER_TEMP[playerid][pt_WANT_MEDIC] = false;
	SetPlayerHealthEx(playerid, 0.0);
	Auto_SendPlayerAction(playerid, "pierde la conciencia y no sabe que sucede a su alrededor.");
	return 1;
}
CMD:sendsapd(playerid, params[])
{
    if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;

    new to_player;
    if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso: /sendsapd <player_id>");
    if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "* ERROR: Jugador desconectado");

    CHARACTER_INFO[to_player][ch_STATE] = ROLEPLAY_STATE_NORMAL;
    CHARACTER_INFO[to_player][ch_INTERIOR_EXTRA] = 0;
    PLAYER_TEMP[to_player][pt_INTERIOR_INDEX] = 0;
    CHARACTER_INFO[to_player][ch_INTERIOR] = 0;
    CHARACTER_INFO[to_player][ch_POLICE_JAIL_TIME] = 0; //1154.568, .1768.684, 16.321
    SetPlayerPosEx(to_player, 1155.4697, -1768.6754, 16.5930, 0.0, 0, 0, true);
    SendClientMessageEx(playerid, -1, "* Jugador '%s (%d)' fue llevado a SAPD.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
    return 1;
} // 2634.2764, -1935.1396, 13.0000
CMD:sendvagos(playerid, params[])
{
    if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;

    new to_player;
    if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso: /sendvagos <player_id>");
    if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "* ERROR: Jugador desconectado");

    CHARACTER_INFO[to_player][ch_STATE] = ROLEPLAY_STATE_NORMAL;
    CHARACTER_INFO[to_player][ch_INTERIOR_EXTRA] = 0;
    PLAYER_TEMP[to_player][pt_INTERIOR_INDEX] = 0;
    CHARACTER_INFO[to_player][ch_INTERIOR] = 0;
    CHARACTER_INFO[to_player][ch_POLICE_JAIL_TIME] = 0; //1154.568, .1768.684, 16.321
    SetPlayerPosEx(to_player, 2634.2764, -1935.1396, 13.0000, 0.0, 0, 0, true);
    SendClientMessageEx(playerid, -1, "* Jugador '%s (%d)' fue llevado a base vagos xd.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
    return 1;
}
CMD:sendcolinas(playerid, params[])
{
    if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;

    new to_player;
    if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso: /sendcolinas <player_id>");
    if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "* ERROR: Jugador desconectado");

    CHARACTER_INFO[to_player][ch_STATE] = ROLEPLAY_STATE_NORMAL;
    CHARACTER_INFO[to_player][ch_INTERIOR_EXTRA] = 0;
    PLAYER_TEMP[to_player][pt_INTERIOR_INDEX] = 0;
    CHARACTER_INFO[to_player][ch_INTERIOR] = 0;
    CHARACTER_INFO[to_player][ch_POLICE_JAIL_TIME] = 0; //1154.568, .1768.684, 16.321
    SetPlayerPosEx(to_player, 2127.8904, -1014.8026, 67.2338, 0.0, 0, 0, true);
    SendClientMessageEx(playerid, -1, "* Jugador '%s (%d)' fue llevado a Colinas.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
    return 1;
}
CMD:full(playerid, params[])
{
    if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;
    
    SetPlayerArmour(playerid, 100);
    SetPlayerHealth(playerid, 100);
	return 1;
}
CMD:sendglen(playerid, params[])
{
    if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;

    new to_player;
    if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso: /sendcolinas <player_id>");
    if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "* ERROR: Jugador desconectado");

    CHARACTER_INFO[to_player][ch_STATE] = ROLEPLAY_STATE_NORMAL;
    CHARACTER_INFO[to_player][ch_INTERIOR_EXTRA] = 0;
    PLAYER_TEMP[to_player][pt_INTERIOR_INDEX] = 0;
    CHARACTER_INFO[to_player][ch_INTERIOR] = 0;
    CHARACTER_INFO[to_player][ch_POLICE_JAIL_TIME] = 0; //1154.568, .1768.684, 16.321
    SetPlayerPosEx(to_player, 1924.5216, -1197.6259, 19.0584 , 0.0, 0, 0, true);
    SendClientMessageEx(playerid, -1, "* Jugador '%s (%d)' fue llevado a Glen.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
    return 1;
}
public OnPlayerDeath(playerid, killerid, reason)
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(ACCOUNT_INFO[i][ac_ADMIN_LEVEL] > 2) SendDeathMessageToPlayer(i, killerid, playerid, reason);
    }

	if(PLAYER_TEMP[playerid][pt_KICKED]) return 1;

	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][16]);
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
	if(!ACCOUNT_INFO[playerid][ac_SU]) SetPlayerArmourEx(playerid, 0.0);

	if(ac_Info[CHEAT_DEATH_SPAMMER][ac_Enabled])
	{
		if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_IMMUNITY])
		{
			new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_DEATH]);
			if(interval < 50)
			{
				if(!ac_Info[CHEAT_DEATH_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_DEATH_SPAMMER, float(interval));
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_DEATH_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_DEATH_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_DEATH_SPAMMER, float(interval));
				}
			}
			PLAYER_TEMP[playerid][pt_ANTIFLOOD_DEATH] = GetTickCount();
		}
	}

	if(IsPlayerConnected(killerid) && CHARACTER_INFO[killerid][ch_STATE] == ROLEPLAY_STATE_NORMAL && CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_NORMAL)
	{
		if(CHARACTER_INFO[killerid][ch_STATE] != ROLEPLAY_STATE_JAIL && CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_JAIL && !PLAYER_WORKS[killerid][WORK_POLICE])
		{
			new level = CHARACTER_INFO[killerid][ch_WANTED_LEVEL] + 1;
			SetPlayerWantedLevelEx(killerid, level, "homicidio");
			ShowPlayerMessageNotification(killerid, "Has cometido un ~r~asesinato~w~. Y se te han sumado ~y~+1 cargo~w~.", 5);
		}
	}

	if(PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW])
	{
		if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] != -1) ClosePlayerClothingMenu(playerid);
		if(PLAYER_TEMP[playerid][pt_TOYS_SHOP]) ClosePlayerToysMenu(playerid);
		if(PLAYER_TEMP[playerid][pt_SHOP]) HidePlayerShop(playerid);
		if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE])
		{
			HidePlayeriPhone(playerid);
			HidePlayeriPhoneApps(playerid);
		}
	}

	foreach(PLAYERS_IN_RACE, i) DisablePlayerCheckpoint(i);
    foreach(PLAYERS_IN_RACE, i) PLAYER_IN_RACE[i] = 0;
	Iter_Remove(PLAYERS_IN_RACE, playerid);
 	BET_RACE = 0;
 	ARENA_RACE = 0;

	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1]);

	StopAudioStreamForPlayer(playerid);
	SetPlayerDrunkLevel(playerid, 0);
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	GetPlayerPos(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2]);
	GetPlayerFacingAngle(playerid, CHARACTER_INFO[playerid][ch_ANGLE]);
	CHARACTER_INFO[playerid][ch_INTERIOR] = GetPlayerInterior(playerid);
	HidePlayerHud(playerid);
	CancelEdit(playerid);
	HidePlayerDialog(playerid);
	SetNormalPlayerMarkers(playerid);
	EndPlayerJob(playerid, false);
	PLAYER_TEMP[playerid][pt_HUNGRY_MESSAGE] = false;
	PLAYER_TEMP[playerid][pt_THIRST_MESSAGE] = false;
	PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
	PLAYER_TEMP[playerid][pt_CUFFED] = false;
	PLAYER_TEMP[playerid][pt_CUFFING] = false;
	if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
	{
		PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
		DisablePlayerTaxiMark(playerid);
	}
	if(PLAYER_TEMP[playerid][pt_WANT_MECHANIC])
	{
		PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = false;
		DisablePlayerMechanicMark(playerid);
	}
	if(PLAYER_TEMP[playerid][pt_WANT_MEDIC])
	{
		PLAYER_TEMP[playerid][pt_WANT_MEDIC] = false;
		DisablePlayerInjuredMark(playerid);
	}
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) EndPhoneCall(playerid);
	if(PLAYER_TEMP[playerid][pt_GPS_MAP]) HidePlayerGpsMap(playerid);
	if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] > 0) DisablePlayerPoliceMark(playerid);
	if(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_SHOP]) CancelPlayerTuningShop(playerid);
	if(PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE])
	{
		PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE] = false;
		SetVehicleVirtualWorldEx(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 0);
		SetVehiclePosEx(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 246.551910, 17.474195, 2.363841);
		SetVehicleZAngle(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 0.0);
	}
	if(PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] != INVALID_VEHICLE_ID)
	{
		if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
		{
			if(PLAYER_TEMP[playerid][pt_TRASH_DRIVER])
			{
				SendClientMessage(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], -1, "{FFFFFF}El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.");
				CancelTrashWork(playerid, TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
			}
			if(PLAYER_TEMP[playerid][pt_TRASH_PASSENGER])
			{
				SendClientMessage(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], -1, "{FFFFFF}El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.");
				CancelTrashWork(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], playerid, PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
			}
		}
	}

	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL)
	{
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][15]);
		PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = true;
		CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] -= gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME];
		if(CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] < 5) CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 5;
		PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME] = gettime();
		SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_ANGLE], 0, 0, 0, 0, 0, 0);
		CHARACTER_INFO[playerid][ch_INTERIOR] = JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_INTERIOR];
	}
	else
	{
		if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0 || CHARACTER_INFO[playerid][ch_WANTED_LEVEL] > 0)
		{
			DisablePlayerInjuredMark(playerid);
			if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_NORMAL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
			if(PLAYER_TEMP[playerid][pt_HOSPITAL] == -1) PLAYER_TEMP[playerid][pt_HOSPITAL] = 1;
			CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_HOSPITAL;
			PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = false;
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][16]);
			SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], 0, 0, 0, 0, 0, 0);
		}
		else
		{
			CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_CRACK;

			GetPlayerPos(playerid, PLAYER_TEMP[playerid][pt_INJURED_POS][0], PLAYER_TEMP[playerid][pt_INJURED_POS][1], PLAYER_TEMP[playerid][pt_INJURED_POS][2]);
			GetPlayerFacingAngle(playerid, PLAYER_TEMP[playerid][pt_INJURED_POS][3]);

			SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], PLAYER_TEMP[playerid][pt_INJURED_POS][0], PLAYER_TEMP[playerid][pt_INJURED_POS][1], PLAYER_TEMP[playerid][pt_INJURED_POS][2], PLAYER_TEMP[playerid][pt_INJURED_POS][3], 0, 0, 0, 0, 0, 0);
		}
	}

	PLAYER_TEMP[playerid][pt_GAME_STATE] = GAME_STATE_DEAD;
   	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_CONNECTED) // Recién conectado
	{
		if(!PLAYER_TEMP[playerid][pt_USER_VALID_NAME] || PLAYER_TEMP[playerid][pt_KICKED]) return 0;

		TogglePlayerSpectatingEx(playerid, true);
		ClearPlayerChat(playerid);

		if(PLAYER_TEMP[playerid][pt_USER_EXIT])
		{
			/* Usuario registrado
			if(ACCOUNT_INFO[playerid][ac_ID] == 0 || strcmp(PLAYER_TEMP[playerid][pt_NAME], ACCOUNT_INFO[playerid][ac_NAME], false)) // No coincide
			{
				Kick(playerid);
				return 1;
			}

			if(strcmp(PLAYER_TEMP[playerid][pt_IP], ACCOUNT_INFO[playerid][ac_IP], false)) // La IP actual no es la misma IP de la última conexión
			{
				SendClientMessage(playerid, -1, "{FFFFFF}Tu dirección IP ha cambiado desde tu última conexión.");
				format(ACCOUNT_INFO[playerid][ac_IP], 16, "%s", PLAYER_TEMP[playerid][pt_IP]);
			}*/

			ShowDialog(playerid, DIALOG_LOGIN);
   			SendClientMessage(playerid, -1, "Serás expulsado del servidor si tardas en loguearte.");
		}
		else
		{
			// Nuevo usuario
			ShowDialog(playerid, DIALOG_REGISTER);
   			SendClientMessage(playerid, -1, "Serás expulsado del servidor si tardas en registrarte.");
		}
	}
	else if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_DEAD) // Viene de jugar
	{
		SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], 0, 0, 0, 0, 0, 0);
		SpawnPlayer(playerid);
		return 0;
	}

	PLAYER_TEMP[playerid][pt_GAME_STATE] = GAME_STATE_OCCUPIED;
	return 1;
}

public OnPlayerRequestSpawn(playerid) // Intentar 'spawnear' mediante la selección de skin << spawn >>
{
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_CONNECTED) CallLocalFunction("OnPlayerRequestClass", "dd", playerid, 0);
    return 0;
}

/* Configuración básica del servidor */
#define BANK_NAME       "{00FF00}BBVA"
#define SERVER_SHORTCUT "{00ff00}ITZN"
#define SERVER_NAME		"Infinity Zone"
#define SERVER_HOSTNAME "InfinityZone | Skinshot | ¡STATS! | 0.3.7 |"
#define SERVER_GAMEMODE	"Roleplay"
#define SERVER_LANGUAGE	"Español / Spanish InfinityZone"
#define SERVER_WEBSITE	"¿?"
#define SERVER_MAPNAME 	"ITZN v. "SERVER_VERSION""


public OnGameModeInit()
{

	//CreateDatabase();

	ConnectDatabase();

	SetGameModeText(SERVER_GAMEMODE);
    SendRconCommand("hostname "SERVER_HOSTNAME"");
    SendRconCommand("language "SERVER_LANGUAGE"");
	SendRconCommand("weburl "SERVER_WEBSITE"");
	SendRconCommand("mapname "SERVER_MAPNAME"");
	SendRconCommand("minconnectiontime 3000");
	SendRconCommand("ackslimit 5000");
	SendRconCommand("messageslimit 100");
 	SendRconCommand("rcon_password 030200");

	UsePlayerPedAnims();
	DisableInteriorEnterExits();
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_GLOBAL);
	EnableStuntBonusForAll(false);
	ManualVehicleEngineAndLights();
	FormatDialogStrings();

	SanAndreas();
	
//	RespawnTimer = SetTimer("RespawnSellVehicles", 30000, 1);
//	PaydayTime = SetTimer("TimePayday", 3600000, 1);

	LoadServerInfo();
	UpdateEconomy();
	return 1;
}

FormatDialogStrings()
{
	new Dialog_Lines_String[256];

		/* PIZZA FOOD */
	format(DIALOG_FOOD_PIZZA_String, sizeof DIALOG_FOOD_PIZZA_String, "{FFFF00}Producto\t{FFFF00}Precio\n");
	for(new i; i != sizeof PIZZA_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}%d. %s\t$%d\n", i + 1, PIZZA_FOOD[i][food_NAME], PIZZA_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_PIZZA_String, Dialog_Lines_String);
	}

		/* CLUCKIN FOOD */
	format(DIALOG_FOOD_CLUCKIN_String, sizeof DIALOG_FOOD_CLUCKIN_String, "{FFFF00}Producto\t{FFFF00}Precio\n");
	for(new i; i != sizeof CLUCKIN_BELL_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}%d. %s\t$%d\n", i + 1, CLUCKIN_BELL_FOOD[i][food_NAME], CLUCKIN_BELL_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_CLUCKIN_String, Dialog_Lines_String);
	}

		/* BURGER_SHOT FOOD */
	format(DIALOG_FOOD_BURGER_String, sizeof DIALOG_FOOD_BURGER_String, "{FFFF00}Producto\t{FFFF00}Precio\n");
	for(new i; i != sizeof BURGER_SHOT_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}%d. %s\t$%d\n", i + 1, BURGER_SHOT_FOOD[i][food_NAME], BURGER_SHOT_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_BURGER_String, Dialog_Lines_String);
	}

			/* DONUT FOOD */
	format(DIALOG_FOOD_DONUT_String, sizeof DIALOG_FOOD_DONUT_String, "{FFFF00}Producto\t{FFFF00}Precio\n");
	for(new i; i != sizeof DONUT_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}%d. %s\t$%d\n", i + 1, DONUT_FOOD[i][food_NAME], DONUT_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_DONUT_String, Dialog_Lines_String);
	}

			/* CAFE FOOD */
	format(DIALOG_FOOD_CAFE_String, sizeof DIALOG_FOOD_CAFE_String, "{FFFF00}Producto\t{FFFF00}Precio\n");
	for(new i; i != sizeof CAFE_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}%d. %s\t$%d\n", i + 1, CAFE_FOOD[i][food_NAME], CAFE_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_CAFE_String, Dialog_Lines_String);
	}

			/* TACO FOOD */
	format(DIALOG_FOOD_TACO_String, sizeof DIALOG_FOOD_TACO_String, "{FFFF00}Producto\t{FFFF00}Precio\n");
	for(new i; i != sizeof TACO_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}%d. %s\t$%d\n", i + 1, TACO_FOOD[i][food_NAME], TACO_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_TACO_String, Dialog_Lines_String);
	}

			/* STEAK FOOD */
	format(DIALOG_FOOD_STEAK_String, sizeof DIALOG_FOOD_STEAK_String, "{FFFF00}Producto\t{FFFF00}Precio\n");
	for(new i; i != sizeof STEAK_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}%d. %s\t$%d\n", i + 1, STEAK_FOOD[i][food_NAME], STEAK_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_STEAK_String, Dialog_Lines_String);
	}

		/* 24/7 LIST */
	format(DIALOG_247_LIST_String, sizeof DIALOG_247_LIST_String, "{FFFF00}Producto\t{FFFF00}Precio\n");
	for(new i = 0; i != sizeof Supermarket_Product_List; i ++)
	{
		format(Dialog_Lines_String, sizeof(Dialog_Lines_String), "{FFFFFF} %s\t{41f48f}$%d\n", Supermarket_Product_List[i][product_NAME], Supermarket_Product_List[i][product_PRICE]);
		strcat(DIALOG_247_LIST_String, Dialog_Lines_String);
	}

	//GPS
	new city[45], zone[45];

	//GPS Hospitales
	format(DIALOG_PLAYER_GPS_SITE_0_String, sizeof DIALOG_PLAYER_GPS_SITE_0_String, "{FFFF00}Lugar\t{FFFF00}Zona\n");
	for(new i = 0; i != sizeof(Hospital_Spawn_Positions); i++ )
	{
		GetPointZone(Hospital_Spawn_Positions[i][0], Hospital_Spawn_Positions[i][1], city, zone);
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "Hospital %d\t%s, %s\n", i + 1, city, zone);
		strcat(DIALOG_PLAYER_GPS_SITE_0_String, Dialog_Lines_String);
	}

	//GPS CONCES
	format(DIALOG_PLAYER_GPS_SITE_7_String, sizeof DIALOG_PLAYER_GPS_SITE_7_String, "{FFFF00}Lugar\t{FFFF00}Zona\n");
	for(new i = 0; i != sizeof(SELL_VEHICLES_SHOPS_SPAWN); i++ )
	{
		GetPointZone(SELL_VEHICLES_SHOPS_SPAWN[i][0], SELL_VEHICLES_SHOPS_SPAWN[i][1], city, zone);
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "Concesionario %d\t%s, %s\n", i + 1, city, zone);
		strcat(DIALOG_PLAYER_GPS_SITE_7_String, Dialog_Lines_String);
	}

	//Colores bandas
	format(DIALOG_CREATE_CREW_COLOR_String, sizeof DIALOG_CREATE_CREW_COLOR_String, "");
	for(new i = 0; i != sizeof(RandomColors); i++)
	{
		format(Dialog_Lines_String, sizeof(Dialog_Lines_String), "{%06x}color %d\n", RandomColors[i] >>> 8, i + 1);
		strcat(DIALOG_CREATE_CREW_COLOR_String, Dialog_Lines_String);
	}

	//Animaciones
	format(DIALOG_ANIMS_String, sizeof DIALOG_ANIMS_String, "");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/rendirse\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/blowjob\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/rodar\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/borracho\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/bomba\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/apuntar\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/reir\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/amenazar\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/paja\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/herido\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/cruzarbrazos\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/recostarse\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/cubrirse\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/vomitar\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/comer\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/despedir\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/nalgada\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/agonizar\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/besar\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/crack\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/mear\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/sentarse\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/fucku\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/llamar\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/taichi\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/beber\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/boxear\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/saludar\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/curar\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/llorar\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/dormir\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/rapear\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/astrip\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/bailar\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/alentar\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/hablar\n");
	strcat(DIALOG_ANIMS_String, "{FFFFFF}/asiento\n");

	return 1;
}

new
	Club_Strippers_Actor[2],
	Club_Bar_Actor,
	Club_Actors[7];

new RandomStripAnimations[][] =
{
	"STR_A2B",
	"strip_G",
	"STR_B2C",
	"STR_C1",
	"STR_C2"
};

new RandomPayStripAnimations[][] =
{
	"PLY_CASH",
	"PUN_CASH",
	"PUN_HOLLER",
	"PUN_LOOP"
};

SanAndreas()
{
	CreateTextDraws();
	LoadEnterExits();
	LoadProperties();
	LoadCrews();
	LoadGangZones();

	SetMyWorldTime(180); // 3 horas reales = 24 horas en juego

	//camionero
	Gate = CreateObject(3037, 2774.28003, -2455.94922, 14.81200,   0.00000, 0.00000, 0.00000, 300.0);
	CreateDynamicActor(111, 2129.2319, -2276.4387, 20.6643, 50.3545, .worldid = 0, .interiorid = 0);

	//Putis
	CreateDynamicActor(225, 497.9599, -77.5734, 998.7651, 0.9400, .worldid = 0, .interiorid = 11);
	CreateDynamicActor(225, 497.9599, -77.5734, 998.7651, 0.9400, .worldid = 1, .interiorid = 11);
	CreateDynamicActor(225, 497.9599, -77.5734, 998.7651, 0.9400, .worldid = 2, .interiorid = 11);
	CreateDynamicActor(225, 497.9599, -77.5734, 998.7651, 0.9400, .worldid = 3, .interiorid = 11);
	CreateDynamicActor(225, 497.9599, -77.5734, 998.7651, 0.9400, .worldid = 4, .interiorid = 11);
	CreateDynamicActor(225, 497.9599, -77.5734, 998.7651, 0.9400, .worldid = 5, .interiorid = 11);
	CreateDynamicActor(225, 497.9599, -77.5734, 998.7651, 0.9400, .worldid = 6, .interiorid = 11);
	CreateDynamicActor(225, -223.3059, 1403.9786, 27.7734, 93.0609, .worldid = 7, .interiorid = 18);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa {00CCFF}F {FFFFFF}para soltar unos cuantos billetes.", 0xFFFFFFAA, 1208.744140, -34.261119, 1000.953125, 5.0, .testlos = true, .worldid = 0, .interiorid = 3);
    CreateDynamic3DTextLabel("{FFFFFF}Pulsa {00CCFF}F {FFFFFF}para soltar unos cuantos billetes.", 0xFFFFFFAA, 1213.738037, -33.667881, 1000.953125, 5.0, .testlos = true, .worldid = 0, .interiorid = 3);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/bebida {FFFFFF}para comprar bebida alcohólica.", 0xFFFFFFAA, 1207.234375, -29.231435, 1000.953125, 5.0, .testlos = true, .worldid = 0, .interiorid = 3);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/bebida {FFFFFF}para comprar bebida alcohólica.", 0xFFFFFFAA, 497.9489, -76.0402, 998.7578, 5.0, .testlos = true, .worldid = 0, .interiorid = 11);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/bebida {FFFFFF}para comprar bebida alcohólica.", 0xFFFFFFAA, 497.9489, -76.0402, 998.7578, 5.0, .testlos = true, .worldid = 1, .interiorid = 11);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/bebida {FFFFFF}para comprar bebida alcohólica.", 0xFFFFFFAA, 497.9489, -76.0402, 998.7578, 5.0, .testlos = true, .worldid = 2, .interiorid = 11);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/bebida {FFFFFF}para comprar bebida alcohólica.", 0xFFFFFFAA, 497.9489, -76.0402, 998.7578, 5.0, .testlos = true, .worldid = 3, .interiorid = 11);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/bebida {FFFFFF}para comprar bebida alcohólica.", 0xFFFFFFAA, 497.9489, -76.0402, 998.7578, 5.0, .testlos = true, .worldid = 4, .interiorid = 11);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/bebida {FFFFFF}para comprar bebida alcohólica.", 0xFFFFFFAA, 497.9489, -76.0402, 998.7578, 5.0, .testlos = true, .worldid = 5, .interiorid = 11);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/bebida {FFFFFF}para comprar bebida alcohólica.", 0xFFFFFFAA, 497.9489, -76.0402, 998.7578, 5.0, .testlos = true, .worldid = 6, .interiorid = 11);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/bebida {FFFFFF}para comprar bebida alcohólica.", 0xFFFFFFAA, -224.7819, 1403.9741, 27.7734, 5.0, .testlos = true, .worldid = 7, .interiorid = 18);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/bebida {FFFFFF}para comprar bebida alcohólica.", 0xFFFFFFAA, 1090.2913, 259.7495, 532.0204, 5.0, .testlos = true, .worldid = 0, .interiorid = 1);

	Club_Strippers_Actor[0] = CreateDynamicActor(246, 1209.416503, -36.272216, 1001.484375, 17.0, .worldid = 0, .interiorid = 3);
    Club_Strippers_Actor[1] = CreateDynamicActor(87, 1215.355712, -33.439422, 1001.382812, 85.3, .worldid = 0, .interiorid = 3);
	CreateDynamic3DTextLabel("{FFFFFF}Mauricia", 0xFFFFFFAA, 1209.416503, -36.272216, 1001.484375 + 0.3, 5.0, .testlos = false, .worldid = 0, .interiorid = 3);
	CreateDynamic3DTextLabel("{FFFFFF}Wladimira", 0xFFFFFFAA, 1215.355712, -33.439422, 1001.382812 + 0.3, 5.0, .testlos = false, .worldid = 0, .interiorid = 3);
    Club_Bar_Actor = CreateDynamicActor(195, 1206.232788, -29.325387, 1000.953125, 270.0, .worldid = 0, .interiorid = 3);
	Club_Actors[0] = CreateDynamicActor(1, 1209.846191, -33.879096, 1000.953125, 180.626205, .worldid = 0, .interiorid = 3);
	Club_Actors[1] = CreateDynamicActor(15, 1207.873535, -34.441837, 1000.953125, 213.213790, .worldid = 0, .interiorid = 3);
	Club_Actors[2] = CreateDynamicActor(21, 1215.694702, -31.700962, 1000.953125, 158.379913, .worldid = 0, .interiorid = 3);
	Club_Actors[3] = CreateDynamicActor(73, 1214.740356, -35.461227, 1000.953125, 337.608306, .worldid = 0, .interiorid = 3);
	Club_Actors[4] = CreateDynamicActor(78, 1213.713012, -34.496170, 1000.953125, 293.427886, .worldid = 0, .interiorid = 3);
	Club_Actors[5] = CreateDynamicActor(127, 1211.037963, -36.378440, 1000.960571, 74.092475, .worldid = 0, .interiorid = 3);
	Club_Actors[6] = CreateDynamicActor(131, 1207.190307, -36.132881, 1000.953125, 277.761077, .worldid = 0, .interiorid = 3);
	UpdateThePutis();
	SetTimer("UpdateThePutis", 3000, true);


	// Map Icons Hospitales
	for(new i = 0; i < sizeof Hospital_Spawn_Positions; i++) CreateDynamicMapIcon(Hospital_Spawn_Positions[i][0], Hospital_Spawn_Positions[i][1], Hospital_Spawn_Positions[i][2], 22, -1, 0, 0);

	//Tuning
	CreateDynamicMapIcon(2525.5132,-1515.9288,24.0120, 63, -1, 0, 0);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/tuning {FFFFFF}para personalizar tu vehículo con objetos.", 0xFFFFFFAA, 2511.0972,-1518.2462,23.7690, 15.0, .testlos = true, .worldid = 0, .interiorid = 0);
    CreateDynamicActor(50, 2531.9299, -1519.9395, 24.0192, 2.9176, .worldid = 0, .interiorid = 0);//mecanico para pedir trabajo
 	CreateDynamicPickup(1275, 1, 2529.0916,-1519.7683,24.0192, 0, 0);//para colocarte la ropa
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/mecanico{FFFFFF} para empezar o dejar de trabajar.", 0xFFFFFFAA, 2529.0916, -1519.7683, 24.0192, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel("{00FF00}Respuestos de mecánico\n{FFFFFF}Escribe {FFFF00}/repuestos{FFFFFF} o presiona {00CCFF}N{FFFFFF} para comprar repuestos mecánicos.\nPrecio por pieza: {00FF00}$50", 0xFFFFFFAA, 2509.2632, -1522.5510, 24.0172, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);


	// 3D Texts Ropas
	for(new i = 0; i < sizeof Clothing_Shop_Positions; i++)
	{
		new label_str[256];
		format(label_str, sizeof label_str, "{00FF00}%s\n\n{FFFFFF}Escribe {FFFF00}/ropa {FFFFFF}para cambiar de ropa\n{FFFFFF}Escribe {FFFF00}/prendas {FFFFFF}para comprar objetos", Clothing_Shop_Positions[i][clothing_shop_NAME]);
		CreateDynamic3DTextLabel(label_str, 0xFFFFFFAA, Clothing_Shop_Positions[i][clothing_shop_X], Clothing_Shop_Positions[i][clothing_shop_Y], Clothing_Shop_Positions[i][clothing_shop_Z] + 0.25, 10.0, .testlos = true, .interiorid = Clothing_Shop_Positions[i][clothing_shop_INTERIOR]);
	}

	// 3D Texts Pedir comida
	for(new i = 0; i < sizeof Fast_Food_Positions; i++)
	{
		new label_str[128];
		format(label_str, sizeof label_str, "{00FF00}%s\n\n{FFFFFF}Escribe {FFFF00}/pedir {FFFFFF}para alimentarte", Fast_Food_Positions[i][fast_food_NAME]);
		CreateDynamic3DTextLabel(label_str, 0xFFFFFFAA, Fast_Food_Positions[i][fast_food_X], Fast_Food_Positions[i][fast_food_Y], Fast_Food_Positions[i][fast_food_Z] + 0.25, 10.0, .testlos = true, .interiorid = Fast_Food_Positions[i][fast_food_INTERIOR]);
	}

	// 3D Texts Bank
	for(new i = 0; i < sizeof Bank_Interior_Positions; i++) CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/banco {FFFFFF} o presiona {00CCFF}N{FFFFFF} para realizar una operación", 0xFFFFFFAA, Bank_Interior_Positions[i][bank_X], Bank_Interior_Positions[i][bank_Y], Bank_Interior_Positions[i][bank_Z] + 0.25, 10.0, .testlos = true, .worldid = Bank_Interior_Positions[i][bank_WORLD], .interiorid = Bank_Interior_Positions[i][bank_INTERIOR]);
    CreateDynamicActor(11, 1911.2341,-3522.6982,993.6496,85.0354, .worldid = 0, .interiorid = 1);
    CreateDynamicActor(17, 1910.9885,-3520.7925,993.6496,86.9155, .worldid = 0, .interiorid = 1);
    CreateDynamicActor(171, 1911.2335,-3518.7593,993.6496,86.9155, .worldid = 0, .interiorid = 1);
    CreateDynamicActor(172, 1911.2305,-3516.8608,993.6496,86.9155, .worldid = 0, .interiorid = 1);


	//Cajeros
	for(new i = 0; i < sizeof ATM_BANK; i ++)
	{
		CreateDynamicObject(ATM_BANK[i][atm_modelid], ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z], ATM_BANK[i][atm_RX], ATM_BANK[i][atm_RY], ATM_BANK[i][atm_RZ], ATM_BANK[i][atm_WORLD], ATM_BANK[i][atm_INTERIOR]);

		ATM_BANK[i][atm_X] += (-0.5 * floatsin(-(ATM_BANK[i][atm_RZ] - 90.0), degrees));
		ATM_BANK[i][atm_Y] += (-0.5 * floatcos(-(ATM_BANK[i][atm_RZ] - 90.0), degrees));
		CreateDynamic3DTextLabel("{00FF00}¡Bienvenido!\n{FFFFFF}Escribe {FFFF00}/cajero {FFFFFF} o presiona {00CCFF}N{FFFFFF} para realizar una operación", 0xFFFFFFAA, ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z] + 0.25, 10.0, .testlos = true, .worldid = ATM_BANK[i][atm_WORLD], .interiorid = ATM_BANK[i][atm_INTERIOR]);

		new atm_pickup_id = CreateDynamicPickup(0, 1, ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z] + 0.10, ATM_BANK[i][atm_WORLD], ATM_BANK[i][atm_INTERIOR]), info[3];
		info[0] = PICKUP_TYPE_ATM;
		info[1] = i; // Index
		info[2] = 0; // Nada
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, atm_pickup_id, E_STREAMER_EXTRA_ID, info);
	}

	// 3D Texts Gasolinera
	for(new i = 0; i < sizeof Fuel_Stations; i++) CreateDynamic3DTextLabel("{00FF00}GASOLINERA\n\n{FFFFFF}Precio: {41f48f}$30 x Litro\n{FFFFFF}Escribe {FFFF00}/gasolina [litros / lleno] {FFFFFF}para recargar\n\nPuedes comprar un {FFFF00}/bidón {FFFFFF}de 5 litros por {41f48f}$200.", 0xFFFFFFAA, Fuel_Stations[i][0], Fuel_Stations[i][1], Fuel_Stations[i][2] + 0.25, 10.0, .testlos = true, .worldid = 0, .interiorid = 0);


	//24/7 Int
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/productos {FFFFFF}o presiona {00CCFF}N{FFFFFF} para comprar", 0xFFFFFFAA, -27.964675, -89.948631, 1003.546875 + 0.25, 10.0, .testlos = true, .interiorid = 18);

	//Ferreteria
	CreateDynamicActor(8, 2134.9050, -90.8290, 699.0078, 270.0257, .worldid = 1, .interiorid = 1);
	CreateDynamicActor(8, 2134.9050, -90.8290, 699.0078, 270.0257, .worldid = 2, .interiorid = 1);
	CreateDynamicActor(8, 2134.9050, -90.8290, 699.0078, 270.0257, .worldid = 3, .interiorid = 1);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/productos {FFFFFF}o presiona {00CCFF}N{FFFFFF} para comprar", 0xFFFFFFAA, 2136.6558, -90.7147, 699.0078 + 0.25, 10.0, .testlos = true, .worldid = 1, .interiorid = 1);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/productos {FFFFFF}o presiona {00CCFF}N{FFFFFF} para comprar", 0xFFFFFFAA, 2136.6558, -90.7147, 699.0078 + 0.25, 10.0, .testlos = true, .worldid = 2, .interiorid = 1);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/productos {FFFFFF}o presiona {00CCFF}N{FFFFFF} para comprar", 0xFFFFFFAA, 2136.6558, -90.7147, 699.0078 + 0.25, 10.0, .testlos = true, .worldid = 3, .interiorid = 1);

	//Vehs venta
	for(new i = 0; i != sizeof SELL_INFO_VEHICLES; i ++)
	{
		if(SELL_INFO_VEHICLES[i][sell_info_COLOR_1] == -1) SELL_INFO_VEHICLES[i][sell_info_COLOR_1] = valid_work_vehicle_colors[random(sizeof(valid_work_vehicle_colors))];
		if(SELL_INFO_VEHICLES[i][sell_info_COLOR_2] == -1) SELL_INFO_VEHICLES[i][sell_info_COLOR_2] = valid_work_vehicle_colors[random(sizeof(valid_work_vehicle_colors))];

		new vehicle_id = INVALID_VEHICLE_ID;
		vehicle_id = CreateVehicle(SELL_INFO_VEHICLES[i][sel_info_vehicle_MODELID], SELL_INFO_VEHICLES[i][sell_info_SPAWN_X], SELL_INFO_VEHICLES[i][sell_info_SPAWN_Y], SELL_INFO_VEHICLES[i][sell_info_SPAWN_Z], SELL_INFO_VEHICLES[i][sell_info_SPAWN_ANGLE], SELL_INFO_VEHICLES[i][sell_info_COLOR_1], SELL_INFO_VEHICLES[i][sell_info_COLOR_2], -1, false);

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_SELL;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = SELL_INFO_VEHICLES[i][sel_info_vehicle_MODELID];
		format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "EN VENTA");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = SELL_INFO_VEHICLES[i][sell_info_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = SELL_INFO_VEHICLES[i][sell_info_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = SELL_INFO_VEHICLES[i][sell_info_SPAWN_Z];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = SELL_INFO_VEHICLES[i][sell_info_SPAWN_ANGLE];

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = SELL_INFO_VEHICLES[i][sell_info_COLOR_1];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = SELL_INFO_VEHICLES[i][sell_info_COLOR_2];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = 0.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = 0.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;

		SELL_VEHICLES[vehicle_id][sell_vehicle_VALID] = true;
		SELL_VEHICLES[vehicle_id][sell_vehicle_SHOP] = SELL_INFO_VEHICLES[i][sell_info_SHOP];
		SELL_VEHICLES[vehicle_id][sell_vehicle_PRICE] = VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_PRICE];
		SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL] = VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_LEVEL];
		SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA] = VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_COINS];
		SetVehicleToRespawnEx(vehicle_id);


		new label_str[256];
		if(SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA] > 1 && SELL_VEHICLES[vehicle_id][sell_vehicle_PRICE] > 1)
  		{
			format
			(
				label_str,
					sizeof label_str,
					"\
						{00FF00}%s\n\n\
						{FFFFFF}Precio: {f44242}%d koins\n\
					", VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA]
			);
  		}
		else if(SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA] < 1)
  		{
			format
			(
				label_str,
					sizeof label_str,
					"\
						{00FF00}%s\n\n\
						{FFFFFF}Precio: {41f48f}$%s\n\
					", VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[vehicle_id][sell_vehicle_PRICE])
			);
		}
		SELL_VEHICLES[vehicle_id][sell_vehicle_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFAA, 0.0, 0.0, 1.5, 10.0, .attachedvehicle = vehicle_id, .testlos = true, .worldid = 0, .interiorid = 0);
	}

	//Concesionarios
	for(new i = 0; i < sizeof SELL_VEHICLES_SHOPS_SPAWN; i++)
	{
		CreateDynamicMapIcon(SELL_VEHICLES_SHOPS_SPAWN[i][0], SELL_VEHICLES_SHOPS_SPAWN[i][1], SELL_VEHICLES_SHOPS_SPAWN[i][2], 55, -1, 0, 0);
	}

	//Notario
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/vehículo {FFFFFF}para vender al gobierno.", 0xFFFFFFAA, 222.1944, 2353.8499, 1017.1298, 10.0, .testlos = true, .worldid = 20, .interiorid = 20);
	CreateDynamicActor(40, 222.1316, 2351.5476, 1017.1298, 0.0742, .worldid = 20, .interiorid = 20);
	CreateDynamic3DTextLabel("{FFFFFF}Maria", 0xFFFFFFAA, 222.1316, 2351.5476, 1017.1298 + 0.3, 5.0, .testlos = false, .worldid = 20, .interiorid = 20);

	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/propiedades {FFFFFF}para ofrecerla al gobierno.\nUsa {FFFF00}/comprarpropiedad [dirección] {FFFFFF}para adquirir una propiedad.", 0xFFFFFFAA, 226.8522, 2348.2397, 1017.1298, 10.0, .testlos = true, .worldid = 20, .interiorid = 20);
	CreateDynamicActor(217, 224.5505, 2348.2241, 1017.1298, 271.8583, .worldid = 20, .interiorid = 20);
	CreateDynamic3DTextLabel("{FFFFFF}Nico\n\n:)", 0xFFFFFFAA, 224.5505, 2348.2241, 1017.1298 + 0.3, 5.0, .testlos = false, .worldid = 20, .interiorid = 20);

	//Grua
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/grua {FFFFFF}para remolcar un vehículo.\nBúsca nuestra app en tu {FFFF00}/iPhone{FFFFFF}, es el icono del vehículo.", 0xFFFFFFAA, 217.3736, 2348.3967, 1017.1257, 10.0, .testlos = true, .worldid = 20, .interiorid = 20);
	CreateDynamicActor(219, 222.1100, 2345.7090, 1017.1298, 181.8583, .worldid = 20, .interiorid = 20);
	CreateDynamic3DTextLabel("{FFFFFF}Vicky", 0xFFFFFFAA, 222.1100, 2345.7090, 1017.1298 + 0.3, 5.0, .testlos = false, .worldid = 20, .interiorid = 20);

	//nombre
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/nombre {FFFFFF}para cambiar tu nombre en el registro.\nEl costo por cambiarse el nombre es de {f44242}3 koins.", 0xFFFFFFAA, 222.2257, 2343.4063, 1017.0952, 10.0, .testlos = true, .worldid = 20, .interiorid = 20);
	CreateDynamicActor(225, 219.6761, 2348.1011, 1017.1298, 88.4115, .worldid = 20, .interiorid = 20);
	CreateDynamic3DTextLabel("{FFFFFF}Ainhoa", 0xFFFFFFAA, 219.6761, 2348.1011, 1017.1298 + 0.3, 5.0, .testlos = false, .worldid = 20, .interiorid = 20);

	//leñador y cosechador
	CreateDynamicMapIcon(2494.5845, -853.2233, 95.3472, 19, -1, 0, 0);
	CreateDynamicActor(29, 2347.6138, -647.1254, 128.0547, 132.4764, .worldid = 0, .interiorid = 0);//cosechador
	CreateDynamicActor(30, 2350.8540, -649.0869, 128.0547, 202.0370, .worldid = 0, .interiorid = 0);//leñador


	//San Andreas Vehicles
	for(new i = 0; i != sizeof San_Andreas_Vehicles; i ++)
	{

		if(San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1] == -1) San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1] = valid_work_vehicle_colors[random(sizeof(valid_work_vehicle_colors))];
		if(San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2] == -1) San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2] = valid_work_vehicle_colors[random(sizeof(valid_work_vehicle_colors))];

		new vehicle_id = INVALID_VEHICLE_ID;
		vehicle_id = CreateVehicle(San_Andreas_Vehicles[i][san_andreas_vehicle_MODELID], San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_X], San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Y], San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Z], San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_ANGLE], San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1], San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2], 300, San_Andreas_Vehicles[i][san_andreas_vehicle_SIREN]);
		if(vehicle_id == INVALID_VEHICLE_ID) continue;

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = San_Andreas_Vehicles[i][san_andreas_vehicle_MODELID];
		format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "%c%c%c-%04d", getRandomLetter(), getRandomLetter(), getRandomLetter(), random(9999));
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Z];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_ANGLE];

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = VEHICLE_INFO[ GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_MAX_GAS];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = frandom(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] / 3, 2);
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;

		if(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			WORK_VEHICLES[vehicle_id][work_vehicle_VALID] = true;
			WORK_VEHICLES[vehicle_id][work_vehicle_WORK] = San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE_IN];
			WORK_VEHICLES[vehicle_id][work_vehicle_EXP] = San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE_IN_EXP];
			WORK_VEHICLES[vehicle_id][work_vehicle_NEED_DUTY] = work_info[ WORK_VEHICLES[vehicle_id][work_vehicle_WORK] ][work_info_NEED_DUTY];
		}

		SetVehicleToRespawnEx(vehicle_id);
	}

	//Barreras
	for(new i = 0; i != sizeof San_Andreas_Barriers; i ++)
	{
		CreateDynamicObject(966, San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z], 0.0, 0.0, San_Andreas_Barriers[i][barrier_ROTATION], San_Andreas_Barriers[i][barrier_WORLD], San_Andreas_Barriers[i][barrier_INTERIOR]);
		San_Andreas_Barriers[i][barrier_OBJECT_ID] = CreateDynamicObject(968, San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 0.72967, 0.0, -90.0, San_Andreas_Barriers[i][barrier_ROTATION], San_Andreas_Barriers[i][barrier_WORLD], San_Andreas_Barriers[i][barrier_INTERIOR]);

		if(San_Andreas_Barriers[i][barrier_VEHICLE_TYPE])
		{
			new label_str[128];
			format(label_str, sizeof label_str, "{00FF00}%c%s\n{FFFFFF}Toque el {00CCFF}claxón{FFFFFF} para pasar.", toupper(work_info[ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN] ][work_info_NAME][0]), work_info[ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN] ][work_info_NAME][1]);

			CreateDynamic3DTextLabel(label_str, 0xFFFFFFAA, San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 1.5, 15.0, .worldid = San_Andreas_Barriers[i][barrier_WORLD], .interiorid = San_Andreas_Barriers[i][barrier_INTERIOR]);
		}
		else CreateDynamic3DTextLabel("{FFFFFF}Toque el {00CCFF}claxón {FFFFFF}para pasar.", 0xFFFFFFAA, San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 1.5, 15.0, .worldid = San_Andreas_Barriers[i][barrier_WORLD], .interiorid = San_Andreas_Barriers[i][barrier_INTERIOR]);
	}

	//polciais
	for(new i = 0; i != sizeof POLICE_GARAGE_DOORS; i ++)
	{
		POLICE_GARAGE_DOORS[i][police_gdoor_OBJECT_ID] = CreateDynamicObject(POLICE_GARAGE_DOORS[i][police_gdoor_MODELID], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_X], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_Y], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_Z], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_RX], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_RY], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_RZ], 0, 0);
	}
	for(new i = 0; i != sizeof POLICE_DOORS; i ++)
	{
		POLICE_DOORS[i][police_door_OBJECT_ID] = CreateDynamicObject(POLICE_DOORS[i][police_door_MODELID], POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y], POLICE_DOORS[i][police_door_Z], 0.0, 0.0, POLICE_DOORS[i][police_door_RZ], POLICE_DOORS[i][police_door_WORLD], POLICE_DOORS[i][police_door_INTERIOR]);
	}
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/policia{FFFFFF} o {FFFFFF}presiona {00CCFF}N{FFFFFF} para empezar o dejar de trabajar.", 0xFFFFFFAA, 1456.6003, -1721.3387, 1479.7959, 5.0, .testlos = true, .worldid = 0, .interiorid = 20);

	CreateDynamic3DTextLabel("{FFFFFF}Usa {FFFF00}/entregarse {FFFFFF}para entregarte\nUsa {FFFF00}/pagar {FFFFFF}para pagar tus multas y quitarte tus cargos.\n\nSi usted no tiene para pagar la multa, será llevado a la cárcel.", 0xFFFFFFAA, 1471.1588, -1712.9259, 1479.7959, 5.0, .testlos = true, .worldid = 0, .interiorid = 20);
    CreateDynamicActor(303, 1469.5984,-1710.0427,1479.7959,270.8200, .worldid = 0, .interiorid = 20);
    CreateDynamicActor(304, 1469.5952,-1713.0542,1479.7959,270.8200, .worldid = 0, .interiorid = 20);
    CreateDynamicActor(305, 1469.5961,-1715.4727,1479.7959,270.8200, .worldid = 0, .interiorid = 20);
    CreateDynamicActor(288, 1473.7013,-1738.9080,1479.7959,2.2908, .worldid = 0, .interiorid = 20);
	CreateDynamic3DTextLabel("{FFFFFF}Usa {FFFF00}/equiparse {FFFFFF}para equiparte", 0xFFFFFFAA, 1456.3899, -1740.9731, 1479.7959, 5.0, .testlos = true, .worldid = 0, .interiorid = 20);

	Jail_Areas[0] = CreateDynamicRectangle(1733.2421875, -1615.48828125, 1833.2421875, -1515.48828125, 0, 20);
	Jail_Areas[1] = CreateDynamicRectangle(1733.2421875, -1615.48828125, 1833.2421875, -1515.48828125, 0, 10);
	Jail_Areas[2] = CreateDynamicRectangle(1733.2421875, -1615.48828125, 1833.2421875, -1515.48828125, 0, 3);


	//Trabajos
	for(new i = 1; i != sizeof obtain_work_coords; i ++)
	{
		new label_str[256];

		switch(work_info[i][work_info_TYPE])
		{
			case WORK_TYPE_NORMAL:
			{
				format(label_str, sizeof label_str, "{00FF00}%s\n{FFFFFF}Requisito: {00FF00}nivel %d\n\n{FFFFFF}Presiona {00CCFF}N{FFFFFF} o usa {FFFF00}/trabajar {FFFFFF}para unirte a éste trabajo.\n{FFFFFF}Usa {FFFF00}/ayuda trabajos {FFFFFF}si no sabes en que consiste el trabajo.", work_info[i][work_info_NAME], work_info[i][work_info_LEVEL]);
				CreateDynamic3DTextLabel(label_str, 0xFFFFFFAA, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z], 10.0, .testlos = true, .interiorid = obtain_work_coords[i][obtain_work_INTERIOR]);
				CreateDynamicPickup(1239, 1, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z], -1, obtain_work_coords[i][obtain_work_INTERIOR]);
				if(obtain_work_coords[i][obtain_work_MAP_ICON]) CreateDynamicMapIcon(obtain_work_coords[i][obtain_work_MAP_ICON_X], obtain_work_coords[i][obtain_work_MAP_ICON_Y], obtain_work_coords[i][obtain_work_MAP_ICON_Z], obtain_work_coords[i][obtain_work_MAP_ICON_ID], -1, 0, 0);
			}
		}
	}

	//Random taximeters
	for(new i = 0; i != MAX_VEHICLES; i ++) TAXI_METER_VEHICLE[i][veh_taxi_meter_PRICE] = minrand(2, 8);

	//Carga camioneros
	CreateDynamic3DTextLabel("{FFFFFF}Usa {FFFF00}/cargar {FFFFFF}para cargar el camión", 0xFFFFFFAA, 2771.3376, -2456.0068, 13.6377, 10.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamicPickup(19135, 1, 2771.3376, -2456.0068, 13.6377, 0, 0);

	//rutas
	CreateDynamic3DTextLabel("{00FF00}ESTACIÓN #1 IDLEWOOD\n\n{FFFFFF}Destino: Estación #2 {00FF00}Camioneros\n{FFFFFF}Presiona {00CCFF}G{FFFFFF} para subir al autobús, es gratis", 0xFFFFFFAA, 2270.7173, -1756.0719, 13.5469, 8.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel("{00FF00}ESTACIÓN #2 CAMIONEROS\n\n{FFFFFF}Destino: Estación #3 {00FF00}Basurero\n{FFFFFF}Presiona {00CCFF}G{FFFFFF} para subir al autobús, es gratis", 0xFFFFFFAA, 2726.4551, -2413.7476, 13.6328, 8.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel("{00FF00}ESTACIÓN #3 BASURERO\n\n{FFFFFF}Destino: Estación #4 {00FF00}Unity (taxistas)\n{FFFFFF}Presiona {00CCFF}G{FFFFFF} para subir al autobús, es gratis", 0xFFFFFFAA, 2441.7756, -2655.9236, 13.6641, 8.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel("{00FF00}ESTACIÓN #4 UNITY STATION\n\n{FFFFFF}Destino: Estación #5 {00FF00}Gobierno Los Santos\n{FFFFFF}Presiona {00CCFF}G{FFFFFF} para subir al autobús, es gratis", 0xFFFFFFAA, 1829.2877, -1891.3835, 13.4709, 8.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel("{00FF00}ESTACIÓN #5 GOBIERNO LOS SANTOS\n\n{FFFFFF}Destino: Estación #6 {00FF00}Banco MTL\n{FFFFFF}Presiona {00CCFF}G{FFFFFF} para subir al autobús, es gratis", 0xFFFFFFAA, 1537.3290, -1657.3992, 13.5469, 8.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel("{00FF00}ESTACIÓN #6 BANCO MTL\n\n{FFFFFF}Destino: Estación #7 {00FF00}Leñador\n{FFFFFF}Presiona {00CCFF}G{FFFFFF} para subir al autobús, es gratis", 0xFFFFFFAA, 1489.0958, -1050.5033, 23.8270, 8.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel("{00FF00}ESTACIÓN #7 LEÑADOR\n\n{FFFFFF}Destino: Estación #8 {00FF00}Mecánicos\n{FFFFFF}Presiona {00CCFF}G{FFFFFF} para subir al autobús, es gratis", 0xFFFFFFAA, 2599.0212, -1055.5106, 69.5704, 8.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamic3DTextLabel("{00FF00}ESTACIÓN #8 MECÁNICOS\n\n{FFFFFF}Destino: Base de choferes de ruta\n{FFFFFF}Presiona {00CCFF}G{FFFFFF} para subir al autobús, es gratis", 0xFFFFFFAA, 2524.2576, -1496.9513, 24.0000, 8.0, .testlos = true, .worldid = 0, .interiorid = 0);

	//armero
	CreateDynamicMapIcon(-86.3446, -299.4968, 2.7646, 18, -1, 0, 0);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/balas {FFFFFF}o presiona {00CCFF}N{FFFFFF} para comprar balas en tus armas actuales", 0xFFFFFFAA, 1292.4838, -63.6694, 1002.4969 + 0.3, 5.0, .testlos = false, .worldid = 25, .interiorid = 18);

	//gimnasio
	CreateDynamicActor(80, 767.2688, 14.3278, 1000.6999, 270.7483, .worldid = 0, .interiorid = 5);
	CreateDynamic3DTextLabel("{FFFFFF}Usa {FFFF00}/aprender boxeo{FFFFFF} para aprender éste estilo de pelea.\n{FFFFFF}Costo por aprender: {41f48f}$900", 0xFFFFFFAA, 767.2688, 14.3278, 1000.6999 + 0.3, 5.0, .testlos = false, .worldid = 0, .interiorid = 5);
 	CreateDynamicActor(49, 768.1328, -36.8847, 1000.6865, 181.1809, .worldid = 0, .interiorid = 6);
	CreateDynamic3DTextLabel("{FFFFFF}Usa {FFFF00}/aprender kunfu{FFFFFF} para aprender éste estilo de pelea.\n{FFFFFF}Costo por aprender: {41f48f}$1.200", 0xFFFFFFAA, 768.1328, -36.8847, 1000.6865 + 0.3, 5.0, .testlos = false, .worldid = 0, .interiorid = 6);
 	CreateDynamicActor(28, 774.8096, -59.8695, 1000.7184, 162.1889, .worldid = 0, .interiorid = 7);
	CreateDynamic3DTextLabel("{FFFFFF}Usa {FFFF00}/aprender kickbox{FFFFFF} para aprender éste estilo de pelea.\n{FFFFFF}Costo por aprender: {41f48f}$1.600", 0xFFFFFFAA, 774.8096, -59.8695, 1000.7184 + 0.3, 5.0, .testlos = false, .worldid = 0, .interiorid = 7);

	//piezas de metal
	CreateDynamicMapIcon(93.1727, -187.8790, 1.4844, 6, -1, 0, 0);
	CreateDynamic3DTextLabel("{00FF00}Piezas de arma\n{FFFFFF}Escribe {FFFF00}/comprar piezas {FFFFFF} o presiona {00CCFF}N{FFFFFF} para comprar piezas.\nPrecio por pieza: {00FF00}$600", 0xFFFFFFAA, 93.1727, -187.8790, 1.4844, 9.0, .testlos = true, .worldid = 0, .interiorid = 0);

	//carrera drag
	CreateDynamicMapIcon(907.4092, 2430.1453, 10.7255, 53, -1, 0, 0);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/retar [id] [$apuesta] {FFFFFF}para competir con una persona.", 0xFFFFFFAA, 907.4092, 2430.1453, 10.7255, 15.0, .testlos = true, .worldid = 0, .interiorid = 0);

	//Leñador
	CreateDynamicPickup(19793, 1, 2354.7151, -653.2271, 128.0547, 0, 0);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/permiso{FFFFFF} para empezar o dejar de trabajar.", 0xFFFFFFAA, 2354.7151, -653.2271, 128.0547, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);

	//Piloto
	CreateDynamicActor(120, 1633.2999, -2484.4868, 901.6105, 298.8011, .worldid = 1, .interiorid = 1);
	CreateDynamicActor(155, 1651.4037, -2472.9634, 901.6032, 180.4583, .worldid = 1, .interiorid = 1);//pizzero
	CreateDynamicPickup(1275, 1, 1650.0181, -2495.9001, 901.6032, 1, 1);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/piloto{FFFFFF} para empezar o dejar de trabajar.", 0xFFFFFFAA, 1650.0181, -2495.9001, 901.6032, 5.0, .testlos = true, .worldid = 1, .interiorid = 1);

	//Medico
	CreateDynamicPickup(1275, 1, 1789.3673, -1744.2170, 341.2477, -1, 3);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/medico{FFFFFF} para empezar o dejar de trabajar.", 0xFFFFFFAA, 3903.1658, -699.6694, 102.6516, 5.0, .testlos = true, .interiorid = 3);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/consultar vida {FFFFFF}para hacerte un diagnóstico de vida gratis.", 0xFFFFFFAA, 1779.1069, -1777.9885, 341.2477, 5.0, .testlos = true, .interiorid = 3);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/consultar hambre {FFFFFF}para hacerte un diagnóstico de hambre gratis.", 0xFFFFFFAA, 1790.2037, -1770.6217, 341.2477, 5.0, .testlos = true, .interiorid = 3);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/consultar sed {FFFFFF}para hacerte un diagnóstico de sed gratis.", 0xFFFFFFAA, 1790.2875, -1777.0745, 341.2477, 5.0, .testlos = true, .interiorid = 3);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/farmacia {FFFFFF}para comprar medicamentos.", 0xFFFFFFAA, 3907.5325,-692.8316,102.6516, 5.0, .testlos = true, .interiorid = 3);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/curarme {FFFFFF}para sanarte.\nLa curación cuesta {41f48f}$1.800.", 0xFFFFFFAA, 3903.1025, -708.8776, 102.6516, 5.0, .testlos = true, .interiorid = 3);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/aprender medicina {FFFFFF}para aumentar tu habilidad en medicina.\n{FFFFFF}Aprendiendo medicina podrás curar más rápido y ganar más dinero.\nLa clase cuesta {41f48f}$4.500{FFFFFF} cada una", 0xFFFFFFAA, 3920.4014,-681.2678,102.6516, 5.0, .testlos = true, .interiorid = 3);

	//Drug dealer
	CreateDynamicActor(29, 2297.7263, 821.6959, -68.1065, 228.9951, .worldid = 0, .interiorid = 1);//farmaceutica
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/marihuana {FFFFFF}para comprar maria.", 0xFFFFFFAA, 2297.7263, 821.6959, -68.1065, 5.0, .testlos = true, .worldid = 0, .interiorid = 1);

	//Trash
	CreateDynamicPickup(1275, 1, 2510.5586,-2640.3730,13.8623, 0, 0);
	CreateDynamic3DTextLabel("{FFFFFF}Escribe {FFFF00}/basurero{FFFFFF} para empezar o dejar de trabajar.", 0xFFFFFFAA, 2510.5586,-2640.3730,13.8623, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);
	CreateDynamicActor(182, 2504.9951, -2639.7522, 13.8623, 269.8100, .worldid = 0, .interiorid = 0);//basurero
	
	CreateDynamicActor(186, 2740.3293,-2477.1609,13.8662,269.5309, .worldid = 0, .interiorid = 0);//camionero

	//Ruta 0
	CreateTrashCheckpoint(0, 1440, 1972.96362, -2173.06250, 13.06100,   0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(0, 1440, 1829.17859, -1857.54224, 13.05640,   0.00000, 0.00000, 92.00000);
	CreateTrashCheckpoint(0, 1440, 1839.41809, -1547.50342, 12.99280,   0.00000, 0.00000, 60.00000);
	CreateTrashCheckpoint(0, 1440, 2008.61816, -1473.01697, 13.05050,   0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(0, 1440, 2487.36572, -1511.58350, 23.48540,   0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(0, 1440, 2626.91748, -2123.30078, 13.02690,   0.00000, 0.00000, 0.00000);

	//Ruta 1
	CreateTrashCheckpoint(1, 1440, 1946.51770, -2172.89038, 12.98570,   0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(1, 1440, 1539.98743, -1724.71472, 13.04680,   0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(1, 1440, 1213.44812, -1331.65881, 13.06110,   0.00000, 0.00000, -98.00000);
	CreateTrashCheckpoint(1, 1440, 2116.08276, -1116.47083, 24.76960,   0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(1, 1440, 1814.43848, -1871.70532, 13.07520,   0.00000, 0.00000, 91.00000);

	//Ruta 2
	CreateTrashCheckpoint(2, 1440, 2243.60400, -2220.99292, 13.04890,   0.00000, 0.00000, 314.62979);
	CreateTrashCheckpoint(2, 1440, 1829.93005, -1924.84045, 13.04189,   0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(2, 1440, 1859.44165, -1275.83484, 12.95141,   0.00000, 0.00000, 273.73282);
	CreateTrashCheckpoint(2, 1440, 1548.92078, -1046.77991, 23.27390,   0.00000, 0.00000, 321.82990);
	CreateTrashCheckpoint(2, 1440, 621.10052, -1305.84192, 13.93080,   0.00000, 0.00000, 281.79251);
	CreateTrashCheckpoint(2, 1440, 1030.85547, -1829.88049, 13.31371,   0.00000, 0.00000, 322.29260);




	//LENADOR arboles
	Lumberjack_Area = CreateDynamicRectangle(2138.0, -775.0, 2413.0, -534.0, 0, 0);
	for(new i = 0; i != sizeof LUMBER_TREES; i ++)
	{
		LUMBER_TREES[i][lumber_tree_OBJECT_ID] = CreateDynamicObject(LUMBER_TREES[i][lumber_tree_MODELID], LUMBER_TREES[i][lumber_tree_X], LUMBER_TREES[i][lumber_tree_Y], LUMBER_TREES[i][lumber_tree_Z], LUMBER_TREES[i][lumber_tree_RX], LUMBER_TREES[i][lumber_tree_RY], LUMBER_TREES[i][lumber_tree_RZ], 0, 0);

		new label_str[256];
		format(label_str, sizeof label_str, "{00FF00}Árbol (%d)\n\n{FFFFFF}Escribe {FFFF00}/talar {FFFFFF}para cortar el árbol.", i);
		LUMBER_TREES[i][lumber_tree_LABEL] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFAA, LUMBER_TREES[i][lumber_tree_X], LUMBER_TREES[i][lumber_tree_Y], LUMBER_TREES[i][lumber_tree_Z] + 1.5, 5.0, .testlos = false, .worldid = 0, .interiorid = 0);
	}

	//Agricultor
	CreateDynamicMapIcon(1371.0372,-1890.0668,13.5728, 36, -1, 0, 0);
	CreateDynamicActor(44, 1376.7854, -1884.0741, 13.5728, 77.1550, true, 100.0, 0, 0);//semillero
	CreateDynamic3DTextLabel("{FFFFFF}Usa {FFFF00}/semillas{FFFFFF} o {FFFFFF}presiona {00CCFF}N{FFFFFF} para comprar semillas", 0xFFFFFFAA, 1371.0372,-1890.0668,13.5728, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);

	//Cosechador
	Harvest_Area = CreateDynamicRectangle(2405.0, -906.0, 2616.0, -794.0, 0, 0);
	return 1;
}

forward UpdateThePutis();
public UpdateThePutis()
{
	ApplyDynamicActorAnimation(Club_Bar_Actor, "BAR", "BARman_idle", 4.1, 1, 0, 0, 0, 0);

	new
		strip_anim = random(sizeof(RandomStripAnimations)),
		stripper = random(sizeof(Club_Strippers_Actor));
	ApplyDynamicActorAnimation(Club_Strippers_Actor[stripper], "STRIP", RandomStripAnimations[strip_anim], 4.1, 1, 0, 0, 0, 0);


	for(new i = 0; i != sizeof(Club_Actors); i ++)
	{
		ApplyDynamicActorAnimation(Club_Actors[i], "STRIP", RandomPayStripAnimations[random(sizeof(RandomPayStripAnimations))], 4.1, 1, 0, 0, 0, 0);
	}
	return 1;
}

CreateTrashCheckpoint(route, modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(route >= MAX_ROUTES) return print("---> Límite superado en array 'TRASH_OBJECTS, route' en la función 'CreateTrashCheckpoint'.");
	if(!TRASH_OBJECTS[route][trash_route_VALID]) TRASH_OBJECTS[route][trash_route_VALID] = true;
	if(TRASH_OBJECTS[route][trash_route_OBJECTS] >= MAX_OBJECTS_PER_ROUTE) return print("---> Límite superado en array 'TRASH_OBJECTS, objects' en la función 'CreateTrashCheckpoint'.");

	if(TRASH_OBJECTS[route][trash_route_OBJECTS] == 0) TRASH_OBJECTS[route][trash_route_DISTANCE] = GetDistanceBetweenPoints3D(x, y, z, obtain_work_coords[WORK_TRASH][obtain_work_X], obtain_work_coords[WORK_TRASH][obtain_work_Y], obtain_work_coords[WORK_TRASH][obtain_work_Z]);
	else
	{
		TRASH_OBJECTS[route][trash_route_DISTANCE] -= GetDistanceBetweenPoints3D(TRASH_OBJECTS[route][trash_object_X][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1], TRASH_OBJECTS[route][trash_object_Y][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ], TRASH_OBJECTS[route][trash_object_Z][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ], obtain_work_coords[WORK_TRASH][obtain_work_X], obtain_work_coords[WORK_TRASH][obtain_work_Y], obtain_work_coords[WORK_TRASH][obtain_work_Z]);
		TRASH_OBJECTS[route][trash_route_DISTANCE] += GetDistanceBetweenPoints3D(x, y, z, TRASH_OBJECTS[route][trash_object_X][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1], TRASH_OBJECTS[route][trash_object_Y][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ], TRASH_OBJECTS[route][trash_object_Z][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ]);
	}

	TRASH_OBJECTS[route][trash_object_MODELID][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = modelid;
	TRASH_OBJECTS[route][trash_object_X][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = x;
	TRASH_OBJECTS[route][trash_object_Y][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = y;
	TRASH_OBJECTS[route][trash_object_Z][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = z;
	TRASH_OBJECTS[route][trash_object_RX][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = rx;
	TRASH_OBJECTS[route][trash_object_RY][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = ry;
	TRASH_OBJECTS[route][trash_object_RZ][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = rz;
	//CreateDynamicObject(modelid, x, y, z, rx, ry, rz, 0, 0);

	TRASH_OBJECTS[route][trash_route_DISTANCE] += GetDistanceBetweenPoints3D(x, y, z, obtain_work_coords[WORK_TRASH][obtain_work_X], obtain_work_coords[WORK_TRASH][obtain_work_Y], obtain_work_coords[WORK_TRASH][obtain_work_Z]);
	TRASH_OBJECTS[route][trash_route_MONEY] = floatround(0.3 * TRASH_OBJECTS[route][trash_route_DISTANCE]);

	TRASH_OBJECTS[route][trash_route_OBJECTS] ++;
	return 1;
}

stock Float:GetDistanceBetweenPoints3D(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
    return VectorSize(x1-x2,y1-y2,z1-z2);
}

CreateTextDraws()
{
	for(new i; i < sizeof(Textdraws); i++) Textdraws[Textdraws_Enum:i] = INVALID_TEXT_DRAW;

	Textdraws[textdraw_GPS_MAP][0] = TextDrawCreate(483.045318, 194.249984, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_GPS_MAP][0], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_GPS_MAP][0], 148.052719, 176.750000);
	TextDrawAlignment(Textdraws[textdraw_GPS_MAP][0], 1);
	TextDrawColor(Textdraws[textdraw_GPS_MAP][0], 120);
	TextDrawUseBox(Textdraws[textdraw_GPS_MAP][0], true);
	TextDrawBoxColor(Textdraws[textdraw_GPS_MAP][0], 0);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_GPS_MAP][0], 0);
	TextDrawFont(Textdraws[textdraw_GPS_MAP][0], 4);

	Textdraws[textdraw_GPS_MAP][1] = TextDrawCreate(map_td_X, map_td_Y, "samaps:map");
	TextDrawLetterSize(Textdraws[textdraw_GPS_MAP][1], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_GPS_MAP][1], map_td_SIZE_X, map_td_SIZE_Y);
	TextDrawAlignment(Textdraws[textdraw_GPS_MAP][1], 1);
	TextDrawColor(Textdraws[textdraw_GPS_MAP][1], -1);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_GPS_MAP][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GPS_MAP][1], 255);
	TextDrawFont(Textdraws[textdraw_GPS_MAP][1], 4);
	TextDrawSetProportional(Textdraws[textdraw_GPS_MAP][1], 0);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][1], 0);

	Textdraws[textdraw_GPS_MAP][2] = TextDrawCreate(557.071899, 194.833297, "Use ~y~/mapa ~w~~h~o ~y~/iPhone ~w~~h~para salir.");
	TextDrawLetterSize(Textdraws[textdraw_GPS_MAP][2], 0.201215, 1.121666);
	TextDrawAlignment(Textdraws[textdraw_GPS_MAP][2], 2);
	TextDrawColor(Textdraws[textdraw_GPS_MAP][2], -1);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_GPS_MAP][2], 1);
	TextDrawFont(Textdraws[textdraw_GPS_MAP][2], 1);
	TextDrawSetProportional(Textdraws[textdraw_GPS_MAP][2], 1);

	Textdraws[textdraw_WATER_MARK][0] = TextDrawCreate(564.099792, 429.333587, "INFINITIY");
	TextDrawLetterSize(Textdraws[textdraw_WATER_MARK][0], 0.296793, 1.389999);
	TextDrawAlignment(Textdraws[textdraw_WATER_MARK][0], 1);
	TextDrawColor(Textdraws[textdraw_WATER_MARK][0], -181);
	TextDrawSetShadow(Textdraws[textdraw_WATER_MARK][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_WATER_MARK][0], 1);
	TextDrawBackgroundColor(Textdraws[textdraw_WATER_MARK][0], -254);
	TextDrawFont(Textdraws[textdraw_WATER_MARK][0], 3);
	TextDrawSetProportional(Textdraws[textdraw_WATER_MARK][0], 1);

	Textdraws[textdraw_WATER_MARK][1] = TextDrawCreate(625.944641, 432.250091, "Zone");
	TextDrawLetterSize(Textdraws[textdraw_WATER_MARK][1], 0.170761, 0.894164);
	TextDrawAlignment(Textdraws[textdraw_WATER_MARK][1], 1);
	TextDrawColor(Textdraws[textdraw_WATER_MARK][1], -170);
	TextDrawSetShadow(Textdraws[textdraw_WATER_MARK][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_WATER_MARK][1], 1);
	TextDrawBackgroundColor(Textdraws[textdraw_WATER_MARK][1], -251);
	TextDrawFont(Textdraws[textdraw_WATER_MARK][1], 2);
	TextDrawSetProportional(Textdraws[textdraw_WATER_MARK][1], 1);

	Textdraws[textdraw_WATER_MARK][2] = TextDrawCreate(24.831680, 429.916870, "hud:radar_pizza");
	TextDrawLetterSize(Textdraws[textdraw_WATER_MARK][2], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_WATER_MARK][2], 8.901901, 10.500000);
	TextDrawAlignment(Textdraws[textdraw_WATER_MARK][2], 1);
	TextDrawColor(Textdraws[textdraw_WATER_MARK][2], -1);
	TextDrawSetShadow(Textdraws[textdraw_WATER_MARK][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_WATER_MARK][2], 0);
	TextDrawFont(Textdraws[textdraw_WATER_MARK][2], 4);

	Textdraws[textdraw_WATER_MARK][3] = TextDrawCreate(84.865341, 429.750183, "hud:radar_diner");
	TextDrawLetterSize(Textdraws[textdraw_WATER_MARK][3], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_WATER_MARK][3], 8.901901, 10.500000);
	TextDrawAlignment(Textdraws[textdraw_WATER_MARK][3], 1);
	TextDrawColor(Textdraws[textdraw_WATER_MARK][3], -1);
	TextDrawSetShadow(Textdraws[textdraw_WATER_MARK][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_WATER_MARK][3], 0);
	TextDrawFont(Textdraws[textdraw_WATER_MARK][3], 4);

	Textdraws[textdraw_LOAD_SCREEN][0] = TextDrawCreate(-11.713027, -11.666666, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][0], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_LOAD_SCREEN][0], 675.138977, 567.583251);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][0], 1);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][0], -1883832321);
	TextDrawUseBox(Textdraws[textdraw_LOAD_SCREEN][0], true);
	TextDrawBoxColor(Textdraws[textdraw_LOAD_SCREEN][0], 0);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_LOAD_SCREEN][0], 0);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][0], 5);
	TextDrawSetPreviewModel(Textdraws[textdraw_LOAD_SCREEN][0], 19128);
	TextDrawSetPreviewRot(Textdraws[textdraw_LOAD_SCREEN][0], 36.000000, 0.000000, 0.000000, 0.000000);

	Textdraws[textdraw_LOAD_SCREEN][1] = TextDrawCreate(688.383300, -10.166666, "usebox");
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][1], 0.000000, 62.280628);
	TextDrawTextSize(Textdraws[textdraw_LOAD_SCREEN][1], -11.370424, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][1], 1);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][1], 16711680);
	TextDrawUseBox(Textdraws[textdraw_LOAD_SCREEN][1], true);
	TextDrawBoxColor(Textdraws[textdraw_LOAD_SCREEN][1], -1752367289);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_LOAD_SCREEN][1], 0);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][1], 0);

	Textdraws[textdraw_LOAD_SCREEN][2] = TextDrawCreate(314.377899, 435.166687, "Version: "SERVER_VERSION"");
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][2], 0.217610, 1.220831);
	TextDrawTextSize(Textdraws[textdraw_LOAD_SCREEN][2], 31.859437, 751.916381);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][2], 2);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][2], -152);
	TextDrawUseBox(Textdraws[textdraw_LOAD_SCREEN][2], true);
	TextDrawBoxColor(Textdraws[textdraw_LOAD_SCREEN][2], 43);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_LOAD_SCREEN][2], 0);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][2], 1);
	TextDrawSetProportional(Textdraws[textdraw_LOAD_SCREEN][2], 1);

	Textdraws[textdraw_LOAD_SCREEN][3] = TextDrawCreate(317.188751, 133.000045, "Infinity");
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][3], 0.802321, 3.495834);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][3], 2);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][3], -1);
	TextDrawUseBox(Textdraws[textdraw_LOAD_SCREEN][3], true);
	TextDrawBoxColor(Textdraws[textdraw_LOAD_SCREEN][3], 0);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_LOAD_SCREEN][3], 1);
	TextDrawBackgroundColor(Textdraws[textdraw_LOAD_SCREEN][3], -215);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][3], 3);
	TextDrawSetProportional(Textdraws[textdraw_LOAD_SCREEN][3], 1);

	Textdraws[textdraw_LOAD_SCREEN][4] = TextDrawCreate(314.441040, 159.083557, "Zone");
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][4], 0.654271, 2.789999);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][4], 2);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][4], -37);
	TextDrawUseBox(Textdraws[textdraw_LOAD_SCREEN][4], true);
	TextDrawBoxColor(Textdraws[textdraw_LOAD_SCREEN][4], 0);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_LOAD_SCREEN][4], 1);
	TextDrawBackgroundColor(Textdraws[textdraw_LOAD_SCREEN][4], -240);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][4], 0);
	TextDrawSetProportional(Textdraws[textdraw_LOAD_SCREEN][4], 1);

	Textdraws[textdraw_SHOP][0] = TextDrawCreate(320.000000, 120.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][0], 0.000000, 24.936986);
	TextDrawTextSize(Textdraws[textdraw_SHOP][0], 0.000000, 254.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP][0], 2);
	TextDrawColor(Textdraws[textdraw_SHOP][0], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP][0], 201);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][0], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][0], 0);

	Textdraws[textdraw_SHOP][1] = TextDrawCreate(320.000000, 125.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][1], 0.000000, 23.766672);
	TextDrawTextSize(Textdraws[textdraw_SHOP][1], 0.000000, 254.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP][1], 2);
	TextDrawColor(Textdraws[textdraw_SHOP][1], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP][1], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP][1], 11117257);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][1], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][1], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][1], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][1], 0);

	Textdraws[textdraw_SHOP][2] = TextDrawCreate(207.000000, 128.000000, "Compra_y_venta");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][2], 0.295333, 1.388446);
	TextDrawAlignment(Textdraws[textdraw_SHOP][2], 1);
	TextDrawColor(Textdraws[textdraw_SHOP][2], -1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][2], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][2], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][2], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][2], 0);

	Textdraws[textdraw_SHOP][3] = TextDrawCreate(320.000000, 145.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][3], 0.000000, -0.266666);
	TextDrawTextSize(Textdraws[textdraw_SHOP][3], 0.000000, 222.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP][3], 2);
	TextDrawColor(Textdraws[textdraw_SHOP][3], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP][3], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP][3], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][3], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][3], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][3], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][3], 0);

	Textdraws[textdraw_SHOP][4] = TextDrawCreate(320.000000, 301.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][4], 0.000000, -0.266666);
	TextDrawTextSize(Textdraws[textdraw_SHOP][4], 0.000000, 222.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP][4], 2);
	TextDrawColor(Textdraws[textdraw_SHOP][4], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP][4], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP][4], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][4], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][4], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][4], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][4], 0);


	Textdraws[textdraw_SHOP_ARTICLES_BOX][0] = TextDrawCreate(208.000000, 148.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][1] = TextDrawCreate(285.000000, 148.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][2] = TextDrawCreate(362.000000, 148.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][3] = TextDrawCreate(208.000000, 225.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][4] = TextDrawCreate(285.000000, 225.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][5] = TextDrawCreate(362.000000, 225.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], true);

	Textdraws[textdraw_SHOP_ARTICLE_BOX] = TextDrawCreate(208.000000, 175.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLE_BOX], 100.000000, 100.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLE_BOX], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLE_BOX], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLE_BOX], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLE_BOX], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0);

	Textdraws[textdraw_TERRITORY_BOX] = TextDrawCreate(320.000000, 355.000000, "-");
	TextDrawLetterSize(Textdraws[textdraw_TERRITORY_BOX], 12.321674, 9.937778);
	TextDrawAlignment(Textdraws[textdraw_TERRITORY_BOX], 2);
	TextDrawColor(Textdraws[textdraw_TERRITORY_BOX], 167);
	TextDrawSetShadow(Textdraws[textdraw_TERRITORY_BOX], 0);
	TextDrawSetOutline(Textdraws[textdraw_TERRITORY_BOX], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_TERRITORY_BOX], 255);
	TextDrawFont(Textdraws[textdraw_TERRITORY_BOX], 1);
	TextDrawSetProportional(Textdraws[textdraw_TERRITORY_BOX], 1);
	TextDrawSetShadow(Textdraws[textdraw_TERRITORY_BOX], 0);

	Textdraws[textdraw_SHOP_TUNING][0] = TextDrawCreate(320.000000, 330.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][0], 0.000000, 6.966667);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][0], 0.000000, 152.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][0], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][0], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][0], 95);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][0], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][0], 0);

	Textdraws[textdraw_SHOP_TUNING][1] = TextDrawCreate(320.000000, 330.000000, "Super_Tuning_Club");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][1], 0.354000, 1.533629);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][1], 0.000000, 152.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][1], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][1], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][1], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][1], 10205093);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][1], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][1], 0);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][1], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][1], 0);

	Textdraws[textdraw_SHOP_TUNING][2] = TextDrawCreate(320.000000, 376.000000, "COMPRAR");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][2], 0.219666, 1.031703);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][2], 10.000000, 43.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][2], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][2], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][2], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][2], -1936945921);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][2], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][2], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][2], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][2], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_TUNING][2], true);

	Textdraws[textdraw_SHOP_TUNING][3] = TextDrawCreate(370.000000, 376.000000, "SIGUIENTE");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][3], 0.219666, 1.031703);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][3], 10.000000, 43.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][3], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][3], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][3], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][3], -1936945921);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][3], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][3], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][3], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][3], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_TUNING][3], true);

	Textdraws[textdraw_SHOP_TUNING][4] = TextDrawCreate(270.000000, 376.000000, "ANTERIOR");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][4], 0.219666, 1.031703);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][4], 10.000000, 43.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][4], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][4], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][4], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][4], -1936945921);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][4], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][4], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][4], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][4], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_TUNING][4], true);

	Textdraws[textdraw_iPhone][0] = TextDrawCreate(418.452056, 122.916648, "LD_SPAC:white");//telefono
	TextDrawLetterSize(Textdraws[textdraw_iPhone][0], 0.109163, 4.544651);
	TextDrawTextSize(Textdraws[textdraw_iPhone][0], 318.125915, 331.916809);
	TextDrawAlignment(Textdraws[textdraw_iPhone][0], 1);
	TextDrawColor(Textdraws[textdraw_iPhone][0], 255);
	TextDrawUseBox(Textdraws[textdraw_iPhone][0], true);
	TextDrawBackgroundColor(Textdraws[textdraw_iPhone][0], 0);
	TextDrawBoxColor(Textdraws[textdraw_iPhone][0], 0);
	TextDrawSetShadow(Textdraws[textdraw_iPhone][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_iPhone][0], 0);
	TextDrawFont(Textdraws[textdraw_iPhone][0], 5);
	TextDrawSetPreviewModel(Textdraws[textdraw_iPhone][0], 18868);
	TextDrawSetPreviewRot(Textdraws[textdraw_iPhone][0], 90.000000, 0.000000, 0.000000, 1.000000);

	Textdraws[textdraw_iPhone][1] = TextDrawCreate(549.106872, 200.083328, "LD_SPAC:white");//wallpaper
	TextDrawLetterSize(Textdraws[textdraw_iPhone][1], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_iPhone][1], 63.250350, 166.250000);
	TextDrawAlignment(Textdraws[textdraw_iPhone][1], 1);
	TextDrawColor(Textdraws[textdraw_iPhone][1], -6401);
	TextDrawUseBox(Textdraws[textdraw_iPhone][1], true);
	TextDrawBackgroundColor(Textdraws[textdraw_iPhone][1], 0);
	TextDrawBoxColor(Textdraws[textdraw_iPhone][1], 0);
	TextDrawSetShadow(Textdraws[textdraw_iPhone][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_iPhone][1], 0);
	TextDrawFont(Textdraws[textdraw_iPhone][1], 5);
	TextDrawSetPreviewModel(Textdraws[textdraw_iPhone][1], 19129);
	TextDrawSetPreviewRot(Textdraws[textdraw_iPhone][1], 115.000000, 0.000000, 0.000000, 0.000000);

	Textdraws[textdraw_iPhone][2] = TextDrawCreate(561.883422, 196.250045, "ld_pool:ball");//notch izq
	TextDrawLetterSize(Textdraws[textdraw_iPhone][2], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_iPhone][2], 8.433409, 10.500000);
	TextDrawAlignment(Textdraws[textdraw_iPhone][2], 1);
	TextDrawColor(Textdraws[textdraw_iPhone][2], 255);
	TextDrawSetShadow(Textdraws[textdraw_iPhone][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_iPhone][2], 0);
	TextDrawFont(Textdraws[textdraw_iPhone][2], 4);

	Textdraws[textdraw_iPhone][3] = TextDrawCreate(566.442382, 198.916732, "LD_SPAC:white");//notch centro
	TextDrawLetterSize(Textdraws[textdraw_iPhone][3], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_iPhone][3], 29.985351, 8.166653);
	TextDrawAlignment(Textdraws[textdraw_iPhone][3], 1);
	TextDrawColor(Textdraws[textdraw_iPhone][3], 255);
	TextDrawSetShadow(Textdraws[textdraw_iPhone][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_iPhone][3], 0);
	TextDrawFont(Textdraws[textdraw_iPhone][3], 4);

	Textdraws[textdraw_iPhone][4] = TextDrawCreate(591.337341, 196.416671, "ld_pool:ball");//notch der
	TextDrawLetterSize(Textdraws[textdraw_iPhone][4], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_iPhone][4], 8.433409, 10.500000);
	TextDrawAlignment(Textdraws[textdraw_iPhone][4], 1);
	TextDrawColor(Textdraws[textdraw_iPhone][4], 255);
	TextDrawSetShadow(Textdraws[textdraw_iPhone][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_iPhone][4], 0);
	TextDrawFont(Textdraws[textdraw_iPhone][4], 4);

	Textdraws[textdraw_iPhone][5] = TextDrawCreate(554.792175, 200.500198, "19:07");//hora cuando esta desbloqueado
	TextDrawLetterSize(Textdraws[textdraw_iPhone][5], 0.088299, 0.491661);
	TextDrawAlignment(Textdraws[textdraw_iPhone][5], 2);
	TextDrawColor(Textdraws[textdraw_iPhone][5], -1);
	TextDrawUseBox(Textdraws[textdraw_iPhone][5], true);
	TextDrawBoxColor(Textdraws[textdraw_iPhone][5], 0);
	TextDrawSetShadow(Textdraws[textdraw_iPhone][5], 0);
	TextDrawSetOutline(Textdraws[textdraw_iPhone][5], 0);
	TextDrawFont(Textdraws[textdraw_iPhone][5], 1);
	TextDrawSetProportional(Textdraws[textdraw_iPhone][5], 1);

	Textdraws[textdraw_iPhone][6] = TextDrawCreate(580.497314, 233.916763, "00:00");//hora cuando esta bloqueado
	TextDrawLetterSize(Textdraws[textdraw_iPhone][6], 0.354889, 1.862498);
	TextDrawAlignment(Textdraws[textdraw_iPhone][6], 2);
	TextDrawColor(Textdraws[textdraw_iPhone][6], -1);
	TextDrawUseBox(Textdraws[textdraw_iPhone][6], true);
	TextDrawBoxColor(Textdraws[textdraw_iPhone][6], 0);
	TextDrawSetShadow(Textdraws[textdraw_iPhone][6], 0);
	TextDrawSetOutline(Textdraws[textdraw_iPhone][6], 0);
	TextDrawFont(Textdraws[textdraw_iPhone][6], 1);
	TextDrawSetProportional(Textdraws[textdraw_iPhone][6], 1);

	Textdraws[textdraw_iPhone][7] = TextDrawCreate(564.099792, 361.666412, "LD_SPAC:white");//slide
	TextDrawLetterSize(Textdraws[textdraw_iPhone][7], 0.000000, -0.327964);
	TextDrawTextSize(Textdraws[textdraw_iPhone][7], 33.733505, 1.166666);
	TextDrawAlignment(Textdraws[textdraw_iPhone][7], 1);
	TextDrawColor(Textdraws[textdraw_iPhone][7], -1);
	TextDrawUseBox(Textdraws[textdraw_iPhone][7], true);
	TextDrawBoxColor(Textdraws[textdraw_iPhone][7], 0);
	TextDrawSetShadow(Textdraws[textdraw_iPhone][7], 0);
	TextDrawSetOutline(Textdraws[textdraw_iPhone][7], 0);
	TextDrawFont(Textdraws[textdraw_iPhone][7], 4);
	TextDrawSetSelectable(Textdraws[textdraw_iPhone][7], true);

	Textdraws[textdraw_iPhone][8] = TextDrawCreate(580.623840, 343.249969, "Usa ~y~/iPhone ~w~~h~para desbloquearlo.");
	TextDrawLetterSize(Textdraws[textdraw_iPhone][8], 0.135150, 0.724999);
	TextDrawTextSize(Textdraws[textdraw_iPhone][8], 2.811126, 60.666652);
	TextDrawAlignment(Textdraws[textdraw_iPhone][8], 2);
	TextDrawColor(Textdraws[textdraw_iPhone][8], -1);
	TextDrawUseBox(Textdraws[textdraw_iPhone][8], true);
	TextDrawBoxColor(Textdraws[textdraw_iPhone][8], 0);
	TextDrawSetShadow(Textdraws[textdraw_iPhone][8], 0);
	TextDrawSetOutline(Textdraws[textdraw_iPhone][8], 0);
	TextDrawFont(Textdraws[textdraw_iPhone][8], 1);
	TextDrawSetProportional(Textdraws[textdraw_iPhone][8], 1);

	Textdraws[textdraw_WARNING][0] = TextDrawCreate(-20.146411, -38.499996, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_WARNING][0], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_WARNING][0], 690.600402, 524.416625);
	TextDrawAlignment(Textdraws[textdraw_WARNING][0], 1);
	TextDrawColor(Textdraws[textdraw_WARNING][0], 255);
	TextDrawUseBox(Textdraws[textdraw_WARNING][0], true);
	TextDrawBoxColor(Textdraws[textdraw_WARNING][0], 0);
	TextDrawSetShadow(Textdraws[textdraw_WARNING][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_WARNING][0], 0);
	TextDrawFont(Textdraws[textdraw_WARNING][0], 4);

	Textdraws[textdraw_WARNING][1] = TextDrawCreate(320.000000, 166.833282, " ");//ban, kick, permban
	TextDrawLetterSize(Textdraws[textdraw_WARNING][1], 0.895095, 3.781666);
	TextDrawAlignment(Textdraws[textdraw_WARNING][1], 2);
	TextDrawColor(Textdraws[textdraw_WARNING][1], -5963521);
	TextDrawUseBox(Textdraws[textdraw_WARNING][1], true);
	TextDrawBoxColor(Textdraws[textdraw_WARNING][1], 0);
	TextDrawSetShadow(Textdraws[textdraw_WARNING][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_WARNING][1], 1);
	TextDrawBackgroundColor(Textdraws[textdraw_WARNING][1], 51);
	TextDrawFont(Textdraws[textdraw_WARNING][1], 3);
	TextDrawSetProportional(Textdraws[textdraw_WARNING][1], 1);

	Textdraws[textdraw_WARNING][2] = TextDrawCreate(180.380691, 223.416625, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_WARNING][2], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_WARNING][2], 283.923858, 1.166687);
	TextDrawAlignment(Textdraws[textdraw_WARNING][2], 1);
	TextDrawColor(Textdraws[textdraw_WARNING][2], -1);
	TextDrawSetShadow(Textdraws[textdraw_WARNING][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_WARNING][2], 0);
	TextDrawFont(Textdraws[textdraw_WARNING][2], 4);

	Textdraws[textdraw_WARNING][3] = TextDrawCreate(179.975128, 252.999969, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_WARNING][3], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_WARNING][3], 283.923858, 1.166687);
	TextDrawAlignment(Textdraws[textdraw_WARNING][3], 1);
	TextDrawColor(Textdraws[textdraw_WARNING][3], -1);
	TextDrawSetShadow(Textdraws[textdraw_WARNING][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_WARNING][3], 0);
	TextDrawFont(Textdraws[textdraw_WARNING][3], 4);

	Textdraws[textdraw_WARNING][4] = TextDrawCreate(322.342834, 231.583297, " ");//razon
	TextDrawLetterSize(Textdraws[textdraw_WARNING][4], 0.298667, 1.325833);
	TextDrawAlignment(Textdraws[textdraw_WARNING][4], 2);
	TextDrawColor(Textdraws[textdraw_WARNING][4], -1);
	TextDrawSetShadow(Textdraws[textdraw_WARNING][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_WARNING][4], 1);
	TextDrawBackgroundColor(Textdraws[textdraw_WARNING][4], 51);
	TextDrawFont(Textdraws[textdraw_WARNING][4], 1);
	TextDrawSetProportional(Textdraws[textdraw_WARNING][4], 1);

	PopUp = TextDrawCreate(83.991813, 328.083465, "Pop Up 1");
	TextDrawLetterSize(PopUp, 0.166544, 0.771664);
	TextDrawTextSize(PopUp, 1256.105102, 141.749984);
	TextDrawAlignment(PopUp, 2);
	TextDrawColor(PopUp, -1);
	TextDrawUseBox(PopUp, true);
	TextDrawBoxColor(PopUp, 70);
	TextDrawSetShadow(PopUp, 0);
	TextDrawSetOutline(PopUp, 1);
	TextDrawBackgroundColor(PopUp, 35);
	TextDrawFont(PopUp, 1);
	TextDrawSetProportional(PopUp, 1);

	PopUp1 = TextDrawCreate(83.928855, 315.416625, "Pop Up 2");
	TextDrawLetterSize(PopUp1, 0.166544, 0.771664);
	TextDrawTextSize(PopUp1, 1256.105102, 141.749984);
	TextDrawAlignment(PopUp1, 2);
	TextDrawColor(PopUp1, -1);
	TextDrawUseBox(PopUp1, true);
	TextDrawBoxColor(PopUp1, 70);
	TextDrawSetShadow(PopUp1, 0);
	TextDrawSetOutline(PopUp1, 1);
	TextDrawBackgroundColor(PopUp1, 35);
	TextDrawFont(PopUp1, 1);
	TextDrawSetProportional(PopUp1, 1);

	PopUp2 = TextDrawCreate(83.991973, 302.416625, "Pop Up 3");
	TextDrawLetterSize(PopUp2, 0.166544, 0.771664);
	TextDrawTextSize(PopUp2, 1256.105102, 141.749984);
	TextDrawAlignment(PopUp2, 2);
	TextDrawColor(PopUp2, -1);
	TextDrawUseBox(PopUp2, true);
	TextDrawBoxColor(PopUp2, 70);
	TextDrawSetShadow(PopUp2, 0);
	TextDrawSetOutline(PopUp2, 1);
	TextDrawBackgroundColor(PopUp2, 35);
	TextDrawFont(PopUp2, 1);
	TextDrawSetProportional(PopUp2, 1);
	return 1;
}

stock DestroyTextDraws()
{
	for(new i; i < sizeof(Textdraws); i++)
	{
		if(Textdraws[Textdraws_Enum:i] == INVALID_TEXT_DRAW) continue;
		TextDrawDestroy(Text:Textdraws[Textdraws_Enum:i]);
		Textdraws[Textdraws_Enum:i] = INVALID_TEXT_DRAW;
	}
	return 1;
}

public OnGameModeExit()
{
	for(new i=0; i < MAX_PLAYERS; ++i)
    {
	    if(IsPlayerConnected(i))
	    {
    		SaveUserData(i);
			SavePlayerToysData(i);
			SavePlayerVehicles(i, false);
			SavePlayerSkills(i);
			SavePlayerWorks(i);
			SavePlayerMisc(i);
			SavePlayerWeaponsData(i);
			PLAYER_TEMP[i][pt_SAVE_ACCOUNT_TIME] = gettime();
		}
    }
	print("\n\n\n----> Saliendo\n\n");
	db_close(Database);

//	KillTimer(RespawnTimer);
//	KillTimer(PaydayTime);
	return 1;
}

#define MIN_SECONDS_BETWEEN_COMMANDS 1 // Deben pasar al menos 1 segundos entre comando y comando.
public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(PLAYER_TEMP[playerid][pt_KICKED]) return 0;

	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_HOSPITAL || ACCOUNT_INFO[playerid][ac_WARN_STATUS] == 1)
	{
		SendClientMessage(playerid, -1, "No puedes usar comandos ahora.");
		return 0;
	}
	if(PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW]) { SendClientMessage(playerid, 0xFFFFFFFF, "Ahora no puedes usar comandos, pulsa 'ESCAPE' para cerrar el menú."); return 0; }


	new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_COMMANDS]);
	if(interval < MIN_SECONDS_BETWEEN_COMMANDS)
	{
		if(ac_Info[CHEAT_COMMAND_SPAMMER][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_IMMUNITY])
			{
				if(interval < 50)
				{
					if(!ac_Info[CHEAT_COMMAND_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_COMMAND_SPAMMER, float(interval));
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_COMMAND_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_DETECTIONS] ++;

						PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_COMMAND_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_COMMAND_SPAMMER, float(interval));
					}
				}
			}
		}
		SendClientMessage(playerid, -1, "Espera un momento, no puedes escribir comandos muchas veces.");
		return 0;
	}
	PLAYER_TEMP[playerid][pt_ANTIFLOOD_COMMANDS] = GetTickCount();

	return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(!success) ShowPlayerMessage(playerid, "Comando incorrecto, lea ~r~~h~/ayuda~w~.", 5);
	return 1;
}

#define MIN_TIME_BETWEEN_DOUBT 40
#define MIN_SECONDS_BETWEEN_TALKS 100 // Deben pasar al menos 1 segundos para volver a hablar.
public OnPlayerText(playerid, text[])
{
	if(PLAYER_TEMP[playerid][pt_KICKED]) return 0;
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL || PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW] || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_HOSPITAL || ACCOUNT_INFO[playerid][ac_WARN_STATUS] == 1) { SendClientMessage(playerid, 0xFFFFFFFF, "Ahora no puedes hablar."); return 0; }
	if(text[0] == '#' && (ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] > 1 || IsPlayerAdmin(playerid)) )
	{
      	new string[145];
        format(string, sizeof(string), "(Canal STAFF) {8df4a9}%s - %s: {38f76b}%s", ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ], ACCOUNT_INFO[playerid][ac_NAME], text[1]);
		SendMessageToAdmins(0x38f76bFF, string);
		return 0;
	}

	new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_TALK]);
	if(interval < MIN_SECONDS_BETWEEN_TALKS)
	{
		if(ac_Info[CHEAT_TEXT_SPAMMER][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_IMMUNITY])
			{
				if(interval < 50)
				{
					if(!ac_Info[CHEAT_TEXT_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_TEXT_SPAMMER, float(interval));
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_TEXT_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_DETECTIONS] ++;

						PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_TEXT_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_TEXT_SPAMMER, float(interval));
					}
				}
			}
		}
		return 0;
	}
	PLAYER_TEMP[playerid][pt_ANTIFLOOD_TALK] = GetTickCount();

	if(PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME])
	{
		format(PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME_STR], 24, "%s", text);
		SendClientMessage(playerid, 0x4286f4FF, "@911: {98baf2}Por favor, escriba su emergencia brevemente incluyendo el nombre del delincuente.");
		PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = true;
		return 0;
	}
	if(PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION])
	{
		PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = false;


		new city[45], zone[45];
		GetPlayerZones(playerid, city, zone);

		new message[145];
		format(message, sizeof message, "{4286f4} REPORTE 911  {98baf2}%s (%d) dijo: {4286f4}%s {98baf2}(ubiación %s, %s)", PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME_STR], playerid, text, city, zone);
		SendPoliceRadioMessage(-1, -1, message);

		new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid, x, y, z);
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
				{
					if(PLAYER_WORKS[i][WORK_POLICE])
					{
						SetPlayer_GPS_Checkpoint(i, x, y, z, 0, 0);
					}
				}
			}
		}

		SendClientMessage(playerid, 0x4286f4FF, "@911: {98baf2}De acuerdo, conserve la calma, le enviaremos un policía a su ubicación.");
		SendClientMessage(playerid, 0x4286f4FF, "@911: {98baf2}En caso de que uno de nuestros policias no llegue, abandone la zona de peligro y no cometa algúna represalía; [...]");
		SendClientMessage(playerid, 0x4286f4FF, "@911: {98baf2}[...] autómaticamente su llamado se convertirá en denuncia, y el criminal será investigado y sancionado.");
		SendClientMessage(playerid, 0x4286f4FF, "@911: {98baf2}Estamos para servirle y protegerle - SAPD.");
		ShowPlayerMessage(playerid, "Llamada finalizada.", 3);
		return 0;
	}

	new str_text[145];
	if(text[0] == '!')
	{
		if(PLAYER_WORKS[playerid][WORK_POLICE])
		{
			if(text[1] == '!') format(str_text, sizeof str_text, "(Canal SAPD) {7cacf9}%s - %s:{4286f4} (( %s ))", POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], PLAYER_TEMP[playerid][pt_RP_NAME], text[2]);
			else format(str_text, sizeof str_text, "(Canal SAPD) {7cacf9}%s - %s:{4286f4} %s", POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], PLAYER_TEMP[playerid][pt_RP_NAME], text[1]);

			SendPoliceRadioMessage(PLAYER_TEMP[playerid][pt_POLICE_RADIO], 0x4286f4FF, str_text);
			return 0;
		}

		if(PLAYER_CREW[playerid][player_crew_VALID])
		{
			if(text[1] == '!') format(str_text, sizeof str_text, "{%06x}(Radio) %s - %s: (( %s ))", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], PLAYER_TEMP[playerid][pt_RP_NAME], text[2]);
			else format(str_text, sizeof str_text, "{%06x}(Radio) %s - %s: %s", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], PLAYER_TEMP[playerid][pt_RP_NAME], text[1]);

			SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], -1, str_text);
			return 0;
		}
	}

	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] == CALL_STATE_ESTABLISHED)
	{
		format(str_text, 145, "%s dice (por teléfono): %s", PLAYER_TEMP[playerid][pt_RP_NAME], text);
		SendClientMessageEx(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID], 0xf4d142FF, "Teléfono (%s) dice: %s", convertPhoneNumber(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID], PLAYER_PHONE[playerid][player_phone_NUMBER]), text);
	}
	else
	{
		if(GetPlayerDrunkLevel(playerid) > 2000) format(str_text, 145, "%s dice (mareado): %s", PLAYER_TEMP[playerid][pt_RP_NAME], text), SetPlayerChatBubble(playerid,text,0xFFFFFFFF, 100.0, 10000);
		else format(str_text, 145, "%s dice: %s", PLAYER_TEMP[playerid][pt_RP_NAME], text), SetPlayerChatBubble(playerid,text,0xFFFFFFFF, 100.0, 10000);
	}
	ProxDetector(playerid, 15.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	return 0;
}

CMD:bebida(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 1.5, 1207.234375, -29.231435, 1000.953125) || IsPlayerInRangeOfPoint(playerid, 1.5, 497.9489, -76.0402, 998.7578) || IsPlayerInRangeOfPoint(playerid, 1.5, -224.7819,1403.9741,27.7734) || IsPlayerInRangeOfPoint(playerid, 1.5, 1090.2913, 259.7495, 532.0204))
	{
		if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_WINE)
		{
			if(CHARACTER_INFO[playerid][ch_CASH] <= 50) return SendClientMessage(playerid, -1, "{FFFFFF}La bebida cuesta $50.");

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
			GivePlayerCash(playerid, -50);
		}
		return 1;
	}
	return 1;
}

CMD:pp(playerid,params[])
{
    if(!PLAYER_TEMP[playerid][pt_PP] && !IsPlayerInAnyVehicle(playerid))
 	{
 		PLAYER_TEMP[playerid][pt_PP] = true;
		FPSMode(playerid);

	}
	else if(PLAYER_TEMP[playerid][pt_PP])
	{
 		PLAYER_TEMP[playerid][pt_PP] = false;
   		SetCameraBehindPlayer(playerid);
	}
	return 1;
}


#define MIN_TIME_BETWEEN_DOUBT 40
CMD:d(playerid, params[])
{
	if(!ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL]) return SendClientMessage(playerid, -1, "No se te permite hablar por el canal de dudas.");
	if(isnull(params)) return SendClientMessage(playerid, 0xFFFF00FF, "/d {FFFFFF}[DUDA]");
	if(!ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
	{
		if(gettime() < PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME] + MIN_TIME_BETWEEN_DOUBT)
		{
			new time = (MIN_TIME_BETWEEN_DOUBT-(gettime()-PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME]));
			SendClientMessageEx(playerid, 0xFFFFFFAA, "Tienes que esperar %s minutos para envíar una duda.", TimeConvert(time));
			return 1;
		}
		else
		{
			ShowDialog(playerid, DIALOG_DOUBT_CHANNEL_POST);
		}
	}
	else
	{
		ShowDialog(playerid, DIALOG_DOUBT_CHANNEL_POST);
	}

	format(PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_MESSAGE], 128, "%s", params);
	return 1;
}

CMD:duda(playerid, params[])
{
	return cmd_d(playerid, params);
}

CMD:n(playerid, params[])
{
	return cmd_d(playerid, params);
}
CMD:dudas(playerid, params[])
{
	return cmd_d(playerid, params);
}

CMD:g(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, 0xFFFF00FF, "/g{FFFFFF}ritar [TEXTO]");

	new str_text[145];
	format(str_text, 145, "%s grita: ¡%s!", PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 25.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	return 1;
}

CMD:gritar(playerid, params[])
{
	return cmd_g(playerid, params);
}

CMD:s(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, 0xFFFF00FF, "/s{FFFFFF}usurrar [TEXTO]");

	new str_text[145];
	format(str_text, sizeof(str_text), "%s susurra: %s", PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 5.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	return 1;
}

CMD:susurrar(playerid, params[])
{
	return cmd_s(playerid, params);
}

CMD:feliz(playerid,params[])
{
    new str_text[145];
    format(str_text, sizeof(str_text), " {8eff6c}%s {acff93}se siente {8eff6c}feliz{acff93}. {8eff6c}:D", PLAYER_TEMP[playerid][pt_RP_NAME]);
	ProxDetector(playerid, 10.0, str_text, 0xacff93FF, 0xacff93FF, 0xacff93FF, 0xacff93FF, 0xacff93FF);
	return 1;
}

CMD:enojado(playerid,params[])
{
    new str_text[145];
    format(str_text, sizeof(str_text), " {ff0a2d}%s {ff8e9e}se siente {ff0a2d}enojado{ff8e9e}. {ff0a2d}>:v", PLAYER_TEMP[playerid][pt_RP_NAME]);
	ProxDetector(playerid, 10.0, str_text, 0xff8e9eFF, 0xff8e9eFF, 0xff8e9eFF, 0xff8e9eFF, 0xff8e9eFF);
	return 1;
}

CMD:triste(playerid,params[])
{
    new str_text[145];
    format(str_text, sizeof(str_text), " {68c0ff}%s {a0d7ff}se siente {68c0ff}triste{a0d7ff}. {68c0ff}:(", PLAYER_TEMP[playerid][pt_RP_NAME]);
	ProxDetector(playerid, 10.0, str_text, 0xa0d7ffFF, 0xa0d7ffFF, 0xa0d7ffFF, 0xa0d7ffFF, 0xa0d7ffFF);
	return 1;
}

CMD:asco(playerid,params[])
{
    new str_text[145];
    format(str_text, sizeof(str_text), " {ffb16d}%s {ffd0a8}tiene {ffb16d}asco{ffd0a8}. {ffb16d}>:V", PLAYER_TEMP[playerid][pt_RP_NAME]);
	ProxDetector(playerid, 10.0, str_text, 0xffd0a8FF, 0xffd0a8FF, 0xffd0a8FF, 0xffd0a8FF, 0xffd0a8FF);
	return 1;
}

CMD:miedo(playerid,params[])
{
    new str_text[145];
    format(str_text, sizeof(str_text), " {a174fc}%s {d7c4ff}tiene {a174fc}miedo{d7c4ff}. {a174fc}D:", PLAYER_TEMP[playerid][pt_RP_NAME]);
	ProxDetector(playerid, 10.0, str_text, 0xd7c4ffFF, 0xd7c4ffFF, 0xd7c4ffFF, 0xd7c4ffFF, 0xd7c4ffFF);
	return 1;
}

CMD:reir(playerid,params[])
{
    new str_text[145];
    format(str_text, sizeof(str_text), " {fffa6c}%s {fffba5}se está {fffa6c}riendo{fffba5}. {fffa6c}xDDDDDD", PLAYER_TEMP[playerid][pt_RP_NAME]);
	ProxDetector(playerid, 10.0, str_text, 0xfffba5FF, 0xfffba5FF, 0xfffba5FF, 0xfffba5FF, 0xfffba5FF);
	return 1;
}

CMD:llorar(playerid,params[])
{
    new str_text[145];
    format(str_text, sizeof(str_text), " {6ccbff}%s {bfe8ff}está {6ccbff}llorando{bfe8ff}. {6ccbff}:'v", PLAYER_TEMP[playerid][pt_RP_NAME]);
	ProxDetector(playerid, 10.0, str_text, 0xbfe8ffFF, 0xbfe8ffFF, 0xbfe8ffFF, 0xbfe8ffFF, 0xbfe8ffFF);
	return 1;
}

CMD:confundido(playerid,params[])
{
    new str_text[145];
    format(str_text, sizeof(str_text), " {cd77ff}%s {e6bcff}está {cd77ff}confundido{e6bcff}. {cd77ff}¿:v?", PLAYER_TEMP[playerid][pt_RP_NAME]);
	ProxDetector(playerid, 10.0, str_text, 0xe6bcffFF, 0xe6bcffFF, 0xe6bcffFF, 0xe6bcffFF, 0xe6bcffFF);
	return 1;
}

CMD:emocionado(playerid,params[])
{
    new str_text[145];
    format(str_text, sizeof(str_text), " {ff75da}%s {ffbaec}está {ff75da}emocionado{ffbaec}. {ff75da}:D", PLAYER_TEMP[playerid][pt_RP_NAME]);
	ProxDetector(playerid, 10.0, str_text, 0xfffba5FF, 0xfffba5FF, 0xfffba5FF, 0xfffba5FF, 0xfffba5FF);
	return 1;
}

CMD:enamorado(playerid,params[])
{
    if(isnull(params)) return SendClientMessage(playerid, 0xFFFF00FF, "/enamorado {FFFFFF}[persona o id]");
	new player1 = strval(params);
 	if(!IsPlayerConnected(player1)) return GameTextForPlayer(playerid,"~g~El jugador es equivocado",4000,3);

    new str_text[145];
    format(str_text, sizeof(str_text), " {f54f67}%s {ffb2bd}se siente {f54f67}enamorado{ffb2bd} de {f54f67}%s. {ffb2bd}<3", PLAYER_TEMP[playerid][pt_RP_NAME], PLAYER_TEMP[player1][pt_RP_NAME]);
	ProxDetector(playerid, 10.0, str_text, 0xffb2bdFF, 0xffb2bdFF, 0xffb2bdFF, 0xffb2bdFF, 0xffb2bdFF);
	return 1;
}

CMD:sorprendido(playerid,params[])
{
    if(isnull(params)) return SendClientMessage(playerid, 0xFFFF00FF, "/sorprendido {FFFFFF}[TEXTO]");
    
    new str_text[145];
    format(str_text, sizeof(str_text), " {ffd96c}%s {f7e0a0}le {ffd96c}sorprendió{f7e0a0} %s. {ffd96c}:O", PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 10.0, str_text, 0xf7e0a0FF, 0xf7e0a0FF, 0xf7e0a0FF, 0xf7e0a0FF, 0xf7e0a0FF);
	return 1;
}

CMD:b(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, 0xFFFF00FF, "/b {FFFFFF}[TEXTO]");

    new str_text[145];
    format(str_text, sizeof(str_text), "%s: (( %s ))", PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 15.0, str_text, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	return 1;
}

CMD:do(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, 0xFFFF00FF, "/do {FFFFFF}[TEXTO]");

    new str_text[145];
    format(str_text, sizeof(str_text), "* %s *", params);
	ProxDetector(playerid, 15.0, str_text, 0xADFF2FAA, 0xADFF2FAA, 0xADFF2FAA, 0xADFF2FAA, 0xADFF2FAA);
	return 1;
}

CMD:me(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, 0xFFFF00FF, "/me {FFFFFF}[TEXTO]");

	SendPlayerAction(playerid, params);
	return 1;
}

CMD:y(playerid, params[])
{
	return cmd_me(playerid, params);
}

CMD:folleto(playerid, params[])
{
	if(!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "Puedes comprar un teléfono móvil en un 24/7 o tienda.", 4);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}
	ShowDialog(playerid, DIALOG_ANNOUNCES);
    return 1;
}

CMD:inventario(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ShowPlayerInventory(playerid, playerid);
	return 1;
}

CMD:inv(playerid, params[])
{
	return cmd_inventario(playerid, params);
}


CMD:experiencia(playerid, params[])
{
	ShowPlayerSkills(playerid, playerid);
	return 1;
}

CMD:exp(playerid, params[])
{
	return cmd_experiencia(playerid, params);
}
CMD:habilidades(playerid, params[])
{
	return cmd_experiencia(playerid, params);
}
CMD:hab(playerid, params[])
{
	return cmd_experiencia(playerid, params);
}
CMD:skills(playerid, params[])
{
	return cmd_experiencia(playerid, params);
}

CMD:est(playerid, params[])
{
	ShowPlayerStats(playerid, playerid);
	return 1;
}

CMD:estadisticas(playerid, params[])
{
	return cmd_est(playerid, params);
}
CMD:stats(playerid, params[])
{
	return cmd_est(playerid, params);
}

CMD:csave(playerid, params[])
{
	if(gettime() < PLAYER_TEMP[playerid][pt_SAVE_ACCOUNT_TIME] + 30)
	{
		new time = (30-(gettime()-PLAYER_TEMP[playerid][pt_SAVE_ACCOUNT_TIME]));
		SendClientMessageEx(playerid, 0xFFFFFFFF, "Tienes que esperar %s minutos para volver a guardar tus datos.", TimeConvert(time));
		return 1;
	}

	SaveUserData(playerid);
	SavePlayerToysData(playerid);
	SavePlayerVehicles(playerid, false);
	SavePlayerSkills(playerid);
	SavePlayerWorks(playerid);
	SavePlayerMisc(playerid);
	SavePlayerWeaponsData(playerid);
	PLAYER_TEMP[playerid][pt_SAVE_ACCOUNT_TIME] = gettime();

	SendClientMessage(playerid, -1, "{FFFFFF}Datos de la cuenta guardados.");
	return 1;
}

CMD:acmds(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 1) return 0;

	ShowDialog(playerid, DIALOG_ADMIN_CMDS);
	return 1;
}

CMD:ayuda(playerid, params[])
{
	new option[24];
	if(sscanf(params, "s[24]", option)) return ShowDialog(playerid, DIALOG_HELP);

	if(!strcmp(option, "Servidor", true)) ShowDialog(playerid, DIALOG_HELP_GENERAL);
	else if(!strcmp(option, "Usuario", true)) ShowDialog(playerid, DIALOG_HELP_CHARACTER);
	else if(!strcmp(option, "Propiedades", true)) ShowDialog(playerid, DIALOG_HELP_PROPERTIES);
	else if(!strcmp(option, "Trabajos", true)) ShowDialog(playerid, DIALOG_HELP_WORKS);
	else if(!strcmp(option, "Vehículos", true)) ShowDialog(playerid, DIALOG_HELP_VEHICLES);
	else if(!strcmp(option, "Bandas", true)) ShowDialog(playerid, DIALOG_HELP_CREWS);
	else if(!strcmp(option, "Premium", true)) ShowDialog(playerid, DIALOG_SU_BUY);
	else if(!strcmp(option, "Créditos", true)) ShowDialog(playerid, DIALOG_HELP_INFO);
	else if(!strcmp(option, "sd", true)) ShowDialog(playerid, DIALOG_HELP_SD);
	else if(!strcmp(option, "Conceptos", true)) ShowDialog(playerid, DIALOG_HELP_CONCEPTOS);
	else ShowDialog(playerid, DIALOG_HELP);
	return 1;
}

CMD:objetos(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_TRASH || PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_MECHANIC || PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_PIZZA || PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_MEDIC) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes usar prendas estando de servicio trabajando.");
	ShowDialog(playerid, DIALOG_PLAYER_TOYS);
	return 1;
}

CMD:armas(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ShowDialog(playerid, DIALOG_PLAYER_WEAPONS);
	return 1;
}

CMD:ropa(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] = GetClothingShopIndexByIntType(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
	if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] == -1) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_X], Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_Y], Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_Z])) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
	SetPlayerPosEx(playerid, 257.251373, -40.797775, 1002.023437, 135.0, 14, playerid + MAX_PLAYERS, false); // World = Playerid + Max_players
	TogglePlayerControllable(playerid, false);

	SetPlayerCameraPos(playerid, 254.988632, -43.060516, 1002.9131);
	SetPlayerCameraLookAt(playerid, 257.251373, -40.797775, 1002.023437);

	UpdateClothingShop(playerid);
	ShowClothingShopTextdraws(playerid);

	SendClientMessage(playerid, -1, "Pulsa {00CCFF}ESCAPE {FFFFFF}para dejar de probarte ropa.");
	SelectTextDrawEx(playerid, 0xe8d08fFF);
	return 1;
}

CMD:prendas(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	new shop = GetClothingShopIndexByIntType(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
	if(shop == -1) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, Clothing_Shop_Positions[shop][clothing_shop_X], Clothing_Shop_Positions[shop][clothing_shop_Y], Clothing_Shop_Positions[shop][clothing_shop_Z])) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	ShowDialog(playerid, DIALOG_TOYS_TYPE);
	return 1;
}

CMD:aprender(playerid, params[])
{
	new option[24];
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;

	if(sscanf(params, "s[24]d", option)) return 1;
    if(!strcmp(option, "boxeo", true))
    {
        if(!IsPlayerInRangeOfPoint(playerid, 2.0, 767.2688, 14.3278, 1000.6999)) return 1;
		if(CHARACTER_INFO[playerid][ch_CASH] < 900) return ShowPlayerMessage(playerid, "Busca un poco de más dinero para enseñarte a pelear.", 3);
		if(ACCOUNT_INFO[playerid][ac_LEVEL] < 1) return ShowPlayerMessage(playerid, "Pareces nuevo por acá, vuelve después.", 3);
		CHARACTER_INFO[playerid][ch_FIGHT_STYLE] = 5;
	    SetPlayerFightingStyle(playerid, CHARACTER_INFO[playerid][ch_FIGHT_STYLE]);
	    ShowPlayerMessage(playerid, "Ya puedes pelear como boxeador.", 3);
		GivePlayerCash(playerid, -900);
	}
    else if(!strcmp(option, "kunfu", true))
    {
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, 768.1328, -36.8847, 1000.6865)) return 1;
		if(CHARACTER_INFO[playerid][ch_CASH] < 1200) return ShowPlayerMessage(playerid, "No puedo enseñarte si no tienes dinero.", 3);
		if(ACCOUNT_INFO[playerid][ac_LEVEL] < 1) return ShowPlayerMessage(playerid, "Pareces nuevo por acá, vuelve después.", 3);
		CHARACTER_INFO[playerid][ch_FIGHT_STYLE] = 6;
	    SetPlayerFightingStyle(playerid, CHARACTER_INFO[playerid][ch_FIGHT_STYLE]);
	    ShowPlayerMessage(playerid, "Ya puedes pelear como karateca.", 3);
		GivePlayerCash(playerid, -1200);
	}
    else if(!strcmp(option, "kickbox", true))
    {
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, 774.8096, -59.8695, 1000.7184)) return 1;
		if(CHARACTER_INFO[playerid][ch_CASH] < 1600) return ShowPlayerMessage(playerid, "No te pienso enseñar si no tienes dinero.", 3);
		if(ACCOUNT_INFO[playerid][ac_LEVEL] < 1) return ShowPlayerMessage(playerid, "Quien te conoce papa, vuelve después.", 3);
		CHARACTER_INFO[playerid][ch_FIGHT_STYLE] = 7;
	    SetPlayerFightingStyle(playerid, CHARACTER_INFO[playerid][ch_FIGHT_STYLE]);
	    ShowPlayerMessage(playerid, "Ya puedes pelear como kickboxing.", 3);
		GivePlayerCash(playerid, -1600);
 	}
  	else if(!strcmp(option, "medicina", true))
    {
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, 3920.4014, -681.2678, 102.6516)) return 1;
		if(!PLAYER_WORKS[playerid][WORK_MEDIC]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres médico.");
		if(CHARACTER_INFO[playerid][ch_CASH] < 4499) return ShowPlayerMessage(playerid, "Consiga dinero para enseñarle más de medicina.", 3);
		PLAYER_SKILLS[playerid][WORK_MEDIC] += 1;
		ShowPlayerMessage(playerid, "Ha subido tu habilidad de médico.", 3);
		GivePlayerCash(playerid, -4500);
 	}
	return 1;
}

CMD:finanzas(playerid, params[])
{
	new negocio_money = PLAYERS_IN_GAME * PLAYERS_IN_GAME;
	SendClientMessageEx(playerid, -1, "Ahora mismo tu negocio ronda con ganancias de $%s.", number_format_thousand(negocio_money));
}

CMD:pedir(playerid, params[])
{
	new index = GetFastFoodLocalIndexByIntType(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
	if(index == -1) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
	if(IsPlayerInRangeOfPoint(playerid, 1.0, Fast_Food_Positions[index][fast_food_X], Fast_Food_Positions[index][fast_food_Y], Fast_Food_Positions[index][fast_food_Z]))
	{
		if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
		if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
		switch(Fast_Food_Positions[index][fast_food_INTERIOR_TYPE])
		{
			case INTERIOR_BURGER_SHOT: ShowDialog(playerid, DIALOG_FOOD_BURGER);
			case INTERIOR_PIZZA: ShowDialog(playerid, DIALOG_FOOD_PIZZA);
			case INTERIOR_CLUCKIN_BELL: ShowDialog(playerid, DIALOG_FOOD_CLUCKIN);
			case INTERIOR_AEROPUERTO: ShowDialog(playerid, DIALOG_FOOD_PIZZA);
			case INTERIOR_DONUT: ShowDialog(playerid, DIALOG_FOOD_DONUT);
			case INTERIOR_CAFE: ShowDialog(playerid, DIALOG_FOOD_CAFE);
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 2404.8811, -1110.1249, 1030.6010))
    {
        ShowDialog(playerid, DIALOG_FOOD_TACO);
    }
    if(IsPlayerInRangeOfPoint(playerid, 1.0, 2350.5906,-1112.9050,1030.6010))
    {
        ShowDialog(playerid, DIALOG_FOOD_STEAK);
    }
	return 1;
}

CMD:productos(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 1.0, -27.964675, -89.948631, 1003.546875))
	{
		ShowDialog(playerid, DIALOG_247_LIST);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2136.6558, -90.7147, 699.0078))
 	{
		ShowDialog(playerid, DIALOG_FERRETERIA);
	}
	return 1;
}

CMD:balas(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 1292.4838,-63.6694,1002.4969)) return 1;
	if(PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "Disculpa, aquí sólo vendemos fruta", 3);
	ShowDialog(playerid, DIALOG_BLACK_MARKET_SELECT_WEA);
	return 1;
}

CMD:localizar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, 0xFFFFFFFF, "No puedes usar comandos ahora.");
	ShowDialog(playerid, DIALOG_PLAYER_GPS_VEHICLES);
	return 1;
}

CMD:gps(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	if(!PLAYER_OBJECT[playerid][po_GPS])
	{
		ShowPlayerMessage(playerid, "Puedes comprar un GPS en cualquier 24/7", 5);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}

	Auto_SendPlayerAction(playerid, "mira su GPS.");
	ShowDialog(playerid, DIALOG_PLAYER_GPS);
	return 1;
}

CMD:tiempo(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL)
	{
		new time = CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME]);
		if(time <= 0)
		{
			UnjailPlayer(playerid);
			return 1;
		}
		SendClientMessageEx(playerid, -1, "{FFFFFF}Te quedan %s minutos de condena.", TimeConvert(time));
	}
	else ShowPlayerMessage(playerid, "No estás en la cárcel.", 5);
	return 1;
}

CMD:mapa(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	if(!PLAYER_OBJECT[playerid][po_GPS])
	{
		ShowPlayerMessage(playerid, "Puedes comprar un GPS en cualquier 24/7", 5);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}

	if(PLAYER_TEMP[playerid][pt_GPS_MAP]) HidePlayerGpsMap(playerid);
	else ShowPlayerGpsMap(playerid);
	return 1;
}

CMD:audifonos(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	if(!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "No puedes escuchar música sin un teléfono", 5);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}
	if(!PLAYER_OBJECT[playerid][po_MP3])
	{
		ShowPlayerMessage(playerid, "Puedes comprar unos audifonos en cualquier 24/7", 5);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}

	PLAYER_TEMP[playerid][pt_MUSIC_FOR_PROPERTY] = false;
	ShowDialog(playerid, DIALOG_PLAYER_MP3);
	return 1;
}

CMD:emisoras(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{FFFFFF}No conduces ningún vehículo.");

	PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE] = true;
	Auto_SendPlayerAction(playerid, "búsca una emisora en el radio del vehículo.");
	ShowDialog(playerid, DIALOG_EMISORAS);
	return 1;
}

CMD:stop(playerid, params[])
{
	StopAudioStreamForPlayer(playerid);
	return 1;
}

CMD:pass(playerid, params[])
{
	ShowDialog(playerid, DIALOG_CHANGE_PASSWORD);
	return 1;
}

CMD:nombre(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 222.2257, 2343.4063, 1017.0952)) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
    if(ACCOUNT_INFO[playerid][ac_SD] < 3) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes esa cantidad de koins.");
	if(YaUsoNombre[playerid] == 0)
	{
		new new_name[24];
		if(sscanf(params, "s[24]", new_name)) return SendClientMessage(playerid, -1, "* Uso: /nombre <nuevo nombre>");
		if(!IsValidName(params) || strfind( params, "$", true) == -1 || strfind( params, "@", true) == -1 || strfind( params, "]", true) == -1 || strfind( params, "[", true) == -1 || strfind( params, " ", true) == -1) return SendClientMessageEx(playerid, -1, "* ERROR: El nombre '%s' no cumple con el formato Nombre_Apellido.", new_name);

		new DBResult:Result, DB_Query[128], bool:used;
		format(DB_Query, sizeof DB_Query, "SELECT `ID` FROM `CUENTA` WHERE `NAME` = '%q';", new_name);
		Result = db_query(Database, DB_Query);
		if(db_num_rows(Result)) used = true;
		db_free_result(Result);
		if(used) return SendClientMessageEx(playerid, -1, "* ERROR: El nombre '%s' está en uso.", new_name);

		format(PLAYER_TEMP[playerid][pt_NAME], 24, "%s", new_name);
		format(ACCOUNT_INFO[playerid][ac_NAME], 24, "%s", new_name);
		PLAYER_TEMP[playerid][pt_RP_NAME] = RP_GetPlayerName(playerid);
		SetPlayerName(playerid, new_name);

		format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `NAME` = '%q' WHERE `ID` = '%d';", new_name, ACCOUNT_INFO[playerid][ac_ID]);
		db_query(Database, DB_Query);

		for(new i = 0; i != MAX_PROPERTIES; i ++)
		{
			if(!PROPERTY_INFO[i][property_VALID]) continue;
			if(PROPERTY_INFO[i][property_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) continue;

			new label_str[256];
			format
			(
				label_str,
				sizeof label_str,
				"\
					{FFFFFF}Dirección {00FF00}%d\n\
					{FFFFFF}Propietario: {00CCFF}%s\n\
					{FFFFFF}Presiona {00CCFF}N {FFFFFF}o usa {FFFF00}/entrar{FFFFFF}.\
				", PROPERTY_INFO[i][property_ID], ACCOUNT_INFO[playerid][ac_NAME]
			);
			UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFAA, label_str);
		}


		YaUsoNombre[playerid] = 1;
		SendClientMessageEx(playerid, -1, "{FFFFFF}Tu nombre se ha registrado con {00FF00}%s", new_name);
		ACCOUNT_INFO[playerid][ac_SD] -= 3;

		new string2[256];
		format(string2,sizeof(string2),"{ff782b} NOMBRE  {FFFFFF} ID: %d cambió su nombre a: {ff782b}%s", playerid, new_name);
		SendMessageToAdminsAC(-1, string2);
	}
	else if(YaUsoNombre[playerid] == 1)
	{
	    SendClientMessage(playerid, -1, "{FFFFFF}Ya te cambiaste de nombre.");
	}
	return 1;
}

CMD:gcp(playerid, params[])
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;

		SendClientMessage(playerid, -1, "{FFFFFF}Has cancelado la ruta antigua de tu GPS.");
	}
	else SendClientMessage(playerid, -1, "{FFFFFF}No tienes ningún punto marcado en tu GPS.");
	return 1;
}

CMD:hora(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE] == true) return 1;
	if(!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "Puedes comprar un teléfono móvil en un 24/7 o tienda.", 4);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}

	if(PLAYER_TEMP[playerid][pt_GPS_MAP]) HidePlayerGpsMap(playerid);


	PLAYER_TEMP[playerid][pt_SHOW_IPHONE_HOUR] = true;
	ShowPlayeriPhone(playerid);
	ShowPlayeriPhoneHour(playerid, 8);
	return 1;
}

CMD:minumero(playerid, params[])
{
	if(!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "Puedes comprar un teléfono móvil en un 24/7 o tienda.", 4);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}

	SendClientMessageEx(playerid, -1, "Tu número de teléfono es: {00CCFF}%s.", number_format_dash(PLAYER_PHONE[playerid][player_phone_NUMBER]));
	return 1;
}
CMD:numero(playerid, params[])
{
	return cmd_minumero(playerid, params);
}

CMD:iphone(playerid, params[])
{
	if(!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "Puedes comprar un teléfono móvil en un 24/7 o tienda.", 4);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}

	if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE_HOUR] == true) return 1;
	if(PLAYER_TEMP[playerid][pt_GPS_MAP]) HidePlayerGpsMap(playerid);

	ShowPlayeriPhone(playerid);
	ShowPlayeriPhoneApps(playerid);
	PLAYER_TEMP[playerid][pt_SHOW_IPHONE] = true;
	SelectTextDrawEx(playerid, 0x000000AA);
	return 1;
}

CMD:i(playerid, params[])
{
	return cmd_iphone(playerid, params);
}

CMD:movil(playerid, params[])
{
	return cmd_iphone(playerid, params);
}

CMD:celular(playerid, params[])
{
	return cmd_iphone(playerid, params);
}

CMD:telefono(playerid, params[])
{
	return cmd_iphone(playerid, params);
}

CMD:tlf(playerid, params[])
{
	return cmd_iphone(playerid, params);
}

CMD:guia(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	if(!PLAYER_OBJECT[playerid][po_PHONE_RESOLVER])
	{
		SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes una guía telefónica, puedes ir a cualquier 24/7 para comprar una.");
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}

	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFFF00FF, "/guia {FFFFFF}[PlayerID/Nombre]");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, -1, "{FFFFFF}Jugador desconectado.");

	if(!PLAYER_PHONE[params[0]][player_phone_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}Parece que esta persona no tiene teléfono.");
	if(!PLAYER_PHONE[params[0]][player_phone_VISIBLE_NUMBER]) return SendClientMessage(playerid, -1, "{FFFFFF}Él número de esta persona es privado, si quieres poner tu número privado usa {FFFF00}/sguia.");

	SendClientMessageEx(playerid, -1, "{FFFFFF}Nombre: {00FF00}%s	{FFFFFF}Teléfono: {00CCFF}%s.", PLAYER_TEMP[params[0]][pt_RP_NAME], number_format_dash(PLAYER_PHONE[params[0]][player_phone_NUMBER]));
	return 1;
}

CMD:sguia(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	if(!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "Puedes comprar un teléfono móvil en un 24/7 o tienda.", 4);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}

	if(PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER])
	{
		PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER] = false;
		ShowPlayerMessage(playerid, "Ahora tú número será privado.", 4);
	}
	else
	{
		PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER] = true;
		ShowPlayerMessage(playerid, "Tú número ahora será visible en la guía.", 4);
	}
	return 1;
}

CMD:audio(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	if(!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "Puedes comprar un teléfono móvil en un 24/7 o tienda.", 4);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}
	if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessageEx(playerid, -1, "{FFFFFF}Tienes apagado tú teléfono, usa {FFFF00}/móvil{FFFFFF} para encenderlo.");
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return ShowPlayerMessage(playerid, "Estás en una llamada.", 3);

	new to_number, message[64];
	new tmp_number, tmp_contact[24], bool:found;
	if(!sscanf(params, "ds[64]", tmp_number, message))
	{
		found = true;
		to_number = tmp_number;
	}
	else if(!sscanf(params, "s[24]s[64]", tmp_contact, message))
	{
		// con strcmp daba crash por las tilder
		new DBResult:Result, DB_Query[145];
		format(DB_Query, sizeof DB_Query, "SELECT `PHONE_NUMBER` FROM `PHONE_BOOK` WHERE `PHONE_ID` = '%d' AND `NAME` LIKE '%%%q%%' LIMIT 1;", PLAYER_PHONE[playerid][player_phone_NUMBER], tmp_contact);
		Result = db_query(Database, DB_Query);
		if(db_num_rows(Result))
		{
			found = true;
			to_number = db_get_field_int(Result, 0);
		}
		db_free_result(Result);
	}
	else return SendClientMessage(playerid, 0xFFFF00FF, "/audio {FFFFFF}[Número o nombre de /agenda] [Texto]");

	if(!found) return SendClientMessageEx(playerid, -1, "El nombre {00FF00}%s{FFFFFF} no existe en tu {FFFF00}/agenda.", tmp_contact);
	if(to_number <= 0) return ShowPlayerMessage(playerid, "El número que usted marcó, no existe.", 4);

	new DBResult:Result, DB_Query[100], bool:phone_exists;
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PHONE` WHERE `PHONE_NUMBER` = '%d';", to_number);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result)) phone_exists = true;
	db_free_result(Result);

	if(!phone_exists) return ShowPlayerMessage(playerid, "El número que usted marcó, no existe.", 4);

	new to_playerid = INVALID_PLAYER_ID;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if((PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_DEAD) && PLAYER_PHONE[i][player_phone_NUMBER] == to_number)
			{
				to_playerid = i;
				break;
			}
		}
	}

	if(to_playerid == INVALID_PLAYER_ID) RegisterPhoneMessage(PLAYER_PHONE[playerid][player_phone_NUMBER], to_number, message, true);
	else
	{
		RegisterPhoneMessage(PLAYER_PHONE[playerid][player_phone_NUMBER], to_number, message);
		if(PLAYER_PHONE[to_playerid][player_phone_STATE] == PHONE_STATE_ON)
		{
	 		SendClientMessageEx(to_playerid, 0x12bc7eFF, "@WHATSAPP AUDIO:{25d366} recibido de {12bc7e}%s{25d366}, se esta reproduciendo...", convertPhoneNumber(to_playerid, PLAYER_PHONE[playerid][player_phone_NUMBER]));
			new strad[246];
			format(strad, sizeof(strad), "http://audio1.spanishdict.com/audio?lang=es&voice=Jorge&speed=25&text=%s", message);
			PlayAudioStreamForPlayer(to_playerid, strad);
		}
	}
	SendClientMessageEx(playerid, 0x12bc7eFF, "@WHATSAPP AUDIO:{25d366} envíado a {12bc7e}%s{25d366}, lo está escuchando...", convertPhoneNumber(playerid, to_number));
	return 1;
}
CMD:wa(playerid, params[])
{
	return cmd_audio(playerid, params);
}
CMD:sms(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	if(!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "Puedes comprar un teléfono móvil en un 24/7 o tienda.", 4);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}
	if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessageEx(playerid, -1, "{FFFFFF}Tienes apagado tú teléfono, usa {FFFF00}/móvil{FFFFFF} para encenderlo.");
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return ShowPlayerMessage(playerid, "Estás en una llamada.", 3);

	new to_number, message[64];
	new tmp_number, tmp_contact[24], bool:found;
	if(!sscanf(params, "ds[64]", tmp_number, message))
	{
		found = true;
		to_number = tmp_number;
	}
	else if(!sscanf(params, "s[24]s[64]", tmp_contact, message))
	{
		// con strcmp daba crash por las tilder
		new DBResult:Result, DB_Query[145];
		format(DB_Query, sizeof DB_Query, "SELECT `PHONE_NUMBER` FROM `PHONE_BOOK` WHERE `PHONE_ID` = '%d' AND `NAME` LIKE '%%%q%%' LIMIT 1;", PLAYER_PHONE[playerid][player_phone_NUMBER], tmp_contact);
		Result = db_query(Database, DB_Query);
		if(db_num_rows(Result))
		{
			found = true;
			to_number = db_get_field_int(Result, 0);
		}
		db_free_result(Result);
	}
	else return SendClientMessage(playerid, 0xFFFF00FF, "/w {FFFFFF}[Número o nombre de /agenda] [Mensaje 1-64 caracteres]");

	if(!found) return SendClientMessageEx(playerid, -1, "El nombre {00FF00}%s{FFFFFF} no existe en tu {FFFF00}/agenda.", tmp_contact);
	if(to_number <= 0) return ShowPlayerMessage(playerid, "El número que usted marcó, no existe.", 4);

	new DBResult:Result, DB_Query[100], bool:phone_exists;
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PHONE` WHERE `PHONE_NUMBER` = '%d';", to_number);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result)) phone_exists = true;
	db_free_result(Result);

	if(!phone_exists) return ShowPlayerMessage(playerid, "El número que usted marcó, no existe.", 4);

	new to_playerid = INVALID_PLAYER_ID;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if((PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_DEAD) && PLAYER_PHONE[i][player_phone_NUMBER] == to_number)
			{
				to_playerid = i;
				break;
			}
		}
	}

	if(to_playerid == INVALID_PLAYER_ID) RegisterPhoneMessage(PLAYER_PHONE[playerid][player_phone_NUMBER], to_number, message, true);
	else
	{
		RegisterPhoneMessage(PLAYER_PHONE[playerid][player_phone_NUMBER], to_number, message);
		if(PLAYER_PHONE[to_playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(to_playerid, 0x12bc7eFF, "@WHATSAPP:{25d366} recibido de {12bc7e}%s:{25d366} %s", convertPhoneNumber(to_playerid, PLAYER_PHONE[playerid][player_phone_NUMBER]), message);
	}
	SendClientMessageEx(playerid, 0x12bc7eFF, "@WHATSAPP:{25d366} envíado a {12bc7e}%s: {25d366}%s.", convertPhoneNumber(playerid, to_number), message);
	return 1;
}
CMD:whatsapp(playerid, params[])
{
	return cmd_sms(playerid, params);
}
CMD:wsp(playerid, params[])
{
	return cmd_sms(playerid, params);
}
CMD:whats(playerid, params[])
{
	return cmd_sms(playerid, params);
}
CMD:w(playerid, params[])
{
	return cmd_sms(playerid, params);
}

CMD:agenda(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	if(!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "Puedes comprar un teléfono móvil en un 24/7 o tienda.", 4);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}
	if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessageEx(playerid, -1, "{FFFFFF}Tienes apagado tú teléfono, usa {FFFF00}/móvil{FFFFFF} para encenderlo.");
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return ShowPlayerMessage(playerid, "Estás en una llamada.", 4);

	ShowDialog(playerid, DIALOG_PHONE_BOOK);
	return 1;
}

CMD:tienda(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	if(!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "Puedes comprar un teléfono móvil en un 24/7 o tienda.", 4);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}

	if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessageEx(playerid, -1, "{FFFFFF}Tienes apagado tú teléfono, usa {FFFF00}/móvil{FFFFFF} para encenderlo.");
	ShowPlayerShop(playerid);
	return 1;
}

CMD:llamar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	if(!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "Puedes comprar un teléfono móvil en un 24/7 o tienda.", 4);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}
	if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessageEx(playerid, -1, "{FFFFFF}Tienes apagado tú teléfono, usa {FFFF00}/móvil{FFFFFF} para encenderlo.");
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return ShowPlayerMessage(playerid, "Estás en una llamada", 3);

	new call_number, tmp_number, tmp_contact[24], bool:found;
	if(!sscanf(params, "d", tmp_number))
	{
		found = true;
		call_number = tmp_number;
	}
	else if(!sscanf(params, "s[24]", tmp_contact))
	{
		// con strcmp daba crash por las tilder
		new DBResult:Result, DB_Query[145];
		format(DB_Query, sizeof DB_Query, "SELECT `PHONE_NUMBER` FROM `PHONE_BOOK` WHERE `PHONE_ID` = '%d' AND `NAME` LIKE '%%%q%%' LIMIT 1;", PLAYER_PHONE[playerid][player_phone_NUMBER], tmp_contact);
		Result = db_query(Database, DB_Query);

		if(db_num_rows(Result))
		{
			found = true;
			call_number = db_get_field_int(Result, 0);
		}
		db_free_result(Result);
	}
	else return SendClientMessage(playerid, 0xFFFF00FF, "/llamar {FFFFFF}[Número o contacto de /agenda]");

	if(!found) return SendClientMessageEx(playerid, -1, "El nombre {00FF00}%s{FFFFFF} no existe en tu {FFFF00}/agenda.", tmp_contact);
	if(call_number <= 0) return ShowPlayerMessage(playerid, "El número que usted marco, no existe", 4);

	switch(call_number)
	{
		case 911:
		{
			PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
			PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = true;
			PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = false;

			SendClientMessage(playerid, 0x4286f4FF, "@911: {98baf2}Servicio de emergencias, diganos su nombre por favor...");
			return 1;
		}
		case 2: //Taxi
		{
			if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
			{
				PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(playerid);
				SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
				SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}El taxi que habías pedido se ha cancelado.");
				ShowPlayerMessage(playerid, "Llamada finalizada.", 3);
			}
			else
			{
				SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
				if(Iter_Count(PLAYERS_IN_TAXI) > 0)
				{
				    PLAYER_TEMP[playerid][pt_WANT_TAXI] = true;
					SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha envíado su llamado a los radios de los taxistas, espere en su ubicación a un taxista.");
					SendAlertToTaxiDrivers(playerid);
				}
				else if(Iter_Count(PLAYERS_IN_TAXI) == 0)
				{
			 		SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}No hay ningún taxista en servicio, llame más tarde.");
				}
				ShowPlayerMessage(playerid, "Llamada finalizada.", 3);
			}
			return 1;
		}
		case 3: //Mecanico
		{
			if(PLAYER_TEMP[playerid][pt_WANT_MECHANIC])
			{
				PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = false;
				DisablePlayerMechanicMark(playerid);
				SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
				SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha cancelado su llamado de mecánico.");
				ShowPlayerMessage(playerid, "Llamada finalizada.", 3);
			}
			else
			{
				if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{FFFFFF}Tienes que estar dentro de un vehículo averiado para llamar al mecánico.");
				if(GLOBAL_VEHICLES[ GetPlayerVehicleID(playerid) ][gb_vehicle_STATE] != VEHICLE_STATE_DAMAGED) return SendClientMessage(playerid, -1, "{FFFFFF}Tienes que estar dentro de un vehículo averiado para llamar al mecánico.");

				SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
				if(Iter_Count(PLAYERS_IN_MECANICO) > 0)
				{
				    PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = true;
					SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha envíado su llamado a los radios de los mecanicos, espere en su ubicación a un mecánico.");
					SendAlertToMechanic(playerid);
				}
				else if(Iter_Count(PLAYERS_IN_MECANICO) == 0)
				{
			 		SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}No hay ningún mecánico en servicio, llame más tarde.");
				}
				ShowPlayerMessage(playerid, "Llamada finalizada.", 3);
			}
			return 1;
		}
		case 1:
		{
			if(CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_CRACK) return ShowPlayerMessage(playerid, "No estás delirando", 3);
   			if(PLAYER_TEMP[playerid][pt_WANT_MEDIC]) return ShowPlayerMessage(playerid, "Ya alertaste a los médicos.", 3);

			SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
			if(Iter_Count(PLAYERS_IN_MEDICO) > 0)
			{
			    PLAYER_TEMP[playerid][pt_WANT_MEDIC] = true;
				SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha envíado su llamado a los radios de los médicos, espere en su ubicación a un médico.");
				SendAlertToTaxiDrivers(playerid);
			}
			else if(Iter_Count(PLAYERS_IN_MEDICO) == 0)
			{
		 		SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}No hay ningún médico en servicio, llame más tarde.");
			}
			ShowPlayerMessage(playerid, "Llamada finalizada.", 3);

		    return 1;
		}
		case 4:
		{
		    SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
		    SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Seleccione que auto desea remolcar, el servicio tiene un costo.");
		    ShowDialog(playerid, DIALOG_CRANE_SELECT_VEHICLE);
		    return 1;
		}
	}

	new to_playerid = INVALID_PLAYER_ID;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if((PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL) && PLAYER_PHONE[i][player_phone_NUMBER] == call_number)
			{
				to_playerid = i;
				break;
			}
		}
	}

	if(to_playerid == INVALID_PLAYER_ID) return ShowPlayerMessage(playerid, "El número que usted marcó, esta fuera de servicio.", 3);
	if(to_playerid == playerid) return ShowPlayerMessage(playerid, "Compruebe el número que usted marcó.", 3);
	if(PLAYER_PHONE[to_playerid][player_phone_STATE] == PHONE_STATE_OFF) return ShowPlayerMessage(playerid, "El número que usted marcó se encuentra apagado.", 3);
	if(PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL]) return ShowPlayerMessage(playerid, "El número que usted marcó esta ocupado.", 3);

	SendClientMessageEx(to_playerid, -1, "{00FF00}%s{FFFFFF} te está llamando, usa {FFFF00}/atender {FFFFFF}o {FFFF00}/responder", convertPhoneNumber(to_playerid, PLAYER_PHONE[playerid][player_phone_NUMBER]));
    Auto_SendPlayerAction(to_playerid, "le están llamando en el iPhone");
   	new Float:x,Float:y,Float:z;
	GetPlayerPos(to_playerid, x, y, z);
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(IsPlayerInRangeOfPoint(i, 15.0, x,y,z))
		{
			PlayerPlaySound(i, 20600,0.0,0.0,0.0);
		}
	}
	PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = true;
	PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_INCOMING_CALL;
	PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = playerid;

	SendClientMessageEx(playerid, 0xf4d142FF, "Llamando a {00FF00}%s ...", convertPhoneNumber(playerid, call_number));
	PLAYER_TEMP[playerid][pt_TIMERS][6] = SetTimerEx("NoCallResponse", 15000, false, "i", playerid);
	PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_WAITING_RESPONSE;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = to_playerid;
	PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
	return 1;
}

CMD:responder(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	if(!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "Puedes comprar un teléfono móvil en un 24/7 o tienda.", 4);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}
	if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessageEx(playerid, -1, "{FFFFFF}Tienes apagado tú teléfono, usa {FFFF00}/móvil{FFFFFF} para encenderlo.");

	if(!PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return 1;
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return 1;
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] != CALL_STATE_INCOMING_CALL) return 1;

	new to_playerid = PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID];

	PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_ESTABLISHED;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = to_playerid;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

	KillTimer(PLAYER_TEMP[to_playerid][pt_TIMERS][6]);
	PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = true;
	PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_ESTABLISHED;
	PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = playerid;
	SetPlayerSpecialAction(to_playerid, SPECIAL_ACTION_USECELLPHONE);

	SendClientMessage(playerid, -1, "Llamada establecida, usa {FFFF00}/colgar {FFFFFF}para terminarla.");
	SendClientMessage(to_playerid, -1, "Llamada establecida, usa {FFFF00}/colgar {FFFFFF}para terminarla.");
	return 1;
}

CMD:atender(playerid, params[])
{
	return cmd_responder(playerid, params);
}

CMD:colgar(playerid, params[])
{
	if(!PLAYER_PHONE[playerid][player_phone_VALID])
	{
		ShowPlayerMessage(playerid, "Puedes comprar un teléfono móvil en un 24/7 o tienda.", 4);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}
	if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessageEx(playerid, -1, "{FFFFFF}Tienes apagado tú teléfono, usa {FFFF00}/móvil{FFFFFF} para encenderlo.");

	if(!PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return 1;

	if(PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] || PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION])
	{
		PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = false;
		ShowPlayerMessage(playerid, "Llamada finalizada.", 3);
		return 1;
	}

	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return 1;

	switch(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE])
	{
		case CALL_STATE_WAITING_RESPONSE:
		{
			EndPhoneCall(playerid);
			ShowPlayerMessage(playerid, "Colgaste.", 3);
		}
		case CALL_STATE_INCOMING_CALL:
		{
			EndPhoneCall(playerid);
			ShowPlayerMessage(playerid, "No respondiste la llamada.", 3);
		}
		case CALL_STATE_ESTABLISHED:
		{
			EndPhoneCall(playerid);
			ShowPlayerMessage(playerid, "Llamada finalizada.", 3);
		}
		default: ShowPlayerMessage(playerid, "No estás en llamada.", 3);
	}
	return 1;
}

CMD:comprarpropiedad(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 226.8522, 2348.2397, 1017.1298)) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	if(BANK_ACCOUNT[playerid][bank_account_ID] == 0) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes comprar una casa sin tener cuenta bancaria.");

	if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, 0xFFFF00FF, "/comprarpropiedad {FFFFFF}[ID]");
	if(params[0] <= 0) return SendClientMessage(playerid, -1, "{FFFFFF}Error: ID no es válida.");

	new DBResult:Result, DB_Query[120], player_properties;
	format(DB_Query, sizeof(DB_Query), "SELECT COUNT(`ID_USER`) AS `PROPERTIES` FROM `PROPERTY_OWNER` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);
	if(db_num_rows(Result)) player_properties = db_get_field_assoc_int(Result, "PROPERTIES");
	db_free_result(Result);

	if(ACCOUNT_INFO[playerid][ac_SU])
	{
		if(player_properties >= MAX_SU_PROPERTIES) return ShowPlayerMessage(playerid, "Ya no puedes tener más propiedades.", 5);
	}
	else
	{
		if(player_properties >= MAX_NU_PROPERTIES) return ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Premium", "{FFFFFF}Necesitas ser usuario {f4d942}premium{FFFFFF} para tener más propiedades compra el {f4d942}premium{FFFFFF} con sólo {f44242}5 koins.", "Salir", "");
	}

	new index = GetPropertyIndexByID(params[0]);
	if(index == -1) return SendClientMessage(playerid, -1, "{FFFFFF}Error: ID no es válida.");

	if(PROPERTY_INFO[index][property_SOLD]) return ShowPlayerMessage(playerid, "Esa propiedad ya tiene dueño.", 5);
	if(PROPERTY_INFO[index][property_LEVEL] > ACCOUNT_INFO[playerid][ac_LEVEL]) return SendClientMessageEx(playerid, -1, "{FFFFFF}Necesitas ser como mínimo nivel %d para comprar esta propiedad.", PROPERTY_INFO[index][property_LEVEL]);

	if(BANK_ACCOUNT[playerid][bank_account_BALANCE] >= PROPERTY_INFO[index][property_PRICE])
	{
		PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] = index;
		ShowDialog(playerid, DIALOG_CONFIRM_BUY_PROPERTY);
	}
	else SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes fondos suficientes en tu cuenta, te faltan {41f48f}$%s {FFFFFF}para poder comprar esta propiedad.", number_format_thousand(PROPERTY_INFO[index][property_PRICE] - BANK_ACCOUNT[playerid][bank_account_BALANCE]));
	return 1;
}

GetPropertyIndexByID(id)
{
	for(new i = 0; i != MAX_PROPERTIES; i ++)
	{
		if(!PROPERTY_INFO[i][property_VALID]) continue;
		if(PROPERTY_INFO[i][property_ID] == id) return i;
	}
	return -1;
}

CMD:banco(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 1909.6217, -3520.7922, 993.6496) || IsPlayerInRangeOfPoint(playerid, 1.0, 1909.6206, -3518.8193, 993.6496) || IsPlayerInRangeOfPoint(playerid, 1.0, 1909.6199, -3522.7417, 993.6496) || IsPlayerInRangeOfPoint(playerid, 1.0, 1909.6215, -3516.8120, 993.6496))
	{
		if(BANK_ACCOUNT[playerid][bank_account_ID] == 0) // no tiene cuenta bancaria
		{
			ShowDialog(playerid, DIALOG_CREATE_BANK_ACCOUNT);
			return 1;
		}
		ShowDialog(playerid, DIALOG_BANK);
	}
	return 1;
}

CMD:cajero(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] == 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	new info[3];
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	if(info[0] != PICKUP_TYPE_ATM) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	new Float:pos[3];
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	if(BANK_ACCOUNT[playerid][bank_account_ID] == 0)
	{
		ShowPlayerMessage(playerid, "No tienes una ~p~cuenta bancaria~w~~h~, generala en un ~r~banco~w~.", 5);
		return 1;
	}

	PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = true;
	ShowDialog(playerid, DIALOG_BANK);
	return 1;
}

CMD:alimentos(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ShowDialog(playerid, DIALOG_PLAYER_POCKET);
	return 1;
}


#define TIME_BETWEEN_GIVE_CASH	30 // segundos
#define TIME_BETWEEN_GIVE_SD	30 // segundos
CMD:dar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	if(ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return SendClientMessage(playerid, -1, "{FFFFFF}Debes ser al menos nivel 2 para usar este comando.");
    //if(PLAYER_MISC[playerid][MISC_BLOQ_STATS] == 1) return ShowPlayerMessage(playerid, "No puedes dar cosas hasta que subas de nivel.", 4);

	new option[24], to_playerid, extra;
	if(sscanf(params, "s[24]ud", option, to_playerid, extra)) return ShowPlayerDialog(playerid,DIALOG_INFO,DIALOG_STYLE_MSGBOX, ""SERVER_NAME" - Dar",
					"\
						{FFFFFF}INFORMACIÓN:\n\
						{FFFFFF}Podrás dar cualquier pertenencia que tengas.\n\
						{FFFFFF}Si quieres revisar tus pertenencias usa {FFFF00}/inventario.\n\
						\n\
						{FFFFFF}COMANDOS:\n\
						{00FF00} /dar armas {FFFFFF}[id o nombre] [slot de /armas]\n\
						{00FF00} /dar sd {FFFFFF}[id o nombre] [koins]\n\
						{00FF00} /dar dinero {FFFFFF}[id o nombre] [cantidad]\n\
						{00FF00} /dar alimento {FFFFFF}[id o nombre] [slot de /alimentos]\n\
						{00FF00} /dar medicamentos {FFFFFF}[id o nombre] [cantidad]\n\
						{00FF00} /dar marihuana {FFFFFF}[id o nombre] [cantidad]\n\
						{00FF00} /dar crack {FFFFFF}[id o nombre] [cantidad]\n\
						{00FF00} /dar madera {FFFFFF}[id o nombre] [cantidad]\n\
						{00FF00} /dar piezas {FFFFFF}[id o nombre] [cantidad]\n\
					", "Cerrar", "");

	if(!IsPlayerConnected(to_playerid)) return SendClientMessage(playerid, -1, "{FFFFFF}El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(to_playerid, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return 1;
	if(PLAYER_TEMP[to_playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes darle nada a este jugador ahora.");

	if(!strcmp(option, "dinero", true))
	{
		if(gettime() < PLAYER_TEMP[playerid][pt_LAST_GIVE_MONEY_TIME] + TIME_BETWEEN_GIVE_CASH)
		{
			new time = TIME_BETWEEN_GIVE_CASH - (gettime() - PLAYER_TEMP[playerid][pt_LAST_GIVE_MONEY_TIME]);
			SendClientMessageEx(playerid, -1, "{FFFFFF}Debes de esperar %s minutos para volver a dar dinero.", TimeConvert(time));
			return 1;
		}

		if(extra < 0 || extra > CHARACTER_INFO[playerid][ch_CASH]) return SendClientMessage(playerid, -1, "{FFFFFF}Cantidad de dinero incorrecta.");
		if(extra > 50000) return SendClientMessage(playerid, -1, "{FFFFFF}Para dar tanto dinero tienes que hacerlo a través de transferencias bancarias.");

		GivePlayerCash(playerid, -extra);
		GivePlayerCash(to_playerid, extra);

		SendClientMessageEx(to_playerid, 0x00FF00FF, "%s {FFFFFF} te ha dado {41f48f}$%s.", PLAYER_TEMP[playerid][pt_RP_NAME], number_format_thousand(extra));

		new action[64];
		format(action, sizeof action, "saca su billetera y le da dinero a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		PLAYER_TEMP[playerid][pt_LAST_GIVE_MONEY_TIME] = gettime();
		return 1;
	}
	else if(!strcmp(option, "sd", true))
	{
		if(gettime() < PLAYER_TEMP[playerid][pt_LAST_GIVE_SD_TIME] + TIME_BETWEEN_GIVE_SD)
		{
			new time = TIME_BETWEEN_GIVE_SD - (gettime() - PLAYER_TEMP[playerid][pt_LAST_GIVE_SD_TIME]);
			SendClientMessageEx(playerid, -1, "{FFFFFF}Debes de esperar %s minutos para volver a dar koins.", TimeConvert(time));
			return 1;
		}

		if(extra < 0 || extra > ACCOUNT_INFO[playerid][ac_SD]) return SendClientMessage(playerid, -1, "{FFFFFF}Cantidad de koins incorrecta.");



		ACCOUNT_INFO[playerid][ac_SD] -= extra;
		ACCOUNT_INFO[to_playerid][ac_SD] += extra;

		new DB_Query_update[256];
		format
		(
			DB_Query_update, sizeof DB_Query_update,

				"\
					UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';\
					UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';\
				",
					ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_ID],
					ACCOUNT_INFO[to_playerid][ac_SD], ACCOUNT_INFO[to_playerid][ac_ID]
		);
		db_query(Database, DB_Query_update);

		SendClientMessageEx(to_playerid, 0x00FF00FF, "%s {FFFFFF} te ha dado {f44242}%d koins.", PLAYER_TEMP[playerid][pt_RP_NAME], extra);

		new action[64];
		format(action, sizeof action, "le da unos koins a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		PLAYER_TEMP[playerid][pt_LAST_GIVE_SD_TIME] = gettime();
		return 1;
	}
	else if(!strcmp(option, "alimento", true))
	{
		if(extra < 1 || extra > MAX_PLAYER_POCKET_OBJECTS) return SendClientMessage(playerid, 0xFFFF00FF, "/dar alimento {FFFFFF}[ID o Nombre] [Slot /alimentos]");

		extra --;

		if(!PLAYER_POCKET[playerid][extra][player_pocket_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes nada en ese slot.");

		new to_player_slot = GetEmptyPlayerPocketSlot(to_playerid);
		if(to_player_slot == -1)
		{
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SendClientMessage(playerid, -1, "{FFFFFF}El jugador no tiene más espacio entre sus alimentos.");
			return 1;
		}

		new action[64];
		format(action, sizeof action, "le da algo a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);

		TransferPlayerPocketObject(playerid, extra, to_playerid, to_player_slot);
		return 1;
	}
	else if(!strcmp(option, "medicamentos", true))
	{
		if(extra <= 0 || extra > 10000000) return SendClientMessage(playerid, -1, "{FFFFFF}Cantidad incorrecta.");
		if(extra > PLAYER_MISC[playerid][MISC_MEDICINE]) return ShowPlayerMessage(playerid, "No tienes esa cantidad.", 4);

		PLAYER_MISC[playerid][MISC_MEDICINE] -= extra;
		PLAYER_MISC[to_playerid][MISC_MEDICINE] += extra;

		SendClientMessageEx(to_playerid, 0x00FF00FF, "%s {FFFFFF}te ha dado {00FF00}%dg{FFFFFF} de medicamentos.", PLAYER_TEMP[playerid][pt_RP_NAME], extra);

		new action[64];
		format(action, sizeof action, "le da algo a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		return 1;
	}
	else if(!strcmp(option, "marihuana", true))
	{
		if(extra <= 0 || extra > 10000000) return SendClientMessage(playerid, -1, "{FFFFFF}Cantidad incorrecta.");
		if(extra > PLAYER_MISC[playerid][MISC_CANNABIS]) return ShowPlayerMessage(playerid, "No tienes esa cantidad.", 4);

		PLAYER_MISC[playerid][MISC_CANNABIS] -= extra;
		PLAYER_MISC[to_playerid][MISC_CANNABIS] += extra;

		SendClientMessageEx(to_playerid, 0x00FF00FF, "%s {FFFFFF}te ha dado {00FF00}%dg{FFFFFF} de marihuana.", PLAYER_TEMP[playerid][pt_RP_NAME], extra);

		new action[64];
		format(action, sizeof action, "le da algo a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		return 1;
	}
	else if(!strcmp(option, "crack", true))
	{
		if(extra <= 0 || extra > 10000000) return SendClientMessage(playerid, -1, "{FFFFFF}Cantidad incorrecta.");
		if(extra > PLAYER_MISC[playerid][MISC_CRACK]) return ShowPlayerMessage(playerid, "No tienes esa cantidad.", 4);

		PLAYER_MISC[playerid][MISC_CRACK] -= extra;
		PLAYER_MISC[to_playerid][MISC_CRACK] += extra;

		SendClientMessageEx(to_playerid, 0x00FF00FF, "%s {FFFFFF}te ha dado {00FF00}%dg{FFFFFF} de crack.", PLAYER_TEMP[playerid][pt_RP_NAME], extra);

		new action[64];
		format(action, sizeof action, "le da algo a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		return 1;
	}
	else if(!strcmp(option, "arma", true))
	{
		if(PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}Los policías no pueden vender armas.");
		if(extra < 0 || extra > 12) return SendClientMessage(playerid, 0xFFFF00FF, "/dar arma {FFFFFF}[ID o Nombre] [Slot /armas]");

		if(!PLAYER_WEAPONS[playerid][extra][player_weapon_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes nigún arma en ese slot.");

		if(ACCOUNT_INFO[to_playerid][ac_LEVEL] < 3) return SendClientMessage(playerid, -1, "{FFFFFF}La otra persona tiene que ser al menos nivel 3.");
		if(PLAYER_WEAPONS[to_playerid][extra][player_weapon_VALID])
		{
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SendClientMessage(playerid, -1, "{FFFFFF}El jugador ya tiene un arma en ese slot.");
			return 1;
		}

		SendClientMessageEx(to_playerid, 0x00FF00FF, "%s {FFFFFF}te ha dado su {00FF00}%s.", PLAYER_TEMP[playerid][pt_RP_NAME], WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME]);

		new action[64];
		format(action, sizeof action, "le da un arma a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);

		TransferPlayerWeapon(playerid, extra, to_playerid);
		return 1;
	}
	else if(!strcmp(option, "madera", true))
	{
		if(extra <= 0 || extra > 10000000) return SendClientMessage(playerid, -1, "{FFFFFF}Cantidad incorrecta.");
		if(extra > PLAYER_MISC[playerid][MISC_WOOD]) return ShowPlayerMessage(playerid, "No tienes esa cantidad.", 4);

		PLAYER_MISC[playerid][MISC_WOOD] -= extra;
		PLAYER_MISC[to_playerid][MISC_WOOD] += extra;

		SendClientMessageEx(to_playerid, 0x00FF00FF, "%s {FFFFFF}te ha dado {00FF00}%d{FFFFFF} pieza(s) de madera.", PLAYER_TEMP[playerid][pt_RP_NAME], extra);

		new action[64];
		format(action, sizeof action, "le da algo a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		return 1;
	}
	else if(!strcmp(option, "piezas", true))
	{
		if(extra <= 0 || extra > 10000000) return SendClientMessage(playerid, -1, "{FFFFFF}Cantidad incorrecta.");
		if(extra > PLAYER_MISC[playerid][MISC_PIECES_WEAPON]) return ShowPlayerMessage(playerid, "No tienes esa cantidad.", 4);

		PLAYER_MISC[playerid][MISC_PIECES_WEAPON] -= extra;
		PLAYER_MISC[to_playerid][MISC_PIECES_WEAPON] += extra;

		SendClientMessageEx(to_playerid, 0x00FF00FF, "%s {FFFFFF}te ha dado {00FF00}%d{FFFFFF} pieza(s) de arma.", PLAYER_TEMP[playerid][pt_RP_NAME], extra);

		new action[64];
		format(action, sizeof action, "le da algo a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		return 1;
	}
	return 1;
}

CMD:vender(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	if(ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return SendClientMessage(playerid, -1, "{FFFFFF}Debes ser al menos nivel 2 para usar este comando.");

	new option[24], to_playerid, extra, price;
	if(sscanf(params, "s[24]udd", option, to_playerid, extra, price)) return ShowPlayerDialog(playerid,DIALOG_INFO,DIALOG_STYLE_MSGBOX, "{00FF00}CÓMO USAR /VENDER",
					"\
						{00FF00}INFORMACIÓN:\n\
						{FFFFFF}- Sólo podrás vender lo que aparece en esta lista.\n\
						{FFFFFF}- Si no sabes que tienes para vender, revisa tu {FFFF00}/inventario.\n\
						\n\
						{FFFFFF}LISTADO:\n\
						{00FF00} /vender arma {FFFFFF}[jugador] [slot de /armas] [precio]\n\
						{00FF00} /vender alimento {FFFFFF}[jugador] [slot de /alimentos] [precio]\n\
						{00FF00} /vender medicamentos {FFFFFF}[jugador] [cantidad] [precio]\n\
						{00FF00} /vender marihuana {FFFFFF}[jugador] [cantidad] [precio]\n\
						{00FF00} /vender crack {FFFFFF}[jugador] [cantidad] [precio]\n\
						{00FF00} /vender sd {FFFFFF}[jugador] [cantidad] [precio]\n\
						{00FF00} /vender madera {FFFFFF}[jugador] [cantidad] [precio]\n\
						{00FF00} /vender piezas {FFFFFF}[jugador] [cantidad] [precio]\n\
					", "Cerrar", "");

	if(price <= 0 || price > 10000000) return SendClientMessage(playerid, -1, "{FFFFFF}El precio no es válido.");
	if(!IsPlayerConnected(to_playerid)) return SendClientMessage(playerid, -1, "{FFFFFF}El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(to_playerid, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xFFFFFFFF, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[to_playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes venderle nada a este jugador ahora.");

	if(price > CHARACTER_INFO[to_playerid][ch_CASH])
	{
		SendClientMessage(playerid, -1, "{FFFFFF}Esta persona no tiene el dinero que pides.");
		return 1;
	}

	PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_PID] = playerid;
	PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_AID] = ACCOUNT_INFO[playerid][ac_ID];
	PLAYER_TEMP[to_playerid][pt_TRICK_PRICE] = price;
	PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] = extra;
	PLAYER_TEMP[to_playerid][pt_TRICK_TIME] = gettime();

	if(!strcmp(option, "alimento", true))
	{
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] < 1 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > MAX_PLAYER_POCKET_OBJECTS) return SendClientMessage(playerid, 0xFFFF00FF, "/vender alimento {FFFFFF}[ID o Nombre] [Slot /alimentos] [precio]");
		PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] --;

		if(!PLAYER_POCKET[playerid][ PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] ][player_pocket_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes nada en ese slot.");

		SendClientMessageEx(playerid, -1, "{FFFFFF}Le has ofrecido a {00FF00}%s{FFFFFF}, alimentos en {41f48f}$%d{FFFFFF}, espera para ver si acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
		ShowDialog(to_playerid, DIALOG_TRICKS_FOOD);
		return 1;
	}
	else if(!strcmp(option, "medicamentos", true))
	{
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendClientMessage(playerid, -1, "{FFFFFF}Cantidad incorrecta.");
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > PLAYER_MISC[playerid][MISC_MEDICINE]) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes esa cantidad.");

		SendClientMessageEx(playerid, -1, "{FFFFFF}Le has ofrecido a {00FF00}%s{FFFFFF}, medicamento en {41f48f}$%d{FFFFFF}, espera para ver si acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
		ShowDialog(to_playerid, DIALOG_TRICKS_MEDICINE);
		return 1;
	}
	else if(!strcmp(option, "marihuana", true))
	{
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendClientMessage(playerid, -1, "{FFFFFF}Cantidad incorrecta.");
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > PLAYER_MISC[playerid][MISC_CANNABIS]) return ShowPlayerMessage(playerid, "No tienes esa cantidad.", 4);

		SendClientMessageEx(playerid, -1, "{FFFFFF}Le has ofrecido a {00FF00}%s{FFFFFF}, marihuana en {41f48f}$%d{FFFFFF}, espera para ver si acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
		ShowDialog(to_playerid, DIALOG_TRICKS_CANNABIS);
		return 1;
	}
	else if(!strcmp(option, "crack", true))
	{
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendClientMessage(playerid, -1, "{FFFFFF}Cantidad incorrecta.");
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > PLAYER_MISC[playerid][MISC_CRACK]) return ShowPlayerMessage(playerid, "No tienes esa cantidad.", 4);

		SendClientMessageEx(playerid, -1, "{FFFFFF}Le has ofrecido a {00FF00}%s{FFFFFF}, crack en {41f48f}$%d{FFFFFF}, espera para ver si acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
		ShowDialog(to_playerid, DIALOG_TRICKS_CRACK);
		return 1;
	}
	else if(!strcmp(option, "arma", true))
	{
		if(PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}Los policías no pueden vender armas.");
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] < 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > 12) return SendClientMessage(playerid, -1, "Error en slot de /armas.");

		if(!PLAYER_WEAPONS[playerid][ PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] ][player_weapon_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes nigún arma en ese slot.");

		if(ACCOUNT_INFO[to_playerid][ac_LEVEL] < 2) return SendClientMessage(playerid, -1, "{FFFFFF}La otra persona tiene que ser al menos nivel 2.");

		SendClientMessageEx(playerid, -1, "{FFFFFF}Le has ofrecido a {00FF00}%s{FFFFFF}, un %s en {41f48f}$%d{FFFFFF}, espera para ver si acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME], WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
		ShowDialog(to_playerid, DIALOG_TRICKS_WEAPON);
		return 1;
	}
	else if(!strcmp(option, "sd", true))
	{
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendClientMessage(playerid, -1, "{FFFFFF}Cantidad incorrecta.");
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > ACCOUNT_INFO[playerid][ac_SD]) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes esa cantidad de koins.");

		SendClientMessageEx(playerid, -1, "{FFFFFF}Le has ofrecido a {00FF00}%s{FFFFFF}, koins, espera para ver si acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		ShowDialog(to_playerid, DIALOG_TRICKS_SU);
		return 1;
	}
	else if(!strcmp(option, "madera", true))
	{
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendClientMessage(playerid, -1, "{FFFFFF}Cantidad incorrecta.");
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > PLAYER_MISC[playerid][MISC_WOOD]) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes esa cantidad de koins.");

		SendClientMessageEx(playerid, -1, "{FFFFFF}Le has ofrecido a {00FF00}%s{FFFFFF}, madera, espera para ver si acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		ShowDialog(to_playerid, DIALOG_TRICKS_WOOD);
		return 1;
	}
	else if(!strcmp(option, "sd", true))
	{
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendClientMessage(playerid, -1, "{FFFFFF}Cantidad incorrecta.");
		if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > PLAYER_MISC[playerid][MISC_PIECES_WEAPON]) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes esa cantidad de koins.");

		SendClientMessageEx(playerid, -1, "{FFFFFF}Le has ofrecido a {00FF00}%s{FFFFFF}, koins, espera para ver si acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
		ShowDialog(to_playerid, DIALOG_TRICKS_IRON);
		return 1;
	}
	return 1;
}

CMD:propiedades(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 226.8522, 2348.2397, 1017.1298)) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
	if(BANK_ACCOUNT[playerid][bank_account_ID] == 0) return SendClientMessage(playerid, 0xFFFFFFFF, "El Gobierno necesita de un número de cuenta bancario para comprarte la propiedad.");
	
	ShowDialog(playerid, DIALOG_NOTARY_HOUSE);
	return 1;
}

CMD:vehiculo(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 222.1944, 2353.8499, 1017.1298)) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
	if(BANK_ACCOUNT[playerid][bank_account_ID] == 0) return SendClientMessage(playerid, 0xFFFFFFFF, "El Gobierno necesita de un número de cuenta bancario para comprarte el vehículo.");
	
	ShowDialog(playerid, DIALOG_NOTARY_VEHICLE);
	return 1;
}


CMD:consumir(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	new option[24], slot;
	if(!sscanf(params, "s[24]d", option, slot))
	{
		if(!strcmp(option, "alimento", true) || !strcmp(option, "alimentos", true))
		{
			if(slot < 1 || slot > MAX_PLAYER_POCKET_OBJECTS) return SendClientMessageEx(playerid, 0xFFFF00FF, "/consumir alimento {FFFFFF}[SLOT 1-%d]", MAX_PLAYER_POCKET_OBJECTS);

			slot --;

			if(!PLAYER_POCKET[playerid][slot][player_pocket_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes nada en ese slot.");
			if(CHARACTER_INFO[playerid][ch_HUNGRY] >= 99.0 && CHARACTER_INFO[playerid][ch_THIRST] >= 99.0) return SendClientMessage(playerid, -1, "{FFFFFF}¿Es que quieres reventar?");

			Add_Hungry_Thirst(playerid, PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY], PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST]);
			GivePlayerDrunkLevel(playerid, PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK]);

			new action[64];
			format(action, sizeof action, "consume %s.", PLAYER_POCKET[playerid][slot][player_pocket_object_NAME]);
			Auto_SendPlayerAction(playerid, action);

			DeletePlayerPocketObject(playerid, slot);

			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
		}
		else SendClientMessage(playerid, 0xFFFF00FF, "/consumir {FFFFFF}[medicamento / marihuana / crack / alimento]");
	}
	else if(!sscanf(params, "s[24]", option))
	{
		if(!strcmp(option, "farmacos", true) || !strcmp(option, "farmaco", true) || !strcmp(option, "medicamento", true) || !strcmp(option, "medicamentos", true) || !strcmp(option, "remedio", true))
		{
			if(gettime() < PLAYER_TEMP[playerid][pt_CONSUMIR_MEDICINE_TIME] + 60)
			{
				new time = (60-(gettime()-PLAYER_TEMP[playerid][pt_CONSUMIR_MEDICINE_TIME]));
				SendClientMessageEx(playerid, 0xFFFFFFAA, "Tienes que esperar {FF0000}%s minutos{FFFFFF} para consumir un medicamento.", TimeConvert(time));
				return 1;
			}
			if(PLAYER_MISC[playerid][MISC_MEDICINE] <= 0) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes medicamentos.");

			PLAYER_TEMP[playerid][pt_CONSUMIR_MEDICINE_TIME] = gettime();
			PLAYER_MISC[playerid][MISC_MEDICINE] --;
			GivePlayerHealthEx(playerid, 10.0);
			Auto_SendPlayerAction(playerid, "se toma un medicamento.");
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
		}
		else if(!strcmp(option, "marihuana", true))
		{
			if(gettime() < PLAYER_TEMP[playerid][pt_CONSUMIR_MARIHUANA_TIME] + 60)
			{
				new time = (60-(gettime()-PLAYER_TEMP[playerid][pt_CONSUMIR_MARIHUANA_TIME]));
				SendClientMessageEx(playerid, 0xFFFFFFAA, "Tienes que esperar {FF0000}%s minutos{FFFFFF} para consumir marihuana.", TimeConvert(time));
				return 1;
			}
			if(PLAYER_MISC[playerid][MISC_CANNABIS] <= 0) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes marihuana.");

            PLAYER_TEMP[playerid][pt_CONSUMIR_MARIHUANA_TIME] = gettime();
			PLAYER_MISC[playerid][MISC_CANNABIS] --;
			GivePlayerHealthEx(playerid, 10.0);
			GivePlayerArmourEx(playerid, 10.0);
			Auto_SendPlayerAction(playerid, "consume marihuana.");
			GivePlayerDrunkLevel(playerid, 1000);
			ApplyAnimation(playerid, "SMOKING", "F_smklean_loop", 4.0, 1, 0, 0, 0, 0);
		}
		else if(!strcmp(option, "crack", true) || !strcmp(option, "droga", true) || !strcmp(option, "c", true))
		{
			if(gettime() < PLAYER_TEMP[playerid][pt_CONSUMIR_CRACK_TIME] + 60)
			{
				new time = (60-(gettime()-PLAYER_TEMP[playerid][pt_CONSUMIR_CRACK_TIME]));
				SendClientMessageEx(playerid, 0xFFFFFFAA, "Tienes que esperar {FF0000}%s minutos{FFFFFF} para consumir crack.", TimeConvert(time));
				return 1;
			}
			if(PLAYER_MISC[playerid][MISC_CRACK] <= 0) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes crack.");
			PLAYER_TEMP[playerid][pt_CONSUMIR_CRACK_TIME] = gettime();
			PLAYER_MISC[playerid][MISC_CRACK] --;
			GivePlayerArmourEx(playerid, 10.0);
			Auto_SendPlayerAction(playerid, "consume crack.");
			GivePlayerDrunkLevel(playerid, 2000);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
		}
		else if(!strcmp(option, "alimento", true)) SendClientMessageEx(playerid, 0xFFFF00FF, "/consumir alimento {FFFFFF}[SLOT 1-%d]", MAX_PLAYER_POCKET_OBJECTS);
		else SendClientMessage(playerid, 0xFFFF00FF, "/consumir {FFFFFF}[medicamento / marihuana / crack / alimento]");
	}
	else SendClientMessage(playerid, 0xFFFF00FF, "/consumir {FFFFFF}[medicamento / marihuana / crack / alimento]");
	return 1;
}
CMD:usar(playerid, params[])
{
	return cmd_consumir(playerid, params);
}
CMD:tomar(playerid, params[])
{
	return cmd_consumir(playerid, params);
}

CMD:tirar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	new option[24], extra;
	if(sscanf(params, "s[24]d", option, extra)) return ShowPlayerDialog(playerid,DIALOG_INFO,DIALOG_STYLE_MSGBOX, ""SERVER_NAME" - Tirar",
					"\
						{FFFFFF}INFROMACIÓN:\n\
						{FFFFFF}Podrás tirar a la calle cualquier objeto.\n\
						{FFFFFF}Ya no podrás recuperarlo una vez tirado a la calle.\n\
						\n\
						{FFFFFF}COMANDOS:\n\
						{00FF00} /tirar arma {FFFFFF}[slot de /armas]\n\
						{00FF00} /tirar dinero {FFFFFF}[cantidad]\n\
						{00FF00} /tirar alimento {FFFFFF}[slot de /alimentos]\n\
						{00FF00} /tirar medicamentos {FFFFFF}[cantidad]\n\
						{00FF00} /tirar marihuana {FFFFFF}[cantidad]\n\
						{00FF00} /tirar crack {FFFFFF}[cantidad]\n\
					", "Cerrar", "");

	if(!strcmp(option, "dinero", true))
	{
		if(extra < 0 || extra > CHARACTER_INFO[playerid][ch_CASH]) return SendClientMessage(playerid, -1, "{FFFFFF}Cantidad de dinero incorrecta.");

		GivePlayerCash(playerid, -extra);

		SendClientMessageEx(playerid, -1, "{FFFFFF}Has tirado {41f48f}$%s.", number_format_thousand(extra));
		Auto_SendPlayerAction(playerid, "tira dinero.");
		return 1;
	}
	else if(!strcmp(option, "alimento", true))
	{
		if(extra < 1 || extra > MAX_PLAYER_POCKET_OBJECTS) return SendClientMessageEx(playerid, 0xFFFF00FF, "/tirar alimento {FFFFFF}[SLOT 1-%d]", MAX_PLAYER_POCKET_OBJECTS);

		extra --;

		if(!PLAYER_POCKET[playerid][extra][player_pocket_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes nada en ese slot.");

		SendClientMessageEx(playerid, -1, "{FFFFFF}Has eliminado \"%s\" de tus alimentos.", PLAYER_POCKET[playerid][extra][player_pocket_object_NAME]);
		DeletePlayerPocketObject(playerid, extra);
		return 1;
	}
	else if(!strcmp(option, "medicamentos", true))
	{
		if(extra <= 0 || extra > 10000000) return SendClientMessage(playerid, -1, "{FFFFFF}Cantidad incorrecta.");
		if(extra > PLAYER_MISC[playerid][MISC_MEDICINE]) return ShowPlayerMessage(playerid, "No tienes esa cantidad.", 4);

		PLAYER_MISC[playerid][MISC_MEDICINE] -= extra;

		SendClientMessageEx(playerid, -1, "Has tirado %dg de medicamentos.", extra);
		return 1;
	}
	else if(!strcmp(option, "marihuana", true))
	{
		if(extra <= 0 || extra > 10000000) return SendClientMessage(playerid, -1, "{FFFFFF}Cantidad incorrecta.");
		if(extra > PLAYER_MISC[playerid][MISC_CANNABIS]) return ShowPlayerMessage(playerid, "No tienes esa cantidad.", 4);

		PLAYER_MISC[playerid][MISC_CANNABIS] -= extra;

		SendClientMessageEx(playerid, -1, "Has tirado %dg de marihuana.", extra);
		return 1;
	}
	else if(!strcmp(option, "crack", true))
	{
		if(extra <= 0 || extra > 10000000) return SendClientMessage(playerid, -1, "{FFFFFF}Cantidad incorrecta.");
		if(extra > PLAYER_MISC[playerid][MISC_CRACK]) return ShowPlayerMessage(playerid, "No tienes esa cantidad.", 4);

		PLAYER_MISC[playerid][MISC_CRACK] -= extra;

		SendClientMessageEx(playerid, -1, "Has tirado %dg de crack.", extra);
		return 1;
	}
	else if(!strcmp(option, "arma", true))
	{
		if(extra < 0 || extra > 12) return SendClientMessage(playerid, 0xFFFF00FF, "/tirar arma {FFFFFF}[Slot /armas]");

		if(!PLAYER_WEAPONS[playerid][extra][player_weapon_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes nigún arma en ese slot.");

		SendClientMessageEx(playerid, -1, "{FFFFFF}Has eliminado tu '%s' de tus armas.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME]);
		RemovePlayerSlotWeapon(playerid, extra, true);
		return 1;
	}
	return 1;
}

CMD:entrar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	if(PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] == 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
	if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] > 0) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes entrar con cargos.");
	new info[3];
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	if(info[0] == PICKUP_TYPE_NONE) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	new Float:pos[3];
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

	switch(info[0])
	{
		case PICKUP_TYPE_ENTER_EXIT:
		{
	    	if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

			PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
			if(PLAYER_TEMP[playerid][pt_HOSPITAL] == -1) PLAYER_TEMP[playerid][pt_HOSPITAL] = 1;

			if(info[2] == 2) // Está en el Pickup Exterior y quiere ir al interior
			{
				if(ENTER_EXIT[info[1]][ee_TIME_OPEN] == 0 && ENTER_EXIT[info[1]][ee_TIME_CLOSE] == 0) // 24 horas
				{
					CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_INTERIOR;
					CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = ENTER_EXIT[info[1]][ee_ID];
					PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = info[1];
					SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_INT_X], ENTER_EXIT[info[1]][ee_INT_Y], ENTER_EXIT[info[1]][ee_INT_Z], ENTER_EXIT[info[1]][ee_INT_ANGLE], ENTER_EXIT[info[1]][ee_INT_INTERIOR], ENTER_EXIT[info[1]][ee_INT_WORLD], ENTER_EXIT[info[1]][ee_INT_FREEZE], true);
				}
				else
				{
					if(is_open(SERVER_TIME[0], ENTER_EXIT[info[1]][ee_TIME_OPEN], ENTER_EXIT[info[1]][ee_TIME_CLOSE]))
					{
						CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_INTERIOR;
						CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = ENTER_EXIT[info[1]][ee_ID];
						PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = info[1];
						SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_INT_X], ENTER_EXIT[info[1]][ee_INT_Y], ENTER_EXIT[info[1]][ee_INT_Z], ENTER_EXIT[info[1]][ee_INT_ANGLE], ENTER_EXIT[info[1]][ee_INT_INTERIOR], ENTER_EXIT[info[1]][ee_INT_WORLD], ENTER_EXIT[info[1]][ee_INT_FREEZE], true);
					}
					else SendClientMessageEx(playerid, -1, "{00FF00}%s {FFFFFF}está cerrado, su horario es: {00FF00}%02d:00 - %02d:00.", ENTER_EXIT[info[1]][ee_NAME], ENTER_EXIT[info[1]][ee_TIME_OPEN], ENTER_EXIT[info[1]][ee_TIME_CLOSE]);
				}
			}
			else ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
		}
		case PICKUP_TYPE_PROPERTY:
		{
			PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
			if(PLAYER_TEMP[playerid][pt_HOSPITAL] == -1) PLAYER_TEMP[playerid][pt_HOSPITAL] = 1;

			if(info[2] == 2) // Está en el Pickup Exterior y quiere ir al interior
			{
				if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
				if(!PROPERTY_INFO[info[1]][property_SOLD]) return SendClientMessage(playerid, -1, "{FFFFFF}Esta propiedad está en venta.");
				if(PROPERTY_INFO[info[1]][property_EXTRA] == 0)
				{
					if(PROPERTY_INFO[info[1]][property_CREW])
					{
						if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessageEx(playerid, -1, "{FFFFFF}Solo miembros de la banda pueden entrar.");
						if(PLAYER_CREW[playerid][player_crew_ID] != PROPERTY_INFO[info[1]][property_CREW_ID]) return SendClientMessageEx(playerid, -1, "{FFFFFF}Solo miembros de la banda pueden entrar.");

						CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_GUEST_PROPERTY;
						CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = PROPERTY_INFO[info[1]][property_ID];
						PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = info[1];
						SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE], true);
					}
					else
					{
						if(PROPERTY_INFO[info[1]][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
						{
							CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_OWN_PROPERTY;
							CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = PROPERTY_INFO[info[1]][property_ID];
							PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = info[1];
							SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE], true);
						}
						else
						{
							if(gettime() < PLAYER_TEMP[playerid][pt_ANTIFLOOD_KNOCK_PROPERTY] + 10) return SendClientMessage(playerid, 0xFFFFFFFF, "Espera para volver a tocar, si no te quieren abrir vete.");

							new owner_playerid = GetOwnerIntProperty(PROPERTY_INFO[info[1]][property_ID]);
							if(owner_playerid == -1) return SendClientMessage(playerid, -1, "{FFFFFF}Esta no es tu propiedad y el dueño no está dentro para dejarte entrar.");

							PLAYER_TEMP[playerid][pt_ANTIFLOOD_KNOCK_PROPERTY] = gettime();
							PLAYER_TEMP[owner_playerid][pt_KNOCK_PLAYER_ID] = playerid;
							SendClientMessageEx(owner_playerid, -1, "{00FF00}%s {FFFFFF}está tocando la puerta, para dejarle entrar ve a la puerta y usa {FFFF00}/puerta.", PLAYER_TEMP[playerid][pt_RP_NAME]);
							SendClientMessage(playerid, -1, "{FFFFFF}Has tocado en la puerta, espera para que te abran o vete.");
						}
					}
				}
			 	if(PROPERTY_INFO[info[1]][property_EXTRA] == 4)
				{
					if(PROPERTY_INFO[info[1]][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
					{
						CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_OWN_PROPERTY;
						CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = PROPERTY_INFO[info[1]][property_ID];
						PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = info[1];
						SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE], true);
					}
					else
					{
						CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = PROPERTY_INFO[info[1]][property_ID];
						PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = info[1];
						SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE], true);
					}
				}
			}
			else ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
		}
		default: ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
	}
	return 1;
}

CMD:puerta(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_OWN_PROPERTY) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
	if(PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] == 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	new info[3];
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	if(info[0] != PICKUP_TYPE_PROPERTY) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	new Float:pos[3];
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	if(info[2] == 1) // Está en el Pickup Interior
	{
		if(PROPERTY_INFO[info[1]][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
		{
			if(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID] == INVALID_PLAYER_ID) return SendClientMessage(playerid, 0xFFFFFFFF, "Nadie ha tocado en la puerta.");
			if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID])) return SendClientMessage(playerid, 0xFFFFFFFF, "Nadie ha tocado en la puerta o ya se ha ido.");
			if(!IsPlayerInRangeOfPoint(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID], 3.0, PROPERTY_INFO[info[1]][property_EXT_X], PROPERTY_INFO[info[1]][property_EXT_Y], PROPERTY_INFO[info[1]][property_EXT_Z])) return SendClientMessage(playerid, 0xFFFFFFFF, "Nadie ha tocado en la puerta o ya se ha ido.");
			if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, 0xFFFFFFFF, "Este jugador no puede entrar ahora.");

			PLAYER_TEMP[PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]][pt_HOSPITAL] = GetNearestHospitalForPlayer(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]);
			if(PLAYER_TEMP[PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]][pt_HOSPITAL] == -1) PLAYER_TEMP[PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]][pt_HOSPITAL] = 1;

			CHARACTER_INFO[PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]][ch_STATE] = ROLEPLAY_STATE_GUEST_PROPERTY;
			CHARACTER_INFO[PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]][ch_INTERIOR_EXTRA] = PROPERTY_INFO[info[1]][property_ID];
			PLAYER_TEMP[PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]][pt_PROPERTY_INDEX] = info[1];
			SetPlayerPosEx(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE], true);
		}
		else ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
	}
	else ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
	return 1;
}

CMD:grua(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 217.3736, 2348.3967, 1017.1257)) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	ShowDialog(playerid, DIALOG_CRANE_SELECT_VEHICLE);
	return 1;
}

CMD:propiedad(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] == 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	new info[3];
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	if(info[0] != PICKUP_TYPE_PROPERTY) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	new Float:pos[3];
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 30.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
	{
		if(info[2] == 1) // Está en el Pickup Interior
		{
			if(PROPERTY_INFO[info[1]][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
			{
				PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] = info[1];
				ShowDialog(playerid, DIALOG_PROPERTY_OPTIONS);
			}
			else ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
		}
		else ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
	}
	else if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY)
	{
		if(info[2] == 1) // Está en el Pickup Interior
		{
			if(PROPERTY_INFO[info[1]][property_CREW])
			{
				if(PROPERTY_INFO[info[1]][property_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) return SendClientMessage(playerid, -1, "{FFFFFF}Esta no es una propiedad de tu banda.");
				if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE_PROPERTIES]) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes permiso.");
				if(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes liberar una propiedad cuando tu banda está en combate.");

				PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] = info[1];
				ShowDialog(playerid, DIALOG_CREW_LEAVE_PROPERTY);
			}
			else ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
		}
		else ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
	}
	else ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
	return 1;
}

CMD:echar(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFFF00FF, "/echar {FFFFFF}[PlayerID/Nombre]");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, -1, "{FFFFFF}El jugador no está conectado.");
	if(playerid == params[0]) return SendClientMessage(playerid, -1, "{FFFFFF}No te eches a ti mismo.");

	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
	{
		if( CHARACTER_INFO[params[0]][ch_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY && CHARACTER_INFO[params[0]][ch_INTERIOR_EXTRA] == CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA])
		{
			new index = GetPropertyIndexByID(CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA]);
			if(index == -1) return SendClientMessage(playerid, -1, "BUG: CMD /ECHAR, Tome captura y contacte con administrador.");

			CHARACTER_INFO[params[0]][ch_STATE] = ROLEPLAY_STATE_NORMAL;
			CHARACTER_INFO[params[0]][ch_INTERIOR_EXTRA] = 0;
			PLAYER_TEMP[params[0]][pt_PROPERTY_INDEX] = -1;
			SetPlayerPosEx(params[0], PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], PROPERTY_INFO[ index ][property_EXT_ANGLE], PROPERTY_INFO[ index ][property_EXT_INTERIOR], 0, PROPERTY_INFO[ index ][property_EXT_FREEZE], false);
			StopAudioStreamForPlayer(params[0]);

			SendClientMessageEx(params[0], -1, "{00FF00}%s {FFFFFF}te ha echado de su propiedad.", PLAYER_TEMP[playerid][pt_RP_NAME]);
			SendClientMessageEx(playerid, -1, "{FFFFFF}Has echado a {00FF00}%s {FFFFFF}de tu propiedad.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
		}
		else SendClientMessage(playerid, -1, "{FFFFFF}Este jugador no está en tu propiedad.");
		return 1;
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}Este no es tú vehículo.");
		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, -1, "{FFFFFF}Este no es tú vehículo.");
		if(GetPlayerVehicleID(params[0]) != vehicleid) return SendClientMessage(playerid, -1, "{FFFFFF}Este jugador no está en tu vehículo.");

		RemovePlayerFromVehicle(params[0]);

		new action[64];
		format(action, sizeof action, "ha echado a %s de su vehículo.", PLAYER_TEMP[ params[0] ][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		return 1;
	}

	SendClientMessage(playerid, -1, "{FFFFFF}No estás en tu propiedad o en tu vehículo.");
	return 1;
}

CMD:taximetro(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{FFFFFF}No estás conduciendo.");
	if(!PLAYER_WORKS[playerid][WORK_TAXI]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres taxista.");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED]) return SendClientMessage(playerid, -1, "{FFFFFF}Solo puedes cambiar la tarifa cuando no haya ningún pasajero.");

	if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, 0xFFFF00FF, "/taximetro {FFFFFF}[0-14]");
	if(params[0] < 0 || params[0] > 14) return SendClientMessage(playerid, 0xFFFF00FF, "/taximetro {FFFFFF}[0-14]");

	TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_PRICE] = params[0];
	Auto_SendPlayerAction(playerid, "ajusta el taxímetro.");
	UpdatePlayerTaxiMeterTextdraws(playerid);
	StartPlayerJob(playerid, WORK_TAXI, vehicleid);

	return 1;
}

CMD:tarifa(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{FFFFFF}No estás conduciendo.");
	if(!PLAYER_WORKS[playerid][WORK_TAXI]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres taxista.");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED]) return SendClientMessage(playerid, -1, "{FFFFFF}Solo puedes cambiar la tarifa cuando no haya ningún pasajero.");

	if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, 0xFFFF00FF, "/tarifa {FFFFFF}[0-14]");
	if(params[0] < 0 || params[0] > 14) return SendClientMessage(playerid, 0xFFFF00FF, "/tarifa {FFFFFF}[0-14]");

	TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_PRICE] = params[0];
	Auto_SendPlayerAction(playerid, "ajusta el taxímetro.");
	UpdatePlayerTaxiMeterTextdraws(playerid);
	return 1;
}

CMD:cargar(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{FFFFFF}No estás conduciendo.");
	if(!PLAYER_WORKS[playerid][WORK_TRUCK]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres camionero.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRUCK) return SendClientMessage(playerid, -1, "{FFFFFF}No estás de servicio como camionero.");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No estás en un camión.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_TRUCK) return SendClientMessage(playerid, -1, "{FFFFFF}No estás en un camión.");


	if(IsPlayerInRangeOfPoint(playerid, 7.0, 2771.3376, -2456.0068, 13.6377))
	{
		new Float:angle;
		GetVehicleZAngle(vehicleid, angle);
		//90.3435
		if(angle < 100.0 && angle > 80.0)
		{
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED]) return SendClientMessage(playerid, -1, "{FFFFFF}El camión ya está cargado.");
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING]) return SendClientMessage(playerid, -1, "{FFFFFF}El camión ya se está cargando.");

			TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING] = true;
			TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] = ACCOUNT_INFO[playerid][ac_ID];

			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);

			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
			UpdateVehicleParams(vehicleid);

			ShowDialog(playerid, DIALOG_SELECT_TRUCK_TYPE);
		}
		else SendClientMessage(playerid, -1, "{FFFFFF}Coloca la parte trasera del camión para poder cargarlo.");
		return 1;
	}
	SendClientMessage(playerid, -1, "{FFFFFF}Para cargar el camión colocate en el entrada de la bodega.");
	return 1;
}

CMD:salir(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	if(PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] == 0) return 1;

	new info[3];
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	if(info[0] == PICKUP_TYPE_NONE) return 1;

	new Float:pos[3];
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return 1;

	switch(info[0])
	{
		case PICKUP_TYPE_ENTER_EXIT:
		{
			if(info[2] == 1) // Está en el Pickup Interior y quiere ir al exterior
			{
				CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
				CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
				PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
				SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_EXT_X], ENTER_EXIT[info[1]][ee_EXT_Y], ENTER_EXIT[info[1]][ee_EXT_Z], ENTER_EXIT[info[1]][ee_EXT_ANGLE], ENTER_EXIT[info[1]][ee_EXT_INTERIOR], ENTER_EXIT[info[1]][ee_EXT_WORLD], ENTER_EXIT[info[1]][ee_EXT_FREEZE]);
			}
			else ShowPlayerMessage(playerid, "_", 3);
		}
		case PICKUP_TYPE_PROPERTY:
		{
			if(info[2] == 1) // Está en el Pickup Interior y quiere ir al exterior
			{
				CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
				CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
				PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;
				SetPlayerPosEx(playerid, PROPERTY_INFO[info[1]][property_EXT_X], PROPERTY_INFO[info[1]][property_EXT_Y], PROPERTY_INFO[info[1]][property_EXT_Z], PROPERTY_INFO[info[1]][property_EXT_ANGLE], PROPERTY_INFO[info[1]][property_EXT_INTERIOR], 0, PROPERTY_INFO[info[1]][property_EXT_FREEZE], false);
				StopAudioStreamForPlayer(playerid);
			}
			else ShowPlayerMessage(playerid, "_", 3);
		}
		default: ShowPlayerMessage(playerid, "_", 3);
	}
	return 1;
}

CMD:gasolina(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
	if(GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, 0xFFFFFFFF, "No estás en nigún vehículo.");

	new vehicleid = GetPlayerVehicleID(playerid), modelid = GetVehicleModel(vehicleid);
	if(!VEHICLE_INFO[modelid - 400][vehicle_info_VALID]) return SendClientMessage(playerid, 0xFFFFFFFF, "No puedes cargar este vehículo.");

	new fuel_station = -1;
	for(new i = 0; i < sizeof Fuel_Stations; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, Fuel_Stations[i][0], Fuel_Stations[i][1], Fuel_Stations[i][2]))
		{
			fuel_station = i;
			break;
		}
	}
	if(fuel_station == -1) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
	{
		ShowPlayerMessage(playerid, "Apaga primero el vehículo para cargar gasolina.", 5);
		return 1;
	}

	if(!sscanf(params, "d", params[0]))
	{
		new Float:ammount = float(params[0]);
		if(ammount < 0.0) return SendClientMessage(playerid, 0xFFFF00FF, "/gasolina {FFFFFF}[litros / lleno]");
		if(ammount + GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]) ammount = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] - GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS];

		new price = floatround( floatmul(ammount, 30.0) );

		if(CHARACTER_INFO[playerid][ch_CASH] >= price)
		{
			GivePlayerCash(playerid, -price);
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] += ammount;

		    KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][22]);
		    CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_HOSPITAL;
            PLAYER_TEMP[playerid][pt_TIMERS][22] = SetTimerEx("LoadingGas", 10000, false, "i", playerid);
            ShowPlayerMessage(playerid, "Cargando gasolina...", 8);
            TogglePlayerControllable(playerid, false);

			PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			SendClientMessageEx(playerid, -1, "Cantidad de gasolina cargada: {00FF00}+ %.1f Litros {FFFFFF}Gastaste: {FFCC00}- $%s.", ammount, number_format_thousand(price));
			Auto_SendPlayerAction(playerid, "empieza a cargar gasolina.");
		}
		else
		{
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder cargar gasolina {588dc9}%.1f.", number_format_thousand(price - CHARACTER_INFO[playerid][ch_CASH]), ammount);
		}
		return 1;
	}

	new text[24];
	if(!sscanf(params, "s[24]", text))
	{
		if(!strcmp(text, "lleno", true))
		{
			new Float:ammount = floatsub(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS]);

			new price = floatround( floatmul(ammount, 30.0) );
			if(CHARACTER_INFO[playerid][ch_CASH] >= price)
			{
				GivePlayerCash(playerid, -price);
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS];

                KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][22]);
                CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_HOSPITAL;
	            PLAYER_TEMP[playerid][pt_TIMERS][22] = SetTimerEx("LoadingGas", 10000, false, "i", playerid);
	            ShowPlayerMessage(playerid, "Cargando gasolina...", 8);
	            TogglePlayerControllable(playerid, false);

				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "Cantidad: {00FF00}%.1f Litros {FFFFFF}Precio: {41f48f}$%s.", ammount, number_format_thousand(price));
				Auto_SendPlayerAction(playerid, "ha cargado de gasolina el vehículo.");
			}
			else
			{
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder cargar gasolina {588dc9}%.1f.", number_format_thousand(price - CHARACTER_INFO[playerid][ch_CASH]), ammount);
			}
		}
		else SendClientMessage(playerid, 0xFFFF00FF, "/gasolina {FFFFFF}[litros / lleno]");
		return 1;
	}

	SendClientMessage(playerid, 0xFFFF00FF, "/gasolina {FFFFFF}[litros / lleno]");
	return 1;
}

CMD:bidon(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
	if(GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	new fuel_station = -1;
	for(new i = 0; i < sizeof Fuel_Stations; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, Fuel_Stations[i][0], Fuel_Stations[i][1], Fuel_Stations[i][2]))
		{
			fuel_station = i;
			break;
		}
	}
	if(fuel_station == -1) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	if(!PLAYER_MISC[playerid][MISC_FUEL_DRUM])
	{
		if(CHARACTER_INFO[playerid][ch_CASH] >= 200)
		{
			GivePlayerCash(playerid, -200);
			PLAYER_MISC[playerid][MISC_FUEL_DRUM] = 5;
			SendClientMessage(playerid, -1, "{FFFFFF}Has comprado un bidón de gasolina de 5 litros por $150, usa {FFFF00}/vertir {FFFFFF}para cargar de gasolina un vehículo.");
		}
		else SendClientMessage(playerid, -1, "{FFFFFF}No tienes suficiente dinero para comprar el bidón.");
	}
	else
	{
		if(PLAYER_MISC[playerid][MISC_FUEL_DRUM] == 20) return SendClientMessage(playerid, -1, "{FFFFFF}Tu bidón de gasolina está lleno.");

		new ammount = (5 - PLAYER_MISC[playerid][MISC_FUEL_DRUM]);
		new price = (18 * ammount);

		if(CHARACTER_INFO[playerid][ch_CASH] >= price)
		{
			GivePlayerCash(playerid, -price);
			PLAYER_MISC[playerid][MISC_FUEL_DRUM] += ammount;
			SendClientMessageEx(playerid, -1, "{FFFFFF}Has llenado tu bidón de gasolina con 5 litros por $%d, usa {FFFF00}/vertir {FFFFFF}para cargar de gasolina un vehículo.", price);
		}
		else SendClientMessage(playerid, -1, "{FFFFFF}No tienes suficiente dinero para comprar el bidón.");
	}
	return 1;
}

CMD:vertir(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{FFFFFF}Tienes que estar fuera del vehículo para vertir el bidón.");

	new vehicleid = GetPlayerCameraTargetVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "{FFFFFF}No estás cerca de ningún vehículo.");

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
	{
		ShowPlayerMessage(playerid, "Apaga primero el vehículo para cargar gasolina.", 5);
		return 1;
	}

	if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, 0xFFFF00FF, "/vetir {FFFFFF}[Cantidad de litros]");
	if(params[0] <= 0) return SendClientMessage(playerid, -1, "{FFFFFF}Cantidad de litros no válida.");
	if(params[0] > PLAYER_MISC[playerid][MISC_FUEL_DRUM]) return SendClientMessageEx(playerid, -1, "{FFFFFF}Solo tienes %d.0 litros en el bidón.", PLAYER_MISC[playerid][MISC_FUEL_DRUM]);

	new Float:ammount = float(params[0]);
	if(ammount + GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]) ammount = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] - GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS];

	PLAYER_MISC[playerid][MISC_FUEL_DRUM] -= floatround(ammount);
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] += ammount;

	SendClientMessageEx(playerid, -1, "{FFFFFF}Has vertido %.1f litros del bidón, te quedan %d.0 litros.", ammount, PLAYER_MISC[playerid][MISC_FUEL_DRUM]);
	Auto_SendPlayerAction(playerid, "ha cargado el vehículo.");
	return 1;
}

SendPlayerAction(playerid, action[])
{
	new str_text[145];
	format(str_text, 145, "%s %s", PLAYER_TEMP[playerid][pt_RP_NAME], action);
	ProxDetector(playerid, 15.0, str_text, 0x7ddde8FF, 0x7ddde8FF, 0x7ddde8FF, 0x7ddde8FF, 0x7ddde8FF);
	return 1;
}

Auto_SendPlayerAction(playerid, action[])
{
	new str_text[145];
	format(str_text, 145, "%s %s", PLAYER_TEMP[playerid][pt_RP_NAME], action);
	ProxDetector(playerid, 15.0, str_text, 0x04B3DAFF, 0x04B3DAFF, 0x04B3DAFF, 0x04B3DAFF, 0x04B3DAFF);
	return 1;
}

#define DEFAULT_DIALOG_CAPTION  SERVER_SHORTCUT
ShowDialog(playerid, dialogid)
{
	switch(dialogid)
	{
		case DIALOG_REGISTER:
		{
			new dialog[140];
			format(dialog, sizeof dialog, "{FFFFFF}Registre está cuenta en la base de datos, la contraseña o NIP debe contener entre %d-%d caracteres.", MIN_PASS_LENGTH, MAX_PASS_LENGTH);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, ""DEFAULT_DIALOG_CAPTION" - REGISTRO", dialog, "Registrarse", "");			return 1;
		}
		case DIALOG_SEXO_XD: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""DEFAULT_DIALOG_CAPTION" - SELECCIONE SU SEXO",  " Hombre\n Mujer", "Seleccionar", "");
		case DIALOG_LOGIN: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, ""DEFAULT_DIALOG_CAPTION" - IDENTIFICACIÓN", "{FFFFFF}Esté nick se encuentra registrado, ingrese el NIP o la contraseña para ingresar.", "Entrar", "");
		case DIALOG_REGISTER_EMAIL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""DEFAULT_DIALOG_CAPTION" - CORREO ELECTRÓNICO", "{FFFFFF}Al ingresar un correo válido, sólo servirá {00FF00}únicamente{FFFFFF} para recuperar tu contraseña. Nada de SPAM ni suscripciones.", "Finalizar", "");
		case DIALOG_SECURITY_PASS: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, ""DEFAULT_DIALOG_CAPTION" - STAFF ITZN", "{FFFFFF}Ingrese la contraseña administrativa para entrar al panel admin.", "Entrar", "Salir");
		case DIALOG_DOUBT_CHANNEL_POST:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Canal dudas",
			"{FFFFFF}Este canal es sólo para expresar dudas del servidor.\n\
			{FFFFFF}Si hace mal uso del canal será {FF0000}muteado{FFFFFF} y no podrá usar más en este canal.\n\
			\n{FFFFFF}¿Está seguro que desea envíar su duda al canal?\
			", "Si", "Cancelar");
			return 1;
		}
		case DIALOG_FOOD_PIZZA: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}WELL STACKED PIZZA", DIALOG_FOOD_PIZZA_String, "Pedir", "Salir");
		case DIALOG_FOOD_CLUCKIN: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}CLUCKIN BELL", DIALOG_FOOD_CLUCKIN_String, "Pedir", "Salir");
		case DIALOG_FOOD_BURGER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}BURGER SHOT", DIALOG_FOOD_BURGER_String, "Pedir", "Salir");
		case DIALOG_FOOD_DONUT: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}DONUT'S", DIALOG_FOOD_DONUT_String, "Pedir", "Salir");
		case DIALOG_FOOD_CAFE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}CAFÉ", DIALOG_FOOD_CAFE_String, "Pedir", "Salir");
		case DIALOG_FOOD_TACO: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}TAQUERÍA", DIALOG_FOOD_TACO_String, "Pedir", "Salir");
		case DIALOG_FOOD_STEAK: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}HAMBURGUESAS", DIALOG_FOOD_STEAK_String, "Pedir", "Salir");
		case DIALOG_FERRETERIA:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{00FF00}FERRETERÍA",

				"\
					{FFFFFF} Máquina para pintar\t{41f48f}$1200\n\
					{FFFFFF} Llave para mecánico\t{41f48f}$1300\n\
				"
			, "Comprar", "Salir");
			return 1;
		}
		case DIALOG_PLAYER_MP3:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00FF00}MÚSICA", "{FFFFFF}Ingresa el {00FF00}link.mp3{FFFFFF} de una canción. Buscala en {00FF00}mimp3.me{FFFFFF} o conviertela con offliberty", "Escuchar", "Cancelar");
		    return 1;
		}
		case DIALOG_PLAYER_TOYS:
		{
			new dialog[96 * (MAX_PLAYER_ATTACHED_OBJECTS + 2)], line_str[64];
			format(dialog, sizeof dialog, "{FFFFFF}Accesorio\tColocado\n");
			for(new i; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
			{
				if(ACCOUNT_INFO[playerid][ac_SU])
				{
					if(PLAYER_TOYS[playerid][i][player_toy_VALID])
					{
						if(PLAYER_TOYS[playerid][i][player_toy_ATTACHED]) format(line_str, sizeof line_str, "{FFFFFF}%d. %s\tSí\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
						else format(line_str, sizeof line_str, "{FFFFFF}%d. %s\tNo\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
					}
					else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
				}
				else
				{
					if(i >= MAX_NU_TOYS)
					{
						if(PLAYER_TOYS[playerid][i][player_toy_VALID]) format(line_str, sizeof line_str, "{666666}%d. %s\tNo\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
						else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
					}
					else
					{
						if(PLAYER_TOYS[playerid][i][player_toy_VALID])
						{
							if(PLAYER_TOYS[playerid][i][player_toy_ATTACHED]) format(line_str, sizeof line_str, "{FFFFFF}%d. %s\tSí\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
							else format(line_str, sizeof line_str, "{FFFFFF}%d. %s\tNo\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
						}
						else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
					}
				}
				strcat(dialog, line_str);
			}
			strcat(dialog, "{FF0000}- Eliminar todo\n");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""DEFAULT_DIALOG_CAPTION" - Mis objetos", dialog, "Siguiente", "Salir");
			return 1;
		}
		case DIALOG_PLAYER_TOY_MENU:
		{
			if(!PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_VALID])
			{
				SendClientMessage(playerid, -1, "{FFFFFF}Este slot está vacío, puedes comprar accesorios en cualquier tienda de ropa.");
				return 1;
			}

			new caption[48];
			format(caption, sizeof caption, "{FFFFFF}Accesorio '%s'", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);

			new dialog[256];
			if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) format(dialog, sizeof dialog, "{FFFFFF}Guardar este accesorio\n{FFFFFF}Cambiar el nombre del accesorio\n{FFFFFF}Configurar el accesorio\n{FFFFFF}Color primario\n{FFFFFF}Color secundario\n{FFFFFF}Eliminar este accesorio");
			else
			{
				if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE] == -1)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Este accesorio es nuevo y aún no ha sido configurado, configuralo desde 'Configurar el accesorio'.");
					format(dialog, sizeof dialog, "{FFFFFF}Colocarte el accesorio\n{FFFFFF}Cambiar el nombre del accesorio\n{FFFFFF}Configurar el accesorio\n{FFFFFF}Color primario\n{FFFFFF}Color secundario\n{FFFFFF}Eliminar este accesorio");
				}
				else format(dialog, sizeof dialog, "{FFFFFF}Colocarte el accesorio\n{FFFFFF}Cambiar el nombre del accesorio\n{FFFFFF}Configurar el accesorio\n{FFFFFF}Color primario\n{FFFFFF}Color secundario\n{FFFFFF}Eliminar este accesorio");
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_NAME:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "Nombre actual: \"%s\"\nIndica el nuevo nombre:", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{FFFFFF}Accesorio - Modificar nombre", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_CONFIRMDELETE:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "¿Estás seguro que quieres borrar el siguiente accesorio?\n\t\"%s\"", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{FFFFFF}Accesorio - Eliminar accesorio", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_SELECT_BONE:
		{
			SendClientMessage(playerid, -1, "{FFFFFF}Selecciona en que parte del cuerpo quieres colocar este accesorio.");

			new caption[48];
			format(caption, sizeof caption, "{FFFFFF}Accesorio '%s'", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);

			new dialog[45 * sizeof Toys_Bones], line_str[45];
			for(new i = 0; i != sizeof Toys_Bones; i ++)
			{
				format(line_str, sizeof(line_str), "%d. %s\n", i + 1, Toys_Bones[i]);
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_BONE:
		{
			new caption[48];
			format(caption, sizeof caption, "{FFFFFF}Accesorio '%s'", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);

			new dialog[145];
			format(dialog, sizeof(dialog), "¿Quieres cambiar la parte del cuerpo donde se coloca este accesorio?\nActualmente está colocado en: %s", Toys_Bones[ PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE] - 1 ]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Sí", "No");
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_1:
		{
			SendClientMessage(playerid, -1, "Selecciona el color 0 para poner el color original del accesorio.");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona color", DIALOG_CREATE_CREW_COLOR_String, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_2:
		{
			SendClientMessage(playerid, -1, "Selecciona el color 0 para poner el color original del accesorio.");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona color", DIALOG_CREATE_CREW_COLOR_String, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Accesorios - Eliminar todo", "¿Está seguro de que quiere eliminar todos sus accesorios?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");
		case DIALOG_TOYS_TYPE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""DEFAULT_DIALOG_CAPTION" - PRENDAS",  " Gorras o sombreros\n Gafas\n Cascos o mascaras\n Mochilas\n Relojes\n Especiales", "Seleccionar", "");
		case DIALOG_BANK:
		{
			if(BANK_ACCOUNT[playerid][bank_account_ID] == 0) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes cuenta bancaria.");

			new caption[80];
			format(caption, sizeof caption, "{FFFFFF}Número de cuenta: {00FF00}%s {FFFFFF}- Saldo actual: {41f48f}$%s", number_format_thousand(BANK_ACCOUNT[playerid][bank_account_ID]), number_format_thousand(BANK_ACCOUNT[playerid][bank_account_BALANCE]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption,
				" Retirar dinero\n Depositar dinero\n Envíar dinero\n Historial",
			"Continuar", "Salir");
			return 1;
		}
		case DIALOG_CREATE_BANK_ACCOUNT:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""BANK_NAME" - ABRIR CUENTA BANCARIA",
				"{FFFFFF}Bienvenido, ¿desea abrir una cuenta bancaría en SL?, necesitaremos {41f48f}$500{FFFFFF} para abrir su cuenta.",
			"Crear", "Salir");
			return 1;
		}
		case DIALOG_BANK_WITHDRAW:
		{
			new dialog[100];
			format(dialog, sizeof dialog, "{FFFFFF}Saldo disponible: {41f48f}$%s\n{FFFFFF}Escriba la cantidad que desea retirar.", number_format_thousand(BANK_ACCOUNT[playerid][bank_account_BALANCE]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""BANK_NAME" - RETIRAR DINERO", dialog, "Retirar", "Atrás");
			return 1;
		}
		case DIALOG_BANK_DEPOSIT:
		{
			new dialog[100];
			format(dialog, sizeof dialog, "{FFFFFF}Saldo disponible: {41f48f}$%s\n{FFFFFF}Ingrese la cantidad que desea depositar", number_format_thousand(CHARACTER_INFO[playerid][ch_CASH]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""BANK_NAME" - DEPOSITAR", dialog, "Depositar", "Atrás");
			return 1;
		}
		case DIALOG_BANK_TRANSFER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""BANK_NAME" - ENVÍAR", "{FFFFFF}Coloca el {00ff00}número de cuenta {FFFFFF}al que deseas envíar el dinero.", "Continuar", "Atrás");
		case DIALOG_BANK_TRANSFER_SEND:
		{
			new dialog[170];
			format(dialog, sizeof dialog, "{FFFFFF}Número de cuenta: {00FF00}%s\n{FFFFFF}Saldo disponible: {41f48f}$%s\n\n{FFFFFF}Coloque el monto que desea envíar.", number_format_thousand(PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT]), number_format_thousand(BANK_ACCOUNT[playerid][bank_account_BALANCE]));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, ""BANK_NAME" - ENVÍAR > CANTIDAD", dialog, "Envíar", "Atrás");
			return 1;
		}
		case DIALOG_BANK_TRANSACTIONS:
		{
			new dialog[2675];
			format(dialog, sizeof dialog, "{FFFF00}Fecha\t{FFFF00}Concepto\t{FFFF00}Importe\n");

			new DBResult:Result, transactions, DB_Query[140];
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `BANK_TRANSACTIONS` WHERE `ID_ACCOUNT` = '%d' ORDER BY `DATE` DESC LIMIT %d;", BANK_ACCOUNT[playerid][bank_account_ID], MAX_BANK_TRANSACTIONS_DIALOG);
			Result = db_query(Database, DB_Query);

			if(db_num_rows(Result) == 0) strcat(dialog, "{FFFFFF}No hay actividad que mostrar.");
			else
			{
				new line_str[125];
				for(new i; i < db_num_rows(Result); i++ )
				{
					new trasaction_type, ammount, extra, date[24];
					trasaction_type = db_get_field_assoc_int(Result, "TRANSACTION_TYPE");
					ammount = db_get_field_assoc_int(Result, "AMMOUNT");
					extra = db_get_field_assoc_int(Result, "EXTRA");
					db_get_field_assoc(Result, "DATE", date, 24);

					switch(trasaction_type)
					{
						case BANK_TRANSACTION_WITHDRAW:
						{
							format(line_str, sizeof line_str, "{FFFFFF}%s\t{00FF00}RETIRO\t{FFCC00}-$%s\n", date, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_DEPOSIT:
						{
							format(line_str, sizeof line_str, "{FFFFFF}%s\t{00FF00}DEPOSITO\t{41f48f}$%s\n", date, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_TRANSFER_SENT:
						{
							format(line_str, sizeof line_str, "{FFFFFF}%s\t{00FF00}ENVÍO AL NÚMERO DE CUENTA %d\t{FFCC00}-$%s\n", date, extra, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_TRANSFER_RECE:
						{
							format(line_str, sizeof line_str, "{FFFFFF}%s\t{00FF00}RECIBIÓ AL NÚMERO DE CUENTA %d\t{41f48f}$%s\n", date, extra, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_CREATE_ACCOUNT:
						{
							format(line_str, sizeof line_str, "{FFFFFF}%s\t{00FF00}CUENTA CREADA\t{41f48f}$%s\n", date, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_BUY_PROPERTY:
						{
							format(line_str, sizeof line_str, "{FFFFFF}%s\t{00FF00}COMPRÓ UNA CASA\t{FFCC00}-$%s\n", date, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_SOLD_PROPERTY:
						{
							format(line_str, sizeof line_str, "{FFFFFF}%s\t{00FF00}VENDIÓ UNA CASA\t{41f48f}$%s\n", date, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_BUY_VEHICLE:
						{
							format(line_str, sizeof line_str, "{FFFFFF}%s\t{00FF00}COMPRÓ UN VEHÍCULO\t{FFCC00}-$%s\n", date, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
						case BANK_TRANSACTION_SOLD_VEHICLE:
						{
							format(line_str, sizeof line_str, "{FFFFFF}%s\t{00FF00}VENDIÓ UN VEHÍCULO\t{41f48f}$%s\n", date, number_format_thousand(ammount));
							strcat(dialog, line_str);
						}
					}

					transactions ++;
					db_next_row(Result);
				}
				format(line_str, sizeof line_str, "{FFFFFF}SALDO DISPONIBLE\t{41f48f}$%s", number_format_thousand(BANK_ACCOUNT[playerid][bank_account_BALANCE]));
				strcat(dialog, line_str);
			}
			db_free_result(Result);

			new caption[40];
			format(caption, sizeof caption, ""BANK_NAME" - HISTORIAL(%d)", transactions);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Salir", "Atrás");
			return 1;
		}
		case DIALOG_247_LIST: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}24/7", DIALOG_247_LIST_String, "Comprar", "Salir");
		case DIALOG_PLAYER_POCKET:
		{
			new dialog[50 * (MAX_PLAYER_POCKET_OBJECTS + 2)], line_str[50];
			for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++)
			{
				if(PLAYER_POCKET[playerid][i][player_pocket_VALID])
				{
					format(line_str, sizeof line_str, "{FFFFFF} %s\n", PLAYER_POCKET[playerid][i][player_pocket_object_NAME]);
					strcat(dialog, line_str);
				}
				else
				{
					format(line_str, sizeof line_str, "{999999} Espacio vacío\n");
					strcat(dialog, line_str);
				}
			}
			strcat(dialog, "{FF0000} Tirar todo a la basura\n");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{00FF00}ALIMENTOS", dialog, "Opciones", "Salir");
			return 1;
		}
		case DIALOG_PLAYER_POCKET_OPTIONS:
		{
			new caption[40];
			format(caption, sizeof caption, "{00FF00}ALIMENTOS - %s", PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]][player_pocket_object_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "{FFFFFF} Consumir\n{FFFFFF} Tirar a la basura", "Elegir", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_POCKET_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ALIMENTOS - Tirar a la basura", "{FFFFFF}¿Seguro quieres tirar todos tus productos a la basura? {FF0000}no podrás recuperarlos después{FFFFFF}.", "Tirar", "Atrás");
		case DIALOG_SHUTDOWN_IPHONE:
		{
		    if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF)
		    {
		        SendClientMessage(playerid, -1, "{FFFFFF}El iPhone ya está apagado.");
		    }
			if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON)
			{
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}iPhone", "{FFFFFF}¿Quieres apagar tu iPhone?", "Si", "No");
			}
			return 1;
		}
		case DIALOG_PHONE:
		{
			new caption[50];
			format(caption, sizeof caption, "{00FF00}TELÉFONO - %d", PLAYER_PHONE[playerid][player_phone_NUMBER]);

			new dialog[200];
			if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON) format(dialog, sizeof dialog, " Agenda\n Llamar\n Envíar WhatsApp\n Ver WhatsApps recibidos\n Ver WhatsApps envíados\n Tienda\n{FF0000} Apagar teléfono");
			else format(dialog, sizeof dialog, "{FF0000} Encender teléfono\n Agenda\n Llamar\n Envíar WhatsApp\n Ver WhatsApp recibidos\n Ver WhatsApp envíados\n Tienda");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Elegir", "Salir");
			return 1;
		}
		case DIALOG_PHONE_BOOK:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[80 * (MAX_PHONE_CONTACTS + 3)];
			format(dialog, sizeof dialog, "{FFFF00}Nombre\t{FFFF00}Número\n");

			new line_str[80], contacts, listitem;
			for(new i = 0; i != MAX_PHONE_CONTACTS; i++ )
			{
				if(!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) continue;

				format(line_str, sizeof line_str, "%d. %s\t%d\n", listitem + 1, PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER]);
				strcat(dialog, line_str);
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;

				contacts ++; listitem ++;
			}
			if(contacts < MAX_PHONE_CONTACTS)
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_PHONE_CONTACTS + 10;
				strcat(dialog, "+ Añadir contacto\n"); listitem ++;
			}
			if(contacts > 0)
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_PHONE_CONTACTS + 20;
				strcat(dialog, "{FF0000}- Eliminar todo\n"); listitem ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00ff00}TELÉFONO", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PHONE_BOOK_ADD_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00ff00}TELÉFONO > Agenda > Añadir contacto", "{FFFFFF}Ingrese el número de telefono que desea registrar en su agenda.", "Siguiente", "Atrás");
		case DIALOG_PHONE_BOOK_ADD_NAME: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00ff00}TELÉFONO > Agenda > Añadir contacto", "{FFFFFF}¿Con qué nombre desea guardar éste contacto?", "Siguiente", "Atrás");
		case DIALOG_PHONE_BOOK_OPTIONS:
		{
			new caption[40];
			format(caption, sizeof caption, "{00ff00}TELÉFONO > Contacto - %s", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, " Llamar\n Envíar WhatsApp\n Modificar nombre del contacto\n{FF0000} Eliminar contacto", "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PHONE_BOOK_CHANGE_NAME:
		{
			new caption[40];
			format(caption, sizeof caption, "{00ff00}TELÉFONO > Contacto - %s", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);

			new dialog[140];
			format(dialog, sizeof dialog, "{FFFFFF}- Contacto: {00FF00}%s\n{FFFFFF}- Teléfono: {00FF00}%d\n{FFFFFF}Escribe como deseas llamar a este contacto.", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_PHONE_BOOK_CONFIRM_DELET:
		{
			new caption[40];
			format(caption, sizeof caption, "{00ff00}TELÉFONO > Contacto - %s", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);

			new dialog[140];
			format(dialog, sizeof dialog, "{FFFFFF}- Contacto: {FF0000}%s\n{FFFFFF}- Teléfono: {FF0000}%d\n{FFFFFF}¿Está seguro que desea eliminar éste numero?", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_PHONE_BOOK_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00ff00}TELÉFONO > Agenda > Eliminar todo", "{FFFFFF}¿Seguro que deseas eliminar toda tu agenda?.", "Eliminar", "Atrás");
		case DIALOG_PHONE_CALL_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00ff00}TELÉFONO > Realizar una llamada", "{FFFFFF}Ingresa el número de teléfono", "Llamar", "Atrás");
		case DIALOG_PHONE_SMS_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00ff00}TELÉFONO > Enviar WhatsApp", "{FFFFFF}Coloca el número al que deseas envíar un WhatsApp", "Siguiente", "Atrás");
		case DIALOG_PHONE_SMS_MESSAGE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00ff00}TELÉFONO > Enviar WhatsApp", "{FFFFFF}Escribe tu mensaje, válido de 1-64 carácteres.", "Enviar", "Atrás");
		case DIALOG_PHONE_BOOK_SEND_MESSAGE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00ff00}TELÉFONO > Enviar WhatsApp", "{FFFFFF}Escribe tu mensaje, válido de 1-64 carácteres.", "Siguiente", "Atrás");
		case DIALOG_PHONE_SENT_MESSAGES:
		{
			new dialog[1600];
			format(dialog, sizeof dialog, "{FFFF00}Fecha\t{FFFF00}WhatsApp\t{FFFF00}Mensaje\n");

			new DBResult:Result, DB_Query[140], messages;
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `PHONE_MESSAGES` WHERE `FROM` = '%d' ORDER BY `DATE` DESC LIMIT 10;", PLAYER_PHONE[playerid][player_phone_NUMBER]);
			Result = db_query(Database, DB_Query);

			if(db_num_rows(Result) == 0) strcat(dialog, "{FFFFFF}No hay mensajes.");
			else
			{
				new line_str[150];
				for(new i; i < db_num_rows(Result); i++ )
				{
					new date[24], to, message[64];
					to = db_get_field_assoc_int(Result, "TO");
					db_get_field_assoc(Result, "MESSAGE", message, 64);
					db_get_field_assoc(Result, "DATE", date, 24);

					format(line_str, sizeof line_str, "{FFFFFF}%s\t%s\t{FFFFFF}%s\n", date, convertPhoneNumber(playerid, to), message);
					strcat(dialog, line_str);

					messages ++;
					db_next_row(Result);
				}
			}
			db_free_result(Result);

			new caption[40];
			format(caption, sizeof caption, "{00FF00}TELÉFONO > WHATSAPPS ENVIADOS (%d)", messages);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Salir", "Atrás");
			return 1;
		}
		case DIALOG_PHONE_RECEIVED_MESSAGES:
		{
			new dialog[1600];
			format(dialog, sizeof dialog, "{FFFF00}Fecha\t{FFFF00}WhatsApp\t{FFFF00}Mensaje\n");

			new DBResult:Result, DB_Query[140], messages;
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `PHONE_MESSAGES` WHERE `TO` = '%d' ORDER BY `DATE` DESC LIMIT 10;", PLAYER_PHONE[playerid][player_phone_NUMBER]);
			Result = db_query(Database, DB_Query);

			if(db_num_rows(Result) == 0) strcat(dialog, "{FFFFFF}No hay mensajes.");
			else
			{
				new line_str[150];
				for(new i; i < db_num_rows(Result); i++ )
				{
					new date[24], from, message[64];
					from = db_get_field_assoc_int(Result, "FROM");
					db_get_field_assoc(Result, "MESSAGE", message, 64);
					db_get_field_assoc(Result, "DATE", date, 24);

					format(line_str, sizeof line_str, "{FFFFFF}%s\t%s\t{FFFFFF}%s\n", date, convertPhoneNumber(playerid, from), message);
					strcat(dialog, line_str);

					messages ++;
					db_next_row(Result);
				}
			}
			db_free_result(Result);

			new caption[40];
			format(caption, sizeof caption, "{00FF00}TELÉFONO > WHATSAPPS RECIBIDOS (%d)", messages);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Salir", "Atrás");
			return 1;
		}
		case DIALOG_CONFIRM_BUY_PROPERTY:
		{
			new dialog[320];
			format(dialog, sizeof dialog, "{FFFFFF}Precio de la propiedad: {41f48f}$%s\n{FFFFFF}Impuesto por payday: {41f48f}$%s\n{FFFFFF}Saldo actual en banco: {41f48f}$%s\n{FFFFFF}Saldo en banco tras la compra: {41f48f}$%s\n\n{FFFFFF}Presiona comprar si estás seguro de adquirir la propiedad.", number_format_thousand(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] ][property_PRICE]), number_format_thousand(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] ][property_PRICE_BASE] / 200), number_format_thousand(BANK_ACCOUNT[playerid][bank_account_BALANCE]), number_format_thousand(BANK_ACCOUNT[playerid][bank_account_BALANCE] - PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] ][property_PRICE]));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}GOBIERNO - COMPRAR PROPIEDAD",  dialog, "Comprar", "Salir");
			return 1;
		}
		case DIALOG_PLAYER_GPS:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{00FF00}GPS",  " Mis sitios\n Mis propiedades\n Mis vehículos\n{00FF00} Ciudad\n Trabajos\n Ver mapa real", "Ver", "Salir");
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_PLAYER_GPS_SAVES + 2)];
			format(dialog, sizeof dialog, "{FFFF00}Lugar\t{FFFF00}Distancia\n");

			new line_str[90], sites, listitem;
			for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i++ )
			{
				if(!PLAYER_GPS[playerid][i][player_gps_VALID]) continue;

				format(line_str, sizeof line_str, " %s\t{FFFF00}%.2f Km\n", PLAYER_GPS[playerid][listitem][player_gps_NAME], (GetPlayerDistanceFromPoint(playerid, PLAYER_GPS[playerid][listitem][player_gps_X], PLAYER_GPS[playerid][listitem][player_gps_Y], PLAYER_GPS[playerid][listitem][player_gps_Z]) * 0.01));
				strcat(dialog, line_str);
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;

				sites ++; listitem ++;
			}
			if(sites < MAX_PLAYER_GPS_SAVES)
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_PLAYER_GPS_SAVES + 10;
				strcat(dialog, "{00FF00}+ Añadir éste lugar\n"); listitem ++;
			}
			if(sites > 0)
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_PLAYER_GPS_SAVES + 20;
				strcat(dialog, "{FF0000}- Eliminar todo\n"); listitem ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}GPS - Mis lugares", dialog, "Marcar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER_ADD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00FF00}GPS - Añadir posición actual", "{FFFFFF}Coloca un nombre a esta posición, será guardada en tu {00FF00}GPS.", "Guardar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}GPS - Mis lugares > Eliminar todo", "{FFFFFF}Se eliminarán todos sus sitios guardados, ¿esta seguro de hacer ésta acción?", "Eliminar", "Atrás");
		case DIALOG_PLAYER_GPS_PLAYER_OPTION:
		{
			new caption[40];
			format(caption, sizeof caption, "{00FF00}GPS - %s", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, " Marcar coordenadas en el GPS\n Cambiar nombre de este sitio\n Eliminar este sitio del GPS", "Elegir", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_CHANGE_NAME:
		{
			new dialog[90];
			format(dialog, sizeof dialog, "{FFFFFF}Nombre del sitio: {00FF00}%s\n{FFFFFF}Indica el nuevo nombre para este lugar.", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00FF00}GPS - Cambiar nombre de un sitio", dialog, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_CONFIRM_DELET:
		{
			new dialog[95];
			format(dialog, sizeof dialog, "{FFFFFF}Nombre del sitio: {00FF00}%s\n{FFFFFF}¿Está seguro de que quiere borrarlo del GPS?", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}GPS - Eliminar un sitio", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITES:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{00FF00}GPS - Lugares de interés", " Hospitales\n Tiendas de ropa\n Tiendas 24 horas\n Restaurantes de comida rápida\n Bancos\n Cajeros automáticos\n Gasolineras\n Concesionarios\n Gobierno San Andreas\n Policías\n Super Tuning Club\n Gimnasios\n Ferreterías\n Bares\n Mercado\n Salón de eventos\n Club Nocturno\n Vivienda abandonada", "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_WORKS:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[85 * (sizeof(work_info) + 1)], listitem;
			format(dialog, sizeof dialog, "{FFFF00}Trabajo\t{FFFF00}Distancia\n");

			for(new i = 1; i != sizeof work_info; i ++)
			{
				if(work_info[i][work_info_TYPE] == WORK_TYPE_FAMILY) continue;

				new line_str[85];
				format(line_str, sizeof line_str, "{FFFFFF}%c%s (%d)\t{FFFF00}%.2f Km\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], work_info[i][work_info_LEVEL], (GetPlayerDistanceFromPoint(playerid, obtain_work_coords[i][obtain_work_MAP_ICON_X], obtain_work_coords[i][obtain_work_MAP_ICON_Y], obtain_work_coords[i][obtain_work_MAP_ICON_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}GPS - Trabajos", dialog, "Marcar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_0: //Hospitales
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}GPS - Hospitales", DIALOG_PLAYER_GPS_SITE_0_String, "Marcar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_1: //Tiendas de ropa
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "{FFFF00}Lugar\t{FFFF00}Distancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BINCO && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_SUBURBAN && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_PROLAPS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_DIDIER_SACHS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_VICTIM && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_ZIP) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFF00}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}GPS - Tiendas de ropa", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_2: //Tiendas 24 horas
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "{FFFF00}Lugar\t{FFFF00}Distancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_247) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFF00}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}GPS - Tiendas 24/7", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_3: //Comida rapida
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "{FFFF00}Lugar\t{FFFF00}Distancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_PIZZA && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_CLUCKIN_BELL && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BURGER_SHOT && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_DONUT && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_CAFE) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFF00}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}GPS - Comida rápida", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_4: //Bancos
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "{FFFF00}Lugar\t{FFFF00}Distancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BANK_LS) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFF00}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}GPS - Bancos", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_5: //Cajeros
		{
			new dialog[90 * (sizeof(ATM_BANK) + 1)];
			format(dialog, sizeof dialog, "{FFFF00}Lugar\t{FFFF00}Distancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ATM_BANK); i++ )
			{
				format(line_str, sizeof line_str, "{FFFFFF}Cajero %d\t%.2f Km\n", sites + 1, (GetPlayerDistanceFromPoint(playerid, ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z]) * 0.01));
				strcat(dialog, line_str);

				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}GPS - Cajeros", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_6: //Gasolineras
		{
			new dialog[90 * (sizeof(Fuel_Stations) + 1)];
			format(dialog, sizeof dialog, "{FFFF00}Lugar\t{FFFF00}Distancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(Fuel_Stations); i++ )
			{
				format(line_str, sizeof line_str, "{FFFFFF}Gasolinera %d\t%.2f Km\n", sites + 1, (GetPlayerDistanceFromPoint(playerid, Fuel_Stations[i][0], Fuel_Stations[i][1], Fuel_Stations[i][2]) * 0.01));
				strcat(dialog, line_str);

				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}GPS - Gasolineras", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_7: //Concesionarios
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}GPS - Concesionarios", DIALOG_PLAYER_GPS_SITE_7_String, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_8: //Policias
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "{FFFF00}Lugar\t{FFFF00}Distancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_POLICE_LS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_POLICE_SF && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_POLICE_LV) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFF00}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}GPS - Policías", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_9: //Gimnasios
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "{FFFF00}Lugar\t{FFFF00}Distancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_GYM_LS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_GYM_SF && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_GYM_LV) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFF00}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}GPS - Gimnasios", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_10: //Ferreterías
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "{FFFF00}Lugar\t{FFFF00}Distancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_FERRETERIA) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFF00}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}GPS - Ferreterías", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_11: //Bares
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "{FFFF00}Lugar\t{FFFF00}Distancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BAR) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFF00}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}GPS - Bares", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_PROPERTIES:
		{
			for(new i = 0; i != MAX_SU_PROPERTIES; i ++) PLAYER_TEMP[playerid][pt_PLAYER_GPS_SELECTED_PROPERTY][i] = -1;

			new dialog[90 * (MAX_SU_PROPERTIES + 2)];
			format(dialog, sizeof dialog, "{FFFF00}Propiedad\t{FFFF00}Distancia\n");

			new DBResult:Result, DB_Query[250];
			format(DB_Query, sizeof DB_Query, "SELECT `PROPERTY_OWNER`.*, `PROPERTY`.`EXT_X`, `PROPERTY`.`EXT_Y`, `PROPERTY`.`EXT_Z` FROM `PROPERTY_OWNER`, `PROPERTY` WHERE `PROPERTY_OWNER`.`ID_USER` = '%d' AND `PROPERTY`.`ID` = `PROPERTY_OWNER`.`ID_PROPERTY`;", ACCOUNT_INFO[playerid][ac_ID]);
			Result = db_query(Database, DB_Query);

			if(db_num_rows(Result) == 0) strcat(dialog, "{FFFFFF}No tienes propiedades");
			else
			{
				new line_str[90], properties;
				for(new i; i < db_num_rows(Result); i++ )
				{
					if(properties >= MAX_SU_PROPERTIES) break;

					new property_name[24], Float:pos[3];
					PLAYER_TEMP[playerid][pt_PLAYER_GPS_SELECTED_PROPERTY][properties] = db_get_field_assoc_int(Result, "ID_PROPERTY");
					db_get_field_assoc(Result, "PROPERTY_NAME", property_name, 24);
					pos[0] = db_get_field_assoc_float(Result, "EXT_X");
					pos[1] = db_get_field_assoc_float(Result, "EXT_Y");
					pos[2] = db_get_field_assoc_float(Result, "EXT_Z");

					format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFF00}%.2f Km\n", properties + 1, property_name, (GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01));
					strcat(dialog, line_str);

					properties ++;
					db_next_row(Result);
				}
			}
			db_free_result(Result);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}GPS - Mis propiedades", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_VEHICLES:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[115 * (MAX_SU_VEHICLES + 2)], total_vehicles;
			format(dialog, sizeof dialog, "{FFFF00}Vehículo\t{FFFF00}Matrícula\t{FFFF00}Distancia\n");
			for(new i = 0; i != MAX_VEHICLES; i ++)
			{
				if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
				if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
				if(total_vehicles > MAX_SU_VEHICLES) break;

				if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][total_vehicles] = i;

					new Float:pos[3];
					GetVehiclePos(i, pos[0], pos[1], pos[2]);

					new line_str[115];
					if(ACCOUNT_INFO[playerid][ac_SU]) format(line_str, sizeof line_str, "%d. %s\t%s\t%.2f Km\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], (GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01));
					else
					{
						if(PLAYER_VEHICLES[i][player_vehicle_ACCESSIBLE]) format(line_str, sizeof line_str, "%d. %s\t%s\t%.2f Km\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], (GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01));
						else format(line_str, sizeof line_str, "{666666}%d. %s\t{666666}%s\t{666666}%.2f Km\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], (GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01));
					}
					strcat(dialog, line_str);
					total_vehicles ++;
				}
			}
			if(total_vehicles == 0) strcat(dialog, "{FFFFFF}No tienes vehículos");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}GPS - Mis vehículos", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_OPTIONS:
		{
			new caption[40];
			format(caption, sizeof caption, "{00FF00}CASA DE %s", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);

			new dialog[256];
			format(dialog, sizeof dialog, " Nombre de la casa\n Sacar a todos de tu casa\n Colocar música\n");
			if(PLAYER_CREW[playerid][player_crew_VALID])
			{
				if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES])
				{
					strcat(dialog, " Asignar casa a la actual banda\n");
				}
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_NAME:
		{
			new dialog[85];
			format(dialog, sizeof dialog, "{FFFFFF}Nombre actual: {00FF00}%s\nColoque el nuevo nombre de la casa.", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00FF00}CASA - Cambiar nombre", dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_BUY_VEHICLE:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_VALID]) return 0;
			if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_TYPE] != VEHICLE_TYPE_SELL) return 0;
			if(!SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_VALID]) return 0;

			new dialog[800];
			format(dialog, sizeof dialog,
				"{FFFFFF} Modelo del vehículo: {00FF00}%s\n\
				{FFFFFF} Velocidad máxima: {00FF00}%d Km/h\n\
				{FFFFFF} Capacidad de gasolina: {00FF00}%.1f Litros\n\
				{FFFFFF} Espacio en la cajuela: {00FF00}%d\n\
				{FFFFFF} Precio estimado por reparación: {41f48f}$%d00\n\
				{FFFFFF} Seguro del vehículo: {FFCC00}- $%s{FFFFFF} por Payday\n\n",
				VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME],
				floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_VEL]),
				VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_GAS],
				VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_BOOT_SLOTS],
				VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_REPUESTOS],
				number_format_thousand(VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 100)
			);

			new str[145];
			if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_LEVEL] > ACCOUNT_INFO[playerid][ac_LEVEL])
			{
				format(str, sizeof str, "{FF0000} Usted no cumple con el nivel para comprar este vehículo.", SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_LEVEL]);
				strcat(dialog, str);
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}COMPRAR VEHÍCULO", dialog, "Salir", "");
				return 1;
			}
	 		if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA] > ACCOUNT_INFO[playerid][ac_SD])
			{
				format(str, sizeof str, "{FFFFFF} Le hacen falta {f44242}%d koins{FFFFFF} para adquirir éste vehículo.", SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA] - ACCOUNT_INFO[playerid][ac_SD]);
				strcat(dialog, str);
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}COMPRAR VEHÍCULO", dialog, "Salir", "");
				return 1;
			}
		 	if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE] > CHARACTER_INFO[playerid][ch_CASH])
			{
				new diff = SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE] - CHARACTER_INFO[playerid][ch_CASH];
				format(str, sizeof str, "{FFFFFF} Le hacen falta solo {41f48f}$%s{FFFFFF} para adquirir éste vehículo.", number_format_thousand(diff));
				strcat(dialog, str);
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}COMPRAR VEHÍCULO", dialog, "Salir", "");
				return 1;
			}

			strcat(dialog, "{FFFFFF}¿Está seguro que quiere comprar éste vehículo?");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}COMPRAR VEHÍCULO", dialog, "Comprar", "Salir");
			return 1;
		}
		case DIALOG_NOTARY_HOUSE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{00FF00}GOBIERNO - VENDER PROPIEDAD", "{FFFFFF}Vender propiedad al gobierno\n{FFFFFF}Vender propiedad a una persona", "Siguiente", "Salir");
			return 1;
		}
		case DIALOG_NOTARY_VEHICLE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{00FF00}GOBIERNO - VENDER VEHÍCULO", "{FFFFFF}Vender un vehículo al gobierno\n{FFFFFF}Vender vehículo a una persona", "Siguiente", "Salir");
			return 1;
		}
		case DIALOG_NOTARY_SELECT_PROPERTY:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[45 * (MAX_SU_PROPERTIES + 2)];
			format(dialog, sizeof dialog, "{FFFF00}Propiedad\n");

			new DBResult:Result, DB_Query[80];
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `PROPERTY_OWNER` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
			Result = db_query(Database, DB_Query);

			if(db_num_rows(Result) == 0) strcat(dialog, "{FFFFFF}No tienes propiedades");
			else
			{
				new line_str[45], properties;
				for(new i; i < db_num_rows(Result); i++ )
				{
					if(properties >= MAX_SU_PROPERTIES) break;

					new property_name[24];
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][properties] = db_get_field_assoc_int(Result, "ID_PROPERTY");
					db_get_field_assoc(Result, "PROPERTY_NAME", property_name, 24);

					format(line_str, sizeof line_str, "{FFFFFF}%d. %s\n", properties + 1, property_name);
					strcat(dialog, line_str);

					properties ++;
					db_next_row(Result);
				}
			}
			db_free_result(Result);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}TUS PROPIEDADES", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_BANK_SELL:
		{
			new Float:price, payment;
			price = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE_BASE];
			if(ACCOUNT_INFO[playerid][ac_SU]) payment = floatround(75 * price / 100);
			else payment = floatround(price / 2);

			new dialog[360];
			format(dialog, sizeof dialog, "{FFFFFF}Ésta propiedad cuesta actualmente: {41f48f}$%s\n{FFFFFF}El gobierno te pagará por tu propiedad: +{41f48f}$%s\n{FFFFFF}El dinero lo recibirás en tu {FF0000}cuenta bancaria.", number_format_thousand(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE]), number_format_thousand(payment));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}GOBIERNO - VENDER PROPIEDAD", dialog, "Vender", "Regresar");
			return 1;
		}
		case DIALOG_PROPERTY_SELL_PRICE:
		{
			//new Float:price = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE];

			new dialog[250];
			format(dialog, sizeof dialog,
			"{FFFFFF}Ésta propiedad cuesta actualmente: {41f48f}$%s\n{FFFFFF}Escribe la cantidad por la que ofreces tu propiedad.",
			number_format_thousand(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE]));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00FF00}GOBIERNO - VENDER PROPIEDAD A PERSONA", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_SELL_TO_PLAYER:
		{
			new dialog[250];
			format(dialog, sizeof dialog, "{FFFFFF}Has declarado vender tu propiedad en {41f48f}$%s.\n{FFFFFF}Escribe la ID o el nombre de la persona a quién se la venderás.", number_format_thousand(PLAYER_TEMP[playerid][pt_NOTARY_PRICE]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00FF00}GOBIERNO - VENDER PROPIEDAD A PERSONA", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_SELL_CONFIRM_PROPERTY:
		{
			new dialog[340];
			format(dialog, sizeof dialog,
				"{00FF00}%s {FFFFFF}te está ofreciendo una propiedad.\n\
				{FFFFFF}Propiedad: {00FF00}%d\n\
				{FFFFFF}Precio: {41f48f}$%s\n\n\
				{FFFFFF}Saldo en banco tras la compra: {41f48f}$%s\n\n\
				{FFFFFF}¿Quieres comprar esta propiedad?",
				PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_RP_NAME],
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID],
				number_format_thousand(PLAYER_TEMP[playerid][pt_NOTARY_PRICE]),
				number_format_thousand( BANK_ACCOUNT[playerid][bank_account_BALANCE] - PLAYER_TEMP[playerid][pt_NOTARY_PRICE] )
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}GOBIERNO - OFERTA DE COMPRA DE PROPIEDAD", dialog, "Comprar", "Salir");
			return 1;
		}
		case DIALOG_NOTARY_SELECT_VEHICLE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[95 * (MAX_SU_VEHICLES + 2)], total_vehicles;
			format(dialog, sizeof dialog, "{FFFF00}Vehículo\t{FFFF00}Matrícula\n");
			for(new i = 0; i != MAX_VEHICLES; i ++)
			{
				if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
				if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
				if(total_vehicles > MAX_SU_VEHICLES) break;

				if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][total_vehicles] = i;

					new line_str[95];
					format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t%s\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE]);
					strcat(dialog, line_str);
					total_vehicles ++;
				}
			}
			if(total_vehicles == 0) strcat(dialog, "{FFFFFF}No tienes vehículos");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}GOBIERNO - VENDER VEHÍCULO", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_VEHICLE_BANK_SELL:
		{
			new Float:price, pricesd, payment;
			new dialog[260];
			if(VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE] <= 1)
			{
		 		pricesd = VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_COINS];
				payment = pricesd / 2;
				format(dialog, sizeof dialog, "{FFFFFF}Éste vehículo cuesta actualmente: {f44242}%d koins\n{FFFFFF}El gobierno te pagará por tu vehículo: {f44242}%d koins", pricesd, payment);
			}
			else
			{
				price = VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE];
				if(ACCOUNT_INFO[playerid][ac_SU]) payment = floatround(75 * price / 100);
				else payment = floatround(price /2);
				format(dialog, sizeof dialog, "{FFFFFF}Éste vehículo cuesta actualmente: {41f48f}$%s\n{FFFFFF}El gobierno te pagará por tu vehículo: +{41f48f}$%s\n{FFFFFF}El dinero lo recibirás en tu {FF0000}cuenta bancaria.", number_format_thousand( VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE] ), number_format_thousand(payment));
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}GOBIERNO - VENDER VEHÍCULO", dialog, "Vender", "Atrás");
			return 1;
		}
		case DIALOG_VEHICLE_SELL_PRICE:
		{
			new dialog[250];
			format(dialog, sizeof dialog, "{FFFFFF}Éste vehículo cuesta actualmente: {41f48f}$%s\n{FFFFFF}Escribe la cantidad por la que ofreces tu vehículo.", number_format_thousand(VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE]));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00FF00}GOBIERNO - VENDER VEHÍCULO", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_VEHICLE_SELL_TO_PLAYER:
		{
			new dialog[250];
			format(dialog, sizeof dialog, "{FFFFFF}Has declarado vender tu propiedad en {41f48f}$%s.\n{FFFFFF}Escribe la ID o el nombre de la persona a quién se lo venderás.", number_format_thousand(PLAYER_TEMP[playerid][pt_NOTARY_PRICE]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00FF00}GOBIERNO - VENDER VEHÍCULO", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_SELL_CONFIRM_VEHICLE:
		{
			new dialog[360];
			format(dialog, sizeof dialog,
				"{00FF00}%s {FFFFFF}te ofrece un vehículo.\n\n\
				{FFFFFF}Vehículo: {41f48f}%s\n\
				{FFFFFF}Matrícula: {41f48f}%s\n\
				{FFFFFF}Precio: {41f48f}$%s\n\n\
				{FFFFFF}Saldo en banco tras la compra: {41f48f}$%s\n\n\
				{FFFFFF}¿Quieres comprar este vehículo?",
				PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_RP_NAME],
				VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME],
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_NUMBER_PLATE],
				number_format_thousand(PLAYER_TEMP[playerid][pt_NOTARY_PRICE]),
				number_format_thousand( BANK_ACCOUNT[playerid][bank_account_BALANCE] - PLAYER_TEMP[playerid][pt_NOTARY_PRICE] )
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}GOBIERNO - OFERTA DE COMPRA DE VEHÍCULO", dialog, "Comprar", "Salir");
			return 1;
		}
		case DIALOG_SELECT_TRUCK_TYPE:
		{
			new work_extra_payment;
			if(work_info[WORK_TRUCK][work_info_EXTRA_PAY] > 0 && work_info[WORK_TRUCK][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_TRUCK][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_TRUCK], work_info[WORK_TRUCK][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT];

				if(ACCOUNT_INFO[playerid][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
			}

			new dialog[105 * (sizeof(Truck_Contents) + 2)];
			format(dialog, sizeof dialog, "{FFFF00}Producto\t{FFFF00}Paga\t{FFFF00}Distancia\n");
			for(new i = 0; i != sizeof Truck_Contents; i ++)
			{
				new line_str[105];
				if(Truck_Contents[i][truck_content_EXP] > PLAYER_SKILLS[playerid][WORK_TRUCK])
				{
					format(line_str, sizeof line_str, "{666666}%s\t{666666}$%s\t{666666}%.2f Km\n", Truck_Contents[i][truck_content_NAME], number_format_thousand(Truck_Contents[i][truck_content_MONEY] + work_extra_payment), (GetPlayerDistanceFromPoint(playerid, Truck_Contents[i][truck_content_X], Truck_Contents[i][truck_content_Y], Truck_Contents[i][truck_content_Z]) * 0.01));
					strcat(dialog, line_str);
				}
				else
				{
					format(line_str, sizeof line_str, "{FFFFFF}%s\t{41f48f}$%s\t{FFFFFF}%.2f Km\n", Truck_Contents[i][truck_content_NAME], number_format_thousand(Truck_Contents[i][truck_content_MONEY] + work_extra_payment), (GetPlayerDistanceFromPoint(playerid, Truck_Contents[i][truck_content_X], Truck_Contents[i][truck_content_Y], Truck_Contents[i][truck_content_Z]) * 0.01));
					strcat(dialog, line_str);
				}
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}Cargar camión", dialog, "Cargar", "Cerrar");
			return 1;
		}
		case DIALOG_TUNING_MENU_PART:
		{
			new vehicleid = PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID];

			new caption[45];
			format(caption, sizeof caption, "Tuning - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			new DBResult:Result, DB_Query[250], dialog[80 * TOTAL_TUNING_PARTS];
			format(DB_Query, sizeof DB_Query, "SELECT `COMPONENTS_INFO`.`PART`, `COMPONENTS_INFO`.`PIECES` FROM `COMPONENTS_INFO`, `VEHICLE_COMPONENTS` WHERE `VEHICLE_COMPONENTS`.`MODELID` = '%d' AND `VEHICLE_COMPONENTS`.`COMPONENT_ID` = `COMPONENTS_INFO`.`ID` GROUP BY `COMPONENTS_INFO`.`PART`;", GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID]);
			Result = db_query(Database, DB_Query);

			format(dialog, sizeof dialog, "{FFFFFF}Categoría\tPiezas necesarias\t{FFFFFF}Estimación\n");

			if(db_num_rows(Result) == 0) strcat(dialog, "{666666}Este vehículo no se puede tunear");
			else
			{
				new line_str[80];
				for(new i; i < db_num_rows(Result); i++ )
				{
					if(i >= TOTAL_TUNING_PARTS)
					{
						printf("---> Límite superado en array 'PLAYER_TUNING_MENU, dialog Parts' al intentar cargar de la base de datos.");
						break;
					}

					db_get_field_assoc(Result, "PART", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME], 24);
					PLAYER_TUNING_MENU[playerid][i][tuning_menu_PIECES] = db_get_field_assoc_int(Result, "PIECES");
					format(line_str, sizeof line_str, "{FFFFFF}%s\t%d\t{FFFFFF}$%s\n", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME], PLAYER_TUNING_MENU[playerid][i][tuning_menu_PIECES], number_format_thousand(PLAYER_TUNING_MENU[playerid][i][tuning_menu_PIECES] * 50));
					strcat(dialog, line_str);

					db_next_row(Result);
				}
			}
			db_free_result(Result);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_TUNING_MENU_COMPONENT:
		{
			new vehicleid = PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID];

			new caption[45];
			format(caption, sizeof caption, "%s > %s", VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PART]);

			new DBResult:Result, DB_Query[300], dialog[40 * MAX_TUNING_PARTS_COMPONENTS];
			format(DB_Query, sizeof DB_Query, "SELECT `COMPONENTS_INFO`.`ID`, `COMPONENTS_INFO`.`NAME` FROM `COMPONENTS_INFO`, `VEHICLE_COMPONENTS` WHERE `COMPONENTS_INFO`.`PART` = '%s' AND `VEHICLE_COMPONENTS`.`MODELID` = '%d' AND `VEHICLE_COMPONENTS`.`COMPONENT_ID` = `COMPONENTS_INFO`.`ID`;", PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PART], GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID]);
			Result = db_query(Database, DB_Query);

			if(db_num_rows(Result) == 0) strcat(dialog, "{666666}No hay nada aquí");
			else
			{
				new line_str[40];
				for(new i; i < db_num_rows(Result); i++ )
				{
					if(i >= MAX_TUNING_PARTS_COMPONENTS)
					{
						printf("---> Límite superado en array 'PLAYER_TUNING_MENU, dialog Partsnames' al intentar cargar de la base de datos.");
						break;
					}

					PLAYER_TUNING_MENU[playerid][i][tuning_menu_ID] = db_get_field_assoc_int(Result, "ID");
					db_get_field_assoc(Result, "NAME", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME], 24);

					format(line_str, sizeof line_str, "{FFFFFF}%s\n", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME]);
					strcat(dialog, line_str);

					db_next_row(Result);
				}
			}
			db_free_result(Result);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_MENU:
		{
			new caption[60];
			format(caption, sizeof caption, "{00FF00}MENÚ MECÁNICO - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			new dialog[450];
			format(dialog, sizeof dialog,
			"\
				{FFFF00}Opción\t{FFFF00}Piezas necesarias\t{FFFF00}Estimación\n\
				{FFFFFF}Reparación completa\t%d\t{41f48f}$%d00\n\
			", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_REPUESTOS], VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_REPUESTOS]);

			new paintjobs = VehiclePaintjob( GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] );
			strcat(dialog, "Pintar vehículo\t5\t{41f48f}$250\n");
			if(PLAYER_SKILLS[playerid][WORK_MECHANIC] >= 20)
			{
				strcat(dialog, "Eliminar componentes\n");
				strcat(dialog, "Tunear vehículo\n");
				if(paintjobs > 0) strcat(dialog, "Paintjob\t15\t{41f48f}$750\n");
			}
			else
			{
				strcat(dialog, "Eliminar componentes\n");
				strcat(dialog, "Tunear vehículo\n");
				if(paintjobs > 0) strcat(dialog, "Paintjob\t15\t{41f48f}$750\n");
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_REPAIR_PRICE:
		{
			new caption[60];
			format(caption, sizeof caption, "{00FF00}MENÚ MECÁNICO - Reparar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			new dialog[450];
			format(dialog, sizeof dialog, "{FFFFFF}Escriba cuanto cobrará por ésta {00FF00}reparación. {FFFFFF}Considere que el precio de reparación de éste vehículo es de {41f48f}$%d", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_REPUESTOS]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_COLOR_PRICE:
		{
			new caption[60];
			format(caption, sizeof caption, "{00FF00}MENÚ MECÁNICO - Pintar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "{FFFFFF}Escriba cuanto cobrará por {00FF00}pintar éste vehículo. {FFFFFF}Considere que el precio estándar es de {41f48f}$500", "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_TUNING_PRICE:
		{
			new caption[60], dialog[145];
			format(caption, sizeof caption, "{00FF00}MENÚ MECÁNICO - Tunear %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			format(dialog, sizeof dialog, "{FFFFFF}Escriba cuanto cobrará por {00FF00}tunearlo. {FFFFFF}Considere que el rango es de {41f48f}$0 a $%s", number_format_thousand((PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES] * 50) + 2000));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_PAINTJOB_PRICE:
		{
			new caption[60];
			format(caption, sizeof caption, "{00FF00}MENÚ MECÁNICO - Paintjob %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "{FFFFFF}Escriba cuanto cobrará por colocar un {00FF00}painjob. {FFFFFF}Considere que el precio estándar es de {41f48f}$1.500", "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_ACCEPT:
		{
			new dialog[300];
			format(dialog, sizeof dialog, "{00FF00}%s {FFFFFF}te ofrece {00FF00}%s{FFFFFF} en {41f48f}$%s.",
					PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_MECHANIC_PID] ][pt_RP_NAME],
					PLAYER_TEMP[playerid][pt_MECHANIC_TEXT],
					number_format_thousand(PLAYER_TEMP[playerid][pt_MECHANIC_PRICE])
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}MECÁNICO", dialog, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_MECHANIC_SELECT_COL_SLOT:
		{
			new caption[60];
			format(caption, sizeof caption, "{00FF00}MENÚ MECÁNICO - Pintar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "{FFFFFF}Pintar color primario\n{FFFFFF}Pintar color secundario", "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_SELECT_COLOR:
		{
			new caption[60];
			format(caption, sizeof caption, "{00FF00}MENÚ MECÁNICO - Pintar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);


			new dialog[15 * (sizeof(VEHICLE_COLORS) + 1) ];
			for(new i = 0; i != sizeof VEHICLE_COLORS; i++)
			{
				new line_str[15];
				format(line_str, sizeof(line_str), "{%06x}%d\n", VEHICLE_COLORS[i] >>> 8, i);
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_MECHANIC_REMOVE_COMPONEN:
		{
			new caption[60], dialog[80 * (MAX_VEHICLE_COMPONENTS + 2) ], listitem;
			format(caption, sizeof caption, "{00FF00}MENÚ MECÁNICO - Eliminar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
			format(dialog, sizeof dialog, "{FFFFFF}Componente\tPiezas\n");

			for(new i = 0; i != MAX_VEHICLE_COMPONENTS; i ++)
			{
				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][i]) continue;

				new DBResult:Result, DB_Query[60];
				format(DB_Query, sizeof DB_Query, "SELECT * FROM `COMPONENTS_INFO` WHERE `ID` = '%d';", GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][i]);

				Result = db_query(Database, DB_Query);

				if(db_num_rows(Result))
				{
					new part[24], name[24];
					db_get_field_assoc(Result, "PART", part, 24);
					db_get_field_assoc(Result, "NAME", name, 24);
					PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] = i;
					PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES] = db_get_field_assoc_int(Result, "PIECES");

					new line_str[80];
					format(line_str, sizeof line_str, "{FFFFFF}%s > %s\t+ %d\n", part, name, PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES]);
					strcat(dialog, line_str);
				}
				db_free_result(Result);
				listitem ++;
			}
			if(listitem == 0)
			{
				PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] = 0;
				strcat(dialog, "{FFFFFF}Vehículo sin tunear");
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_TUNING_PAINTJOB:
		{
			new caption[60], dialog[25 * 4];
			format(caption, sizeof caption, "{00FF00}MENÚ MECÁNICO - Paintjob %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			new paintjobs = VehiclePaintjob( GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] );
			if(paintjobs == 0)
			{
				SendClientMessage(playerid, -1, "{FFFFFF}Este vehículo no soporta paintjobs.");
				ShowDialog(playerid, DIALOG_MECHANIC_MENU);
				return 1;
			}

			strcat(dialog, "{FFFFFF}Eliminar paintjob (+ 15 piezas)\n");
			for(new i = 0; i != paintjobs; i ++)
			{
				new line_str[25];
				format(line_str, sizeof line_str, "{FFFFFF}Paintjob %d\n", i + 1);
				strcat(dialog, line_str);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_SELECT_TRASH_ROUTE:
		{
			new dialog[45 * (MAX_ROUTES + 1)], routes;
			format(dialog, sizeof dialog, "{FFFF00}Ruta\t{FFFF00}Recorrido\t{FFFF00}Beneficios\n");

			new work_extra_payment;
			if(work_info[WORK_TRASH][work_info_EXTRA_PAY] > 0 && work_info[WORK_TRASH][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_TRASH][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_TRASH], work_info[WORK_TRASH][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT];

				if(ACCOUNT_INFO[playerid][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
			}

			for(new i = 0; i != sizeof TRASH_OBJECTS; i ++)
			{
				if(!TRASH_OBJECTS[i][trash_route_VALID]) continue;
				new line_str[45];
				format(line_str, sizeof line_str, "#%d\t%.1f Km\t$%s\n", routes + 1, TRASH_OBJECTS[i][trash_route_DISTANCE] * 0.01, number_format_thousand(TRASH_OBJECTS[i][trash_route_MONEY] + work_extra_payment));
				strcat(dialog, line_str);

				routes ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona la ruta", dialog, "Siguiente", "Salir");
			return 1;
		}
		case DIALOG_SEED_LIST:
		{
			new dialog[64 * (sizeof(seed_info) + 1)];
			format(dialog, sizeof dialog, "{FFFF00}Semilla\t{FFFF00}Precio por semilla\n");

			for(new i = 0; i != sizeof seed_info; i ++)
			{
				new line_str[64];
				if(PLAYER_SKILLS[playerid][WORK_FARMER] >= seed_info[i][seed_info_EXP])
				{
					if(seed_info[i][seed_info_TYPE] == TYPE_LEGAL) format(line_str, sizeof line_str, "%s\t{41f48f}$%d\n", seed_info[i][seed_info_NAME], seed_info[i][seed_info_PRICE]);
					else format(line_str, sizeof line_str, "%s\t{41f48f}$%d\n", seed_info[i][seed_info_NAME], seed_info[i][seed_info_PRICE]);
				}
				else format(line_str, sizeof line_str, "{666666}%s\t{666666}$%d\n", seed_info[i][seed_info_NAME], seed_info[i][seed_info_PRICE]);

				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}SEMILLAS", dialog, "Comprar", "Salir");
			return 1;
		}
		case DIALOG_FARMACY:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "{FFFFFF}Producto: {00FF00}Medicamentos.\n{FFFFFF}Precio por medicamento: {41f48f}$600\n{FFFFFF}Escribe la cantidad de medicamentos que necesites.");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00FF00}FARMACIA", dialog, "Comprar", "Atrás");
			return 1;
		}
		case DIALOG_MARIA:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "{FFFFFF}Producto: {00FF00}Marihuana.\n{FFFFFF}Precio por 1g de marihuana: {41f48f}$1.000\n{FFFFFF}Escribe la cantidad de gramos de marihuana que necesites.");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00FF00}DRUG DEALER", dialog, "Comprar", "Atrás");
			return 1;
		}
		case DIALOG_SEED_BUY:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "{FFFFFF}Producto: {00FF00}%s.\n{FFFFFF}Precio por semilla: {41f48f}$%d\n{FFFFFF}Escribe la cantidad de semillas que necesitas.", seed_info[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_SEED_ID] ][seed_info_NAME], seed_info[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_SEED_ID] ][seed_info_PRICE]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00FF00}SEMILLAS", dialog, "Comprar", "Atrás");
			return 1;
		}
		case DIALOG_PLANT_PLANTS:
		{
			new dialog[95 * (sizeof(seed_info) + 1)];
			format(dialog, sizeof dialog, "{FFFF00}Planta\t{FFFF00}Semilla requerida\t{FFFF00}Semillas necesarias\n");

			for(new i = 0; i != sizeof plant_info; i ++)
			{
				new line_str[95];

				if(seed_info[i][seed_info_TYPE] == TYPE_LEGAL) format(line_str, sizeof line_str, "%s\t%s\t%d\n", plant_info[i][plant_info_NAME], seed_info[i][seed_info_NAME], plant_info[i][plant_info_SEEDS]);
				else format(line_str, sizeof line_str, "%s\t%s\t%d\n", plant_info[i][plant_info_NAME], seed_info[i][seed_info_NAME], plant_info[i][plant_info_SEEDS]);

				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}PLANTAR", dialog, "Plantar", "Salir");
		}
		case DIALOG_BLACK_MARKET_SELECT_WEA:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[95 * 15], line_str[95], listitem;
			format(dialog, sizeof dialog, "{FFFF00}Arma\t{FFFF00}Munición\t{FFFF00}Slot\n");

			for(new i; i != 13; i ++)
			{
				if(!PLAYER_WEAPONS[playerid][i][player_weapon_VALID]) continue;

				format(line_str, sizeof line_str, "%s\t%s\t%d\n", WEAPON_INFO[ PLAYER_WEAPONS[playerid][i][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][i][player_weapon_AMMO]), i);
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			if(listitem == 0) strcat(dialog, "{FFFFFF}No tienes armas");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}COMPRAR MUNICIÓN", dialog, "Seleccionar", "Salir");
			return 1;
		}
		case DIALOG_BLACK_MARKET_AMMO:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00FF00}MUNICIÓN", "{FFFFFF}La bala genérica cuesta {41f48f}$10{FFFFFF} cada una.\n{FFFFFF}Escriba cuantas balas quiere comprar", "Comprar", "Salir");
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[95 * 15], line_str[95], listitem;
			format(dialog, sizeof dialog, "{FFFF00}Arma\t{FFFF00}Munición\t{FFFF00}Slot\n");

			for(new i; i != 13; i ++)
			{
				if(!PLAYER_WEAPONS[playerid][i][player_weapon_VALID]) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%s\t{FFFFFF}%s\t{FFFFFF}%d\n", WEAPON_INFO[ PLAYER_WEAPONS[playerid][i][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][i][player_weapon_AMMO]), i);
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			strcat(dialog, "{FF0000}Tirar armas\n");
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = 13 + 20;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, ""DEFAULT_DIALOG_CAPTION" - ARMAS", dialog, "Tirar", "Salir");
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE_A:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""DEFAULT_DIALOG_CAPTION" - ARMAS - ELIMINAR", "{FFFFFF}Una vez elimine las armas no podrá recuperarlas, ¿esta seguro?.", "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "{FFFFFF}Arma: {00FF00}%s\n{FFFFFF}Munición: {00FF00}%s\nUna vez tire el arma no podrá recuperarlo, ¿esta seguro?", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, ""DEFAULT_DIALOG_CAPTION" - ARMAS - ELIMINAR", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_ANIMS: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "ANIMACIONES", DIALOG_ANIMS_String, "Siguiente", "Cerrar");
		case DIALOG_TRICKS_FOOD:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "{00FF00}%s {FFFFFF}te ofrece {00FF00}%s{FFFFFF} en {41f48f}$%s.",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_POCKET[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA] ][player_pocket_object_NAME],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, " ", dialog, "Aceptar", "Rechazar");
			return 1;
		}
		case DIALOG_TRICKS_MEDICINE:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "{00FF00}%s {FFFFFF}te ofrece {00FF00}%dg de medicamentos{FFFFFF} en {41f48f}$%s",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, " ", dialog, "Aceptar", "Rechazar");
			return 1;
		}
		case DIALOG_TRICKS_CANNABIS:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "{00FF00}%s {FFFFFF}te ofrece {00FF00}%dg de marihuana{FFFFFF} en {41f48f}$%s",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, " ", dialog, "Aceptar", "Rechazar");
			return 1;
		}
		case DIALOG_TRICKS_CRACK:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "{00FF00}%s {FFFFFF}te ofrece {00FF00}%dg de crack{FFFFFF} en {41f48f}$%s",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, " ", dialog, "Aceptar", "Rechazar");
			return 1;
		}
		case DIALOG_TRICKS_WEAPON:
		{
			new dialog[180];
			format(dialog, sizeof dialog, "{00FF00}%s {FFFFFF}te ofrece {00FF00}%s con %s munición{FFFFFF} en {41f48f}$%s",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									WEAPON_INFO[ PLAYER_WEAPONS[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA] ][player_weapon_ID] ][weapon_info_NAME],
									number_format_thousand(PLAYER_WEAPONS[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA] ][player_weapon_AMMO]),
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, " ", dialog, "Aceptar", "Rechazar");
			return 1;
		}
		case DIALOG_TRICKS_SU:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "{00FF00}%s {FFFFFF}te ofrece {00FF00}%d koins{FFFFFF} en {41f48f}$%s",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, " ", dialog, "Aceptar", "Rechazar");
			return 1;
		}
		case DIALOG_TRICKS_WOOD:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "{00FF00}%s {FFFFFF}te ofrece {00FF00}%d pieza(s) de madera{FFFFFF} en {41f48f}$%s",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, " ", dialog, "Aceptar", "Rechazar");
			return 1;
		}
		case DIALOG_TRICKS_IRON:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "{00FF00}%s {FFFFFF}te ofrece {00FF00}%d pieza(s) de arma{FFFFFF} en {41f48f}$%s",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, " ", dialog, "Aceptar", "Rechazar");
			return 1;
		}
		case DIALOG_VEHICLE_BOOT:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new max_slots = VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][gb_vehicle_MODELID] - 400][vehicle_info_BOOT_SLOTS];
			if(max_slots > MAX_BOOT_SLOTS) max_slots = MAX_BOOT_SLOTS;

			new dialog[128 * (MAX_BOOT_SLOTS + 2)], line_str[128], listitem;
			format(dialog, sizeof dialog, "{FFFF00}Arma\t{FFFF00}Munición\t{FFFF00}Slot\n");

			for(new i = 0; i != max_slots; i ++)
			{
				if(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_VALID])
				{
					switch(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_TYPE])
					{
						case BOOT_TYPE_WEAPON:
						{
							format(line_str, sizeof line_str, "%s\t%s\t%d\n", WEAPON_INFO[ VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_INT] ][weapon_info_NAME], number_format_thousand(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_INT_EXTRA]), i);
							strcat(dialog, line_str);
							PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
						}
					}

					listitem ++;
				}
			}

			new caption[64];
			format(caption, sizeof caption, "{00FF00}MALETERO - %s (%d espacios disponibles)", VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][gb_vehicle_MODELID] - 400][vehicle_info_NAME], max_slots - listitem);

			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_BOOT_SLOTS + 20;
			strcat(dialog, "{FF0000}- Eliminar todo\n"); listitem ++;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Seleccionar", "Salir");
		}
		case DIALOG_VEHICLE_BOOT_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}MALETERO - Eliminar todo", "{FFFFFF}¿Seguro que quieres eliminar estas armas?", "Eliminar", "Cancelar");
		case DIALOG_VEHICLE_BOOT_OPTIONS:
		{
			new caption[45];
			format(caption, sizeof caption, "{00FF00}MALETERO - %s", WEAPON_INFO[ VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ][weapon_info_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "{FFFFFF}Sacar\nEliminar", "Hacer", "Atrás");
			return 1;
		}
		case DIALOG_VEHICLE_BOOT_DELETE:
		{
			new dialog[190];
			format(dialog, sizeof dialog, "{FFFFFF}Arma: {00FF00}%s\n{FFFFFF}Munición: {00FF00}%s\n{FFFFFF}¿Estás seguro de que deseas eliminar ésta arma?.", WEAPON_INFO[ VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ][weapon_info_NAME], number_format_thousand( VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT_EXTRA] ));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}MALETERO - Eliminar", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_SELECT_POLICE_SKIN:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[60 * sizeof(POLICE_SKINS)], line_str[60], listitem;
			format(dialog, sizeof dialog, "{FFFF00}Ropa\t{FFFF00}Rango necesario\n");
			for(new i = 0; i != sizeof POLICE_SKINS; i ++)
			{
				if(POLICE_SKINS[i][police_skin_TYPE] != CHARACTER_INFO[playerid][ch_SEX]) continue;

				if(POLICE_SKINS[i][police_skin_RANK] > PLAYER_SKILLS[playerid][WORK_POLICE]) format(line_str, sizeof line_str, "{666666}%d\t{666666}%s\n", POLICE_SKINS[i][police_skin_SKIN], POLICE_RANKS[ POLICE_SKINS[i][police_skin_RANK] ]);
				else format(line_str, sizeof line_str, "{FFFFFF}%d\t{FFFFFF}%s\n", POLICE_SKINS[i][police_skin_SKIN], POLICE_RANKS[ POLICE_SKINS[i][police_skin_RANK] ]);
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}SAPD", dialog, "Siguiente", "Salir");
			return 1;
		}
		case DIALOG_POLICE_RADIOS:
		{
			new dialog[45 * 6], line_str[45];
			for(new i = 0; i != 6; i ++)
			{
				new players = CountPoliceRadioPlayers(i);

				if(PLAYER_TEMP[playerid][pt_POLICE_RADIO] == i) format(line_str, sizeof line_str, "{FFFFFF}Frecuencia %d: %d personas\n", i + 1, players);
				else format(line_str, sizeof line_str, "{666666}Frecuencia %d: %d personas\n", i, players);

				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona la frecuencia", dialog, "Siguiente", "Salir");
			return 1;
		}
		case DIALOG_POLICE_LIST:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[128 * 15], listitem, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
			format(dialog, sizeof dialog, "{FFFFFF}Nombre\t{FFFFFF}Rango\t{FFFFFF}Últ. conexión\n");

			new DBResult:Result, DB_Query[600];
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`ID`, `CUENTA`.`NAME`, `CUENTA`.`LAST_CONNECTION`, `CUENTA`.`CONNECTED`, `PLAYER_SKILLS`.`TOTAL` FROM `CUENTA`, `PLAYER_SKILLS`, `PLAYER_WORKS` WHERE `PLAYER_SKILLS`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_SKILLS`.`ID_WORK` = '%d' AND `PLAYER_WORKS`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_WORKS`.`ID_WORK` = '%d' AND `PLAYER_WORKS`.`SET` = '1' ORDER BY `CUENTA`.`CONNECTED` DESC, `PLAYER_SKILLS`.`TOTAL` DESC LIMIT %d, %d;", WORK_POLICE, WORK_POLICE, PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);

			for(new i; i < db_num_rows(Result); i++ )
			{
				new name[24], last_connection[24], connected, rank;

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = db_get_field_assoc_int(Result, "ID");
				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "LAST_CONNECTION", last_connection, 24);
				connected = db_get_field_assoc_int(Result, "CONNECTED");
				rank = db_get_field_assoc_int(Result, "TOTAL");

				new line_str[128];
				if(connected) format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFFFF}%s\t{98f442}Conectado\n", start_pos + listitem, name, POLICE_RANKS[rank]);
				else format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFFFF}%s\t{FFFFFF}%s\n", start_pos + listitem, name, POLICE_RANKS[rank], last_connection);

				strcat(dialog, line_str);
				listitem ++;

				db_next_row(Result);
			}
			db_free_result(Result);

			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -2;
			strcat(dialog, "{c9c9c9}- Siguiente\n"); listitem ++;

			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -3;
			strcat(dialog, "{c9c9c9}- Anterior\n"); listitem ++;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}SAPD", dialog, "Siguiente", "Salir");
			return 1;
		}
		case DIALOG_POLICE_MODIFY:
		{
			new DBResult:Result, DB_Query[256], name[24], current_rank, bool:found;
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `PLAYER_SKILLS`.`TOTAL` FROM `CUENTA`, `PLAYER_SKILLS` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_SKILLS`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_SKILLS`.`ID_WORK` = '%d';", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID], WORK_POLICE);
			Result = db_query(Database, DB_Query);

			if(db_num_rows(Result))
			{
				db_get_field_assoc(Result, "NAME", name, 24);
				current_rank = db_get_field_assoc_int(Result, "TOTAL");
				found = true;
			}
			else found = false;
			db_free_result(Result);

			if(!found) return 1;
			if(current_rank > PLAYER_SKILLS[playerid][WORK_POLICE])
			{
				SendClientMessage(playerid, -1, "{FFFFFF}No puedes modificar el rango de este policía porque es un rango superior al tuyo.");
				return 1;
			}

			new caption[45];
			format(caption, sizeof caption, "Policía - %s", name);

			new dialog[45 * sizeof(POLICE_RANKS)], line_str[45];
			format(dialog, sizeof dialog, "{FFFFFF}Civil (eliminar)\n");

			for(new i = 1; i != sizeof POLICE_RANKS; i ++)
			{
				if(i > PLAYER_SKILLS[playerid][WORK_POLICE])
				{
					if(current_rank == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", POLICE_RANKS[i]);
					else format(line_str, sizeof line_str, "{666666}%s\n", POLICE_RANKS[i]);
				}
				else
				{
					if(current_rank == i) format(line_str, sizeof line_str, "{FFFFFF}%s (actual)\n", POLICE_RANKS[i]);
					else format(line_str, sizeof line_str, "{FFFFFF}%s\n", POLICE_RANKS[i]);
				}
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_POLICE_SHOP:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{00FF00}SAPD", "Armas\nRecargar munición\nChaleco antibalas", "Comprar", "Salir");
			return 1;
		}
		case DIALOG_POLICE_SELECT_WEAPON:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[95 * 15], line_str[95], listitem;
			format(dialog, sizeof dialog, "{FFFF00}Arma\t{FFFF00}Munición\t{FFFF00}Slot\n");

			for(new i; i != 13; i ++)
			{
				if(!PLAYER_WEAPONS[playerid][i][player_weapon_VALID]) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%s\t%s\t{FFFFFF}%d\n", WEAPON_INFO[ PLAYER_WEAPONS[playerid][i][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][i][player_weapon_AMMO]), i);
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			if(listitem == 0) strcat(dialog, "{666666}Sin armas");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}SAPD - Recargar munición", dialog, "Siguiente", "Salir");
			return 1;
		}
		case DIALOG_POLICE_AMMO:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00FF00}SAPD - Recargar munición", "{FFFFFF}Las balas cuestan $1 {FFFFFF}cada una. Coloque la cantidad de balas que comprará.", "Siguiente", "Salir");
			return 1;
		}
		case DIALOG_POLICE_ARMOUR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}SAPD - Chaleco antibalas", "{FFFFFF}El chaleco antibalas es gratis para todos los policias.", "Colocarse", "Salir");
			return 1;
		}
		case DIALOG_POLICE_WEAPONS:
		{
			new dialog[64 * (sizeof(POLICE_SHOP_WEAPONS) + 2)];
			format(dialog, sizeof dialog, "{FFFF00}Arma\t{FFFF00}Precio\n");

			for(new i = 0; i != sizeof POLICE_SHOP_WEAPONS; i ++)
			{
				new line_str[64];
				if(POLICE_SHOP_WEAPONS[i][police_shop_RANK] > PLAYER_SKILLS[playerid][WORK_POLICE])
				{
					format(line_str, sizeof line_str, "{666666}%s\t{666666}$%s\n", WEAPON_INFO[ POLICE_SHOP_WEAPONS[i][police_shop_WEAPON_ID] ][weapon_info_NAME], number_format_thousand(POLICE_SHOP_WEAPONS[i][police_shop_WEAPON_PRICE]));
					strcat(dialog, line_str);
				}
				else
				{
					format(line_str, sizeof line_str, "{FFFFFF}%s\t{FFFFFF}$%s\n", WEAPON_INFO[ POLICE_SHOP_WEAPONS[i][police_shop_WEAPON_ID] ][weapon_info_NAME], number_format_thousand(POLICE_SHOP_WEAPONS[i][police_shop_WEAPON_PRICE]));
					strcat(dialog, line_str);
				}
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}SAPD - Comprar arma", dialog, "Comprar", "Salir");
			return 1;
		}
		case DIALOG_ADMIN_CMDS:
		{
		 	ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{00FF00}ITZN - Administración", "{FFFFFF} Ayudante\n Moderador\n Administrador", "Ver", "Cerrar");
			return 1;
		}
		case DIALOG_HELP_WORKS:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""DEFAULT_DIALOG_CAPTION" - Trabajos",

				"\
					{FFFFFF} Taxista\n\
					{FFFFFF} Camionero\n\
					{FFFFFF} Mecánico\n\
					{FFFFFF} Cosechador\n\
					{FFFFFF} Piloto\n\
					{FFFFFF} Basurero\n\
					{FFFFFF} Leñador\n\
					{FFFFFF} Policia\n\
					{FFFFFF} Chofer de ruta\n\
					{FFFFFF} Médico\n\
					{FFFFFF} Armero\n\
				"

			, "Siguiente", "Salir");
			return 1;
		}
		case DIALOG_ANNOUNCES:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, ""DEFAULT_DIALOG_CAPTION" - Anuncios",

				"\
					{FFFFFF} Vendo medicamentos\t{41f48f}$30\n\
					{FFFFFF} Vendo crack\t{41f48f}$30\n\
					{FFFFFF} Vendo piezas de arma\t{41f48f}$30\n\
					{FFFFFF} Vendo piezas de madera\t{41f48f}$30\n\
					{FFFFFF} Vendo banda\t{41f48f}$50\n\
					{FFFFFF} Vendo propiedad\t{41f48f}$50\n\
					{FFFFFF} Vendo armas\t{41f48f}$100\n\
					{FFFFFF} Vendo koins\t{41f48f}$50\n\
					{FFFFFF} Vendo auto\t{41f48f}$15\n\
					{FFFFFF} Vendo moto\t{41f48f}$15\n\
					{FFFFFF} Compro arma\t{41f48f}$80\n\
					{FFFFFF} Compro vehículo usado\t{41f48f}$30\n\
					{FFFFFF} Compro medicamento\t{41f48f}$30\n\
					{FFFFFF} Compro crack\t{41f48f}$30\n\
					{FFFFFF} Compro piezas de arma\t{41f48f}$30\n\
					{FFFFFF} Compro piezas de madera\t{41f48f}$30\n\
					{FFFFFF} Compro koins\t{41f48f}$50\n\
					{FFFFFF} Compro banda\t{41f48f}$50\n\
					{FFFFFF} Compro propiedad\t{41f48f}$50\n\
					{FFFFFF} Busco compañero basurero\t{41f48f}$10\n\
					{FFFFFF} Busco armero\t{41f48f}$70\n\
					{FFFFFF} Busco mecánico\t{41f48f}$20\n\
					{FFFFFF} Busco taxista\t{41f48f}$20\n\
					{FFFFFF} Busco médico\t{41f48f}$20\n\
					{FFFFFF} Busco banda\t{41f48f}$20\n\
					{FFFFFF} Busco miembros para banda\t{41f48f}$50\n\
				"

			, "Anunciar", "Salir");
			return 1;
		}
		case DIALOG_HELP:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""DEFAULT_DIALOG_CAPTION" - Ayuda",

				"\
					{FFFFFF} Servidor\n\
					{FFFFFF} Usuario\n\
					{FFFFFF} Propiedades\n\
					{FFFFFF} Trabajos\n\
					{FFFFFF} Vehículos\n\
					{FFFFFF} Bandas\n\
					{f4d942} Premium\n\
					{FFFFFF} Créditos\n\
					{f44242} koins\n\
					{FFFFFF} Conceptos\n\
				"

			, "Siguiente", "Salir");
			return 1;
		}
		case DIALOG_HELP_GENERAL:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Servidor",

				"\
					{FFFFFF}- Un día en ITZN equivaldrán a {00FF00}3 horas reales{FFFFFF}.\n\
					{FFFFFF}- Si tienes un iPhone, puedes usar {FFFF00}/hora{FFFFFF} para verla.\n\
					{FFFFFF}- Su experiencia estará marcada en la barra verde, ubicada en el inferior de la pantalla.\n\
					{FFFFFF}- Si llena su barra de experiencia, podrá subir de nivel con {FFFF00}/comprar nivel.\n\
					{FFFFFF}- Cada {00FF00}1 hora real{FFFFFF}, recibirá su {00FF00}Payday(PD) en el juego.\n\
					{FFFFFF}- Siendo {00FF00}nivel 1{FFFFFF} no podrá usar armas ni golpear hasta {00FF00}nivel 2.\n\
					\n\
                    {FFFFFF}COMANDOS BÁSICOS:\n\
					{00FF00} /d [texto]{FFFFFF}- Envía una duda.\n\
                    {FFFFFF}    - También puede usar estos comandos {00FF00}/duda | /dudas | /n\n\
					{00FF00} /pass {FFFFFF}- Cambia la contraseña de tú cuenta.\n\
                    {00FF00} /tiempo {FFFFFF}- Muestra tiempo restante en la cárcel.\n\
                    {00FF00} /me [texto] {FFFFFF}- Expresa una acción.\n\
                    {FFFFFF}    - También puede usar estos comandos {00FF00}/y\n\
                    {00FF00} /do [texto] {FFFFFF}- Expresa acción contestando ¿Qué está pasando?.\n\
                    {00FF00} /b [texto] {FFFFFF}- Canal OOC.\n\
                    {00FF00} /s [texto] {FFFFFF}- Susurrar.\n\
                    {00FF00} /g [texto] {FFFFFF}- Gritar.\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_HELP_INFO:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Créditos",

				"\
					{00FF00} Superlandia Roleplay (c) 2019 "SERVER_VERSION"\n\n\
					{00FF00} Desarrollo\n\
					{FFFFFF}	Mister\n\n\
					{00FF00} Mapeo\n\
					{FFFFFF}	Bill\n\n\
					{00FF00} Beta testing\n\
					{FFFFFF}	Sarp_Yilmaz\n\
					{FFFFFF}	Sebaku\n\
					{FFFFFF}	Joshua\n\
					{FFFFFF}	Nico\n\n\
					{00FF00} Agradecimientos\n\
					{FFFFFF}	Adri1\n\n\
					{00FF00} Información\n\
					{FFFFFF}	Rediseñado por Superlandia Team.\n\
					{FFFFFF}	Basado en 'Super Roleplay 1.15'.\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_HELP_SD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - koins",

				"\
					{FFFFFF}- Los {f44242}koins{FFFFFF} son la moneda virtual del servidor.\n\
					{FFFFFF}- Funcionan para adquirir objetos, bienes o una membresía {f4d942}premium{FFFFFF}.\n\
					{FFFFFF}- Para conseguir {f44242}koins{FFFFFF} se tienen que comprar, aquí te indicamos cómo.\n\n\
					{00FF00} INTERNACIONAL\n\
					{f44242}3 koins {FFFFFF}= $1 USD.\n\
					{FFFFFF}Transacción: {00FF00}PayPal{FFFFFF} | Duración: {00FF00}Inmediato\n\
					{FFFFFF}Método:\n\
							1) Ingresa a {00CCFF}paypal.me/superlandia{FFFFFF} y coloca la cantidad de dinero que vas a recargar.\n\
							2) En concepto de pago coloca tu nick.\n\
							3) Disfruta de tus {f44242}koins{FFFFFF}.\n\n\
					{00FF00} CHILE\n\
					{f44242}3 koins {FFFFFF}= $700 CLP\n\
					{FFFFFF}Transacción: {00FF00}Cuenta RUT{FFFFFF} | Duración: {00FF00}Menos de 3hrs\n\
					{FFFFFF}Método:\n\
							1) Ingresa a {00CCFF}m.me/superlandiasamp{FFFFFF} y escribe la cantidad de dinero en peso chileno, que vas a recargar.\n\
							2) Envía una foto del comprobante de tu pago.\n\
							3) Disfruta de tus {f44242}koins{FFFFFF}.\n\n\
					{00FF00} MÉXICO\n\
					{f44242}3 koins {FFFFFF}= $20 MXN\n\
					{FFFFFF}Transacción: {00FF00}OXXO{FFFFFF} | Duración: {00FF00}Inmediato\n\
					{FFFFFF}Método:\n\
							1) Ingresa a {00CCFF}m.me/superlandiasamp{FFFFFF} y escribe la cantidad de dinero en peso mexicano, que vas a recargar.\n\
							2) Envía una foto del comprobante de tu pago.\n\
							3) Disfruta de tus {f44242}koins{FFFFFF}.\n\n\
					{00FF00} ARGENTINA\n\
					{f44242}3 koins {FFFFFF}= $40 ARS\n\
					{FFFFFF}Transacción: {00FF00}Rapipago, pagofacil{FFFFFF} | Duración: {00FF00}Menos de 3hrs\n\
					{FFFFFF}Método:\n\
							1) Ingresa a {00CCFF}m.me/superlandiasamp{FFFFFF} y escribe la cantidad de dinero en peso argentino, que vas a recargar.\n\
							2) Envía una foto del comprobante de tu pago.\n\n\
					{FFFFFF}- Si no puedes comprar {f44242}koins{FFFFFF}, descuida, hay eventos donde se sortean (1 a la semana).\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_HELP_CONCEPTOS:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Conceptos",

				"\
					{FFFFFF}- Aquí te explicaremos algunos conceptos básicos para que no te digan novato.\n\
					{FFFFFF}- Estos conceptos aplican en éste servidor, cualquier otro concepto no es válido aquí.\n\
					{FFFF00} IC (InCharacter) / IG (In Game): {FFFFFF}Significa dentro del rol de tu personaje.\n\
					{FFFF00} OOC / Out Of Character: {FFFFFF}Significa fuera del rol de tu personaje.\n\
					{FF0000} PG / PowerGaming: {FFFFFF}Hacer cosas que en la vida real no harías.\n\
					{FFFF00} MG / MetaGaming: {FFFFFF}Hablar cosas que no tienen que ver con el rol de tu personaje.\n\
					{FF0000} DM / DeathMatch ó ASR: {FFFFFF}Matar sin razón.\n\
					{FF0000} CK / CarKill: {FFFFFF}Matar con un vehículo arriba de otra persona.\n\
					{FF0000} MUD / Mal Uso Dudas: {FFFFFF}Escribir cosas que no tienen que ver con el servidor en /dudas.\n\
					{00CCFF} CJ / Car Jacked: {FFFFFF}Robar un auto sin rol.\n\
					{FFFFFF}- Los conceptos {FF0000}color rojo son reglas{FFFFFF}, si las incumples podrías ser sancionado.\n\
					{FFFFFF}- Los conceptos {00CCFF}color azul son reglas{FFFFFF}, si las incumples un policía podrá multarte o arrestarte.\n\
					{FFFFFF}- Los conceptos {FFFF00}color amarillo{FFFFFF} son informativos y básicos de todo servidor de rol.\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_HELP_CHARACTER:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Usuario",

				"\
					{FFFFFF}- El {FFFF00}/GPS {FFFFFF}te ayudará a encontrar sitios populares, propiedades, autos y trabajos.\n\
					{FFFFFF}- Use su {FFFF00}/GPS{FFFFFF} cuando éste arriba de un taxi para marcarle una ruta al taxista.\n\
					{FFFFFF}- Cuando tengas hambre, la barra amarilla debajo del minimapa, empezará a vaciarse\n\
					{FFFFFF}- Cuando tengas sed, la barra rosa debajo del minimapa, empezará a vaciarse.\n\
					{FFFFFF}- Si no bebes o comes, podrías desmayarte, si te desmayas puedes esperar un médico o {FFFF00}/desmayarse\n\
					{FFFFFF}- Puedes aprender a golpear yendo a cualquier gimnasio y usar {FFFF00}/aprender [estilo].\n\
					\n\
					{FFFFFF}COMANDOS GENÉRICOS:\n\
					{00FF00} /inventario {FFFFFF}- Miras tu inventario\n\
					{FFFFFF}	- También puedes usar estos comandos {00FF00}/inv\n\
					{00FF00} /habilidades {FFFFFF}- Miras tus habilidades en los trabajos\n\
					{FFFFFF}	- También puedes usar estos comandos {00FF00}/hab | /exp\n\
					{00FF00} /experencia {FFFFFF}- Miras tu experiencia\n\
					{FFFFFF}	- También puedes usar estos comandos {00FF00}/exp\n\
					{00FF00} /stats {FFFFFF}- Miras tu estadísticas\n\
					{FFFFFF}	- También puedes usar estos comandos {00FF00}/est | /estadisticas\n\
					{FFFFFF}COMANDOS IPHONE:\n\
					{00FF00} /iphone {FFFFFF}- Miras tu iPhone\n\
					{FFFFFF}	- También puedes usar estos comandos {00FF00}/teléfono | /celular | /móvil | /i\n\
					{00FF00} /llamar [número o nombre agendado]{FFFFFF}- Marcas por teléfono.\n\
					{00FF00} /agenda {FFFFFF}- Agenda teléfonica\n\
					{00FF00} /guia [nick] {FFFFFF}- Conoce el número tel.\n\
					{00FF00} /w [Número o nombre] [mensaje]{FFFFFF}- Envía un whatsapp\n\
					{FFFFFF}	- También puedes usar estos comandos {00FF00}/whatsapp | /wsp | /whats\n\
					{00FF00} /wa [Número o nombre] [mensaje]{FFFFFF}- Envía un whatsapp audio\n\
					{FFFFFF}	- También puedes usar estos comandos {00FF00}/audio\n\
					{00FF00} /tienda {FFFFFF}- Mercado online.\n\
					{FFFFFF}COMANDOS DE ROL:\n\
					{00FF00} /alimentos {FFFFFF}- Observas tus alimentos.\n\
					{00FF00} /objetos {FFFFFF}- Observas tus objetos.\n\
					{00FF00} /armas {FFFFFF}- Observas tus armas.\n\
					{00FF00} /consumir {FFFFFF}- Lista de lo que puedes consumir.\n\
					{00FF00} /dar {FFFFFF}- Lista de lo que puedes dar.\n\
					{00FF00} /tirar {FFFFFF}- Lista de lo que puedes tirar.\n\
					{00FF00} /vender {FFFFFF}- Lista de lo que puedas vender.\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_HELP_PROPERTIES:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Propiedades",

				"\
					{FFFFFF}- Si quieres {00FF00}comprar{FFFFFF} una propiedad, tendrás que adquirirla en el {00FF00}Gobierno.\n\
					{FFFFFF}- Para comprar una propiedad, deberás saber la {00FF00}#dirección{FFFFFF}, ya que se te pedirá.\n\
					{FFFFFF}- Hay 3 tipos de propiedades, pero por el momento sólo 2 están activos.\n\
					{FFFFFF}- Si eres un usuario VIP, no pagarás impuestos.\n\
					{FFFFFF}- Para localizar tu propiedad usa tu {FFFF00}/iPhone{FFFFFF} y presiona el icono de la casa.\n\n\
					{00FF00}> CASAS.\n\
     				{FFFFFF}- Puedes asignar una casa a una banda y escuchar música.\n\n\
     				{00FF00}> NEGOCIOS.\n\
     				{FFFFFF}- Podrás asignar el negocio a una banda, y escuchar música.\n\
     				{FFFFFF}- Los negocios tienen ganancias o perdidas bases, y estás las recibes en tus Paydays.\n\
     				{FFFFFF}- Pero también tienes una ganancia extra, que depende de la cantidad de usuarios en el servidor.\n\
     				{FFFFFF}- Si hay más usuarios en el servidor, tus ganancias pueden aspirar hasta más de $40.000.\n\
     				{FFFFFF}- Incluso podrás ganar koins si el servidor tiene demasiados usuarios.\n\
     				{FFFFFF}- Los negocios siempre están abiertos, pero podrás {FFFF00}/echar{FFFFFF} a una persona.\n\
					\n\
					{FFFFFF}- COMANDOS:\n\
					{00FF00} /echar {FFFFFF}- Para expulsar a alguien de tu casa.\n\
					{00FF00} /propiedad {FFFFFF}- Configuración de tu propiedad.\n\
					{00FF00} /puerta {FFFFFF}- Abre a un invitado que toque la puerta.\n\
					{00FF00} /tienda {FFFFFF}- Puedes añadir un anuncio de la venta de tu casa.\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_HELP_VEHICLES:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Vehículos",

				"\
					{FFFFFF}- Si tu vehículo se estropea usa {FFFF00}/llamar mecanico.\n\
					{FFFFFF}- Si tú auto de se destruye o cae al agua, te darán otro en tú último estacionamiento.\n\
					{FFFFFF}- Si perdiste tu vehículo, usa {FFFF00}/iphone{FFFFFF} y búsca la app del auto, y presionala.\n\
					{FFFFFF}- Si quieres vender tu auto, busca el módulo en el {00FF00}Gobierno de San Andreas.\n\
					{FFFFFF}- Puedes vender el vehículo a otra persona, personalmente o usando {FFFF00}/tienda.\n\
					\n\
					{FFFFFF}- COMANDOS:\n\
					{FFFFFF} Pulsa la tecla {00CCFF}N {FFFFFF}para encender un vehículo o apagarlo.\n\
					{FFFFFF} Pulsa la tecla {00CCFF}Y {FFFFFF}para abrir o cerrar tú vehículo.\n\
					{00FF00} /abrir\n\
					{00FF00} /cerrar\n\
					{00FF00} /abrir maletero {FFFFFF}- Abre el maletero.\n\
					{00FF00} /cerrar maletero {FFFFFF}- Cierra el maletero.\n\
					{00FF00} /maletero ver {FFFFFF}- Mira lo que hay dentro.\n\
					{00FF00} /emisoras\n\
					{00FF00} /luces\n\
					{00FF00} /ventanas\n\
					{00FF00} /vertir {FFFFFF}- Colocas gasolina desde tu bidón.\n\
					{00FF00} /estacionar\n\
					{00FF00} /localizar\n\
					{00FF00} /echar [id] {FFFFFF}- Sacas a alguien del vehículo.\n\
					{00FF00} /guardar arma{FFFFFF}- Guarda un arma.\n\
					{00FF00} /sacar arma{FFFFFF}- Saca un arma.\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_HELP_CREWS:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Bandas",

				"\
					{FFFFFF}- Podrás ganar dinero si conquistas zonas por el mapa.\n\
					\n\
					{FFFFFF}- COMANDOS:\n\
					{00FF00} /banda {FFFFFF}- Más información.\n\
					{00FF00} /conquistar {FFFFFF}- Te haces de un territorio (+1 persona en la zona).\n\
				"

			, "Salir", "");
			return 1;
		}
		case DIALOG_ADMIN_AYUDANTE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Ayudante",

				"\
					{FFFFFF}- Los ayudantes sólo podrán resolver problemas del jugador de manera posible.\n\
					{FFFFFF}- Podrán hablar sin límites ni advertencias en el canal de /dudas.\n\
					{FFFFFF}- Tendrán acceso a la información de todos los usuarios.\n\
					{00FF00}# {FFFFFF}- Canal Admin.\n\
					{00FF00} /getid [nombre/id] {FFFFFF}- Consulta datos de un usuario.\n\
					{00FF00} /getname [id] {FFFFFF}- Consulta datos de un usuario.\n\
					{00FF00} /aka [id] {FFFFFF}- Consulta sobrenombres del usuario.\n\
					{00FF00} /staff {FFFFFF}- Lista del STAFF.\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_ADMIN_MOD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Moderador",

				"\
					{FFFFFF}- Los moderadores pueden sancionar pero no banear.\n\
					{FFFFFF}- Podrán supervisar y moderar al jugador.\n\
					{00FF00} /tempban [id] [minutos] [razón]\n\
					{00FF00} /warn [id] [razón]\n\
					{00FF00} /cc {FFFFFF}- Limpiar chat.\n\
					{00FF00} /unjail [id]\n\
					{00FF00} /mute [id] {FFFFFF}- Silencias del canal de dudas.\n\
					{00FF00} /unmute [id]\n\
					{00FF00} /spec {FFFFFF}-{00FF00} /specoff\n\
					{00FF00} /freeze {FFFFFF}-{00FF00} /unfreeze\n\
					{00FF00} /specinv [id]\n\
					{00FF00} /specexp [id]\n\
					{00FF00} /specest [id]\n\
					{00FF00} /specbank [id]\n\
					{00FF00} /goto [id]\n\
					{00FF00} /get [id]\n\
					{00FF00} /rv {FFFFFF}- Respawnea un vehículo.\n\
					{00FF00} /sethambre [id][1 - 100]\n\
					{00FF00} /setsed [id][1 - 100]\n\
					{00FF00} /sethealth [id][vida]\n\
					{00FF00} /setarmour [id][armadura]\n\
					\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_ADMIN_ADMINISTRADOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Administrador",

				"\
					{FFFFFF}- Podrá editar elementos y variables del servidor.\n\
					{FFFFFF}- Tendrá total acceso y poder sobre un usuario siempre y cuando sin llegar al abuso.\n\
					{00FF00} /revivir [jugador]\n\
					{00FF00} /sethora [hora] [minuto]\n\
					{00FF00} /setlluvia [weatherid]\n\
					{00FF00} /rve {FFFFFF}- Respawnear Vehículos Especiales\n\
					{00FF00} /rvs {FFFFFF}- Respawnear Vehículos del Servidor\n\
					{00FF00} /ban [id] [razón]\n\
					{00FF00} /tban [id] [días] [razón]\n\
					{00FF00} /dban [Número de jugador en DB] [razón]\n\
					{00FF00} /dtban [Número de jugador en DB] [días] [razón]\n\
					{00FF00} /barticulo [Número de artículo en {FFFFFF}/tienda{00FF00}]\n\
					\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_WORKS_TAXI:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Trabajos > Taxista",

				"\
				    {00FF00}Nivel necesario: {FFFFFF}1\n\
				    {00FF00}Sueldo: {FFFFFF}$20 a $200 por metro\n\
				    {00FF00}Banco: {FFFFFF}No necesita cuenta bancaria\n\
				    {00FF00}Ubicación: {FFFFFF}/gps > Trabajos > Taxista\n\n\
					{FFFFFF}- Sólo sube a un taxi y empieza a laborar, configure su {00FF00}tarifa{FFFFFF}.\n\
					{FFFFFF}- Si tiene un Taxi propio podrá trabajarlo, pero tendrá que ser taxista.\n\
					{FFFFFF}- El taximetro cobrará al cliente {00FF00}dinero por kilometro.\n\
					{FFFFFF}- Los clientes se marcarán de color amarillo en el {FFFF00}/mapa.\n\n\
					{00FF00} /tarifa [dinero por kilometro]\n\
					{00FF00} /taximetro {FFFFFF}- Activa el taximetro en un Taxi propio.\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_WORKS_CAMIONERO:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Trabajos > Camionero",

				"\
				    {00FF00}Nivel necesario: {FFFFFF}1\n\
				    {00FF00}Salario: {FFFFFF}$1.000 a $9.000\n\
				    {00FF00}Banco: {FFFFFF}Necesita una cuenta bancaria para cobrar\n\
				    {00FF00}Ubicación: {FFFFFF}/gps > Trabajos > Camioneros\n\n\
					{FFFFFF}- Sólo suba a un camión, cárguelo en la bodega y entregue la mercancia.\n\
					{FFFFFF}- Podrá conseguir recompensas extras dependiendo el tipo de carga.\n\n\
					{00FF00} /cargar {FFFFFF}- Cerca de la bodega.\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_WORKS_MECANICO:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Trabajos > Mecánico",

				"\
				    {00FF00}Nivel necesario: {FFFFFF}1\n\
				    {00FF00}Sueldo: {FFFFFF}No definido\n\
				    {00FF00}Banco: {FFFFFF}No necesita cuenta bancaria\n\
				    {00FF00}Ubicación: {FFFFFF}/gps > Trabajos > Mecánico\n\n\
					{FFFFFF}- Tendrá que tener la vestimenta de {FFFF00}/mecanico{FFFFFF} para poder laborar.\n\
					{FFFFFF}- Para pintar el vehículo necesitará una {00FF00}máquina para pintar.\n\
					{FFFFFF}- Para tunear un vehículo necesitará una {00FF00}llave de mecánico.\n\
					{FFFFFF}- La llave y la máquina se compran en {00FF00}ferreterías{FFFFFF}, use {FFFF00}/gps > Ferreterías.\n\n\
					{00FF00} /v {FFFFFF}- Menú del mecánico.\n\
					{00FF00} /repuestos [cantidad] {FFFFFF}- Compra de piezas de vehículo.\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_WORKS_COSECHADOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Trabajos > Cosechador",

				"\
				    {00FF00}Nivel necesario: {FFFFFF}1\n\
				    {00FF00}Sueldo: {FFFFFF}No definido\n\
        			{00FF00}Banco: {FFFFFF}No necesita cuenta bancaria\n\
				    {00FF00}Ubicación: {FFFFFF}/gps > Trabajos > Cosechador\n\n\
					{FFFFFF}- Compra semillas y coséchalas en el área de cosechado.\n\
					{FFFFFF}- El área para cosechar está marcada en el minimapa con una bandera roja.\n\
					{FFFFFF}- Necesitas tener un {00FF00}cuchillo{FFFFFF} para poder plantar, pide a un armero que te venda uno.\n\
					{FFFFFF}- Entre más experiencia en cosecha tengas, podrás cosechar semillas diferentes.\n\n\
					{00FF00} /plantar {FFFFFF}- Menú para empezar a cosechar.\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_WORKS_FUMIGADOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Trabajos > Piloto",

				"\
				    {00FF00}Nivel necesario: {FFFFFF}7\n\
				    {00FF00}Salario: {FFFFFF}$4.500 + extras\n\
				    {00FF00}Banco: {FFFFFF}Necesita una cuenta bancaria para cobrar\n\
				    {00FF00}Ubicación: {FFFFFF}/gps > Trabajos > Piloto\n\n\
					{FFFFFF}- Necesitará estar vestido de {FFFF00}/piloto{FFFFFF} para subir al avión.\n\
					{FFFFFF}- Necesitará un {00FF00}Shamal{FFFFFF} para realizar el recorrido.\n\
					{FFFFFF}- Podrá utilizar su propio avión, en caso de no tenerlo, podrá rentarlo a un jugador.\n\
					{FFFFFF}- El aeropuerto te dará a veces Champagne al finalizar cada viaje.\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_WORKS_BASURERO:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Trabajos > Basurero",

				"\
				    {00FF00}Nivel necesario: {FFFFFF}1\n\
				    {00FF00}Salario: {FFFFFF}$1.800 + extras\n\
				    {00FF00}Banco: {FFFFFF}Necesita una cuenta bancaria para cobrar\n\
				    {00FF00}Ubicación: {FFFFFF}/gps > Trabajos > Basurero\n\n\
					{FFFFFF}- Necesitará a un {00FF00}compañero de trabajo{FFFFFF} para recolectar la basura o manejar.\n\
					{FFFFFF}- Tendrá que usar un uniforme usando {FFFF00}/basurero\n\
					{FFFFFF}- Después seleccione la ruta y comience el recorrido.\n\
					{FFFFFF}- Entre más experiencia tenga, podrá recoger basura más {00FF00}rápido.\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_WORKS_LENADOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Trabajos > Leñador",

				"\
				    {00FF00}Nivel necesario: {FFFFFF}1\n\
				    {00FF00}Sueldo: {FFFFFF}$15 por árbol\n\
				    {00FF00}Banco: {FFFFFF}No necesita cuenta bancaria\n\
				    {00FF00}Ubicación: {FFFFFF}/gps > Trabajos > Leñador\n\n\
					{FFFFFF}- Dírigase a un árbol para empezar.\n\
					{FFFFFF}- Por cada árbol que tires, te darán 1 pieza de madera.\n\
					{FFFFFF}- La madera te ayudará a crear armas, para leer más ve a {FFFF00}/ayuda trabajos > Armero.\n\
					{FFFFFF}- Entre más experienca tenga, talará más rápido.\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_WORKS_POLICIA:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Trabajos > Policia",

				"\
					{00FF00}Ubicación: {FFFFFF}/gps > Trabajos > Policía\n\
					{00FF00}Banco: {FFFFFF}Necesita una cuenta bancaria para cobrar\n\
					{FFFFFF}- Para estar en servicio, necesitará buscar y ponerse el uniforme con {FFFF00}/policia.\n\
					{FFFFFF}- Personas con cargos, aparecerán en el mapa de {FF0000}rojo fuerte o claro {FFFFFF}según su gravedad.\n\
					{FFFFFF}- El delegado es quién se encargará de promover tu rango una vez dentro.\n\
					{FFFFFF}- Si te expulsan o renuncias a SAPD no podrás volver nunca más.\n\
					{FFFFFF}- Si disparas a una persona que no tiene cargos, bajarás automáticamente de rango.\n\
					{FFFFFF}- Tu paga la recibirás en el Payday y dependerá de tu rango.\n\n\
				    {FFFFFF}Nivel necesario: 7 | Cadete\n\
					{00FF00} /m {FFFFFF}- Megáfono, sólo sirve en el vehículo de policia.\n\
					{00FF00} /ref {FFFFFF}- Pides refuerzos.\n\
					{00FF00} /revisar [id]{FFFFFF}- Revisa las pertenencias del jugador.\n\
					{00FF00} /multar [id] {FFFFFF}- Por multa realizada obtienes +$500 \n\
				    {FFFFFF}Nivel necesario: 8 | Oficial\n\
   					{00FF00} /esposar [id]\n\
					{00FF00} /arrestar [id]\n\
					{00FF00} /entregar {FFFFFF}- Entregas al arrestado, deberás estar en el estacionamiento de la comisaría.\n\
				    {FFFFFF}Nivel necesario: 9 | Cabo\n\
					{00FF00} /quitar [id] {FFFFFF}ó {00FF00}/decomisar [id] {FFFFFF}- Le quitas pertenencias ilegales.\n\
				    {FFFFFF}Nivel necesario: 10 | Sargento\n\
				    {00FF00} /cargos [id][cargos del 1 al 3]\n\
				    {FFFFFF}Nivel necesario: 11 | Comisario\n\
				    {00FF00} /cargos [id][cargos del 3 al 6]\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_WORKS_PIZZERO:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Trabajos > Chofer",

				"\
				    {00FF00}Nivel necesario: {FFFFFF}1\n\
				    {00FF00}Salario: {FFFFFF}$2.000 + extras\n\
					{00FF00}Banco: {FFFFFF}Necesita una cuenta bancaria para cobrar\n\
					{00FF00}Ubicación: {FFFFFF}/gps > Trabajos > Chofer de ruta\n\n\
					{FFFFFF}- En el autobús a veces podrás encontrarte medicamentos y dinero.\n\
					{FFFFFF}- Sólo sube al camión y sigue la ruta, si bajas del camión el trabajo se cancelará.\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_WORKS_MEDICO:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Trabajos > Médico",

				"\
				    {00FF00}Nivel necesario: {FFFFFF}2\n\
				    {00FF00}Sueldo: {FFFFFF}$1.000 por curación\n\
					{00FF00}Banco: {FFFFFF}Necesita una cuenta bancaria para cobrar\n\
				    {00FF00}Ubicación: {FFFFFF}/gps > Trabajos > Médico\n\n\
					{FFFFFF}- Tendrá que usar el uniforme de {FFFF00}/medico{FFFFFF} para laborar.\n\
					{FFFFFF}- Puede {FFFF00}/aprender medicina {FFFFFF}para curar más rápido y cobrar más.\n\
					{FFFFFF}- En el mapa se marcará a las personas que necesiten un médico {00FF00}URGENTE.\n\
					{FFFFFF}- Una vez este con el herido, use {FFFF00}/curar.\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_WORKS_ARMERO:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Trabajos > Armero",

				"\
				    {00FF00}Nivel necesario: {FFFFFF}5\n\
				    {00FF00}Sueldo: {FFFFFF}No definido\n\
				    {00FF00}Banco: {FFFFFF}No necesita cuenta bancaria\n\
				    {00FF00}Ubicación: {FFFFFF}/gps > Trabajos > Armero\n\n\
					{FFFFFF}- Para crear armas necesitarás de piezas de arma y en algunas piezas de madera.\n\
					{FFFFFF}- Las piezas de arma se compran en BlueBerry, búsca la fábrica.\n\
					{FFFFFF}- Las piezas de madera tendrás que ganarlas de Leñador o comprandolas a alguna persona.\n\
					{FFFFFF}- Al crear alguna arma, esta no tendrá ninguna bala.\n\n\
					{00FF00}- /crear cuchillo {FFFFFF}- Piezas: {FFFF00}20 piezas{FFFFFF} | Madera: {d19b59}1 pieza\n\
					{00FF00}- /crear bate {FFFFFF}- Piezas: {FFFF00}5 piezas\n\
					{00FF00}- /crear camara {FFFFFF}- Piezas: {FFFF00}65 piezas{FFFFFF} | Madera: {d19b59}2 pieza\n\
					{00FF00}- /crear 9mm {FFFFFF}- Piezas: {FFFF00}10 piezas\n\
					{00FF00}- /crear 9mm-silenciada {FFFFFF}- Piezas: {FFFF00}15 piezas\n\
					{00FF00}- /crear desert {FFFFFF}- Piezas: {FFFF00}38 piezas{FFFFFF} | Madera: {d19b59}6 piezas\n\
					{00FF00}- /crear uzi {FFFFFF}- Piezas: {FFFF00}30 piezas{FFFFFF} | Madera: {d19b59}2 piezas\n\
					{00FF00}- /crear tec9 {FFFFFF}- Piezas: {FFFF00}35 piezas\n\
					{00FF00}- /crear MP5 {FFFFFF}- Piezas: {FFFF00}45 piezas\n\
					{00FF00}- /crear escopeta {FFFFFF}- Piezas: {FFFF00}35 piezas{FFFFFF} | Madera: {d19b59}25 piezas\n\
					{00FF00}- /crear escopeta-de-combate {FFFFFF}- Piezas: {FFFF00}54 piezas\n\
					{00FF00}- /crear AK-47 {FFFFFF}- Piezas: {FFFF00}75 piezas{FFFFFF} | Madera: {d19b59}28 piezas\n\
					{00FF00}- /crear M4 {FFFFFF}- Piezas: {FFFF00}89 piezas\n\
					{00FF00}- /crear sniper {FFFFFF}- Piezas: {FFFF00}103 piezas{FFFFFF} | Madera: {d19b59}45 piezas\n\
					{00FF00}- /crear rifle {FFFFFF}- Piezas: {FFFF00}85 piezas{FFFFFF} | Madera: {d19b59}58 piezas\n\
				"
			, "Salir", "");
			return 1;
		}
		case DIALOG_SANS_LIST:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[128 * 15], listitem, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
			format(dialog, sizeof dialog, "{FFFFFF}Nombre\t{FFFFFF}Últ. conexión\n");

			new DBResult:Result, DB_Query[400];
			format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME`, `LAST_CONNECTION`, `CONNECTED`, `WARN_STATUS` FROM `CUENTA` WHERE `WARN_STATUS` = 1 ORDER BY `CONNECTED` DESC LIMIT %d, %d;", PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);

			for(new i; i < db_num_rows(Result); i++ )
			{
				new name[24], last_connection[24], connected;

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = db_get_field_assoc_int(Result, "ID");
				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "LAST_CONNECTION", last_connection, 24);
				connected = db_get_field_assoc_int(Result, "CONNECTED");

				new line_str[128];
				if(connected) format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{98f442}Conectado\n", start_pos + listitem, name);
				else format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFFFF}%s\n", start_pos + listitem, name, last_connection);

				strcat(dialog, line_str);
				listitem ++;

				db_next_row(Result);
			}
			db_free_result(Result);

			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -2;
			strcat(dialog, "{c9c9c9}- Siguiente\n"); listitem ++;

			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -3;
			strcat(dialog, "{c9c9c9}- Anterior\n"); listitem ++;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Sancionados", dialog, "Siguiente", "Salir");
			return 1;
		}
		case DIALOG_SANS_MODIFY:
		{
			new DBResult:Result, DB_Query[256], name[24], bool:found;
			format(DB_Query, sizeof DB_Query, "SELECT `NAME`, `WARN_STATUS` FROM `CUENTA` WHERE `ID` = '%d';", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
			Result = db_query(Database, DB_Query);

			if(db_num_rows(Result))
			{
				db_get_field_assoc(Result, "NAME", name, 24);
				found = true;
			}
			else found = false;
			db_free_result(Result);

			if(!found) return 1;

			new caption[45];
			format(caption, sizeof caption, "Sancionado - %s", name);

			new dialog[45], line_str[45];
			format(dialog, sizeof dialog, "{FFFFFF}Quitar sancion\n");
			strcat(dialog, line_str);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_ADMIN_LIST:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[128 * 15], listitem, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
			format(dialog, sizeof dialog, "{FFFFFF}Nombre\t{FFFFFF}Rango\t{FFFFFF}Últ. conexión\n");

			new DBResult:Result, DB_Query[400];
			format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME`, `LAST_CONNECTION`, `CONNECTED`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ADMIN_LEVEL` > 0 ORDER BY `CONNECTED` DESC, `ADMIN_LEVEL` DESC LIMIT %d, %d;", PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);

			for(new i; i < db_num_rows(Result); i++ )
			{
				new name[24], last_connection[24], connected, rank;

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = db_get_field_assoc_int(Result, "ID");
				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "LAST_CONNECTION", last_connection, 24);
				connected = db_get_field_assoc_int(Result, "CONNECTED");
				rank = db_get_field_assoc_int(Result, "ADMIN_LEVEL");

				new line_str[128];
				if(connected) format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFFFF}%s\t{98f442}Conectado\n", start_pos + listitem, name, ADMIN_LEVELS[rank]);
				else format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFFFF}%s\t{FFFFFF}%s\n", start_pos + listitem, name, ADMIN_LEVELS[rank], last_connection);

				strcat(dialog, line_str);
				listitem ++;

				db_next_row(Result);
			}
			db_free_result(Result);

			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -2;
			strcat(dialog, "{c9c9c9}- Siguiente\n"); listitem ++;

			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -3;
			strcat(dialog, "{c9c9c9}- Anterior\n"); listitem ++;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Administradores", dialog, "Siguiente", "Salir");
			return 1;
		}
		case DIALOG_ADMIN_MODIFY:
		{
			new DBResult:Result, DB_Query[256], name[24], current_rank, bool:found;
			format(DB_Query, sizeof DB_Query, "SELECT `NAME`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ID` = '%d';", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
			Result = db_query(Database, DB_Query);

			if(db_num_rows(Result))
			{
				db_get_field_assoc(Result, "NAME", name, 24);
				current_rank = db_get_field_assoc_int(Result, "ADMIN_LEVEL");
				found = true;
			}
			else found = false;
			db_free_result(Result);

			if(!found) return 1;
			if(current_rank > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
			{
				SendClientMessage(playerid, -1, "No puedes modificar el rango de este admin porque es un rango superior al tuyo.");
				return 1;
			}

			new caption[45];
			format(caption, sizeof caption, "Admin - %s", name);

			new dialog[45 * sizeof(ADMIN_LEVELS)], line_str[45];
			format(dialog, sizeof dialog, "{FFFFFF}Normal (eliminar)\n");

			for(new i = 1; i != sizeof ADMIN_LEVELS; i ++)
			{
				if(i > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
				{
					if(current_rank == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", ADMIN_LEVELS[i]);
					else format(line_str, sizeof line_str, "{666666}%s\n", ADMIN_LEVELS[i]);
				}
				else
				{
					if(current_rank == i) format(line_str, sizeof line_str, "{FFFFFF}%s (actual)\n", ADMIN_LEVELS[i]);
					else format(line_str, sizeof line_str, "{FFFFFF}%s\n", ADMIN_LEVELS[i]);
				}
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "Cambiar contraseña", "Introduce tu contraseña actual.", "Siguiente", "Salir");
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD_PASS:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Introduce tu nueva contraseña.\nLa contraseña debe contener entre %d-%d caracteres.", MIN_PASS_LENGTH, MAX_PASS_LENGTH);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "Cambiar contraseña", dialog, "Siguiente", "Salir");
			return 1;
		}
		case DIALOG_ANTI_CHEAT:
		{
			if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

			new dialog[115 * sizeof(ac_Info) + 1], line_str[115];
			dialog = "Tipo\tEstado\tAccionar\tAcción\n";

			for(new i = 0; i != sizeof(ac_Info); i ++)
			{
				format(line_str, sizeof line_str, "%02d %s\t%s\t%d:%d\t%s\n", i, ac_Info[i][ac_Name], ac_Info[i][ac_Enabled] ? "Activado" : "Desactivado", ac_Info[i][ac_Detections], ac_Info[i][ac_Interval], ac_Info[i][ac_Kick] ? "Kick" : "Aviso");
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Anticheat", dialog, "Siguiente", "X");
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY:
		{
			if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

			new caption[45], dialog[90];

			format(caption, sizeof caption, "ac %02d %s", PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM], ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Name]);
			format(dialog, sizeof dialog, "Estado\t%s\nAccionar\t(%d:%d)\nAccion\t%s", ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Enabled] ? "Activado" : "Desactivado", ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Detections], ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Interval], ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Kick] ? "Kick" : "Aviso");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, caption, dialog, "Siguiente", "<<");
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY_DETECT:
		{
			new caption[45], dialog[200];

			format(caption, sizeof caption, "ac %02d %s", PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM], ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Name]);
			format(dialog, sizeof dialog, "Estado actual de accioner en: (%d:%d)\n\nSintaxis: <detecciones>:<segundos>\nDeja segundos en 0 para que sea instantáneo.\n\nEjemplo de 2 detecciones en 10 segundos: 2:10", ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Detections], ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Interval]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Siguiente", "<<");
			return 1;
		}
		case DIALOG_SHOP_ARTICLE_MODIFY: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi anuncio", "Inserta el nuevo precio de tu artículo:\n", "Siguiente", "<<");
		case DIALOG_SHOP_ARTICLE_REMOVE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Eliminar anuncio", "¿Está seguro de que quiere eliminar este anuncio?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");
		case DIALOG_SHOP_ADD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Añadir anuncio", "{FFFFFF}Propiedad\n{FFFFFF}Vehículo\n{FFFFFF}Otros", "Siguiente", "Salir");
			return 1;
		}
		case DIALOG_SHOP_ADD_TEXT:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Añadir anuncio", "Introduce una breve descripción para tu anuncio.\nCaracteres: 1-24 [A-Z a-z 0-9]", "Siguiente", "Salir");
			return 1;
		}
		case DIALOG_SHOP_ADD_PRICE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Añadir anuncio", "Introduce el precio para tu anuncio.\nAl publicar tu anuncio se te cobrará 500$.", "Siguiente", "Salir");
			return 1;
		}
		case DIALOG_CRANE_SELECT_VEHICLE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[95 * (MAX_SU_VEHICLES + 2)], total_vehicles;
			format(dialog, sizeof dialog, "{FFFF00}Vehículo\t{FFFF00}Matrícula\t{FFFF00}Precio por remolcar\n");
			for(new i = 0; i != MAX_VEHICLES; i ++)
			{
				if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
				if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
				if(total_vehicles > MAX_SU_VEHICLES) break;

				if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][total_vehicles] = i;

					new line_str[95], veh_money = (VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 100) + 350;
					format(line_str, sizeof line_str, "%s\t%s\t{41f48f}$%s\n", VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], number_format_thousand(veh_money));
					strcat(dialog, line_str);
					total_vehicles ++;
				}
			}
			if(total_vehicles == 0) strcat(dialog, "{FFFFFF}No tienes vehículos");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{00ff00}GRÚA", dialog, "Remolcar", "Salir");
			return 1;
		}
		case DIALOG_CREATE_CREW:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - BANDA", "{FFFFFF}El costo por crear una banda es de $200.000, y necesitas nivel 5, ¿quieres crear una?", "Sí", "No");
			return 1;
		}
		case DIALOG_CREATE_CREW_NAME:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00FF00}ITZN - NOMBRE BANDA", "{FFFFFF}Coloca el nombre de tu nueva banda", "Continuar", "Salir");
			return 1;
		}
		case DIALOG_CREATE_CREW_COLOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{00FF00}ITZN - COLOR BANDA", DIALOG_CREATE_CREW_COLOR_String, "Continuar", "Atrás");
			return 1;
		}
		case DIALOG_CREATE_CREW_CONFIRM:
		{
			new dialog[360];
			format(dialog, sizeof dialog,

					"\
						{FFFFFF}Nombre: {00FF00}%s\n\
						{FFFFFF}Color: {%06x}color %d\n\
						\n\
						{FFFFFF}¿Quieres crear esta banda?\n\
						{FFFFFF}Una vez creada podrás crear rangos, modificarlos y conquistar zonas.\n\
						\n\
					",
						PLAYER_TEMP[playerid][pt_CREATE_CREW_NAME],
						RandomColors[ PLAYER_TEMP[playerid][pt_CREATE_CREW_COLOR] ] >>> 8, PLAYER_TEMP[playerid][pt_CREATE_CREW_COLOR] + 1
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - CONFIRMAR BANDA", dialog, "Crear", "Salir");
			return 1;
		}
		case DIALOG_CREW_MENU:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new caption[64], dialog[360], listitem;
			format(caption, sizeof caption, "Mi banda -  {%06x}'%s'", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);

			format(dialog, sizeof dialog, "Ver miembros\n");
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_SIZE;
			listitem ++;

			if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME])
			{
				strcat(dialog, "Cambiar nombre de la banda\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_CHANGE_NAME;
				listitem ++;
			}
			if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS])
			{
				strcat(dialog, "Echar a un miembro\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_CAST_MEMBERS;
				listitem ++;
			}
			if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS])
			{
				strcat(dialog, "Cambiar rango de un miembro\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_MODIFY_MEMBERS;
				listitem ++;
			}
			if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS])
			{
				strcat(dialog, "Crear rangos o modificarlos\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_MODIFY_RANKS;
				listitem ++;
			}
			if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR])
			{
				strcat(dialog, "Cambiar color de la banda\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_CHANGE_COLOR;
				listitem ++;
			}
			if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE])
			{
				strcat(dialog, "Eliminar la banda\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_DELETE;
				listitem ++;
			}

			strcat(dialog, "Abandonar banda\n");
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_SIZE + 1;
			listitem ++;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Siguiente", "Salir");
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new caption[64];
			format(caption, sizeof caption, "Miembros de la banda '%s'", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);

			new dialog[128 * 15], listitem, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
			format(dialog, sizeof dialog, "{FFFFFF}Nombre\t{FFFFFF}Rango\t{FFFFFF}Últ. conexión\n");

			new DBResult:Result, DB_Query[320];
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `CUENTA`.`LAST_CONNECTION`, `CUENTA`.`CONNECTED`, `PLAYER_CREW`.`RANK` FROM `CUENTA`, `PLAYER_CREW` WHERE `PLAYER_CREW`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_CREW`.`ID_CREW` = '%d' ORDER BY `CUENTA`.`CONNECTED` DESC, `PLAYER_CREW`.`RANK` ASC LIMIT %d, %d;", PLAYER_CREW[playerid][player_crew_ID], PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);

			for(new i; i < db_num_rows(Result); i++ )
			{
				new name[24], last_connection[24], connected, rank;

				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "LAST_CONNECTION", last_connection, 24);
				connected = db_get_field_assoc_int(Result, "CONNECTED");
				rank = db_get_field_assoc_int(Result, "RANK");

				new line_str[128];
				if(connected) format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFFFF}%s\t{98f442}Conectado\n", start_pos + listitem, name, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ rank ][crew_rank_NAME]);
				else format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFFFF}%s\t{FFFFFF}%s\n", start_pos + listitem, name, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ rank ][crew_rank_NAME], last_connection);

				strcat(dialog, line_str);
				listitem ++;

				db_next_row(Result);
			}
			db_free_result(Result);

			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -2;
			strcat(dialog, "{c9c9c9}- Siguiente\n"); listitem ++;

			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -3;
			strcat(dialog, "{c9c9c9}- Anterior\n"); listitem ++;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_CREW_CHANGE_NAME:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Nombre actual de la banda:\n\t\"%s\"\n\nIndica el nuevo nombre.\nMáximo 32 caracteres.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Cambiar nombre de la banda", dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST_DELETE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[128 * 15], listitem, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
			format(dialog, sizeof dialog, "{FFFFFF}Nombre\t{FFFFFF}Rango\t{FFFFFF}Últ. conexión\n");

			new DBResult:Result, DB_Query[350];
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`ID`, `CUENTA`.`NAME`, `CUENTA`.`LAST_CONNECTION`, `CUENTA`.`CONNECTED`, `PLAYER_CREW`.`RANK` FROM `CUENTA`, `PLAYER_CREW` WHERE `PLAYER_CREW`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_CREW`.`ID_CREW` = '%d' ORDER BY `CUENTA`.`CONNECTED` DESC, `PLAYER_CREW`.`RANK` ASC LIMIT %d, %d;", PLAYER_CREW[playerid][player_crew_ID], PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);

			for(new i; i < db_num_rows(Result); i++ )
			{
				new name[24], last_connection[24], connected, rank;

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = db_get_field_assoc_int(Result, "ID");
				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "LAST_CONNECTION", last_connection, 24);
				connected = db_get_field_assoc_int(Result, "CONNECTED");
				rank = db_get_field_assoc_int(Result, "RANK");

				new line_str[128];
				if(connected) format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFFFF}%s\t{98f442}Conectado\n", start_pos + listitem, name, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ rank ][crew_rank_NAME]);
				else format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFFFF}%s\t{FFFFFF}%s\n", start_pos + listitem, name, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ rank ][crew_rank_NAME], last_connection);

				strcat(dialog, line_str);
				listitem ++;

				db_next_row(Result);
			}
			db_free_result(Result);

			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -2;
			strcat(dialog, "{c9c9c9}- Siguiente\n"); listitem ++;

			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -3;
			strcat(dialog, "{c9c9c9}- Anterior\n"); listitem ++;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Echar a un miembro", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_CREW_CAST_MEMBER_CONFIRM:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Echar a un miembro", "¿Estás seguro de que quieres echar a este miembro de la banda?", "Echar", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_INVITE_RANK:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[64 * MAX_CREW_RANKS], line_str[64], listitem;
			for(new i = 0; i != MAX_CREW_RANKS; i ++)
			{
				if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_VALID]) continue;

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				if(i < PLAYER_CREW[playerid][player_crew_RANK]) format(line_str, sizeof line_str, "{666666}%d. %s\n", listitem + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				else format(line_str, sizeof line_str, "{FFFFFF}%d. %s\n", listitem + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				strcat(dialog, line_str);

				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Invitar", dialog, "Invitar", "Salir");
			return 1;
		}
		case DIALOG_CREW_INVITE_ACCEPT:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Te han ofrecio unirte a una banda.\n\nBanda: %s\nRango: %s\n", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1] ][crew_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1] ][ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][2] ][crew_rank_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Invitación", dialog, "Unirme", "Salir");
			return 1;
		}
		case DIALOG_CREW_RANKS:
		{
			new dialog[64 * MAX_CREW_RANKS], line_str[64];
			for(new i = 0; i != MAX_CREW_RANKS; i ++)
			{
				if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_VALID])
				{
					if(i < PLAYER_CREW[playerid][player_crew_RANK]) format(line_str, sizeof line_str, "{666666}%d. %s\n", i + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
					else format(line_str, sizeof line_str, "{FFFFFF}%d. %s\n", i + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				}
				else
				{
					if(i < PLAYER_CREW[playerid][player_crew_RANK]) format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
					else format(line_str, sizeof line_str, "{FFFFFF}%d. Slot vacío\n", i + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				}
				strcat(dialog, line_str);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Rangos", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Modificar rango", "Cambiar nombre del rango\nModificar permisos\nEliminar rango", "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_NAME:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "Nombre actual del rango:\n\t\"%s\"\n\nIndica el nuevo nombre del rango.\nMáximo 32 caracteres.", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Modificar rango", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_PERMISS:
		{
			new caption[70];
			format(caption, sizeof caption, "Modificar permisos del rango '%s'", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME]);

			new dialog[64 * (CREW_RANK_SIZE + 1)], line_str[64];
			format(dialog, sizeof dialog, "Permiso\tActivado\n");

			for(new i = 0; i != CREW_RANK_SIZE; i ++)
			{
				if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][i]) format(line_str, sizeof line_str, "%s\t%s\n", CREW_RANKS_PERMISSIONS[i], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][i] ? "Sí" : "No");
				else format(line_str, sizeof line_str, "{666666}%s\t{666666}%s\n", CREW_RANKS_PERMISSIONS[i], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][i] ? "Sí" : "No");

				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_CREATE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Crear nuevo rango", "Indica el nombre del rango.\nMáximo 32 caracteres.", "Crear", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[64 * MAX_CREW_RANKS], line_str[64], listitem;
			for(new i = 0; i != MAX_CREW_RANKS; i ++)
			{
				if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_VALID]) continue;
				if(i == PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK]) continue;

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				if(i < PLAYER_CREW[playerid][player_crew_RANK]) format(line_str, sizeof line_str, "{666666}%d. %s\n", listitem + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				else format(line_str, sizeof line_str, "{FFFFFF}%d. %s\n", listitem + 1, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				strcat(dialog, line_str);

				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Seleccionar nuevo rango", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE_CONFIRM:
		{
			new DBResult:Result, DB_Query[128], affected_members;
			format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '%d';", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID], PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK]);
			Result = db_query(Database, DB_Query);

			if(db_num_rows(Result)) affected_members = db_get_field_int(Result, 0);
			db_free_result(Result);


			new dialog[400];
			format(dialog, sizeof dialog,

				"\
					Rango que se eliminará:\n\
						\t'%s'\n\
					\n\
					Miembros afectados: %d\n\
					El nuevo rango de estos miembros será:\n\
						\t'%s'\n\
					\n\
					¿Seguro que quieres eliminar el rango? Esta opción no se puede deshacer.\n\
					\n\
				",
					CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME],
					affected_members,
					CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_NEW_RANK] ][crew_rank_NAME]
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Eliminar rango", dialog, "Eliminar", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_MODIFY_COLOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona el nuevo color para tu banda", DIALOG_CREATE_CREW_COLOR_String, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_DELETE:
		{
			new DB_Query[190], affected_members, crew_territories;

			new DBResult:Result_memberts;
			format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID]);
			Result_memberts = db_query(Database, DB_Query);

			if(db_num_rows(Result_memberts)) affected_members = db_get_field_int(Result_memberts, 0);
			db_free_result(Result_memberts);


			new DBResult:Result_territories;
			format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `CREW_TERRITORIES` WHERE `ID_CREW` = '%d';", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID]);
			Result_territories = db_query(Database, DB_Query);

			if(db_num_rows(Result_territories)) crew_territories = db_get_field_int(Result_territories, 0);
			db_free_result(Result_territories);

			new dialog[450];
			format(dialog, sizeof dialog,

				"\
					Banda: %s\n\
					Miembros: %d\n\
					Territorios: %d\n\
					\n\
					¿De verdad quieres borrar la banda?\n\
					\n\
				",
					CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME],
					affected_members,
					crew_territories
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Eliminar banda", dialog, "Eliminar", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_LEAVE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Abandonar banda", "¿Quieres abandonar la banda?\nEsta opción no se puede deshacer.", "Abandonar", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBERS:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[128 * 15], listitem, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
			format(dialog, sizeof dialog, "{FFFFFF}Nombre\t{FFFFFF}Rango\t{FFFFFF}Últ. conexión\n");

			new DBResult:Result, DB_Query[350];
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`ID`, `CUENTA`.`NAME`, `CUENTA`.`LAST_CONNECTION`, `CUENTA`.`CONNECTED`, `PLAYER_CREW`.`RANK` FROM `CUENTA`, `PLAYER_CREW` WHERE `PLAYER_CREW`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_CREW`.`ID_CREW` = '%d' ORDER BY `CUENTA`.`CONNECTED` DESC, `PLAYER_CREW`.`RANK` ASC LIMIT %d, %d;", PLAYER_CREW[playerid][player_crew_ID], PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);

			for(new i; i < db_num_rows(Result); i++ )
			{
				new name[24], last_connection[24], connected, rank;

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = db_get_field_assoc_int(Result, "ID");
				db_get_field_assoc(Result, "NAME", name, 24);
				db_get_field_assoc(Result, "LAST_CONNECTION", last_connection, 24);
				connected = db_get_field_assoc_int(Result, "CONNECTED");
				rank = db_get_field_assoc_int(Result, "RANK");

				new line_str[128];
				if(connected) format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFFFF}%s\t{98f442}Conectado\n", start_pos + listitem, name, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ rank ][crew_rank_NAME]);
				else format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFFFF}%s\t{FFFFFF}%s\n", start_pos + listitem, name, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ rank ][crew_rank_NAME], last_connection);

				strcat(dialog, line_str);
				listitem ++;

				db_next_row(Result);
			}
			db_free_result(Result);

			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -2;
			strcat(dialog, "{c9c9c9}- Siguiente\n"); listitem ++;

			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = -3;
			strcat(dialog, "{c9c9c9}- Anterior\n"); listitem ++;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Modificar rango de un miembro", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBER:
		{
			new DBResult:Result, DB_Query[256], name[24], current_rank, bool:found;
			format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `PLAYER_CREW`.`RANK` FROM `CUENTA`, `PLAYER_CREW` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_CREW`.`ID_USER` = `CUENTA`.`ID`;", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
			Result = db_query(Database, DB_Query);

			if(db_num_rows(Result))
			{
				db_get_field_assoc(Result, "NAME", name, 24);
				current_rank = db_get_field_assoc_int(Result, "RANK");
				found = true;
			}
			else found = false;
			db_free_result(Result);

			if(!found) return 1;
			if(current_rank < PLAYER_CREW[playerid][player_crew_RANK]) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes modificar el rango de este miembro porque es un rango superior al tuyo.");
			if(current_rank == 0)
			{
				new DBResult:Result_count, total;
				format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '0';", PLAYER_CREW[playerid][player_crew_ID]);
				Result_count = db_query(Database, DB_Query);

				if(db_num_rows(Result_count)) total = db_get_field_int(Result_count, 0);
				db_free_result(Result_count);

				if(total <= 1)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}No se puede modificar el rango de este miembro ya que es el único miembro con el rango fundador.");
					return 1;
				}
			}

			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new caption[45];
			format(caption, sizeof caption, "Miembro - %s", name);

			new dialog[45 * CREW_RANK_SIZE], line_str[45], listitem;
			for(new i = 0; i != CREW_RANK_SIZE; i ++)
			{
				if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_VALID]) continue;

				if(i < PLAYER_CREW[playerid][player_crew_RANK])
				{
					if(current_rank == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
					else format(line_str, sizeof line_str, "{666666}%s\n", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				}
				else
				{
					if(current_rank == i) format(line_str, sizeof line_str, "{FFFFFF}%s (actual)\n", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
					else format(line_str, sizeof line_str, "{FFFFFF}%s\n", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i][crew_rank_NAME]);
				}
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_CREW_PROPERTY_CONFIRM:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Propiedad de banda", "¿Estás seguro que quieres pasar esta propiedad a banda?\nEsta opción no se puede deshacer.", "Siguiente", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_LEAVE_TERRITORY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Abandonar territorio", "¿Estás seguro que quieres abandonar este territorio?\nEsta opción no se puede deshacer.", "Siguiente", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_LEAVE_PROPERTY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Propiedad de banda", "¿Estás seguro que quieres liberar esta propiedad?\nEsta opción no se puede deshacer.", "Siguiente", "Cancelar");
			return 1;
		}
		case DIALOG_POLICE_PENALTY:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "{FFFFFF}El policía {00FF00}%s {FFFFFF}te ha multado con la cantidad de {41f48f}$%s{FFFFFF}, si la pagas te quitará los cargos.", PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_POLICE_PEN_PID] ][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[playerid][pt_POLICE_PEN_IM]));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}SAPD - MULTA", dialog, "Pagar", "");
			return 1;
		}
		case DIALOG_SERVER_ECO:
		{
			new dialog[256];
			format(dialog, sizeof dialog,

				"\
					PROPIEDADES\t%.4f\n\
					VEHICULOS\t%.4f\n\
					TOYS\t%.4f\n\
					SKINS\t%.4f\n\
					ARMAS\t%.4f\n\
					1 SD\t%d\n\
					SU\t%d Sd\n\
				",
					MULTIPLIER_PROPERITES,
					MULTIPLIER_VEHICLES,
					MULTIPLIER_TOYS,
					MULTIPLIER_SKINS,
					MULTIPLIER_WEAPONS,
					SD_VALUE,
					SU_SD_PRICE
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, "Multiplicadores", dialog, "Siguiente", "Salir");
			return 1;
		}
		case DIALOG_SERVER_ECO_MODIFY:
		{
			new dialog[32];
			switch(PLAYER_TEMP[playerid][pt_DIALOG_ECO_SELECTED])
			{
				case 0: format(dialog, sizeof dialog, "PROPIEDADES: %f", MULTIPLIER_PROPERITES);
				case 1: format(dialog, sizeof dialog, "VEHICULOS: %f", MULTIPLIER_VEHICLES);
				case 2: format(dialog, sizeof dialog, "TOYS: %f", MULTIPLIER_TOYS);
				case 3: format(dialog, sizeof dialog, "SKINS: %f", MULTIPLIER_SKINS);
				case 4: format(dialog, sizeof dialog, "ARMAS: %f", MULTIPLIER_WEAPONS);
				case 5: format(dialog, sizeof dialog, "1 SD: %d", SD_VALUE);
				case 6: format(dialog, sizeof dialog, "Coste VIP: %d Sd", SU_SD_PRICE);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Multiplicador", dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_SU_BUY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{f4d942}ITZN - Premium",

				"\
					{FFFFFF}El costo del {f4d942}premium{FFFFFF} es de {f44242}5 koins{FFFFFF} y dura 30 días.\n\n\
					{FFFFFF}COMANDOS:\n\
					{00FF00} /vip o /premium {FFFFFF}- Menú para adquirir la membresía.\n\
					\n\
					{FFFFFF}- BENEFICIOS:\n\
					{FFFFFF}- {f4d942}2 trabajos{FFFFFF} al mismo tiempo.\n\
					{FFFFFF}- Podrás tener {f4d942}8 vehículos{FFFFFF}.\n\
					{FFFFFF}- Podrás tener {f4d942}4 propiedades{FFFFFF}.\n\
					{FFFFFF}- Podrás tener {f4d942}10 prendas{FFFFFF}.\n\
					{FFFFFF}- Podrás tener {f4d942}10 objetos tuning{FFFFFF}.\n\
					{FFFFFF}- {f4d942}No pagarás{FFFFFF} seguro de tus vehículos y propiedades.\n\
					{FFFFFF}- {f4d942}No perderás{FFFFFF} tu chaleco al desmayarte.\n\
					{FFFFFF}- {f4d942}%75 de devolución{FFFFFF} al vender un vehículo o propiedad.\n\
					{FFFFFF}- En el hospital te recuperarás más rápido.\n\
					{FFFFFF}- Cuando te recuperés, saldrás con {f4d942}%100 de vida{FFFFFF}.\n\
					{FFFFFF}- Reducción de tiempo en condenas de cárcel.\n\
					{FFFFFF}- Si un médico te cura, {f4d942}te recuperará con %50{FFFFFF}.\n\
					{FFFFFF}- Recibirás {41f48f}+$800{FFFFFF} en algunos trabajos por cada jornada.\n\
				"

			, "Comprar", "Salir");
			return 1;
		}
		case DIALOG_SU:
		{
			new DBResult:Result, current_date[24];
			Result = db_query(Database, "SELECT CURRENT_TIMESTAMP;");

			if(db_num_rows(Result)) db_get_field(Result, 0, current_date, 24);
			db_free_result(Result);


			new dialog[256];
			format(dialog, sizeof dialog, "{FFFFFF}Tu {f44242}premium{FFFFFF} vence en la fecha {00FF00}%s{FFFFFF}. Puedes pagar 30 días por adelantado si das clic en renovar.", ACCOUNT_INFO[playerid][ac_SU_EXPIRE_DATE]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{f44242}ITZN - Renovar premium", dialog, "Renovar", "Salir");
			return 1;
		}
		case DIALOG_SD:
		{
			new dialog[256];
			format(dialog, sizeof dialog, "Tienes %d Sd\nEl valor de 1 Sd es de $%s\n\n¿Cuántos Sd quieres convertir?\nUna vez convertido no se puede recuperar los Sd.\n", ACCOUNT_INFO[playerid][ac_SD], number_format_thousand(SD_VALUE));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Super Dinero", dialog, "Convertir", "Salir");
			return 1;
		}
		case DIALOG_METAL_BUY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00FF00}COMPRAR PIEZAS", "{FFFFFF}Producto: {00FF00}Piezas.\n{FFFFFF}Precio por pieza de arma: {41f48f}$600\n{FFFFFF}Escribe la cantidad de piezas de arma que necesites.", "Comprar", "Salir");
			return 1;
		}
		case DIALOG_REPUESTOS_BUY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00FF00}COMPRAR REPUESTOS", "{FFFFFF}Producto: {00FF00}Repuestos mecánicos.\n{FFFFFF}Precio por repuesto mecánico: {41f48f}$50\n{FFFFFF}Escribe la cantidad de repuestos mecánicos que necesites.", "Comprar", "Salir");
			return 1;
		}
		case DIALOG_EMISORAS:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{00FF00}EMISORAS",

				"\
					{FFFFFF} Reggae\n\
					{FFFFFF} Cumbia sonidera\n\
					{FFFFFF} Banda norteña\n\
					{FFFFFF} Rock\n\
					{FFFFFF} Dubstep\n\
					{FFFFFF} Electrónica\n\
					{FFFFFF} Deep house\n\
					{FFFFFF} Reggaetón\n\
					{FFFFFF} Pop\n\
					{FFFFFF} Salsa\n\
					{FFFFFF} Trap\n\
					{FFFFFF} Opera\n\
					{FFFFFF} HipHop\n\
					{FF0000} Apagar\n\
				"

			, "Siguiente", "Salir");
			return 1;
		}
		case DIALOG_VOBJECT_MENU:
		{
			new caption[45];
			format(caption, sizeof caption, "{00FF00}TUNING - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, " Piezas colocadas\n Comprar pieza", "Siguiente", "Cerrar");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECTS:
		{
			new caption[45], dialog[145 * (MAX_SU_VOBJECTS + 2)], line_str[145];
			format(caption, sizeof caption, "{00FF00}TUNING - Piezas actuales > %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			format(dialog, sizeof dialog, "{FFFF00}Pieza\t{FFFF00}Colocado\n");
			for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
			{
				if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_VALID])
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_ATTACHED]) format(line_str, sizeof line_str, " %s\t{00FF00}Sí\n", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_NAME]);
					else format(line_str, sizeof line_str, " %s\t{FF0000}No\n", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_NAME]);
				}
				else format(line_str, sizeof line_str, "{666666} Espacio vacío\n", i + 1);
				strcat(dialog, line_str);
			}
			strcat(dialog, "{FF0000} Eliminar todo\n");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Seleccionar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT:
		{
			new caption[45], dialog[256];
			format(caption, sizeof caption, "{00FF00}TUNING - Comprar pieza > %s", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);

			switch(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_TYPE])
			{
				case VOBJECT_TYPE_OBJECT:
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED]) format(dialog, sizeof dialog, "{FFFFFF}Guardar este objeto\n{FFFFFF}Cambiar el nombre del objeto\n{FFFFFF}Editar posición del objeto\n{FFFFFF}Colores\n{FFFFFF}Eliminar este objeto");
					else format(dialog, sizeof dialog, " Colocarlo\n Cambiarle nombre para identificarlo\n{666666} Editar posición\n{666666} Pintar pieza\n{FF0000} Eliminar pieza");
				}
				case VOBJECT_TYPE_TEXT:
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED]) format(dialog, sizeof dialog, "{FFFFFF}Guardar este objeto\n{FFFFFF}Cambiar el nombre del objeto\n{FFFFFF}Editar posición del objeto\n{FFFFFF}Texto\n{FFFFFF}Eliminar este objeto");
					else format(dialog, sizeof dialog, " Colocarlo\n Cambiarle nombre para identificarlo\n{666666} Editar posición\n{666666} Configurar texto\n{FF0000} Eliminar texto");
				}
				case VOBJECT_TYPE_COUNTRY_FLAG, VOBJECT_TYPE_COUNTRY_PANEL:
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED]) format(dialog, sizeof dialog, "{FFFFFF}Guardar este objeto\n{FFFFFF}Cambiar el nombre del objeto\n{FFFFFF}Editar posición del objeto\n{FFFFFF}Eliminar este objeto");
					else format(dialog, sizeof dialog, " Colocarlo\n Cambiarle nombre para identificarlo\n{666666} Editar posición\n{FF0000} Eliminar pieza");
				}
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CNAME:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "{FFFFFF}Cambiando el nombre podrás identificarlo en tus piezas colocadas.", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00FF00}TUNING - Pieza > Editar nombre", dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLORS:
		{
			new caption[64];
			format(caption, sizeof caption, "{00FF00}TUNING - Pieza > Color > %s", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);

			new dialog[45 * MAX_VEHICLE_OBJECTS_INDEXS], line_str[45];
			for(new i = 0; i != MAX_VEHICLE_OBJECTS_INDEXS; i ++)
			{
				if(!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][i]) format(line_str, sizeof line_str, "{FFFFFF}Color #%d (original)\n", i + 1);
				else format(line_str, sizeof line_str, "{%06x}Color #%d\n", ARGBToRGBA(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][i]) >>> 8, i + 1);

				strcat(dialog, line_str);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR:
		{
			new caption[64];
			format(caption, sizeof caption, "Color (%d) de '%s'", PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT], VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);

			new dialog[145];
			format(dialog, sizeof dialog,

					"\
						Color original de la pieza\n\
						{%06x}Color acorde al vehículo 1\n\
						{%06x}Color acorde al vehículo 2\n\
						{FFFFFF}Configurar color (ARGB)\n\
					",
					VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_1] ] >>> 8,
					VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_2] ] >>> 8
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR_HEX:
		{
			new caption[64];
			format(caption, sizeof caption, "Color (%d) de '%s'", PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT], VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "{FFFFFF}Coloca un color en formato FFRRGGBB.", "Pintar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CDELETE:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "{FFFFFF}¿Estás seguro que quieres borrar {00FF00}%s{FFFFFF} de tu vehículo?", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}TUNING - Pieza > Eliminar", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{00FF00}TUNING - Eliminar todo", "{FFFFFF}¿Seguro deseas eliminar todas las piezas de tu vehículo?.", "Eliminar", "Atrás");
		case DIALOG_VOBJECT_TEXT_MENU:
		{
			new caption[64];
			format(caption, sizeof caption, "{00FF00}TUNING - Texto > '%s'", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, " Editar texto\n Cambiar fuente\n Tamaño de letra\n Negrita\n Color de fuente", "Siguiente", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_TEXT:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "{FFFFFF}Escribe el nuevo texto que reemplace %s", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_TEXT]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00FF00}TUNING - Texto > Modificar texto", dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "{FFFFFF}Escribe la nueva fuente que reemplace %s", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00FF00}TUNING - Texto > Modificar fuente", dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_SIZE:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "{FFFFFF}Escribe el nuevo tamaño que remplace %s\n", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT_SIZE]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{00FF00}TUNING - Texto > Modificar fuente", dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_COLOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{00FF00}TUNING - Color", DIALOG_CREATE_CREW_COLOR_String, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_COUNTRY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{00FF00}TUNING - País",

				"\
					Alemania\n\
					Argentina\n\
					Austria\n\
					Belgica\n\
					Bolivia\n\
					Bulgaria\n\
					Chile\n\
					Colombia\n\
					El Salvador\n\
					España\n\
					Estonia\n\
					Francia\n\
					Guatemala\n\
					Holanda\n\
					Hungría\n\
					India\n\
					Indonesia\n\
					Irlanda\n\
					Italia\n\
					Lituania\n\
					Luxemburgo\n\
					Madagascar\n\
					Malta\n\
					Malí\n\
					México\n\
					Nigeria\n\
					Panamá\n\
					Paraguay\n\
					Perú\n\
					Polonia\n\
					Rumanía\n\
					Rusia\n\
					Ucrania\n\
					Venezuela\n\
				"

			, "Siguiente", "Atrás");
			return 1;
		}
		default: return 0;
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(!isnull(inputtext))
	{
		for(new i = 0; i != strlen(inputtext); i ++)
		{
			if(inputtext[i] == '%') inputtext[i] = '#';
		}
	}

	switch(dialogid)
	{
		case DIALOG_INFO: return 1;
		case DIALOG_REGISTER:
		{
			if(response)
			{
				if(strlen(inputtext) < MIN_PASS_LENGTH || strlen(inputtext) > MAX_PASS_LENGTH) return ShowDialog(playerid, dialogid);
				format(ACCOUNT_INFO[playerid][ac_IP], 16, "%s", PLAYER_TEMP[playerid][pt_IP]);
				format(ACCOUNT_INFO[playerid][ac_NAME], 24, "%s", PLAYER_TEMP[playerid][pt_NAME]);

				new salt[16];
				getRandomSalt(salt);
				format(ACCOUNT_INFO[playerid][ac_SALT], 16, "%s", salt);
				SHA256_PassHash(inputtext, ACCOUNT_INFO[playerid][ac_SALT], ACCOUNT_INFO[playerid][ac_PASS], 64 + 1);

				ACCOUNT_INFO[playerid][ac_LEVEL] = 1;
				ACCOUNT_INFO[playerid][ac_REP] = 1;
				ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = TIME_FOR_REP;

				ShowDialog(playerid, DIALOG_SEXO_XD);
			}
			else Kick(playerid);
			return 1;
		}
		case DIALOG_SEXO_XD:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: CHARACTER_INFO[playerid][ch_SEX] = SEX_MALE, CHARACTER_INFO[playerid][ch_SKIN] = 170, ShowDialog(playerid, DIALOG_REGISTER_EMAIL);
					case 1: CHARACTER_INFO[playerid][ch_SEX] = SEX_FEMALE, CHARACTER_INFO[playerid][ch_SKIN] = 190, ShowDialog(playerid, DIALOG_REGISTER_EMAIL);
				}
			}
			return 1;
		}
		case DIALOG_REGISTER_EMAIL:
		{
			if(!response) return Kick(playerid);
			if(strlen(inputtext) < 5) return ShowDialog(playerid, dialogid);
			if(strfind(inputtext, "@", true) == -1) return ShowDialog(playerid, dialogid);
			if(strfind(inputtext, ".", true) == -1) return ShowDialog(playerid, dialogid);

			new DBResult:Result, bool:email_exists, DB_Query[80];
			format(DB_Query, sizeof(DB_Query), "SELECT * FROM `CUENTA` WHERE `EMAIL` = '%q'", inputtext);
			Result = db_query(Database, DB_Query);
			if(db_num_rows(Result)) email_exists = true;
			db_free_result(Result);

			if(email_exists)
			{
				SendClientMessage(playerid, 0xFFFFFFAA, "Este correco electrónico ya está en uso, use otro distinto.");
				ShowDialog(playerid, dialogid);
				return 1;
			}
			format(ACCOUNT_INFO[playerid][ac_EMAIL], 32, "%s", inputtext);

			/* Spawn */
			CHARACTER_INFO[playerid][ch_CASH] = 806000;
			CHARACTER_INFO[playerid][ch_POS][0] = New_User_Pos[0];
			CHARACTER_INFO[playerid][ch_POS][1] = New_User_Pos[1];
			CHARACTER_INFO[playerid][ch_POS][2] = New_User_Pos[2];
			CHARACTER_INFO[playerid][ch_ANGLE] = New_User_Pos[3];
			CHARACTER_INFO[playerid][ch_FIGHT_STYLE] = 4;
			CHARACTER_INFO[playerid][ch_HEALTH] = 100.0;
			CHARACTER_INFO[playerid][ch_ARMOUR] = 0.0;
			CHARACTER_INFO[playerid][ch_HUNGRY] = 100.0;
			CHARACTER_INFO[playerid][ch_THIRST] = 100.0;

			SetPlayerScore(playerid, 5);
			PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME] = gettime();
			//PLAYER_TEMP[playerid][pt_PAYDAY_TIME] = gettime();
			ResetPlayerWeapons(playerid);
			ResetPlayerMoney(playerid);
			GivePlayerMoney(playerid, CHARACTER_INFO[playerid][ch_CASH]);
			SetPlayerFightingStyle(playerid, CHARACTER_INFO[playerid][ch_FIGHT_STYLE]);
			SetPlayerHealthEx(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);
			SetPlayerArmourEx(playerid, CHARACTER_INFO[playerid][ch_ARMOUR]);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerColorEx(playerid, PLAYER_COLOR);
			StopAudioStreamForPlayer(playerid);
			SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], 0, 0, 0, 0, 0, 0);
			SetPlayerInterior(playerid, CHARACTER_INFO[playerid][ch_INTERIOR]);

			RegisterNewPlayer(playerid);
			TogglePlayerSpectatingEx(playerid, false);


			ClearPlayerChat(playerid);
			TogglePlayerControllable(playerid, false);

			PLAYER_TEMP[playerid][pt_TIMERS][20] = SetTimerEx("Tutorial1", 1000, false, "i", playerid);
			return 1;
		}
		case DIALOG_LOGIN:
		{
			if(!response) return Kick(playerid);
			if(!strlen(inputtext)) return ShowDialog(playerid, dialogid);

			new password[64 + 1];
			SHA256_PassHash(inputtext, ACCOUNT_INFO[playerid][ac_SALT], password, sizeof password);

			if(!strcmp(password, ACCOUNT_INFO[playerid][ac_PASS], false))
			{
			    if(ACCOUNT_INFO[playerid][ac_TEMP_LVL_ADM] > 1)
			    {
			    	ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] = 0;
			    	ACCOUNT_INFO[playerid][ac_TEMP_LVL_ADM] = 0;
			        ShowDialog(playerid, DIALOG_SECURITY_PASS);
       			}
       			else
       			{
       			    KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][18]);

       			    LoadPlayerData(playerid);
					LoadCharacterData(playerid);
					LoadPlayerBankAccountData(playerid);
					LoadPlayerToysData(playerid);
					LoadPlayerPocketData(playerid);
					LoadPlayerPhoneData(playerid);
					LoadPlayerGPSData(playerid);
					LoadPlayerObjectsData(playerid);
					LoadPlayerVehicles(playerid);
					LoadPlayerSkills(playerid);
					LoadPlayerWorks(playerid);
					LoadPlayerMisc(playerid);
					LoadPlayerWeaponsData(playerid);
					LoadPlayerCrewInfo(playerid);

					SetPlayerScore(playerid, ACCOUNT_INFO[playerid][ac_LEVEL]);
					PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME] = gettime();
					//PLAYER_TEMP[playerid][pt_PAYDAY_TIME] = gettime();
					ResetPlayerWeapons(playerid);
					ResetPlayerMoney(playerid);
					GivePlayerMoney(playerid, CHARACTER_INFO[playerid][ch_CASH]);
					SetPlayerFightingStyle(playerid, CHARACTER_INFO[playerid][ch_FIGHT_STYLE]);
					SetPlayerHealthEx(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);
					SetPlayerArmourEx(playerid, CHARACTER_INFO[playerid][ch_ARMOUR]);
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerColorEx(playerid, PLAYER_COLOR);
					StopAudioStreamForPlayer(playerid);
					SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], 0, 0, 0, 0, 0, 0);
					SetPlayerInterior(playerid, CHARACTER_INFO[playerid][ch_INTERIOR]);

					PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] = 0;
					TogglePlayerSpectatingEx(playerid, false);
					TogglePlayerControllable(playerid, false);
					
					new message[145];
       			   	if(PLAYER_WORKS[playerid][WORK_POLICE])
					{
						format(message, sizeof message, "(Canal SAPD) {7cacf9}%s - %s se conectó.", POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], PLAYER_TEMP[playerid][pt_RP_NAME]);
						SendPoliceRadioMessage(-1, 0x4286f4FF, message);
					}
					if(PLAYER_CREW[playerid][player_crew_VALID])
					{
						format(message, sizeof message, "{%06x}(Radio) %s - %s se conectó.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], PLAYER_TEMP[playerid][pt_RP_NAME]);
						SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], -1, message);
					}
				}
			}
			else // Error
			{
				PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] ++;
				if(PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] > MAX_BAD_LOGIN_ATTEMPS) return Kick(playerid);
				SendClientMessageEx(playerid, 0xFFFFFFFF, "Contraseña incorrecta, aviso %d/%d.", PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP], MAX_BAD_LOGIN_ATTEMPS);
				ShowDialog(playerid, dialogid);
			}
			return 1;
		}
		case DIALOG_SECURITY_PASS:
		{
			if(!response) return Kick(playerid);

            if (!strcmp(TwoAdminPass, inputtext) && !(!strlen(inputtext)))
			{
			    KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][18]);

			    LoadPlayerData(playerid);
				LoadCharacterData(playerid);
				LoadPlayerBankAccountData(playerid);
				LoadPlayerToysData(playerid);
				LoadPlayerPocketData(playerid);
				LoadPlayerPhoneData(playerid);
				LoadPlayerGPSData(playerid);
				LoadPlayerObjectsData(playerid);
				LoadPlayerVehicles(playerid);
				LoadPlayerSkills(playerid);
				LoadPlayerWorks(playerid);
				LoadPlayerMisc(playerid);
				LoadPlayerWeaponsData(playerid);
				LoadPlayerCrewInfo(playerid);

				SetPlayerScore(playerid, ACCOUNT_INFO[playerid][ac_LEVEL]);
				PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME] = gettime();
				//PLAYER_TEMP[playerid][pt_PAYDAY_TIME] = gettime();
				ResetPlayerWeapons(playerid);
				ResetPlayerMoney(playerid);
				GivePlayerMoney(playerid, CHARACTER_INFO[playerid][ch_CASH]);
				SetPlayerFightingStyle(playerid, CHARACTER_INFO[playerid][ch_FIGHT_STYLE]);
				SetPlayerHealthEx(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);
				SetPlayerArmourEx(playerid, CHARACTER_INFO[playerid][ch_ARMOUR]);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerColorEx(playerid, PLAYER_COLOR);
				StopAudioStreamForPlayer(playerid);
				SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], 0, 0, 0, 0, 0, 0);
				SetPlayerInterior(playerid, CHARACTER_INFO[playerid][ch_INTERIOR]);

				PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] = 0;
				TogglePlayerSpectatingEx(playerid, false);
				TogglePlayerControllable(playerid, false);

                ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] = ACCOUNT_INFO[playerid][ac_TEMP_LVL_ADM];
                
				new message[145];
   			   	if(PLAYER_WORKS[playerid][WORK_POLICE])
				{
					format(message, sizeof message, "(Canal SAPD) {7cacf9}%s - %s se conectó.", POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], PLAYER_TEMP[playerid][pt_RP_NAME]);
					SendPoliceRadioMessage(-1, 0x4286f4FF, message);
				}
				if(PLAYER_CREW[playerid][player_crew_VALID])
				{
					format(message, sizeof message, "{%06x}(Radio) %s - %s se conectó.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], PLAYER_TEMP[playerid][pt_RP_NAME]);
					SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], -1, message);
				}
			}
			else
			{
			    Kick(playerid);
   			}
			return 1;
		}
		case DIALOG_DOUBT_CHANNEL_POST:
		{
			if(response) SendMessageToDoubtChannel(playerid, PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_MESSAGE]);
			return 1;
		}
		case DIALOG_FOOD_PIZZA:
		{
			if(response)
			{
				if(CHARACTER_INFO[playerid][ch_CASH] >= PIZZA_FOOD[listitem][food_PRICE])
				{
					if(CHARACTER_INFO[playerid][ch_HUNGRY] >= 99.0 && CHARACTER_INFO[playerid][ch_THIRST] >= 99.0) return SendClientMessage(playerid, -1, "{FFFFFF}¿Es que quieres reventar?");

					GivePlayerCash(playerid, -PIZZA_FOOD[listitem][food_PRICE]);
					Add_Hungry_Thirst(playerid, PIZZA_FOOD[listitem][food_HUNGRY], PIZZA_FOOD[listitem][food_THIRST]);

					PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);

					new action[64];
					format(action, sizeof action, "compra %s y lo consume.", PIZZA_FOOD[listitem][food_NAME]);
					Auto_SendPlayerAction(playerid, action);

					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);

					ShowDialog(playerid, dialogid);
				}
				else
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {FF6633}$%d {FFFFFF}para poder comprarlo.", PIZZA_FOOD[listitem][food_PRICE] - CHARACTER_INFO[playerid][ch_CASH]);
				}
			}
			else SendClientMessageEx(playerid, -1, "Gracias por su visita a {00FF00}%s {FFFFFF}vuelva pronto.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
			return 1;
		}
		case DIALOG_FOOD_BURGER:
		{
			if(response)
			{
				if(CHARACTER_INFO[playerid][ch_CASH] >= BURGER_SHOT_FOOD[listitem][food_PRICE])
				{
					if(CHARACTER_INFO[playerid][ch_HUNGRY] >= 99.0 && CHARACTER_INFO[playerid][ch_THIRST] >= 99.0) return SendClientMessage(playerid, -1, "{FFFFFF}¿Es que quieres reventar?");

					GivePlayerCash(playerid, -BURGER_SHOT_FOOD[listitem][food_PRICE]);
					Add_Hungry_Thirst(playerid, BURGER_SHOT_FOOD[listitem][food_HUNGRY], BURGER_SHOT_FOOD[listitem][food_THIRST]);

					PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);

					new action[64];
					format(action, sizeof action, "compra %s y lo consume.", BURGER_SHOT_FOOD[listitem][food_NAME]);
					Auto_SendPlayerAction(playerid, action);

					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);

					ShowDialog(playerid, dialogid);
				}
				else
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {FF6633}$%d {FFFFFF}para poder comprarlo.", BURGER_SHOT_FOOD[listitem][food_PRICE] - CHARACTER_INFO[playerid][ch_CASH]);
				}
			}
			else SendClientMessageEx(playerid, -1, "Gracias por su visita a {00FF00}%s {FFFFFF}vuelva pronto.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
			return 1;
		}
		case DIALOG_FOOD_CLUCKIN:
		{
			if(response)
			{
				if(CHARACTER_INFO[playerid][ch_CASH] >= CLUCKIN_BELL_FOOD[listitem][food_PRICE])
				{
					if(CHARACTER_INFO[playerid][ch_HUNGRY] >= 99.0 && CHARACTER_INFO[playerid][ch_THIRST] >= 99.0) return SendClientMessage(playerid, -1, "{FFFFFF}¿Es que quieres reventar?");

					GivePlayerCash(playerid, -CLUCKIN_BELL_FOOD[listitem][food_PRICE]);
					Add_Hungry_Thirst(playerid, CLUCKIN_BELL_FOOD[listitem][food_HUNGRY], CLUCKIN_BELL_FOOD[listitem][food_THIRST]);

					PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);

					new action[64];
					format(action, sizeof action, "compra %s y lo consume.", CLUCKIN_BELL_FOOD[listitem][food_NAME]);
					Auto_SendPlayerAction(playerid, action);

					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);

					ShowDialog(playerid, dialogid);
				}
				else
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {FF6633}$%d {FFFFFF}para poder comprarlo.", CLUCKIN_BELL_FOOD[listitem][food_PRICE] - CHARACTER_INFO[playerid][ch_CASH]);
				}
			}
			else SendClientMessageEx(playerid, -1, "Gracias por su visita a {00FF00}%s {FFFFFF}vuelva pronto.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
			return 1;
		}
		case DIALOG_FOOD_DONUT:
		{
			if(response)
			{
				if(CHARACTER_INFO[playerid][ch_CASH] >= DONUT_FOOD[listitem][food_PRICE])
				{
					if(CHARACTER_INFO[playerid][ch_HUNGRY] >= 99.0 && CHARACTER_INFO[playerid][ch_THIRST] >= 99.0) return SendClientMessage(playerid, -1, "{FFFFFF}¿Es que quieres reventar?");

					GivePlayerCash(playerid, -DONUT_FOOD[listitem][food_PRICE]);
					Add_Hungry_Thirst(playerid, DONUT_FOOD[listitem][food_HUNGRY], DONUT_FOOD[listitem][food_THIRST]);

					PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);

					new action[64];
					format(action, sizeof action, "compra %s y lo consume.", DONUT_FOOD[listitem][food_NAME]);
					Auto_SendPlayerAction(playerid, action);

					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);

					ShowDialog(playerid, dialogid);
				}
				else
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {FF6633}$%d {FFFFFF}para poder comprarlo.", DONUT_FOOD[listitem][food_PRICE] - CHARACTER_INFO[playerid][ch_CASH]);
				}
			}
			else SendClientMessageEx(playerid, -1, "Gracias por su visita a {00FF00}%s {FFFFFF}vuelva pronto.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
			return 1;
		}
		case DIALOG_FOOD_CAFE:
		{
			if(response)
			{
				if(CHARACTER_INFO[playerid][ch_CASH] >= CAFE_FOOD[listitem][food_PRICE])
				{
					if(CHARACTER_INFO[playerid][ch_HUNGRY] >= 99.0 && CHARACTER_INFO[playerid][ch_THIRST] >= 99.0) return SendClientMessage(playerid, -1, "{FFFFFF}¿Es que quieres reventar?");

					GivePlayerCash(playerid, -CAFE_FOOD[listitem][food_PRICE]);
					Add_Hungry_Thirst(playerid, CAFE_FOOD[listitem][food_HUNGRY], CAFE_FOOD[listitem][food_THIRST]);

					PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);

					new action[64];
					format(action, sizeof action, "compra %s y lo consume.", CAFE_FOOD[listitem][food_NAME]);
					Auto_SendPlayerAction(playerid, action);

					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);

					ShowDialog(playerid, dialogid);
				}
				else
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {FF6633}$%d {FFFFFF}para poder comprarlo.", CAFE_FOOD[listitem][food_PRICE] - CHARACTER_INFO[playerid][ch_CASH]);
				}
			}
			else SendClientMessageEx(playerid, -1, "Gracias por su visita a {00FF00}%s {FFFFFF}vuelva pronto.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
			return 1;
		}
		case DIALOG_FOOD_TACO:
		{
			if(response)
			{
				if(CHARACTER_INFO[playerid][ch_CASH] >= TACO_FOOD[listitem][food_PRICE])
				{
					if(CHARACTER_INFO[playerid][ch_HUNGRY] >= 99.0 && CHARACTER_INFO[playerid][ch_THIRST] >= 99.0) return SendClientMessage(playerid, -1, "{FFFFFF}¿Es que quieres reventar?");

					GivePlayerCash(playerid, -TACO_FOOD[listitem][food_PRICE]);
					Add_Hungry_Thirst(playerid, TACO_FOOD[listitem][food_HUNGRY], TACO_FOOD[listitem][food_THIRST]);

					PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);

					new action[64];
					format(action, sizeof action, "compra %s y lo consume.", TACO_FOOD[listitem][food_NAME]);
					Auto_SendPlayerAction(playerid, action);

					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);

					ShowDialog(playerid, dialogid);
				}
				else
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {FF6633}$%d {FFFFFF}para poder comprarlo.", TACO_FOOD[listitem][food_PRICE] - CHARACTER_INFO[playerid][ch_CASH]);
				}
			}
			else SendClientMessageEx(playerid, -1, "Gracias por su visita a {00FF00}%s {FFFFFF}vuelva pronto.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
			return 1;
		}
		case DIALOG_FOOD_STEAK:
		{
			if(response)
			{
				if(CHARACTER_INFO[playerid][ch_CASH] >= STEAK_FOOD[listitem][food_PRICE])
				{
					if(CHARACTER_INFO[playerid][ch_HUNGRY] >= 99.0 && CHARACTER_INFO[playerid][ch_THIRST] >= 99.0) return SendClientMessage(playerid, -1, "{FFFFFF}¿Es que quieres reventar?");

					GivePlayerCash(playerid, -STEAK_FOOD[listitem][food_PRICE]);
					Add_Hungry_Thirst(playerid, STEAK_FOOD[listitem][food_HUNGRY], STEAK_FOOD[listitem][food_THIRST]);

					PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);

					new action[64];
					format(action, sizeof action, "compra %s y lo consume.", STEAK_FOOD[listitem][food_NAME]);
					Auto_SendPlayerAction(playerid, action);

					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);

					ShowDialog(playerid, dialogid);
				}
				else
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {FF6633}$%d {FFFFFF}para poder comprarlo.", STEAK_FOOD[listitem][food_PRICE] - CHARACTER_INFO[playerid][ch_CASH]);
				}
			}
			else SendClientMessageEx(playerid, -1, "Gracias por su visita a {00FF00}%s {FFFFFF}vuelva pronto.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
			return 1;
		}
		case DIALOG_FERRETERIA:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(CHARACTER_INFO[playerid][ch_CASH] < 1200) return ShowPlayerMessage(playerid, "No tienes dinero.", 3);
						if(PLAYER_MISC[playerid][MISC_LATA_PINTURA] == 1) return SendClientMessage(playerid, -1, "Ya tienes una máquina de pintura.");

						PLAYER_MISC[playerid][MISC_LATA_PINTURA] = 1;
						GivePlayerCash(playerid, -1200);

						ShowPlayerMessageNotification(playerid, "Podrás pintar vehículos. Pero sólo si tienes 10 puntos en mecánico, revisa ~y~/habilidades ~w~~h~para mirar tus puntos", 7);
					}
					case 1:
					{
					    if(CHARACTER_INFO[playerid][ch_CASH] < 1300) return ShowPlayerMessage(playerid, "No tienes dinero.", 3);
						if(PLAYER_MISC[playerid][MISC_HERRAMIENTA] == 1) return SendClientMessage(playerid, -1, "Ya tienes esta herramienta.");

						PLAYER_MISC[playerid][MISC_HERRAMIENTA] = 1;
						GivePlayerCash(playerid, -1300);

						ShowPlayerMessageNotification(playerid, "Podrás modificar vehículos. Pero sólo si si tienes 20 puntos en mecánico, revisa ~y~/habilidades ~w~~h~para mirar tus puntos.", 7);
					}
				}
			}
			return 1;
		}
		case DIALOG_PLAYER_TOYS:
		{
			if(response)
			{
				if(listitem == MAX_PLAYER_ATTACHED_OBJECTS) return ShowDialog(playerid, DIALOG_PLAYER_TOY_DELETE_ALL);
				if(!ACCOUNT_INFO[playerid][ac_SU] && listitem >= MAX_NU_TOYS)
				{
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Premium", "{FFFFFF}Necesitas ser usuario {f4d942}premium{FFFFFF} para tener más objetos compra el {f4d942}premium{FFFFFF} con sólo {f44242}5 koins.", "Salir", "");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			}
			return 1;
		}
		case DIALOG_PLAYER_TOY_MENU:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: //colocar / quitar
					{
						if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) // tiene accesorio puesto
						{
							PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED] = false;
							RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);

							new action[45]; format(action, sizeof action, "se quita su \"%s\"", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
							Auto_SendPlayerAction(playerid, action);
						}
						else // No lo tiene puesto
						{
							if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE] == -1) return ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);

							PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED] = true;
							RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);

							SetPlayerAttachedObject
							(
								playerid,
								PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
							);

							new action[45]; format(action, sizeof action, "se coloca su \"%s\"", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
							Auto_SendPlayerAction(playerid, action);
						}
					}
					case 1: ShowDialog(playerid, DIALOG_PLAYER_TOY_EDIT_NAME);
					case 2: //Configurar
					{
						if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE] == -1)
						{
							ShowDialog(playerid, DIALOG_PLAYER_TOY_SELECT_BONE);
							return 1;
						}
						ShowDialog(playerid, DIALOG_PLAYER_TOY_EDIT_BONE);
					}
					case 3: ShowDialog(playerid, DIALOG_PLAYER_TOY_COLOR_1);
					case 4: ShowDialog(playerid, DIALOG_PLAYER_TOY_COLOR_2);
					case 5: ShowDialog(playerid, DIALOG_PLAYER_TOY_CONFIRMDELETE);
				}
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOYS);
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_NAME:
		{
			if(response)
			{
				if(!strlen(inputtext) || strlen(inputtext) > 24)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}El nombre del accesorio debe contener de 1 a 24 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				format(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME], 24, "%s", inputtext);
				ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_CONFIRMDELETE:
		{
			if(response)
			{
				new DB_Query[130];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_TOYS` WHERE `ID_USER` = '%d' AND `ID_TOY` = '%d';", ACCOUNT_INFO[playerid][ac_ID], PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ID]);
				db_query(Database, DB_Query);

				if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);

				SendClientMessageEx(playerid, -1, "{FFFFFF}Accesorio \"%s\" eliminado.", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);

				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_VALID] = false;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ID] = 0;
				format(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME], 24, "");
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED] = false;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID] = 0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE] = 0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1] = 0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2] = 0;
				PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] = 0;

				ShowDialog(playerid, DIALOG_PLAYER_TOYS);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_SELECT_BONE:
		{
			if(response)
			{
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE] = listitem + 1;
				EditPlayerToy(playerid);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_BONE:
		{
			if(response) ShowDialog(playerid, DIALOG_PLAYER_TOY_SELECT_BONE);
			else EditPlayerToy(playerid);
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_1:
		{
			if(response)
			{
				if(listitem == 0) PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1] = 0;
				else PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1] = RGBAToARGB(RandomColors[listitem]);

				if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) UpdatePlayerToy(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
				SendClientMessage(playerid, -1, "{FFFFFF}Color del accesorio actualizado.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_2:
		{
			if(response)
			{
				if(listitem == 0) PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2] = 0;
				else PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2] = RGBAToARGB(RandomColors[listitem]);

				if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) UpdatePlayerToy(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
				SendClientMessage(playerid, -1, "{FFFFFF}Color del accesorio actualizado.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_DELETE_ALL:
		{
			if(response)
			{
				new DB_Query[90];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_TOYS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				new temp_PLAYER_TOYS[Player_Toys_Info];
				for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
				{
					RemovePlayerAttachedObject(playerid, i);
					PLAYER_TOYS[playerid][i] = temp_PLAYER_TOYS;
				}

				SendClientMessage(playerid, -1, "{FFFFFF}Ha eliminado todos tus accesorios.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOYS);
			return 1;
		}
		case DIALOG_TOYS_TYPE:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
					    PLAYER_TEMP[playerid][pt_TOYS_SHOP_TYPE] = 1;

						SetPlayerVirtualWorld(playerid, playerid + MAX_PLAYERS); // World = Playerid + Max_players
						TogglePlayerControllable(playerid, false);

						PLAYER_TEMP[playerid][pt_TOYS_SHOP] = true;
						PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = 0;
						SendClientMessage(playerid, -1, "Pulsa {00CCFF}ESCAPE {FFFFFF}para salir del menú.");
						SelectTextDrawEx(playerid, 0xe8d08fFF);

						UpdateToysShopSombreros(playerid);
						ShowToysShopTextdraws(playerid);
					}
					case 1:
					{
					    PLAYER_TEMP[playerid][pt_TOYS_SHOP_TYPE] = 2;

						SetPlayerVirtualWorld(playerid, playerid + MAX_PLAYERS); // World = Playerid + Max_players
						TogglePlayerControllable(playerid, false);

						PLAYER_TEMP[playerid][pt_TOYS_SHOP] = true;
						PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = 0;
						SendClientMessage(playerid, -1, "Pulsa {00CCFF}ESCAPE {FFFFFF}para salir del menú.");
						SelectTextDrawEx(playerid, 0xe8d08fFF);

						UpdateToysShopGafas(playerid);
						ShowToysShopTextdraws(playerid);
					}
					case 2:
					{
					    PLAYER_TEMP[playerid][pt_TOYS_SHOP_TYPE] = 3;

						SetPlayerVirtualWorld(playerid, playerid + MAX_PLAYERS); // World = Playerid + Max_players
						TogglePlayerControllable(playerid, false);

						PLAYER_TEMP[playerid][pt_TOYS_SHOP] = true;
						PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = 0;
						SendClientMessage(playerid, -1, "Pulsa {00CCFF}ESCAPE {FFFFFF}para salir del menú.");
						SelectTextDrawEx(playerid, 0xe8d08fFF);

						UpdateToysShopMascaras(playerid);
						ShowToysShopTextdraws(playerid);
					}
					case 3:
					{
					    PLAYER_TEMP[playerid][pt_TOYS_SHOP_TYPE] = 4;

						SetPlayerVirtualWorld(playerid, playerid + MAX_PLAYERS); // World = Playerid + Max_players
						TogglePlayerControllable(playerid, false);

						PLAYER_TEMP[playerid][pt_TOYS_SHOP] = true;
						PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = 0;
						SendClientMessage(playerid, -1, "Pulsa {00CCFF}ESCAPE {FFFFFF}para salir del menú.");
						SelectTextDrawEx(playerid, 0xe8d08fFF);

						UpdateToysShopMochilas(playerid);
						ShowToysShopTextdraws(playerid);
					}
					case 4:
					{
					    PLAYER_TEMP[playerid][pt_TOYS_SHOP_TYPE] = 5;

						SetPlayerVirtualWorld(playerid, playerid + MAX_PLAYERS); // World = Playerid + Max_players
						TogglePlayerControllable(playerid, false);

						PLAYER_TEMP[playerid][pt_TOYS_SHOP] = true;
						PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = 0;
						SendClientMessage(playerid, -1, "Pulsa {00CCFF}ESCAPE {FFFFFF}para salir del menú.");
						SelectTextDrawEx(playerid, 0xe8d08fFF);

						UpdateToysShopRelojes(playerid);
						ShowToysShopTextdraws(playerid);
					}
					case 5:
					{
					    PLAYER_TEMP[playerid][pt_TOYS_SHOP_TYPE] = 6;

						SetPlayerVirtualWorld(playerid, playerid + MAX_PLAYERS); // World = Playerid + Max_players
						TogglePlayerControllable(playerid, false);

						PLAYER_TEMP[playerid][pt_TOYS_SHOP] = true;
						PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = 0;
						SendClientMessage(playerid, -1, "Pulsa {00CCFF}ESCAPE {FFFFFF}para salir del menú.");
						SelectTextDrawEx(playerid, 0xe8d08fFF);

						UpdateToysShopEspeciales(playerid);
						ShowToysShopTextdraws(playerid);
					}
				}
   			}
   			return 1;
		}
		case DIALOG_BANK:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_BANK_WITHDRAW);
					case 1: ShowDialog(playerid, DIALOG_BANK_DEPOSIT);
					case 2: ShowDialog(playerid, DIALOG_BANK_TRANSFER);
					case 3: ShowDialog(playerid, DIALOG_BANK_TRANSACTIONS);
				}
			}
			else
			{
			    if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE])
			    {
			        ShowPlayeriPhone(playerid);
			        ShowPlayeriPhoneApps(playerid);
			    }
				PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
			}
			return 1;
		}
		case DIALOG_BANK_WITHDRAW:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}No pudimos detectar una cifra, coloque sólo números.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}Coloque una cantidad que sea positiva.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] > BANK_ACCOUNT[playerid][bank_account_BALANCE])
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}Usted no cuenta con la cantidad solicitada, intente de nuevo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM])
				{
					if(inputtext[0] > 10000)
					{
						PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, -1, "{FFFFFF}La cantidad máxima para retirar en un cajero es de {41f48f}$10.000");
						ShowDialog(playerid, dialogid);
						return 1;
					}
				}

				BANK_ACCOUNT[playerid][bank_account_BALANCE] -= inputtext[0];
				GivePlayerCash(playerid, inputtext[0]);

				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_WITHDRAW, inputtext[0]);

				SendClientMessageEx(playerid, 0x00FF00FF, "¡Listo! {FFFFFF}su dinero ha sido {00FF00}retirado{FFFFFF}, cantidad: {41f48f}$%s{FFFFFF}.", number_format_thousand(inputtext[0]));
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
			}
			else ShowDialog(playerid, DIALOG_BANK);
			return 1;
		}
		case DIALOG_BANK_DEPOSIT:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}No pudimos detectar una cifra, coloque sólo números.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}Coloque una cantidad positiva.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] > CHARACTER_INFO[playerid][ch_CASH])
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}Usted no cuenta con la cantidad solicitada, intente de nuevo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM])
				{
					if(inputtext[0] > 10000)
					{
						PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
      					SendClientMessage(playerid, -1, "{FFFFFF}La cantidad máxima para depositar en un cajero es de {41f48f}$10.000");
						ShowDialog(playerid, dialogid);
						return 1;
					}
				}

				GivePlayerCash(playerid, -inputtext[0]);
				BANK_ACCOUNT[playerid][bank_account_BALANCE] += inputtext[0];

				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_DEPOSIT, inputtext[0]);

				SendClientMessageEx(playerid, 0x00FF00FF, "¡Listo! {FFFFFF}su dinero ha sido {00FF00}depositado{FFFFFF}, cantidad: {41f48f}$%s{FFFFFF}.", number_format_thousand(inputtext[0]));
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
			}
			else ShowDialog(playerid, DIALOG_BANK);
			return 1;
		}
		case DIALOG_BANK_TRANSFER:
		{
			if(response)
			{
			    if(ACCOUNT_INFO[playerid][ac_LEVEL] < 3) return SendClientMessage(playerid, -1, "{FFFFFF}Necesitas ser nivel 3 para poder transferir dinero.");
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}No pudimos detectar una cifra, coloque sólo números.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}Coloque una cantidad positiva.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new DBResult:Result, bool:valid_account, DB_Query[90];
				format(DB_Query, sizeof(DB_Query), "SELECT * FROM `BANK_ACCOUNTS` WHERE `ID_ACCOUNT` = '%d'", inputtext[0]);
				Result = db_query(Database, DB_Query);
				if(db_num_rows(Result)) valid_account = true;
				db_free_result(Result);

				if(valid_account)
				{
					PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT] = inputtext[0];
					ShowDialog(playerid, DIALOG_BANK_TRANSFER_SEND);
				}
				else
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}El número de cuenta introducido no existe o no es correcto.");
					PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
				}
			}
			else ShowDialog(playerid, DIALOG_BANK);
			return 1;
		}
		case DIALOG_BANK_TRANSFER_SEND:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}No pudimos detectar una cifra, coloque sólo números.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}Coloque una cantidad positiva.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] > BANK_ACCOUNT[playerid][bank_account_BALANCE])
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}Usted no cuenta con la cantidad solicitada, intente de nuevo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM])
				{
					if(inputtext[0] > 10000)
					{
						PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
      					SendClientMessage(playerid, -1, "{FFFFFF}La cantidad máxima para envíar en un cajero es de {41f48f}$10.000");
						ShowDialog(playerid, dialogid);
						return 1;
					}
				}

				BANK_ACCOUNT[playerid][bank_account_BALANCE] -= inputtext[0];
				new transfer_player_id = GetPlayerIdByBankAccountId(PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT]);

				new DB_Query[300], message[64];
				format(message, sizeof message, "Tranferencia recibida: +$%s", number_format_thousand(inputtext[0]));

				if(transfer_player_id == -1)
				{
					new DBResult:Result;
					format(DB_Query, sizeof DB_Query, "SELECT `PHONE`.`PHONE_NUMBER` FROM `PHONE`, `BANK_ACCOUNTS` WHERE `BANK_ACCOUNTS`.`ID_ACCOUNT` = '%d' AND `PHONE`.`ID_USER` = `BANK_ACCOUNTS`.`ID_USER`;", PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT]);

					Result = db_query(Database, DB_Query);

					if(db_num_rows(Result))
					{
						new phone_number = db_get_field_int(Result, 0);
						RegisterPhoneMessage(6740, phone_number, message, true);
					}
					db_free_result(Result);
				}
				else
				{
					BANK_ACCOUNT[transfer_player_id][bank_account_BALANCE] += inputtext[0];

					if(PLAYER_PHONE[transfer_player_id][player_phone_VALID])
					{
						RegisterPhoneMessage(6740, PLAYER_PHONE[transfer_player_id][player_phone_NUMBER], message);
						if(PLAYER_PHONE[transfer_player_id][player_phone_STATE] == PHONE_STATE_ON)
						{
							if((PLAYER_TEMP[transfer_player_id][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[transfer_player_id][pt_GAME_STATE] == GAME_STATE_DEAD))
							{
								SendClientMessageEx(transfer_player_id,  0x12bc7eFF, "@WHATSAPP:{25d366} recibido de {12bc7e}%s:{25d366} %s", convertPhoneNumber(transfer_player_id, 6740), message);
							}
						}
					}
				}

				format(DB_Query, sizeof(DB_Query), "\
					UPDATE `BANK_ACCOUNTS` SET\
						`BALANCE` = BALANCE + '%d' \
					WHERE `ID_ACCOUNT` = '%d';\
					UPDATE `BANK_ACCOUNTS` SET\
						`BALANCE` = '%d' \
					WHERE `ID_ACCOUNT` = '%d';\
				",
					inputtext[0], PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT],
					BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID]
				);

				db_query(Database, DB_Query);

				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_TRANSFER_SENT, inputtext[0], PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT]);
				RegisterBankAccountTransaction(PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT], BANK_TRANSACTION_TRANSFER_RECE, inputtext[0], BANK_ACCOUNT[playerid][bank_account_ID]);

				SendClientMessageEx(playerid, 0x00FF00FF, "¡Listo! {FFFFFF}hemos envíado {41f48f}$%s {FFFFFF}al número de cuenta {00FF00}%s.", number_format_thousand(inputtext[0]), number_format_thousand(PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT]));
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT] = 0;
				PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
			}
			else
			{
				PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT] = 0;
				ShowDialog(playerid, DIALOG_BANK_TRANSFER);
			}
			return 1;
		}
		case DIALOG_CREATE_BANK_ACCOUNT:
		{
			if(response)
			{
				if(CHARACTER_INFO[playerid][ch_CASH] >= 500)
				{
					GivePlayerCash(playerid, -500);
					BANK_ACCOUNT[playerid][bank_account_BALANCE] = 500;

					new DBResult:Result, DB_Query[190];
					format(DB_Query, sizeof DB_Query,
					"\
						INSERT INTO `BANK_ACCOUNTS`\
						(\
							`ID_USER`, `BALANCE`\
						)\
						VALUES\
						(\
							'%d', '%d'\
						);\
						SELECT `ID_ACCOUNT` FROM `BANK_ACCOUNTS` WHERE `ID_USER` = '%d';\
					", ACCOUNT_INFO[playerid][ac_ID], BANK_ACCOUNT[playerid][bank_account_BALANCE], ACCOUNT_INFO[playerid][ac_ID]);
					Result = db_query(Database, DB_Query);

					if(db_num_rows(Result)) BANK_ACCOUNT[playerid][bank_account_ID] = db_get_field_assoc_int(Result, "ID_ACCOUNT");
					db_free_result(Result);

					RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_CREATE_ACCOUNT, 500);

					PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, 0x00FF00FF, "¡Excelente! {FFFFFF}te hemos abierto una cuenta. Tú número es {00FF00}%s.", number_format_thousand(BANK_ACCOUNT[playerid][bank_account_ID]));
				}
				else
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te hacen falta {41f48f}$%d.", 500 - CHARACTER_INFO[playerid][ch_CASH]);
				}
			}
			return 1;
		}
		case DIALOG_BANK_TRANSACTIONS:
		{
			if(response) PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
			else ShowDialog(playerid, DIALOG_BANK);
			return 1;
		}
		case DIALOG_247_LIST:
		{
			if(response)
			{
				switch(Supermarket_Product_List[listitem][product_TYPE])
				{
					case PRODUCT_TYPE_FOOD:
					{
						if(CHARACTER_INFO[playerid][ch_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							new slot = GetEmptyPlayerPocketSlot(playerid);
							if(slot == -1)
							{
								PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
								SendClientMessage(playerid, -1, "{FFFFFF}No tienes más espacio entre tus alimentos, elimina algo con {FFFF00}/alimentos.");
								return 1;
							}

							GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE]);

							PLAYER_POCKET[playerid][slot][player_pocket_VALID] = true;
							format(PLAYER_POCKET[playerid][slot][player_pocket_object_NAME], 24, "%s", Supermarket_Product_List[listitem][product_NAME]);
							PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY] = Supermarket_Product_List[listitem][product_HUNGRY];
							PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST] = Supermarket_Product_List[listitem][product_THIRST];
							PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK] = Supermarket_Product_List[listitem][product_DRUNK];
							RegisterNewPlayerPocketObject(playerid, slot);

							SendClientMessageEx(playerid, -1, "Has comprado {00FF00}%s {FFFFFF}por {FFCC00}$%d, {FFFFFF}para consumirlo usa {FFFF00}/alimentos.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE]);
							PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
						}
						else
						{
							PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - CHARACTER_INFO[playerid][ch_CASH]));
						}
					}
					case PRODUCT_TYPE_PHONE:
					{
						if(CHARACTER_INFO[playerid][ch_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if(PLAYER_PHONE[playerid][player_phone_VALID])
							{
								SendClientMessageEx(playerid, -1, "{FFFFFF}Ya tienes un teléfono.");
								PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}

							GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE]);

							PLAYER_PHONE[playerid][player_phone_VALID] = true;
							PLAYER_PHONE[playerid][player_phone_NUMBER] = 52000000 + ACCOUNT_INFO[playerid][ac_ID];
							PLAYER_PHONE[playerid][player_phone_STATE] = PHONE_STATE_ON;
							PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER] = true;
							RegisterNewPlayerPhone(playerid);

							ShowPlayerMessageNotification(playerid, "Con tu ~y~/iphone ~w~podrás pedir servicios, escuchar música, entre otras funciones.", 5);

							new slot;

							PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
							format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Policia");
							PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 911;
							RegisterNewPlayerPhoneBook(playerid, slot);
							slot ++;

							PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
							format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Medico");
							PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 1;
							RegisterNewPlayerPhoneBook(playerid, slot);
							slot ++;

							PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
							format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Grua");
							PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 4;
							RegisterNewPlayerPhoneBook(playerid, slot);
							slot ++;

							PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
							format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Taxi");
							PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 2;
							RegisterNewPlayerPhoneBook(playerid, slot);
							slot ++;

							PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
							format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Mecanico");
							PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 3;
							RegisterNewPlayerPhoneBook(playerid, slot);
							slot ++;

							SendClientMessageEx(playerid, -1, "Has comprado un {00FF00}%s {FFFFFF}por {FFCC00}$%d, {FFFFFF}tu número es {00FF00}%s.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE], number_format_dash(PLAYER_PHONE[playerid][player_phone_NUMBER]));
							PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
						}
						else
						{
							PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - CHARACTER_INFO[playerid][ch_CASH]));
						}

					}
					case PRODUCT_TYPE_GPS:
					{
						if(CHARACTER_INFO[playerid][ch_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if(PLAYER_OBJECT[playerid][po_GPS])
							{
								SendClientMessageEx(playerid, -1, "{FFFFFF}Ya tienes un GPS.");
								PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}

							GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE]);

							PLAYER_OBJECT[playerid][po_GPS] = true;
							SendClientMessageEx(playerid, -1, "Has comprado un {00FF00}%s {FFFFFF}por {FFCC00}$%d, {FFFFFF}usa {FFFF00}/GPS {FFFFFF}para usarlo.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE]);
							PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
							ShowPlayerMessageNotification(playerid, "¡Excelente! Escribe ~y~/gps ~w~~h~para conocerlo.", 5);
						}
						else
						{
							PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - CHARACTER_INFO[playerid][ch_CASH]));
						}
					}
					case PRODUCT_TYPE_MP3:
					{
						if(CHARACTER_INFO[playerid][ch_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if(PLAYER_OBJECT[playerid][po_MP3])
							{
								SendClientMessageEx(playerid, -1, "{FFFFFF}Ya tienes unos audifonos.");
								PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}

							GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE]);

							PLAYER_OBJECT[playerid][po_MP3] = true;
							//SendClientMessageEx(playerid, -1, "Has comprado un {00FF00}%s {FFFFFF}por {FFCC00}$%d, {FFFFFF}usa {FFFF00}/audifonos {FFFFFF}para usarlo.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE]);
							PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
						}
						else
						{
							PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - CHARACTER_INFO[playerid][ch_CASH]));
						}
					}
					case PRODUCT_TYPE_PHONE_RESOLVER:
					{
						if(CHARACTER_INFO[playerid][ch_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if(PLAYER_OBJECT[playerid][po_PHONE_RESOLVER])
							{
								SendClientMessageEx(playerid, -1, "{FFFFFF}Ya tienes una guía telefónica.");
								PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}

							GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE]);

							PLAYER_OBJECT[playerid][po_PHONE_RESOLVER] = true;
							SendClientMessageEx(playerid, -1, "Has comprado una {00FF00}%s {FFFFFF}por {FFCC00}$%d, {FFFFFF}usa {FFFF00}/guia {FFFFFF}para usarla.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE]);
							PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
							ShowPlayerMessageNotification(playerid, "¡Muy bien! Escribe ~y~/agenda [id] ~w~~h~para conocer el número de alguna persona.", 5);
						}
						else
						{
							PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - CHARACTER_INFO[playerid][ch_CASH]));
						}
					}
				}
			}
			return 1;
		}
		case DIALOG_PLAYER_POCKET:
		{
			if(response)
			{
				if(listitem == MAX_PLAYER_POCKET_OBJECTS) return ShowDialog(playerid, DIALOG_PLAYER_POCKET_DELETE_ALL);
				if(!PLAYER_POCKET[playerid][listitem][player_pocket_VALID])
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Este slot está vacío.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED] = listitem;
				ShowDialog(playerid, DIALOG_PLAYER_POCKET_OPTIONS);
			}
			return 1;
		}
		case DIALOG_PLAYER_POCKET_OPTIONS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: //Consumir
					{
						if(CHARACTER_INFO[playerid][ch_HUNGRY] >= 99.0 && CHARACTER_INFO[playerid][ch_THIRST] >= 99.0)
						{
							PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED] = 0;
							SendClientMessage(playerid, -1, "{FFFFFF}¿Es que quieres reventar?");
							return 1;
						}

						Add_Hungry_Thirst(playerid, PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]][player_pocket_object_HUNGRY], PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]][player_pocket_object_THIRST]);
						GivePlayerDrunkLevel(playerid, PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]][player_pocket_object_DRUNK]);

						new action[64];
						format(action, sizeof action, "consume %s.", PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]][player_pocket_object_NAME]);
						Auto_SendPlayerAction(playerid, action);

						DeletePlayerPocketObject(playerid, PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]);
						PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED] = 0;

						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);
					}
					case 1: //Eliminar
					{
						SendClientMessageEx(playerid, -1, "{FFFFFF}Has eliminado \"%s\" de tus alimentos.", PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]][player_pocket_object_NAME]);
						DeletePlayerPocketObject(playerid, PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]);
						PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED] = 0;
					}
				}
			}
			else
			{
				PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED] = 0;
				ShowDialog(playerid, DIALOG_PLAYER_POCKET);
			}
			return 1;
		}
		case DIALOG_PLAYER_POCKET_DELETE_ALL:
		{
			if(response)
			{
				new DB_Query[90];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_POCKET` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				new temp_PLAYER_POCKET[Player_Pocket_Enum];
				for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++) PLAYER_POCKET[playerid][i] = temp_PLAYER_POCKET;

				SendClientMessage(playerid, -1, "{FFFFFF}Ha eliminado todo lo que tenías en tus alimentos.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_POCKET);
			return 1;
		}
		case DIALOG_SHUTDOWN_IPHONE:
		{
			if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) EndPhoneCall(playerid);
			PLAYER_PHONE[playerid][player_phone_STATE] = PHONE_STATE_OFF;
			SendClientMessage(playerid, -1, "{FFFFFF}Has apagado tu teléfono, ahora no recibirás llamadas.");
			HidePlayeriPhone(playerid);
			HidePlayeriPhoneApps(playerid);
			return 1;
		}
		case DIALOG_PHONE:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: //Agenda
					{
						if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF)
						{
							PLAYER_PHONE[playerid][player_phone_STATE] = PHONE_STATE_ON;
							ShowDialog(playerid, dialogid);
							return 1;
						}
						ShowDialog(playerid, DIALOG_PHONE_BOOK);
					}
					case 1: //Llamar
					{
						if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessage(playerid, -1, "{FFFFFF}Tu teléfono está apagado, enciéndelo para usarlo.");
						ShowDialog(playerid, DIALOG_PHONE_CALL_NUMBER);
					}
					case 2: //Enviar mensaje
					{
						if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessage(playerid, -1, "{FFFFFF}Tu teléfono está apagado, enciéndelo para usarlo.");
						ShowDialog(playerid, DIALOG_PHONE_SMS_NUMBER);
					}
					case 3: //Ver mensajes recibidos
					{
						if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessage(playerid, -1, "{FFFFFF}Tu teléfono está apagado, enciéndelo para usarlo.");
						ShowDialog(playerid, DIALOG_PHONE_RECEIVED_MESSAGES);
					}
					case 4: //Ver mensajes enviados
					{
						if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessage(playerid, -1, "{FFFFFF}Tu teléfono está apagado, enciéndelo para usarlo.");
						ShowDialog(playerid, DIALOG_PHONE_SENT_MESSAGES);
					}
					case 5: //Tienda
					{
						if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessage(playerid, -1, "{FFFFFF}Tu teléfono está apagado, enciéndelo para usarlo.");

						ShowPlayerShop(playerid);
					}
					case 6: //Apagar
					{
						if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessage(playerid, -1, "{FFFFFF}Tu teléfono está apagado, enciéndelo para usarlo.");

						if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) EndPhoneCall(playerid);
						PLAYER_PHONE[playerid][player_phone_STATE] = PHONE_STATE_OFF;
						SendClientMessage(playerid, -1, "{FFFFFF}Has apagado tu teléfono, ahora no recibirás llamadas.");
					}
				}
			}
			return 1;
		}
		case DIALOG_PHONE_BOOK:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, dialogid);
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == MAX_PHONE_CONTACTS + 10) return ShowDialog(playerid, DIALOG_PHONE_BOOK_ADD_NUMBER);
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == MAX_PHONE_CONTACTS + 20) return ShowDialog(playerid, DIALOG_PHONE_BOOK_DELETE_ALL);

				PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
			}
			else
			{
				if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE])
			    {
			        ShowPlayeriPhone(playerid);
			        ShowPlayeriPhoneApps(playerid);
			    }
				ShowDialog(playerid, DIALOG_PHONE);
			}
			return 1;
		}
		case DIALOG_PHONE_BOOK_ADD_NUMBER:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}Introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}Introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_ADD_NUMBER] = inputtext[0];
				ShowDialog(playerid, DIALOG_PHONE_BOOK_ADD_NAME);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK);
			return 1;
		}
		case DIALOG_PHONE_BOOK_ADD_NAME:
		{
			if(response)
			{
				if(isnull(inputtext))
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(strlen(inputtext) > 24)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Caracteres: 1-24.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new slot = GetEmptyPlayerPhoneBookSlot(playerid);
				if(slot == -1) return SendClientMessage(playerid, -1, "{FFFFFF}Memoria de la agenda llena.");


				PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
				format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "%s", inputtext);
				PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_ADD_NUMBER];
				RegisterNewPlayerPhoneBook(playerid, slot);

				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "Nuevo contacto añadido a la agenda: Nombre: {00FF00}%s {FFFFFF}Teléfono: {00FF00}%s.", PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], number_format_dash(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER]));
				ShowDialog(playerid, DIALOG_PHONE_BOOK);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK_ADD_NUMBER);
			return 1;
		}
		case DIALOG_PHONE_BOOK_OPTIONS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: //llamar
					{
						if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return ShowPlayerMessage(playerid, "Estás en una llamada", 3);

						switch(PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER])
						{
							case 911:
							{
								if(ACCOUNT_INFO[playerid][ac_LEVEL] < 3) return SendClientMessage(playerid, -1, "{FFFFFF}Debes ser al menos nivel 3 para llamar a la policía.");
								PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
								PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = true;
								PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = false;

								SendClientMessage(playerid, 0x4286f4FF, "@911: {98baf2}Ha llamado a la central de policía, indícanos su nombre por favor.");
								return 1;
							}
							case 2: //Taxi
							{
								if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
								{
									PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
									DisablePlayerTaxiMark(playerid);
									SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
									SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha cancelado su llamado de taxistas.");
									ShowPlayerMessage(playerid, "Llamada finalizada.", 3);								}
								else
								{
									PLAYER_TEMP[playerid][pt_WANT_TAXI] = true;
									SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
									SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha envíado su llamado a los radios de los taxistas, espere en su ubicación a un taxista.");
									ShowPlayerMessage(playerid, "Llamada finalizada.", 3);
									SendAlertToTaxiDrivers(playerid);
								}
								return 1;
							}
							case 3: //Mecanico
							{
								if(PLAYER_TEMP[playerid][pt_WANT_MECHANIC])
								{
									PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = false;
									DisablePlayerMechanicMark(playerid);
									SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
									SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha cancelado su llamado de mecánico.");
									ShowPlayerMessage(playerid, "Llamada finalizada.", 3);
								}
								else
								{
									PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = true;
									SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
									SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha envíado su llamado a los radios de los mecánicos, espere a un mecánico.");
									ShowPlayerMessage(playerid, "Llamada finalizada.", 3);
									SendAlertToMechanic(playerid);
								}
								return 1;
							}
							case 1:
							{
							  	if(CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_CRACK) return ShowPlayerMessage(playerid, "No estás delirando", 3);
					   			if(PLAYER_TEMP[playerid][pt_WANT_MEDIC]) return ShowPlayerMessage(playerid, "Ya alertaste a los médicos.", 3);

					   			PLAYER_TEMP[playerid][pt_WANT_MEDIC] = true;
								SendClientMessage(playerid, -1, "{FFFFFF}Tu llamada se ha enviado a los médicos disponibles, espera a que llegue una ambulancia.");
								SendAlertToMedics(playerid);
							    return 1;
							}
							case 4:
							{
							    SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
							    SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Seleccione que auto desea remolcar, el servicio tiene un costo.");
							    ShowDialog(playerid, DIALOG_CRANE_SELECT_VEHICLE);
							    return 1;
							}
						}

						new to_playerid = INVALID_PLAYER_ID;
						for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
						{
							if(IsPlayerConnected(i))
							{
								if((PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL) && PLAYER_PHONE[i][player_phone_NUMBER] == PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER])
								{
									to_playerid = i;
									break;
								}
							}
						}

						if(to_playerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{FFFFFF}El número al que intentas llamar no es correcto o está fuera de cobertura.");
						if(to_playerid == playerid) return SendClientMessage(playerid, -1, "{FFFFFF}El número al que intentas llamar no es correcto.");
						if(PLAYER_PHONE[to_playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessage(playerid, -1, "{FFFFFF}El número al que intentas llamar está apagado o fuera de cobertura.");
						if(PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL]) return SendClientMessage(playerid, -1, "{FFFFFF}El número al que intentas llamar está en otra llamada.");
						SendClientMessageEx(to_playerid, -1, "{00FF00}%s{FFFFFF} te está llamando, usa {FFFF00}/atender {FFFFFF}o {FFFF00}/responder", convertPhoneNumber(to_playerid, PLAYER_PHONE[playerid][player_phone_NUMBER]));
					    Auto_SendPlayerAction(to_playerid, "le están llamando en el iPhone");
	    				new Float:x,Float:y,Float:z;
						GetPlayerPos(to_playerid, x, y, z);
						for(new i=0; i<MAX_PLAYERS; i++)
						{
							if(!IsPlayerConnected(i)) continue;
							if(IsPlayerInRangeOfPoint(i, 15.0, x,y,z))
							{
								PlayerPlaySound(i, 20600,0.0,0.0,0.0);
							}
						}
						PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = true;
						PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_INCOMING_CALL;
						PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = playerid;

						SendClientMessageEx(playerid, -1, "Llamando a {e5f442}%s ...", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
						PLAYER_TEMP[playerid][pt_TIMERS][6] = SetTimerEx("NoCallResponse", 15000, false, "i", playerid);
						PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
						PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_WAITING_RESPONSE;
						PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = to_playerid;
						PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
					}
					case 1: ShowDialog(playerid, DIALOG_PHONE_BOOK_SEND_MESSAGE);
					case 2: ShowDialog(playerid, DIALOG_PHONE_BOOK_CHANGE_NAME);
					case 3: ShowDialog(playerid, DIALOG_PHONE_BOOK_CONFIRM_DELET);
				}
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK);
			return 1;
		}
		case DIALOG_PHONE_BOOK_CHANGE_NAME:
		{
			if(response)
			{
				if(isnull(inputtext))
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(strlen(inputtext) > 24)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Caracteres: 1-24.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				format(PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], 24, "%s", inputtext);

				new DB_Query[120];
				format(DB_Query, sizeof DB_Query, "UPDATE `PHONE_BOOK` SET `NAME` = '%q' WHERE `CONTACT_ID` = '%d';", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_ID]);
				db_query(Database, DB_Query);

				SendClientMessage(playerid, -1, "Contacto modificado.");
				ShowDialog(playerid, DIALOG_PHONE_BOOK);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
			return 1;
		}
		case DIALOG_PHONE_BOOK_CONFIRM_DELET:
		{
			if(response)
			{
				new DB_Query[120];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PHONE_BOOK` WHERE `PHONE_ID` = '%d' AND `CONTACT_ID` = '%d';", PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_ID]);
				db_query(Database, DB_Query);

				SendClientMessageEx(playerid, -1, "Contacto {00FF00}\"%s\" {FFFFFF}eliminado de tu agenda.", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);

				PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_VALID] = false;
				PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_ID] = 0;
				format(PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], 24, "");
				PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER] = 0;

				ShowDialog(playerid, DIALOG_PHONE_BOOK);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
			return 1;
		}
		case DIALOG_PHONE_BOOK_DELETE_ALL:
		{
			if(response)
			{
				new DB_Query[90];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PHONE_BOOK` WHERE `PHONE_ID` = '%d';", PLAYER_PHONE[playerid][player_phone_NUMBER]);
				db_query(Database, DB_Query);

				new temp_PLAYER_PHONE_BOOK[Phone_Book_Enum];
				for(new i = 0; i != MAX_PHONE_CONTACTS; i ++) PLAYER_PHONE_BOOK[playerid][i] = temp_PLAYER_PHONE_BOOK;

				SendClientMessage(playerid, -1, "{FFFFFF}Ha eliminado todos sus contactos.");
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK);
			return 1;
		}
		case DIALOG_PHONE_CALL_NUMBER:
		{
			if(response)
			{
				if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessageEx(playerid, -1, "{FFFFFF}Tienes apagado tú teléfono, usa {FFFF00}/móvil{FFFFFF} para encenderlo.");
				if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return ShowPlayerMessage(playerid, "Estás en una llamada", 3);

				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Número no válido.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}El número destino no es válido.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				switch(inputtext[0])
				{
					case 911:
					{
						if(ACCOUNT_INFO[playerid][ac_LEVEL] < 3) return SendClientMessage(playerid, -1, "{FFFFFF}Debes ser al menos nivel 3 para llamar a la policía.");
						PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
						PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = true;
						PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = false;

						SendClientMessage(playerid, -1, "{FFFFFF}Operadora: Ha llamado a la central de policía, indícanos su nombre por favor.");
						return 1;
					}
					case 2: //Taxi
					{
						if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
						{
							PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
							DisablePlayerTaxiMark(playerid);
							SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
							SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha cancelado su llamado de taxistas.");
							ShowPlayerMessage(playerid, "Llamada finalizada.", 3);
						}
						else
						{
							PLAYER_TEMP[playerid][pt_WANT_TAXI] = true;
							SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
							SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha envíado su llamado a los radios de los taxistas, espere en su ubicación a un taxista.");
							ShowPlayerMessage(playerid, "Llamada finalizada.", 3);
							SendAlertToTaxiDrivers(playerid);
						}
						return 1;
					}
					case 3: //Mecanico
					{
						if(PLAYER_TEMP[playerid][pt_WANT_MECHANIC])
						{
							PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = false;
							DisablePlayerMechanicMark(playerid);
							SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
							SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha cancelado su llamado de mecánico.");
							ShowPlayerMessage(playerid, "Llamada finalizada.", 3);
						}
						else
						{
							PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = true;
							SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
							SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha envíado su llamado a los radios de los mecánicos, espere a un mecánico.");
							ShowPlayerMessage(playerid, "Llamada finalizada.", 3);
							SendAlertToMechanic(playerid);
						}
						return 1;
					}
					case 1:
					{
  						if(CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_CRACK) return ShowPlayerMessage(playerid, "No estás delirando", 3);
			   			if(PLAYER_TEMP[playerid][pt_WANT_MEDIC]) return ShowPlayerMessage(playerid, "Ya alertaste a los médicos.", 3);

			   			PLAYER_TEMP[playerid][pt_WANT_MEDIC] = true;
						SendClientMessage(playerid, -1, "{FFFFFF}Tu llamada se ha enviado a los médicos disponibles, espera a que llegue una ambulancia.");
						SendAlertToMedics(playerid);
					    return 1;
					}
					case 4:
					{
					    SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
					    SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Seleccione que auto desea remolcar, el servicio tiene un costo.");
					    ShowDialog(playerid, DIALOG_CRANE_SELECT_VEHICLE);
					    return 1;
					}
				}

				new to_playerid = INVALID_PLAYER_ID;
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if(IsPlayerConnected(i))
					{
						if((PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL) && PLAYER_PHONE[i][player_phone_NUMBER] == inputtext[0])
						{
							to_playerid = i;
							break;
						}
					}
				}

				if(to_playerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{FFFFFF}El número al que intentas llamar no es correcto o está fuera de cobertura.");
				if(to_playerid == playerid) return SendClientMessage(playerid, -1, "{FFFFFF}El número al que intentas llamar no es correcto.");
				if(PLAYER_PHONE[to_playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessage(playerid, -1, "{FFFFFF}El número al que intentas llamar está apagado o fuera de cobertura.");
				if(PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL]) return SendClientMessage(playerid, -1, "{FFFFFF}El número al que intentas llamar está en otra llamada.");

				SendClientMessageEx(to_playerid, -1, "{00FF00}%s{FFFFFF} te está llamando, usa {FFFF00}/atender {FFFFFF}o {FFFF00}/responder", convertPhoneNumber(to_playerid, PLAYER_PHONE[playerid][player_phone_NUMBER]));
			    Auto_SendPlayerAction(to_playerid, "le están llamando en el iPhone");
		    	new Float:x,Float:y,Float:z;
				GetPlayerPos(to_playerid, x, y, z);
				for(new i=0; i<MAX_PLAYERS; i++)
				{
					if(!IsPlayerConnected(i)) continue;
					if(IsPlayerInRangeOfPoint(i, 15.0, x,y,z))
					{
						PlayerPlaySound(i, 20600,0.0,0.0,0.0);
					}
				}
				PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = true;
				PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_INCOMING_CALL;
				PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = playerid;

				SendClientMessageEx(playerid, -1, "Llamando a {e5f442}%s ...", convertPhoneNumber(playerid, inputtext[0]));
				PLAYER_TEMP[playerid][pt_TIMERS][6] = SetTimerEx("NoCallResponse", 15000, false, "i", playerid);
				PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
				PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_WAITING_RESPONSE;
				PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = to_playerid;
				PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
			}
			else
			{
   				if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE])
			    {
			        ShowPlayeriPhone(playerid);
			        ShowPlayeriPhoneApps(playerid);
			    }
				ShowDialog(playerid, DIALOG_PHONE);
			}
			return 1;
		}
		case DIALOG_PHONE_SMS_NUMBER:
		{
			if(response)
			{
				if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF) return SendClientMessageEx(playerid, -1, "{FFFFFF}Tienes apagado tú teléfono, usa {FFFF00}/móvil{FFFFFF} para encenderlo.");
				if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return ShowPlayerMessage(playerid, "Estás en una llamada", 3);

				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Número no válido.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}El número destino no es válido.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new DBResult:Result, DB_Query[100], bool:phone_exists;
				format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PHONE` WHERE `PHONE_NUMBER` = '%d';", inputtext[0]);
				Result = db_query(Database, DB_Query);

				if(db_num_rows(Result)) phone_exists = true;
				db_free_result(Result);

				if(!phone_exists)
				{
					ShowDialog(playerid, dialogid);
					SendClientMessage(playerid, -1, "{FFFFFF}El número destino no es válido.");
					return 1;
				}

				PLAYER_TEMP[playerid][pt_PLAYER_PHONE_NUMBER_SELECTED] = inputtext[0];
				ShowDialog(playerid, DIALOG_PHONE_SMS_MESSAGE);
			}
			else
			{
  				if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE])
			    {
			        ShowPlayeriPhone(playerid);
			        ShowPlayeriPhoneApps(playerid);
			    }
				ShowDialog(playerid, DIALOG_PHONE);
			}
			return 1;
		}
		case DIALOG_PHONE_SMS_MESSAGE:
		{
			if(response)
			{
				if(isnull(inputtext)) return ShowDialog(playerid, dialogid);
				if(strlen(inputtext) > 64) return ShowDialog(playerid, dialogid);

				new to_playerid = INVALID_PLAYER_ID;
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if(IsPlayerConnected(i))
					{
						if((PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_DEAD) && PLAYER_PHONE[i][player_phone_NUMBER] == PLAYER_TEMP[playerid][pt_PLAYER_PHONE_NUMBER_SELECTED])
						{
							to_playerid = i;
							break;
						}
					}
				}

				if(to_playerid == INVALID_PLAYER_ID) RegisterPhoneMessage(PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_TEMP[playerid][pt_PLAYER_PHONE_NUMBER_SELECTED], inputtext, true);
				else
				{
					RegisterPhoneMessage(PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_TEMP[playerid][pt_PLAYER_PHONE_NUMBER_SELECTED], inputtext);
					if(PLAYER_PHONE[to_playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(to_playerid,  0x12bc7eFF, "@WHATSAPP:{25d366} recibido de {12bc7e}%s:{25d366} %s", convertPhoneNumber(to_playerid, PLAYER_PHONE[playerid][player_phone_NUMBER]), inputtext);
				}
				SendClientMessageEx(playerid, -1, "Mensaje enviado a {7b9cd1}%s.", convertPhoneNumber(playerid, PLAYER_TEMP[playerid][pt_PLAYER_PHONE_NUMBER_SELECTED]));
			}
			else ShowDialog(playerid, DIALOG_PHONE_SMS_MESSAGE);
			return 1;
		}
		case DIALOG_PHONE_BOOK_SEND_MESSAGE:
		{
			if(response)
			{
				if(isnull(inputtext)) return ShowDialog(playerid, dialogid);
				if(strlen(inputtext) > 64) return ShowDialog(playerid, dialogid);

				new DBResult:Result, DB_Query[100], bool:phone_exists;
				format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PHONE` WHERE `PHONE_NUMBER` = '%d';", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);
				Result = db_query(Database, DB_Query);

				if(db_num_rows(Result)) phone_exists = true;
				db_free_result(Result);

				if(!phone_exists) return SendClientMessage(playerid, -1, "{FFFFFF}El número destino no es válido.");

				new to_playerid = INVALID_PLAYER_ID;
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if(IsPlayerConnected(i))
					{
						if((PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_DEAD) && PLAYER_PHONE[i][player_phone_NUMBER] == PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER])
						{
							to_playerid = i;
							break;
						}
					}
				}

				if(to_playerid == INVALID_PLAYER_ID) RegisterPhoneMessage(PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER], inputtext, true);
				else
				{
					RegisterPhoneMessage(PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER], inputtext);
					if(PLAYER_PHONE[to_playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(to_playerid,  0x12bc7eFF, "@WHATSAPP:{25d366} recibido de {12bc7e}%s:{25d366} %s", convertPhoneNumber(to_playerid, PLAYER_PHONE[playerid][player_phone_NUMBER]), inputtext);
				}
				SendClientMessageEx(playerid, -1, "Mensaje enviado a {7b9cd1}%s.", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
			return 1;
		}
		case DIALOG_PHONE_SENT_MESSAGES:
		{
			if(!response) ShowDialog(playerid, DIALOG_PHONE);
			return 1;
		}
		case DIALOG_PHONE_RECEIVED_MESSAGES:
		{
			if(!response)
			{
   				if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE])
			    {
			        ShowPlayeriPhone(playerid);
			        ShowPlayeriPhoneApps(playerid);
			    }
				ShowDialog(playerid, DIALOG_PHONE);
			}
			return 1;
		}
		case DIALOG_CONFIRM_BUY_PROPERTY:
		{
			if(response)
			{
				if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_SOLD]) return ShowPlayerMessage(playerid, "Esa propiedad ya tiene dueño.", 5);
				if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_LEVEL] > ACCOUNT_INFO[playerid][ac_LEVEL]) return SendClientMessageEx(playerid, -1, "{FFFFFF}Necesitas ser como mínimo nivel %d para comprar esta propiedad.", PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_LEVEL]);
				if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_PRICE] > BANK_ACCOUNT[playerid][bank_account_BALANCE]) return ShowPlayerMessage(playerid, "No tienes suficientes fondos en tu cuenta bancaria.", 5);

				if(PLAYER_PHONE[playerid][player_phone_VALID])
				{
					new message[64]; format(message, sizeof message, "propiedad adquirida: -$%s", number_format_thousand(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_PRICE]));
					RegisterPhoneMessage(6740, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
					if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, 0x12bc7eFF, "@WHATSAPP:{25d366} recibido de {12bc7e}%s:{25d366} Transacción a GOBIERNO por: %s", convertPhoneNumber(playerid, 6740), message);
				}

				BANK_ACCOUNT[playerid][bank_account_BALANCE] -= PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_PRICE];
				PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_SOLD] = true;
				PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_CREW] = false;
				PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_OWNER_ID] = ACCOUNT_INFO[playerid][ac_ID];

				new label_str[256], info[3], name_house[24];
                if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] ][property_EXTRA] == 0) name_house = "Casa";
                if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] ][property_EXTRA] == 2) name_house = "Garaje";
               	if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] ][property_EXTRA] == 4) name_house = "Negocio";

				format
				(
					label_str,
					sizeof label_str,
					"\
					    {00FF00}%s\n\n\
						{FFFFFF}Dirección: {00FF00}%d\n\
						{FFFFFF}Dueño: {00FF00}%s\n\
						{FFFFFF}Presiona {00CCFF}N {FFFFFF}o usa {FFFF00}/entrar{FFFFFF}.\
					", name_house, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_ID], ACCOUNT_INFO[playerid][ac_NAME]
				);
				UpdateDynamic3DTextLabelText(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXT_LABEL_ID], 0xFFFFFFAA, label_str);

				DestroyDynamicPickup(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXT_PICKUP_ID]);
				PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;

				PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXT_PICKUP_ID] = CreateDynamicPickup(0, 1, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXT_X], PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXT_Y], PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXT_Z], 0, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXT_INTERIOR]);
				info[0] = PICKUP_TYPE_PROPERTY;
				info[1] = PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]; // Index
				info[2] = 2; // Pickup Exterior
				Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);


				new DB_Query_update[350];
				format(DB_Query_update, sizeof(DB_Query_update), "\
					UPDATE `BANK_ACCOUNTS` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';\
					INSERT INTO `PROPERTY_OWNER` (`ID_PROPERTY`, `ID_USER`, `PROPERTY_NAME`) VALUES ('%d', '%d', '%q');\
				",
					BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID],
					PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_ID], ACCOUNT_INFO[playerid][ac_ID], PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_NAME]
				);
				db_query(Database, DB_Query_update);

				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_BUY_PROPERTY, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_PRICE]);
				SendClientMessageEx(playerid, -1, "{00FF00}¡Propiedad #%d comprada! {FFFFFF}Ahora puedes ir a tu casa, si no sabes donde es puedes marcarla con el {FFFF00}/GPS.", PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_ID]);
				ShowPlayerMessageNotification(playerid, "¡Enhorabuena!, ahora usa ~y~/gps > Mis propiedades~w~ para localizar tu nuevo terreno.", 5);
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			}
			return 1;
		}
		case DIALOG_PLAYER_GPS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
					case 1: ShowDialog(playerid, DIALOG_PLAYER_GPS_PROPERTIES);
					case 2: ShowDialog(playerid, DIALOG_PLAYER_GPS_VEHICLES);
					case 3: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
					case 4: ShowDialog(playerid, DIALOG_PLAYER_GPS_WORKS);
					case 5:
					{
						if(PLAYER_TEMP[playerid][pt_GPS_MAP]) HidePlayerGpsMap(playerid);
						else ShowPlayerGpsMap(playerid);
					}
				}
			}
			else
			{
   				if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE])
			    {
			        ShowPlayeriPhone(playerid);
			        ShowPlayeriPhoneApps(playerid);
			    }
			}
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, dialogid);
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == MAX_PLAYER_GPS_SAVES + 10) return ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER_ADD);
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == MAX_PLAYER_GPS_SAVES + 20) return ShowDialog(playerid, DIALOG_PLAYER_GPS_DELETE_ALL);

				PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER_OPTION);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER_ADD:
		{
			if(response)
			{
				if(isnull(inputtext))
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(strlen(inputtext) > 24)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Caracteres: 1-24.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new slot = GetEmptyPlayer_GPS_Slot(playerid);
				if(slot == -1) return SendClientMessage(playerid, -1, "{FFFFFF}Memoria del GPS llena.");

				PLAYER_GPS[playerid][slot][player_gps_VALID] = true;
				format(PLAYER_GPS[playerid][slot][player_gps_NAME], 24, "%s", inputtext);
				GetPlayerPos(playerid, PLAYER_GPS[playerid][slot][player_gps_X], PLAYER_GPS[playerid][slot][player_gps_Y], PLAYER_GPS[playerid][slot][player_gps_Z]);
				PLAYER_GPS[playerid][slot][player_gps_WORLD] = GetPlayerVirtualWorld(playerid);
				PLAYER_GPS[playerid][slot][player_gps_INTERIOR] = GetPlayerInterior(playerid);
				RegisterNewPlayer_GPS_Site(playerid, slot);

				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "Nuevo sitio añadido al GPS con el nombre: {00FF00}%s.", PLAYER_GPS[playerid][slot][player_gps_NAME]);
				ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER_OPTION:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: SetPlayer_GPS_Checkpoint(playerid, PLAYER_GPS[playerid][PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED]][player_gps_X], PLAYER_GPS[playerid][PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED]][player_gps_Y], PLAYER_GPS[playerid][PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED]][player_gps_Z], PLAYER_GPS[playerid][PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED]][player_gps_WORLD], PLAYER_GPS[playerid][PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED]][player_gps_INTERIOR]);
					case 1: ShowDialog(playerid, DIALOG_PLAYER_GPS_CHANGE_NAME);
					case 2: ShowDialog(playerid, DIALOG_PLAYER_GPS_CONFIRM_DELET);
				}
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			return 1;
		}
		case DIALOG_PLAYER_GPS_CHANGE_NAME:
		{
			if(response)
			{
				if(isnull(inputtext))
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(strlen(inputtext) > 24)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Caracteres: 1-24.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				format(PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_NAME], 24, "%s", inputtext);

				new DB_Query[160];
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_GPS` SET `NAME` = '%q' WHERE `ID` = '%d' AND `ID_USER` = '%d';", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_NAME], PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_ID], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, -1, "Has modificado el nombre de este lugar correctamente");
				ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER_OPTION);
			return 1;
		}
		case DIALOG_PLAYER_GPS_CONFIRM_DELET:
		{
			if(response)
			{
				new DB_Query[110];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_GPS` WHERE `ID` = '%d' AND `ID_USER` = '%d';", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_ID], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_VALID] = false;
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_ID] = 0;
				format(PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_NAME], 24, "");
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_X] = 0.0;
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_Y] = 0.0;
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_Z] = 0.0;
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_WORLD] = 0;
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_INTERIOR] = 0;

				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, -1, "Has eliminado este lugar de tu GPS.");
				ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER_OPTION);
			return 1;
		}
		case DIALOG_PLAYER_GPS_DELETE_ALL:
		{
			if(response)
			{
				new DB_Query[90];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_GPS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				new temp_PLAYER_GPS[Player_GPS_Enum];
				for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i ++) PLAYER_GPS[playerid][i] = temp_PLAYER_GPS;

				SendClientMessage(playerid, -1, "Ha eliminado todos tus lugares guardados.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITES:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_0);
					case 1: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_1);
					case 2: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_2);
					case 3: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_3);
					case 4: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_4);
					case 5: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_5);
					case 6: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_6);
					case 7: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_7);
					case 8: SetPlayer_GPS_Checkpoint(playerid, 1481.2369, -1772.1158, 18.7958, 0, 0);
					case 9: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_8);
					case 10: SetPlayer_GPS_Checkpoint(playerid, 2511.0972,-1518.2462,23.7690, 0, 0);
					case 11: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_9);
					case 12: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_10);
					case 13: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_11);
					case 14: SetPlayer_GPS_Checkpoint(playerid, 1371.0372, -1890.0668, 13.5728, 0, 0);
     				case 15: SetPlayer_GPS_Checkpoint(playerid, 1022.3706, -1121.6890, 23.8717, 0, 0);
     				case 16: SetPlayer_GPS_Checkpoint(playerid, 940.1923, -1742.8501, 13.5469, 0, 0);
     				case 17: SetPlayer_GPS_Checkpoint(playerid, 2275.2058, -1785.6400, 13.5469, 0, 0);
				}
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}
		case DIALOG_PLAYER_GPS_WORKS:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return true;
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == WORK_MEDIC) SendClientMessage(playerid, -1, "{FFFFFF}Este trabajo se puede conseguir en cualquier hospital.");
				else SetPlayer_GPS_Checkpoint(playerid, obtain_work_coords[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_X], obtain_work_coords[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_Y], obtain_work_coords[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_Z], 0, 0);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_0: //Hospitales
		{
			if(response) SetPlayer_GPS_Checkpoint(playerid, Hospital_Spawn_Positions[listitem][0], Hospital_Spawn_Positions[listitem][1], Hospital_Spawn_Positions[listitem][2], 0, 0);
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_1 .. DIALOG_PLAYER_GPS_SITE_4, DIALOG_PLAYER_GPS_SITE_8, DIALOG_PLAYER_GPS_SITE_9, DIALOG_PLAYER_GPS_SITE_10, DIALOG_PLAYER_GPS_SITE_11: //EE
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, DIALOG_PLAYER_GPS);
				SetPlayer_GPS_Checkpoint(playerid, ENTER_EXIT[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][ee_EXT_X], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][ee_EXT_Y], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][ee_EXT_Z], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][ee_EXT_WORLD], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][ee_EXT_INTERIOR]);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_5: //Cajeros
		{
			if(response) SetPlayer_GPS_Checkpoint(playerid, ATM_BANK[listitem][atm_X], ATM_BANK[listitem][atm_Y], ATM_BANK[listitem][atm_Z], ATM_BANK[listitem][atm_WORLD], ATM_BANK[listitem][atm_INTERIOR]);
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_6: //Gasolineras
		{
			if(response) SetPlayer_GPS_Checkpoint(playerid, Fuel_Stations[listitem][0], Fuel_Stations[listitem][1], Fuel_Stations[listitem][2], 0, 0);
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_7: //Concesionarios
		{
			if(response) SetPlayer_GPS_Checkpoint(playerid, SELL_VEHICLES_SHOPS_SPAWN[listitem][0], SELL_VEHICLES_SHOPS_SPAWN[listitem][1], SELL_VEHICLES_SHOPS_SPAWN[listitem][2], 0, 0);
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_PLAYER_GPS_PROPERTIES:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_GPS_SELECTED_PROPERTY][listitem] == -1) return ShowDialog(playerid, DIALOG_PLAYER_GPS);

				new index = GetPropertyIndexByID(PLAYER_TEMP[playerid][pt_PLAYER_GPS_SELECTED_PROPERTY][listitem]);
				if(index != -1) SetPlayer_GPS_Checkpoint(playerid, PROPERTY_INFO[index][property_EXT_X], PROPERTY_INFO[index][property_EXT_Y], PROPERTY_INFO[index][property_EXT_Z], 0, PROPERTY_INFO[index][property_EXT_INTERIOR]);
			}
			else
			{
				if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE])
			    {
			        ShowPlayeriPhone(playerid);
			        ShowPlayeriPhoneApps(playerid);
			    }
				ShowDialog(playerid, DIALOG_PLAYER_GPS);
			}
			return 1;
		}
		case DIALOG_PLAYER_GPS_VEHICLES:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, DIALOG_PLAYER_GPS);

				new Float:pos[3];
				GetVehiclePos(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem], pos[0], pos[1], pos[2]);
				SetPlayer_GPS_Checkpoint(playerid, pos[0], pos[1], pos[2], 0, 0);
			}
			else
			{
				if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE])
			    {
			        ShowPlayeriPhone(playerid);
			        ShowPlayeriPhoneApps(playerid);
			    }
				ShowDialog(playerid, DIALOG_PLAYER_GPS);
			}
			return 1;
		}
		case DIALOG_PROPERTY_OPTIONS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_PROPERTY_NAME);
					case 1:
					{
						new total;
						for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
						{
							if(IsPlayerConnected(i))
							{
								if( CHARACTER_INFO[i][ch_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY && CHARACTER_INFO[i][ch_INTERIOR_EXTRA] == PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID])
								{
									CHARACTER_INFO[i][ch_STATE] = ROLEPLAY_STATE_NORMAL;
									CHARACTER_INFO[i][ch_INTERIOR_EXTRA] = 0;
									PLAYER_TEMP[i][pt_PROPERTY_INDEX] = -1;
									SetPlayerPosEx(i, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_ANGLE], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_INTERIOR], 0, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_FREEZE], false);
									StopAudioStreamForPlayer(i);
									SendClientMessageEx(i, -1, "{00FF00}%s {FFFFFF}te ha echado de su propiedad.", PLAYER_TEMP[playerid][pt_RP_NAME]);
									total ++;
								}
							}
						}
						if(total == 0) SendClientMessage(playerid, -1, "{FFFFFF}No hay nadie en tu propiedad.");
						else SendClientMessageEx(playerid, -1, "{FFFFFF}Has echado %d personas de tu propiedad.", total);
					}
					case 2:
					{
    					if(!PLAYER_PHONE[playerid][player_phone_VALID])
						{
							ShowPlayerMessage(playerid, "No puedes escuchar música sin un teléfono", 5);
							PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
							return 1;
						}
						PLAYER_TEMP[playerid][pt_MUSIC_FOR_PROPERTY] = true;
						Auto_SendPlayerAction(playerid, "saca su teléfono, y se conecta al WiFi de la casa.");
						ShowDialog(playerid, DIALOG_PLAYER_MP3);
					}
					case 3:
					{
						if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
						if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES]) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes permiso.");


						for(new i = 0; i != MAX_TERRITORIES; i ++)
						{
							if(!TERRITORIES[i][territory_VALID]) continue;
							if(!TERRITORIES[i][territory_OCCUPIED]) continue;
							if(TERRITORIES[i][territory_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) continue;

							if(IsPointInDynamicArea(TERRITORIES[i][territory_AREA], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z]))
							{
								PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] = i;
								ShowDialog(playerid, DIALOG_CREW_PROPERTY_CONFIRM);
								return 1;
							}
						}
						SendClientMessage(playerid, -1, "{FFFFFF}Esta propiedad no está dentro de un territorio de tu banda.");
					}
				}
			}
			return 1;
		}
		case DIALOG_PROPERTY_NAME:
		{
			if(response)
			{
				if(!PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_VALID]) return 1;
				if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return 1;

				if(isnull(inputtext)) return ShowDialog(playerid, dialogid);
				if(strlen(inputtext) > 24)
				{
					ShowDialog(playerid, dialogid);
					SendClientMessage(playerid, 0xFFFFFFFF, "{FFFFFF}Caracteres: 1-24.");
					return 1;
				}

				format(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME], 24, "%s", inputtext);

				new DB_Query[200];
				format(DB_Query, sizeof DB_Query, "UPDATE `PROPERTY_OWNER` SET `PROPERTY_NAME` = '%q' WHERE `ID_PROPERTY` = '%d' AND `ID_USER` = '%d';", inputtext, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				SendClientMessageEx(playerid, -1, "{b5d1ff}Nombre de la propiedad actualizado a '%s'.", inputtext);
			}
			else ShowDialog(playerid, DIALOG_PROPERTY_OPTIONS);
			return 1;
		}
		case DIALOG_PLAYER_MP3:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_MUSIC_FOR_PROPERTY])
				{
					for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
					{
						if(IsPlayerConnected(i))
						{
							if( (CHARACTER_INFO[i][ch_STATE] == ROLEPLAY_STATE_OWN_PROPERTY || CHARACTER_INFO[i][ch_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY) && CHARACTER_INFO[i][ch_INTERIOR_EXTRA] == CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA])
							{
								PlayAudioStreamForPlayer(i, inputtext);
								SendClientMessage(i, -1, "{FFFFFF}Se escucha música en las bocinas de la casa, para detenerlo usa {FFFF00}/stop{FFFFFF}.");
							}
						}
					}
					PLAYER_TEMP[playerid][pt_MUSIC_FOR_PROPERTY] = false;
					Auto_SendPlayerAction(playerid, "pone música en la casa, con su teléfono.");
				}
				else
				{
					PlayAudioStreamForPlayer(playerid, inputtext);
					SendClientMessage(playerid, -1, "{FFFFFF}Si ya no quieres seguir escuchando la música usa {FFFF00}/stop{FFFFFF}.");
					Auto_SendPlayerAction(playerid, "saca sus audifonos y empieza a escuchar música.");
				}
			}
			else
			{
			   	if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE])
			    {
			        ShowPlayeriPhone(playerid);
			        ShowPlayeriPhoneApps(playerid);
			    }
			}
			return 1;
		}
		case DIALOG_BUY_VEHICLE:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] == INVALID_VEHICLE_ID) return 1;
				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_TYPE] != VEHICLE_TYPE_SELL) return 1;
				if(!SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_VALID]) return 1;
				if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_LEVEL] > ACCOUNT_INFO[playerid][ac_LEVEL]) return 1;
				if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE] > CHARACTER_INFO[playerid][ch_CASH]) return 1;
				if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA] > ACCOUNT_INFO[playerid][ac_SD]) return 1;

				new vid = AddPersonalVehicle
				(
					playerid,
					GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID],
					SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][0],
					SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][1],
					SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][2],
					SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][3],
					GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_COLOR_1],
					GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_COLOR_2],
					VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_GAS]
				);
				if(!vid) return SendClientMessage(playerid, -1, "{FFFFFF}No se pueden añadir más vehículos.");

				if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA] > 1)
				{
					ACCOUNT_INFO[playerid][ac_SD] -= SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA];

					new DB_Query_update[160];
					format(DB_Query_update, sizeof(DB_Query_update), "UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_ID]);
					db_query(Database, DB_Query_update);
				}
				else if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA] < 1)
				{
     				GivePlayerCash(playerid, -SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE]);
					new DB_Query_update[160];
					format(DB_Query_update, sizeof DB_Query_update, "UPDATE `PERSONAJE` SET `CASH` = '%d' WHERE `ID_USER` = '%d';", CHARACTER_INFO[playerid][ch_CASH], ACCOUNT_INFO[playerid][ac_ID]);
					db_query(Database, DB_Query_update);
				}

				SendClientMessage(playerid, -1, "{00FF00}¡Felicidades por tu nueva máquina! {FFFFFF}ahora, escribe {FFFF00}/ayuda vehiculos {FFFFFF}para ver que puedes hacer.");
   				ShowPlayerMessageNotification(playerid, "Bien, compraste un auto. Para más dudas de vehiculos usa ~y~ayuda vehiculos.", 5);
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);

				new Float:pos[4];
				pos[0] = SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][0];
				pos[1] = SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][1];
				pos[2] = SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][2];
				pos[3] = SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][3];

				pos[0] += (2.0 * floatsin(-(pos[3] + 90.0), degrees));
				pos[1] += (2.0 * floatcos(-(pos[3] + 90.0), degrees));
				SetPlayerPosEx(playerid, pos[0], pos[1], pos[2], pos[3], 0, 0);

				if(!ACCOUNT_INFO[playerid][ac_SU]) ReLockPlayerVehicles(playerid);
			}
			return 1;
		}
		case DIALOG_NOTARY_HOUSE:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						PLAYER_TEMP[playerid][pt_NOTARY_OPTION] = 0;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
					}
					case 1:
					{
						PLAYER_TEMP[playerid][pt_NOTARY_OPTION] = 1;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
					}
				}
			}
			return 1;
		}
		case DIALOG_NOTARY_VEHICLE:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						PLAYER_TEMP[playerid][pt_NOTARY_OPTION] = 0;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
					}
					case 1:
					{
						PLAYER_TEMP[playerid][pt_NOTARY_OPTION] = 1;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
					}
				}
			}
			return 1;
		}
		case DIALOG_NOTARY_SELECT_PROPERTY:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;

				PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] = GetPropertyIndexByID(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem]);
				if(PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] == -1) return SendClientMessage(playerid, -1, "PROPIEDAD ID no encontrada.");

				switch(PLAYER_TEMP[playerid][pt_NOTARY_OPTION])
				{
					case 0: ShowDialog(playerid, DIALOG_PROPERTY_BANK_SELL);
					case 1: ShowDialog(playerid, DIALOG_PROPERTY_SELL_PRICE);
					case 2:
					{
						PLAYER_TEMP[playerid][pt_SHOP_ADD_TYPE] = SHOP_ARTICLE_TYPE_PROPERTY;
						PLAYER_TEMP[playerid][pt_SHOP_ADD_MODELID] = 1273;
						PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL1] = 0;
						PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL2] = 0;
						ShowDialog(playerid, DIALOG_SHOP_ADD_TEXT);
					}
				}
			}
			else
			{
				if(PLAYER_TEMP[playerid][pt_NOTARY_OPTION] == 2) ShowDialog(playerid, DIALOG_SHOP_ADD);
				else ShowDialog(playerid, DIALOG_NOTARY_HOUSE);
			}
			return 1;
		}
		case DIALOG_PROPERTY_BANK_SELL:
		{
			if(response)
			{
				if(!PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_VALID]) return 1;
				if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return 1;
				if(BANK_ACCOUNT[playerid][bank_account_ID] == 0) return ShowPlayerMessage(playerid, "Necesitas una ~p~~h~cuenta bancaria~w~~h~ para recibir el deposito de la compra.", 5);

				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_SOLD] = false;
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_CREW] = false;
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] = 0;
				format(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);

				new label_str[256], info[3], type_house[24];
				if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXTRA] == 0) type_house = "Casa en venta";
				if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXTRA] == 2) type_house = "Garaje en venta";
				if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXTRA] == 3) type_house = "Oficina en venta";
				if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXTRA] == 4) type_house = "Negocio en venta";
				format
				(
					label_str,
					sizeof label_str,
					"\
					    {00FF00}%s\n\n\
						{FFFFFF}Dirección: {00FF00}%d\n\
						{FFFFFF}Precio: {41f48f}$%s\n\
						{FFFFFF}Nivel necesario: {00FF00}%d\n\
						{FFFFFF}Usa {FFFF00}/ayuda casas {FFFFFF}para ver como comprarla.\
					", type_house, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID], number_format_thousand(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE]), PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_LEVEL]
				);
				UpdateDynamic3DTextLabelText(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_LABEL_ID], 0xFFFFFFAA, label_str);

				DestroyDynamicPickup(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID]);
				PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;

                if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXTRA] == 0) PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_X], PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_Y], PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_Z], 0, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_INTERIOR]);
                if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXTRA] == 2) PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID] = CreateDynamicPickup(1272, 1, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_X], PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_Y], PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_Z], 0, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_INTERIOR]);
                if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXTRA] == 4) PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID] = CreateDynamicPickup(19524, 1, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_X], PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_Y], PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_Z], 0, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_INTERIOR]);
				info[0] = PICKUP_TYPE_PROPERTY;
				info[1] = PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]; // Index
				info[2] = 2; // Pickup Exterior
				Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

				new Float:price, payment;
				price = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE_BASE];
				if(ACCOUNT_INFO[playerid][ac_SU]) payment = floatround(75 * price / 100);
				else payment = floatround(price / 2);

				if(PLAYER_PHONE[playerid][player_phone_VALID])
				{
					new message[64]; format(message, sizeof message, "propiedad vendida +$%s", number_format_thousand(payment));
					RegisterPhoneMessage(6740, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
					if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, 0x12bc7eFF, "@WHATSAPP:{25d366} recibido de {12bc7e}%s:{25d366} Recibió un depósito por: %s", convertPhoneNumber(playerid, 6740), message);
				}

				BANK_ACCOUNT[playerid][bank_account_BALANCE] += payment;

				new DB_Query_update[350];
				format(DB_Query_update, sizeof(DB_Query_update), "\
					UPDATE `BANK_ACCOUNTS` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';\
					DELETE FROM `PROPERTY_OWNER` WHERE `ID_PROPERTY` = '%d' AND `ID_USER` = '%d';\
				",
					BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID],
					PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID], ACCOUNT_INFO[playerid][ac_ID]
				);
				db_query(Database, DB_Query_update);

				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_SOLD_PROPERTY, payment);
				SendClientMessageEx(playerid, -1, "Se ha depositado el dinero ({41f48f}$%s{FFFFFF}) en tu cuenta bancaria, la propiedad ahora es de gobierno.", number_format_thousand(payment));
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
                SaveUserData(playerid);

			}
			else ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
			return 1;
		}
		case DIALOG_PROPERTY_SELL_PRICE:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return ShowDialog(playerid, dialogid);

				//new Float:price = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE];

				PLAYER_TEMP[playerid][pt_NOTARY_PRICE] = inputtext[0];
				ShowDialog(playerid, DIALOG_PROPERTY_SELL_TO_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
			return 1;
		}
		case DIALOG_PROPERTY_SELL_TO_PLAYER:
		{
			if(response)
			{
				if(sscanf(inputtext, "u", inputtext[0])) return ShowDialog(playerid, dialogid);

				if(!IsPlayerConnected(inputtext[0])) return ShowPlayerMessage(playerid, "La persona debe estar conectada.", 5);
				if(inputtext[0] == playerid) return ShowPlayerMessage(playerid, "La persona no debes ser tú.", 5);
				if(PLAYER_TEMP[inputtext[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "La persona debe estar aquí.", 5);

				if(!IsPlayerInRangeOfPoint(inputtext[0], 3.0, 226.8522, 2348.2397, 1017.1298)) return ShowPlayerMessage(playerid, "La persona debe acercarse a ti.", 5);
				if(BANK_ACCOUNT[inputtext[0]][bank_account_ID] == 0) return ShowPlayerMessage(playerid, "La persona no tiene una ~b~~h~cuenta bancaria.", 5);

				new DBResult:Result, DB_Query[120], player_properties;
				format(DB_Query, sizeof(DB_Query), "SELECT COUNT() AS `PROPERTIES` FROM `PROPERTY_OWNER` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[inputtext[0]][ac_ID]);
				Result = db_query(Database, DB_Query);
				if(db_num_rows(Result)) player_properties = db_get_field_assoc_int(Result, "PROPERTIES");
				db_free_result(Result);

				if(player_properties >= MAX_SU_PROPERTIES) return ShowPlayerMessage(playerid, "La persona ya tiene muchas propiedades.", 5);
				if(!ACCOUNT_INFO[inputtext[0]][ac_SU])
				{
					if(player_properties >= MAX_NU_PROPERTIES) return ShowPlayerMessage(playerid, "La persona ya tiene muchas propiedades.", 5);
				}

				if(ACCOUNT_INFO[inputtext[0]][ac_LEVEL] < 3) return ShowPlayerMessage(playerid, "La persona debe ser nivel 3.", 5);
				if(PLAYER_TEMP[playerid][pt_NOTARY_PRICE] > BANK_ACCOUNT[inputtext[0]][bank_account_BALANCE]) return ShowPlayerMessage(playerid, "La persona no tiene suficientes fondos en el banco.", 5);

				SendClientMessage(playerid, -1, "{FFFFFF}Tu oferta se ha enviado al comprador, espera para ver si la acepta.");

				new action[64]; format(action, sizeof action, "quiere llegar a un acuerdo con %s.", PLAYER_TEMP[inputtext[0]][pt_RP_NAME]);
				Auto_SendPlayerAction(playerid, action);

				PLAYER_TEMP[inputtext[0]][pt_PLAYER_PROPERTY_SELECTED] = PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED];
				PLAYER_TEMP[inputtext[0]][pt_NOTARY_PRICE] = PLAYER_TEMP[playerid][pt_NOTARY_PRICE];
				PLAYER_TEMP[inputtext[0]][pt_NOTARY_TO_PLAYER] = playerid;
				PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] = inputtext[0];

				ShowDialog(inputtext[0], DIALOG_SELL_CONFIRM_PROPERTY);
			}
			else ShowDialog(playerid, DIALOG_PROPERTY_SELL_PRICE);
			return 1;
		}
		case DIALOG_SELL_CONFIRM_PROPERTY:
		{
			if(response)
			{
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER])) return ShowPlayerMessage(playerid, "El vendedor se desconectó.", 5);
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_NOTARY_TO_PLAYER] != playerid) return ShowPlayerMessage(playerid, "El vendedor esta muy lejos.", 5);
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "El vendedor no está disponible.", 5);
				if(BANK_ACCOUNT[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][bank_account_ID] == 0) return ShowPlayerMessage(playerid, "El vendedor necesita una ~b~~h~cuenta bancaria.", 5);

				// Traspasar
				new label_str[256], name_house[24];
                if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXTRA] == 0) name_house = "Casa";
                if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXTRA] == 2) name_house = "Garaje";
               	if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXTRA] == 4) name_house = "Negocio";

				format
				(
					label_str,
					sizeof label_str,
					"\
						{00FF00}%s\n\n\
						{FFFFFF}Dirección: {00FF00}%d\n\
						{FFFFFF}Dueño: {00FF00}%s\n\
						{FFFFFF}Presiona {00CCFF}N {FFFFFF}o usa {FFFF00}/entrar{FFFFFF}.\
					", name_house, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID], ACCOUNT_INFO[playerid][ac_NAME]
				);
				UpdateDynamic3DTextLabelText(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_LABEL_ID], 0xFFFFFFAA, label_str);

				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] = ACCOUNT_INFO[playerid][ac_ID];
				new DB_Query_update[350];
				format(DB_Query_update, sizeof(DB_Query_update), "UPDATE `PROPERTY_OWNER` SET `ID_USER` = '%d' WHERE `ID_PROPERTY` = '%d';",
					ACCOUNT_INFO[playerid][ac_ID],
					PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID]
				);
				db_query(Database, DB_Query_update);


				// Banco
				new price = PLAYER_TEMP[playerid][pt_NOTARY_PRICE], seller = PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER];

				if(PLAYER_PHONE[playerid][player_phone_VALID])
				{
					new message[64]; format(message, sizeof message, "propiedad adquirida: -$%s", number_format_thousand(price));
					RegisterPhoneMessage(6740, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
					if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, 0x12bc7eFF, "@WHATSAPP:{25d366} recibido de {12bc7e}%s:{25d366} Transacción a %s por: %s", convertPhoneNumber(playerid, 6740), PLAYER_TEMP[seller][pt_RP_NAME], message);
				}
				if(PLAYER_PHONE[seller][player_phone_VALID])
				{
					new message[64]; format(message, sizeof message, "propiedad vendida: +$%s", number_format_thousand(price));
					RegisterPhoneMessage(6740, PLAYER_PHONE[seller][player_phone_NUMBER], message);
					if(PLAYER_PHONE[seller][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(seller, 0x12bc7eFF, "@WHATSAPP:{25d366} recibido de {12bc7e}%s:{25d366} Recibió un deposito por: %s", convertPhoneNumber(seller, 6740), message);
				}

				BANK_ACCOUNT[playerid][bank_account_BALANCE] -= price;
				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_BUY_PROPERTY, price);

				BANK_ACCOUNT[seller][bank_account_BALANCE] += price;
				RegisterBankAccountTransaction(BANK_ACCOUNT[seller][bank_account_ID], BANK_TRANSACTION_SOLD_PROPERTY, price);


				format(DB_Query_update, sizeof(DB_Query_update),
					"\
						UPDATE `BANK_ACCOUNT` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';\
						UPDATE `BANK_ACCOUNT` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';\
					",
						BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID],
						BANK_ACCOUNT[seller][bank_account_BALANCE], BANK_ACCOUNT[seller][bank_account_ID]
				);
				db_query(Database, DB_Query_update);


				SendClientMessageEx(playerid, -1, "{00FF00}¡Propiedad #%d comprada! {FFFFFF}Ahora puedes ir a tu casa, si no sabes donde es puedes marcarla con el {FFFF00}/GPS.", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);
				ShowPlayerMessageNotification(playerid, "¡Enhorabuena!, ahora usa ~y~/gps > Mis propiedades~w~ para localizar tu nuevo terreno.", 5);
                SendClientMessageEx(seller, -1, "Se ha depositado el dinero ({41f48f}$%s{FFFFFF}) en tu cuenta bancaria, la propiedad ahora es de $s.", number_format_thousand(price), PLAYER_TEMP[seller][pt_RP_NAME]);
				PlayerPlaySound(seller, 1058, 0.0, 0.0, 0.0);
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);

				new action[64]; format(action, sizeof action, "y %s han llegado a un acuerdo.", PLAYER_TEMP[seller][pt_RP_NAME]);
				Auto_SendPlayerAction(playerid, action);
				SaveUserData(playerid);
				SaveUserData(seller);
			}
			return 1;
		}
		case DIALOG_NOTARY_SELECT_VEHICLE:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];

				switch(PLAYER_TEMP[playerid][pt_NOTARY_OPTION])
				{
					case 0: ShowDialog(playerid, DIALOG_VEHICLE_BANK_SELL);
					case 1: ShowDialog(playerid, DIALOG_VEHICLE_SELL_PRICE);
					case 2:
					{
						PLAYER_TEMP[playerid][pt_SHOP_ADD_TYPE] = SHOP_ARTICLE_TYPE_VEHICLE;
						PLAYER_TEMP[playerid][pt_SHOP_ADD_MODELID] = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID];
						PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL1] = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_COLOR_1];
						PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL2] = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_COLOR_2];
						ShowDialog(playerid, DIALOG_SHOP_ADD_TEXT);
					}
				}
			}
			else
			{
				if(PLAYER_TEMP[playerid][pt_NOTARY_OPTION] == 2) ShowDialog(playerid, DIALOG_SHOP_ADD);
				else ShowDialog(playerid, DIALOG_NOTARY_VEHICLE);
			}
			return 1;
		}
		case DIALOG_VEHICLE_BANK_SELL:
		{
			if(response)
			{
				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_VALID]) return 1;
				if(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return 1;
				if(BANK_ACCOUNT[playerid][bank_account_ID] == 0) return ShowPlayerMessage(playerid, "Necesitas una ~p~~h~cuenta bancaria~w~~h~ para recibir el deposito de la compra.", 5);

				//Destruir veh
				new DB_Query_update[350];
				format(DB_Query_update, sizeof(DB_Query_update), "DELETE FROM `PLAYER_VEHICLES` WHERE `ID` = '%d';", PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][player_vehicle_ID]);
				db_query(Database, DB_Query_update);

				new Float:price, pricesd, payment;
				if(VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE] <= 1)
				{
			 		pricesd = VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_COINS];
					payment = pricesd / 2;
					ACCOUNT_INFO[playerid][ac_SD] += payment;
					SendClientMessageEx(playerid, -1, "Se te han sumado {f44242}%d koins{FFFFFF} a tu cuenta.", payment);
					SaveUserData(playerid);
				}
				else
				{
					price = VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE];
					if(ACCOUNT_INFO[playerid][ac_SU]) payment = floatround(75 * price / 100);
					else payment = floatround(price / 2);
					if(PLAYER_PHONE[playerid][player_phone_VALID])
					{
						new message[64]; format(message, sizeof message, "vehículo vendido: +$%s", number_format_thousand(payment));
						RegisterPhoneMessage(6740, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
						if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, 0x12bc7eFF, "@WHATSAPP:{25d366} recibido de {12bc7e}%s:{25d366} Recibió un deposito por: %s", convertPhoneNumber(playerid, 6740), message);
					}
					BANK_ACCOUNT[playerid][bank_account_BALANCE] += payment;
					format(DB_Query_update, sizeof(DB_Query_update), "UPDATE `BANK_ACCOUNTS` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';", BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID]);
					db_query(Database, DB_Query_update);
					RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_SOLD_VEHICLE, payment);

					SendClientMessageEx(playerid, -1, "Se ha depositado el dinero ({41f48f}$%s{FFFFFF}) en tu cuenta bancaria, el vehículo ahora es de gobierno.", number_format_thousand(payment));
					PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
					SaveUserData(playerid);
				}

				DestroyVehicleEx(PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED]);

				if(!ACCOUNT_INFO[playerid][ac_SU]) ReLockPlayerVehicles(playerid);
			}
			else ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
			return 1;
		}
		case DIALOG_VEHICLE_SELL_PRICE:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return ShowDialog(playerid, dialogid);

				PLAYER_TEMP[playerid][pt_NOTARY_PRICE] = inputtext[0];
				ShowDialog(playerid, DIALOG_VEHICLE_SELL_TO_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
			return 1;
		}
		case DIALOG_VEHICLE_SELL_TO_PLAYER:
		{
			if(response)
			{
				if(sscanf(inputtext, "u", inputtext[0])) return ShowDialog(playerid, dialogid);

				if(!IsPlayerConnected(inputtext[0])) return ShowPlayerMessage(playerid, "La persona debe estar conectada.", 5);
				if(inputtext[0] == playerid) return ShowPlayerMessage(playerid, "La persona no debes ser tú.", 5);
				if(PLAYER_TEMP[inputtext[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "La persona debe estar aquí.", 5);

				if(!IsPlayerInRangeOfPoint(inputtext[0], 3.0, 222.1944, 2353.8499, 1017.1298)) return ShowPlayerMessage(playerid, "La persona debe acercarse a ti.", 5);
				if(BANK_ACCOUNT[inputtext[0]][bank_account_ID] == 0) return ShowPlayerMessage(playerid, "La persona no tiene una ~b~~h~cuenta bancaria.", 5);

				new DBResult:Result, DB_Query[120], player_vehicles;
				format(DB_Query, sizeof(DB_Query), "SELECT COUNT(`ID_USER`) AS `VEHICLES` FROM `PLAYER_VEHICLES` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[inputtext[0]][ac_ID]);
				Result = db_query(Database, DB_Query);
				if(db_num_rows(Result)) player_vehicles = db_get_field_assoc_int(Result, "VEHICLES");
				db_free_result(Result);

				if(player_vehicles >= MAX_SU_VEHICLES) return ShowPlayerMessage(playerid, "La persona ya tiene muchos vehículos.", 5);
				if(!ACCOUNT_INFO[inputtext[0]][ac_SU])
				{
					if(player_vehicles >= MAX_NU_VEHICLES) return ShowPlayerMessage(playerid, "La persona ya tiene muchos vehículos.", 5);
				}

				if(ACCOUNT_INFO[inputtext[0]][ac_LEVEL] < 3) return ShowPlayerMessage(playerid, "La persona debe ser nivel 3.", 5);
				if(PLAYER_TEMP[playerid][pt_NOTARY_PRICE] > BANK_ACCOUNT[inputtext[0]][bank_account_BALANCE]) return ShowPlayerMessage(playerid, "La persona no tiene suficientes fondos en el banco.", 5);
				
				SendClientMessage(playerid, -1, "{FFFFFF}Tu oferta se ha enviado al comprador, espera para ver si la acepta.");

				new action[64]; format(action, sizeof action, "quiere llegar a un acuerdo con %s.", PLAYER_TEMP[inputtext[0]][pt_RP_NAME]);
				Auto_SendPlayerAction(playerid, action);

				PLAYER_TEMP[inputtext[0]][pt_PLAYER_VEHICLE_SELECTED] = PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED];
				PLAYER_TEMP[inputtext[0]][pt_NOTARY_PRICE] = PLAYER_TEMP[playerid][pt_NOTARY_PRICE];
				PLAYER_TEMP[inputtext[0]][pt_NOTARY_TO_PLAYER] = playerid;
				PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] = inputtext[0];

				ShowDialog(inputtext[0], DIALOG_SELL_CONFIRM_VEHICLE);
			}
			else ShowDialog(playerid, DIALOG_PROPERTY_SELL_PRICE);
			return 1;
		}
		case DIALOG_SELL_CONFIRM_VEHICLE:
		{
			if(response)
			{
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER])) return ShowPlayerMessage(playerid, "El vendedor se desconectó.", 5);
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_NOTARY_TO_PLAYER] != playerid) return ShowPlayerMessage(playerid, "El vendedor esta muy lejos.", 5);
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return ShowPlayerMessage(playerid, "El vendedor no está disponible.", 5);
				if(BANK_ACCOUNT[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][bank_account_ID] == 0) return ShowPlayerMessage(playerid, "El vendedor necesita una ~b~~h~cuenta bancaria.", 5);
				
				// Traspasar

				PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][player_vehicle_OWNER_ID] = ACCOUNT_INFO[playerid][ac_ID];
				new DB_Query_update[350];
				format(DB_Query_update, sizeof(DB_Query_update), "UPDATE `PLAYER_VEHICLES` SET `ID_USER` = '%d' WHERE `ID` = '%d';",
					ACCOUNT_INFO[playerid][ac_ID],
					PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][player_vehicle_ID]
				);
				db_query(Database, DB_Query_update);


				// Banco
				new price = PLAYER_TEMP[playerid][pt_NOTARY_PRICE], seller = PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER];

				if(PLAYER_PHONE[playerid][player_phone_VALID])
				{
					new message[64]; format(message, sizeof message, "vehículo adquirido: -$%s", number_format_thousand(price));
					RegisterPhoneMessage(6740, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
					if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, 0x12bc7eFF, "@WHATSAPP:{25d366} recibido de {12bc7e}%s:{25d366} Transacción a %s por: %s", convertPhoneNumber(playerid, 6740), PLAYER_TEMP[seller][pt_RP_NAME], message);
				}
				if(PLAYER_PHONE[seller][player_phone_VALID])
				{
					new message[64]; format(message, sizeof message, "vehículo comprado: +$%s", number_format_thousand(price));
					RegisterPhoneMessage(6740, PLAYER_PHONE[seller][player_phone_NUMBER], message);
					if(PLAYER_PHONE[seller][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(seller, 0x12bc7eFF, "@WHATSAPP:{25d366} recibido de {12bc7e}%s:{25d366} Recibió un deposito por: %s", convertPhoneNumber(seller, 6740), message);
				}

				BANK_ACCOUNT[playerid][bank_account_BALANCE] -= price;
				RegisterBankAccountTransaction(BANK_ACCOUNT[playerid][bank_account_ID], BANK_TRANSACTION_BUY_VEHICLE, price);

				BANK_ACCOUNT[seller][bank_account_BALANCE] += price;
				RegisterBankAccountTransaction(BANK_ACCOUNT[seller][bank_account_ID], BANK_TRANSACTION_SOLD_VEHICLE, price);


				format(DB_Query_update, sizeof(DB_Query_update),
					"\
						UPDATE `BANK_ACCOUNT` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';\
						UPDATE `BANK_ACCOUNT` SET `BALANCE` = '%d' WHERE `ID_ACCOUNT` = '%d';\
					",
						BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID],
						BANK_ACCOUNT[seller][bank_account_BALANCE], BANK_ACCOUNT[seller][bank_account_ID]
				);
				db_query(Database, DB_Query_update);


				SendClientMessageEx(playerid, -1, "{00FF00}¡Vehículo %s comprado! {FFFFFF}Utiliza {FFFF00}/GPS {FFFFFF}para localizarlo.", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
				SendClientMessageEx(seller, -1, "Se ha depositado el dinero ({41f48f}$%s{FFFFFF}) en tu cuenta bancaria, el vehículo ahora es de $s.", number_format_thousand(price), PLAYER_TEMP[seller][pt_RP_NAME]);
				PlayerPlaySound(seller, 1058, 0.0, 0.0, 0.0);
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);

				new action[64]; format(action, sizeof action, "y %s han llegado a un acuerdo.", PLAYER_TEMP[seller][pt_RP_NAME]);
				Auto_SendPlayerAction(playerid, action);
				SaveUserData(playerid);
				SaveUserData(seller);

				if(!ACCOUNT_INFO[seller][ac_SU]) ReLockPlayerVehicles(seller);
				if(!ACCOUNT_INFO[playerid][ac_SU]) ReLockPlayerVehicles(playerid);
			}
			return 1;
		}
		case DIALOG_SELECT_TRUCK_TYPE:
		{
			if(response)
			{
				if(Truck_Contents[listitem][truck_content_EXP] > PLAYER_SKILLS[playerid][WORK_TRUCK])
				{
					SendClientMessageEx(playerid, -1, "{FFFFFF}Has realizado %d trabajos como camionero, necesitas %d para este viaje.", PLAYER_SKILLS[playerid][WORK_TRUCK], Truck_Contents[listitem][truck_content_EXP]);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				new vehicleid = GetPlayerVehicleID(playerid);
				TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] = listitem;

				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], "Cargando_cami¦n...");
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);

				SetVehicleParamsEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS], 0, 0, 0, 1, 0);
    			SetTimerEx("CloseGate", 7000, false, "i", playerid);
				MoveObject(Gate, 2774.28003, -2455.94922, 18.40419, 3.0, 0.0000, 0.0000, 0.0000);

				PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] = 35.0;
				UpdatePlayerLoadingTruckSize(playerid);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);
				PLAYER_TEMP[playerid][pt_TIMERS][9] = SetTimerEx("TruckLoadUp", 1000, false, "ii", playerid, vehicleid);
			}
			else
			{
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);
				PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
				PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
				PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
				PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
				SetVehicleToRespawnEx(GetPlayerVehicleID(playerid));
			}
			return 1;
		}
		case DIALOG_TUNING_MENU_PART:
		{
			if(response)
			{
				if(isnull(PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME])) return 1;

				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

				new Float:Vehicle_Pos[3];
				GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

				if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{FFFFFF}El vehículo está demasiado lejos.");

				if(PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] < PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES])
				{
					ShowDialog(playerid, dialogid);
					SendClientMessage(playerid, -1, "{FFFFFF}No tienes suficientes piezas, puedes comprar más piezas en el taller.");
					return 1;
				}

				format(PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PART], 24, "%s", PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME]);
				PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES] = PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES];

				ShowDialog(playerid, DIALOG_TUNING_MENU_COMPONENT);
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_TUNING_MENU_COMPONENT:
		{
			if(response)
			{
				if(isnull(PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME]) || !PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID]) return 1;

				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

				new Float:Vehicle_Pos[3];
				GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

				if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{FFFFFF}El vehículo está demasiado lejos.");

				if(PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] < PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES])
				{
					SendClientMessage(playerid, -1, "{FFFFFF}No tienes suficientes piezas, puedes comprar más piezas en el taller.");
					return 1;
				}

				if(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					new vehicleid = PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID];

					new slot = GetVehicleComponentType( PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] );
					new current_component = GetVehicleComponentInSlot(vehicleid, slot);
					if(current_component) RemoveVehicleComponent(vehicleid, current_component);

					GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][slot] = PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID];
					AddVehicleComponent(vehicleid, PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID]);

					PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] -= PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES];
					SendClientMessageEx(playerid, -1, "{FFFFFF}Componente '%s' añadido, has necesitado %d piezas.", PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME], PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES]);
				}
				else
				{
					format(PLAYER_TEMP[playerid][pt_TUNING_SELECTED_COMPONENT], 24, "%s", PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME]);
					PLAYER_TEMP[playerid][pt_TUNING_SELECTED_COMPONENT_ID] = PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID];

					ShowDialog(playerid, DIALOG_MECHANIC_TUNING_PRICE);
				}
			}
			else ShowDialog(playerid, DIALOG_TUNING_MENU_PART);
			return 1;
		}
		case DIALOG_MECHANIC_MENU:
		{
			if(response)
			{
				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

				new Float:Vehicle_Pos[3];
				GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

				if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{FFFFFF}El vehículo está demasiado lejos.");

				switch(listitem)
				{
					case 0: // Reparar
					{
						if(PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] < VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_REPUESTOS]) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes suficientes piezas, puedes comprar más piezas en el taller.");

						if(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
						{
							PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] -= VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_REPUESTOS];
							RepairVehicleEx(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], playerid);

							SendClientMessage(playerid, -1, "{FFFFFF}Este es tu vehículo por lo que no se cobrará.");
							return 1;
						}
						else
						{
							if(!PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_VALID])
							{
								if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_DRIVER] == playerid || GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] == playerid)
								{
									PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
									PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] -= VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_REPUESTOS];
									RepairVehicleEx(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], playerid);

									SendClientMessage(playerid, -1, "{FFFFFF}Eres el conductor o el último conductor de este vehículo por lo que no se cobrará.");
									return 1;
								}
							}
							ShowDialog(playerid, DIALOG_MECHANIC_REPAIR_PRICE);
						}
					}
					case 1:
					{
						if(PLAYER_MISC[playerid][MISC_LATA_PINTURA] == 0)
						{
							ShowDialog(playerid, dialogid);
							SendClientMessage(playerid, -1, "{FFFFFF}Necesitas una {00FF00}máquina de pintura{FFFFFF}, cómprala en una {00FF00}ferretería.");
							return 1;
						}
						if(PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] < 5)
						{
							ShowDialog(playerid, dialogid);
							SendClientMessage(playerid, -1, "{FFFFFF}Para pintar un vehículo necesitas de repuestos.");
							return 1;
						}

						if(!PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_VALID])
						{
							ShowDialog(playerid, dialogid);
							SendClientMessage(playerid, -1, "{FFFFFF}Solo los vehículos personales se pueden pintar.");
							return 1;
						}

						ShowDialog(playerid, DIALOG_MECHANIC_SELECT_COL_SLOT);
					}
					case 2:
					{
						if(PLAYER_MISC[playerid][MISC_HERRAMIENTA] == 0)
						{
							ShowDialog(playerid, dialogid);
							SendClientMessage(playerid, -1, "{FFFFFF}Necesitas una {00FF00}llave de mecánico{FFFFFF}, cómprala en una {00FF00}ferretería.");
							return 1;
						}

						if(PLAYER_SKILLS[playerid][WORK_MECHANIC] <= 19)
						{
							SendClientMessageEx(playerid, -1, "{FFFFFF}Has realizado %d reparaciones como mecánico, necesitas 20 para modificar vehículos.", PLAYER_SKILLS[playerid][WORK_MECHANIC]);
							ShowDialog(playerid, dialogid);
							return 1;
						}

						ShowDialog(playerid, DIALOG_MECHANIC_REMOVE_COMPONEN);
					}
					case 3:
					{
						if(PLAYER_MISC[playerid][MISC_HERRAMIENTA] == 0)
						{
							ShowDialog(playerid, dialogid);
							SendClientMessage(playerid, -1, "{FFFFFF}Necesitas una {00FF00}llave de mecánico{FFFFFF}, cómprala en una {00FF00}ferretería.");
							return 1;
						}

						if(PLAYER_SKILLS[playerid][WORK_MECHANIC] <= 19)
						{
							SendClientMessageEx(playerid, -1, "{FFFFFF}Has realizado %d reparaciones como mecánico, necesitas 20 para modificar vehículos.", PLAYER_SKILLS[playerid][WORK_MECHANIC]);
							ShowDialog(playerid, dialogid);
							return 1;
						}

						if(!PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_VALID])
						{
							ShowDialog(playerid, dialogid);
							SendClientMessage(playerid, -1, "{FFFFFF}Solo los vehículos personales se pueden tunear.");
							return 1;
						}

						ShowDialog(playerid, DIALOG_TUNING_MENU_PART);
					}
					case 4:
					{
						if(PLAYER_MISC[playerid][MISC_LATA_PINTURA] == 0)
						{
							ShowDialog(playerid, dialogid);
							SendClientMessage(playerid, -1, "{FFFFFF}Necesitas una {00FF00}máquina de pintura{FFFFFF}, cómprala en una {00FF00}ferretería.");
							return 1;
						}

						if(PLAYER_SKILLS[playerid][WORK_MECHANIC] <= 19)
						{
							SendClientMessageEx(playerid, -1, "{FFFFFF}Has realizado %d reparaciones como mecánico, necesitas 20 para pintar.", PLAYER_SKILLS[playerid][WORK_MECHANIC]);
							ShowDialog(playerid, dialogid);
							return 1;
						}

						if(!PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_VALID])
						{
							ShowDialog(playerid, dialogid);
							SendClientMessage(playerid, -1, "{FFFFFF}Solo los vehículos personales se le pueden cambiar el paintjob.");
							return 1;
						}
						ShowDialog(playerid, DIALOG_TUNING_PAINTJOB);
					}
				}
			}
			return 1;
		}
		case DIALOG_MECHANIC_REPAIR_PRICE:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{FFFFFF}El vehículo está demasiado lejos.");

			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{FFFFFF}El precio no es correcto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] < 0)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}No puedes cobrar números negativos.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				if(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_VALID])
				{
					new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
					if(buyer == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{FFFFFF}El dueño del vehículo no está cerca.");

					new Float:mechanic_pos[3];
					GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
					if(!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return SendClientMessage(playerid, -1, "{FFFFFF}El dueño del vehículo está demasiado lejos.");

					PLAYER_TEMP[buyer][pt_MECHANIC_PID] = playerid;
					PLAYER_TEMP[buyer][pt_MECHANIC_AID] = ACCOUNT_INFO[playerid][ac_ID];
					PLAYER_TEMP[buyer][pt_MECHANIC_PRICE] = inputtext[0];
					format(PLAYER_TEMP[buyer][pt_MECHANIC_TEXT], 64, "Reparación completa del vehículo");
					PLAYER_TEMP[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_REPAIR;
					PLAYER_TEMP[buyer][pt_MECHANIC_EXTRA] = 0;
					PLAYER_TEMP[buyer][pt_MECHANIC_VEHICLE_ID] = PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID];
					PLAYER_TEMP[buyer][pt_MECHANIC_PIECES] = 10;
					PLAYER_TEMP[buyer][pt_MECHANIC_TIME] = gettime();

					ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);
					if(PLAYER_TEMP[buyer][pt_WANT_MECHANIC])
					{
						PLAYER_TEMP[buyer][pt_WANT_MECHANIC] = false;
						DisablePlayerMechanicMark(buyer);
					}

					SendClientMessageEx(playerid, -1, "{FFFFFF}Le has ofrecido a %s reparar su vehículo por $%s.", PLAYER_TEMP[buyer][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][pt_MECHANIC_PRICE]));
				}
				else
				{
					if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_OCCUPIED])
					{
						new buyer = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_DRIVER];
						if(buyer == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{FFFFFF}El conductor del vehículo no está cerca.");

						new Float:mechanic_pos[3];
						GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
						if(!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return SendClientMessage(playerid, -1, "{FFFFFF}El conductor del vehículo está demasiado lejos.");

						PLAYER_TEMP[buyer][pt_MECHANIC_PID] = playerid;
						PLAYER_TEMP[buyer][pt_MECHANIC_AID] = ACCOUNT_INFO[playerid][ac_ID];
						PLAYER_TEMP[buyer][pt_MECHANIC_PRICE] = inputtext[0];
						format(PLAYER_TEMP[buyer][pt_MECHANIC_TEXT], 64, "Reparación completa del vehículo");
						PLAYER_TEMP[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_REPAIR;
						PLAYER_TEMP[buyer][pt_MECHANIC_EXTRA] = 0;
						PLAYER_TEMP[buyer][pt_MECHANIC_VEHICLE_ID] = PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID];
						PLAYER_TEMP[buyer][pt_MECHANIC_PIECES] = 10;
						PLAYER_TEMP[buyer][pt_MECHANIC_TIME] = gettime();

						ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);
						if(PLAYER_TEMP[buyer][pt_WANT_MECHANIC])
						{
							PLAYER_TEMP[buyer][pt_WANT_MECHANIC] = false;
							DisablePlayerMechanicMark(buyer);
						}

						SendClientMessageEx(playerid, -1, "{FFFFFF}Le has ofrecido a %s reparar el vehículo por $%s.", PLAYER_TEMP[buyer][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][pt_MECHANIC_PRICE]));
					}
					else
					{
						new buyer = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER];
						if(buyer == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{FFFFFF}Este vehículo no tiene conductor.");

						new Float:mechanic_pos[3];
						GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
						if(!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return SendClientMessage(playerid, -1, "{FFFFFF}El conductor del vehículo está demasiado lejos.");

						PLAYER_TEMP[buyer][pt_MECHANIC_PID] = playerid;
						PLAYER_TEMP[buyer][pt_MECHANIC_AID] = ACCOUNT_INFO[playerid][ac_ID];
						PLAYER_TEMP[buyer][pt_MECHANIC_PRICE] = inputtext[0];
						format(PLAYER_TEMP[buyer][pt_MECHANIC_TEXT], 64, "Reparación completa del vehículo");
						PLAYER_TEMP[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_REPAIR;
						PLAYER_TEMP[buyer][pt_MECHANIC_EXTRA] = 0;
						PLAYER_TEMP[buyer][pt_MECHANIC_VEHICLE_ID] = PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID];
						PLAYER_TEMP[buyer][pt_MECHANIC_PIECES] = 10;
						PLAYER_TEMP[buyer][pt_MECHANIC_TIME] = gettime();

						ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);
						if(PLAYER_TEMP[buyer][pt_WANT_MECHANIC])
						{
							PLAYER_TEMP[buyer][pt_WANT_MECHANIC] = false;
							DisablePlayerMechanicMark(buyer);
						}

						SendClientMessageEx(playerid, -1, "{FFFFFF}Le has ofrecido a %s reparar el vehículo por $%s.", PLAYER_TEMP[buyer][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][pt_MECHANIC_PRICE]));
					}
				}
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_MECHANIC_COLOR_PRICE:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{FFFFFF}El vehículo está demasiado lejos.");

			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{FFFFFF}El precio no es correcto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] < 0)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}No puede cobrar números negativos.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
				if(buyer == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{FFFFFF}El dueño del vehículo no está cerca.");

				new Float:mechanic_pos[3];
				GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
				if(!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return SendClientMessage(playerid, -1, "{FFFFFF}El dueño del vehículo está demasiado lejos.");

				PLAYER_TEMP[buyer][pt_MECHANIC_PID] = playerid;
				PLAYER_TEMP[buyer][pt_MECHANIC_AID] = ACCOUNT_INFO[playerid][ac_ID];
				PLAYER_TEMP[buyer][pt_MECHANIC_PRICE] = inputtext[0];

				switch(PLAYER_TEMP[playerid][pt_MECHANIC_COLOR_SLOT])
				{
					case 0:
					{
						format(PLAYER_TEMP[buyer][pt_MECHANIC_TEXT], 64, "Pintar color primario {%06x}(%d)", VEHICLE_COLORS[ PLAYER_TEMP[playerid][pt_MECHANIC_SELECTED_COLOR] ] >>> 8, PLAYER_TEMP[playerid][pt_MECHANIC_SELECTED_COLOR]);
						PLAYER_TEMP[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_COLOR_1;
					}
					case 1:
					{
						format(PLAYER_TEMP[buyer][pt_MECHANIC_TEXT], 64, "Pintar color secundario {%06x}(%d)", VEHICLE_COLORS[ PLAYER_TEMP[playerid][pt_MECHANIC_SELECTED_COLOR] ] >>> 8, PLAYER_TEMP[playerid][pt_MECHANIC_SELECTED_COLOR]);
						PLAYER_TEMP[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_COLOR_2;
					}
				}

				PLAYER_TEMP[buyer][pt_MECHANIC_EXTRA] = PLAYER_TEMP[playerid][pt_MECHANIC_SELECTED_COLOR];
				PLAYER_TEMP[buyer][pt_MECHANIC_VEHICLE_ID] = PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID];
				PLAYER_TEMP[buyer][pt_MECHANIC_PIECES] = 5;
				PLAYER_TEMP[buyer][pt_MECHANIC_TIME] = gettime();

				ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);

				SendClientMessageEx(playerid, -1, "{FFFFFF}Le has ofrecido a %s pintar su vehículo por $%s.", PLAYER_TEMP[buyer][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][pt_MECHANIC_PRICE]));
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_MECHANIC_TUNING_PRICE:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{FFFFFF}El vehículo está demasiado lejos.");

			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{FFFFFF}El precio no es correcto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] < 0 || inputtext[0] > ((PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES] * 50) + 2000))
				{
					SendClientMessageEx(playerid, -1, "{FFFFFF}El rango del precio es: 0$ - $%s.", number_format_thousand((PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES] * 50) + 2000));
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
				if(buyer == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{FFFFFF}El dueño del vehículo no está cerca.");

				new Float:mechanic_pos[3];
				GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
				if(!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return SendClientMessage(playerid, -1, "{FFFFFF}El dueño del vehículo está demasiado lejos.");

				PLAYER_TEMP[buyer][pt_MECHANIC_PID] = playerid;
				PLAYER_TEMP[buyer][pt_MECHANIC_AID] = ACCOUNT_INFO[playerid][ac_ID];
				PLAYER_TEMP[buyer][pt_MECHANIC_PRICE] = inputtext[0];
				format(PLAYER_TEMP[buyer][pt_MECHANIC_TEXT], 64, "'%s' > '%s'", PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PART], PLAYER_TEMP[playerid][pt_TUNING_SELECTED_COMPONENT]);
				PLAYER_TEMP[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_TUNING;
				PLAYER_TEMP[buyer][pt_MECHANIC_EXTRA] = PLAYER_TEMP[playerid][pt_TUNING_SELECTED_COMPONENT_ID];
				PLAYER_TEMP[buyer][pt_MECHANIC_VEHICLE_ID] = PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID];
				PLAYER_TEMP[buyer][pt_MECHANIC_PIECES] = PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES];
				PLAYER_TEMP[buyer][pt_MECHANIC_TIME] = gettime();

				ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);

				SendClientMessageEx(playerid, -1, "{FFFFFF}Le has ofrecido a %s tunear su vehículo por $%s.", PLAYER_TEMP[buyer][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][pt_MECHANIC_PRICE]));
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_MECHANIC_PAINTJOB_PRICE:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{FFFFFF}El vehículo está demasiado lejos.");

			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{FFFFFF}El precio no es correcto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] < 0 || inputtext[0] > 2750)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}El rango del precio es: 0$ - 2.750$.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
				if(buyer == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "{FFFFFF}El dueño del vehículo no está cerca.");

				new Float:mechanic_pos[3];
				GetPlayerPos(playerid, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2]);
				if(!IsPlayerInRangeOfPoint(buyer, 10.0, mechanic_pos[0], mechanic_pos[1], mechanic_pos[2])) return SendClientMessage(playerid, -1, "{FFFFFF}El dueño del vehículo está demasiado lejos.");

				PLAYER_TEMP[buyer][pt_MECHANIC_PID] = playerid;
				PLAYER_TEMP[buyer][pt_MECHANIC_AID] = ACCOUNT_INFO[playerid][ac_ID];
				PLAYER_TEMP[buyer][pt_MECHANIC_PRICE] = inputtext[0];
				format(PLAYER_TEMP[buyer][pt_MECHANIC_TEXT], 64, "Paintjob (%d)", PLAYER_TEMP[playerid][pt_PAINTJOB_SELECTED_ID]);
				PLAYER_TEMP[buyer][pt_MECHANIC_TYPE] = MECHANIC_OPTION_PAINTJOB;
				PLAYER_TEMP[buyer][pt_MECHANIC_EXTRA] = PLAYER_TEMP[playerid][pt_PAINTJOB_SELECTED_ID];
				PLAYER_TEMP[buyer][pt_MECHANIC_VEHICLE_ID] = PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID];
				PLAYER_TEMP[buyer][pt_MECHANIC_PIECES] = 15;
				PLAYER_TEMP[buyer][pt_MECHANIC_TIME] = gettime();

				ShowDialog(buyer, DIALOG_MECHANIC_ACCEPT);

				SendClientMessageEx(playerid, -1, "{FFFFFF}Le has ofrecido a %s cambiar el paintjob de su vehículo por $%s.", PLAYER_TEMP[buyer][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][pt_MECHANIC_PRICE]));
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_MECHANIC_ACCEPT:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_MECHANIC_TIME] + 20) return SendClientMessage(playerid, -1, "{FFFFFF}Has tardado mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_MECHANIC_PID])) return SendClientMessage(playerid, -1, "{FFFFFF}El mecánico ya no está en el servidor.");
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_MECHANIC_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_MECHANIC_AID]) return SendClientMessage(playerid, -1, "{FFFFFF}El mecánico ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_MECHANIC_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 10.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xFFFFFFFF, "El mecánico está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_MECHANIC_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{FFFFFF}El mecánico no está disponible.");

				if(PLAYER_TEMP[playerid][pt_MECHANIC_PRICE] > CHARACTER_INFO[playerid][ch_CASH])
				{
					SendClientMessage(PLAYER_TEMP[playerid][pt_MECHANIC_PID], -1, "{FFFFFF}La persona no tiene suficiente dinero.");
					SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder aceptarlo.", number_format_thousand(PLAYER_TEMP[playerid][pt_MECHANIC_PRICE] - CHARACTER_INFO[playerid][ch_CASH]));
					return 1;
				}
				if(PLAYER_TEMP[playerid][pt_MECHANIC_PIECES] > PLAYER_MISC[ PLAYER_TEMP[playerid][pt_MECHANIC_PID] ][MISC_MECHANIC_PIECES])
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Al mecánico no le quedan piezas para el trabajo.");
					SendClientMessage(PLAYER_TEMP[playerid][pt_MECHANIC_PID], -1, "{FFFFFF}La persona ha aceptado pero no tienes piezas suficientes para el trabajo.");
					return 1;
				}

				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID])
				{
					SendClientMessage(playerid, -1, "{FFFFFF}El vehículo está muy lejos.");
					SendClientMessage(PLAYER_TEMP[playerid][pt_MECHANIC_PID], -1, "{FFFFFF}La persona ha aceptado pero el vehículo está muy lejos.");
					return 1;
				}
				if(GetVehicleDistanceFromPoint(PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID], pos[0], pos[1], pos[2]) > 10.0)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}El vehículo está muy lejos del mecánico.");
					SendClientMessage(PLAYER_TEMP[playerid][pt_MECHANIC_PID], -1, "{FFFFFF}La persona ha aceptado pero estás muy lejos del vehículo.");
					return 1;
				}

				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_MECHANIC_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][pt_MECHANIC_PID], PLAYER_TEMP[playerid][pt_MECHANIC_PRICE]);

				switch(PLAYER_TEMP[playerid][pt_MECHANIC_TYPE])
				{
					case MECHANIC_OPTION_REPAIR:
					{
						PLAYER_MISC[ PLAYER_TEMP[playerid][pt_MECHANIC_PID] ][MISC_MECHANIC_PIECES] -= PLAYER_TEMP[playerid][pt_MECHANIC_PIECES];
						PLAYER_SKILLS[ PLAYER_TEMP[playerid][pt_MECHANIC_PID] ][WORK_MECHANIC] ++;

						RepairVehicleEx(PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID], playerid);
						SendClientMessage(PLAYER_TEMP[playerid][pt_MECHANIC_PID], -1, "{FFFFFF}Has necesitado 10 piezas para la reparacion.");
					}
					case MECHANIC_OPTION_COLOR_1:
					{
						PLAYER_MISC[ PLAYER_TEMP[playerid][pt_MECHANIC_PID] ][MISC_MECHANIC_PIECES] -= 5;
						GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_1] = PLAYER_TEMP[playerid][pt_MECHANIC_EXTRA];
						ChangeVehicleColor(PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_2]);

						SendClientMessage(PLAYER_TEMP[playerid][pt_MECHANIC_PID], -1, "{FFFFFF}Has necesitado 5 piezas para pintar el vehículo.");
					}
					case MECHANIC_OPTION_COLOR_2:
					{
						PLAYER_MISC[ PLAYER_TEMP[playerid][pt_MECHANIC_PID] ][MISC_MECHANIC_PIECES] -= 5;
						GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_2] = PLAYER_TEMP[playerid][pt_MECHANIC_EXTRA];
						ChangeVehicleColor(PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_2]);

						SendClientMessage(PLAYER_TEMP[playerid][pt_MECHANIC_PID], -1, "{FFFFFF}Has necesitado 5 piezas para pintar el vehículo.");
					}
					case MECHANIC_OPTION_TUNING:
					{
						new slot = GetVehicleComponentType(PLAYER_TEMP[playerid][pt_MECHANIC_EXTRA]);
						new current_component = GetVehicleComponentInSlot(PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID], slot);
						if(current_component) RemoveVehicleComponent(PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID], current_component);

						GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][slot] = PLAYER_TEMP[playerid][pt_MECHANIC_EXTRA];
						AddVehicleComponent(PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID], PLAYER_TEMP[playerid][pt_MECHANIC_EXTRA]);

						PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] -= PLAYER_TEMP[playerid][pt_MECHANIC_PIECES];
						SendClientMessageEx(PLAYER_TEMP[playerid][pt_MECHANIC_PID], -1, "{FFFFFF}Has necesitado 5 piezas para tunear el vehículo.", PLAYER_TEMP[playerid][pt_MECHANIC_PIECES]);
					}
					case MECHANIC_OPTION_PAINTJOB:
					{
						GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB] = PLAYER_TEMP[playerid][pt_MECHANIC_EXTRA];
						ChangeVehiclePaintjob(PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB]);
						SendClientMessage(playerid, -1, "{FFFFFF}Has necesitado 15 piezas para el paintjob de el vehículo.");
					}
				}

				SendClientMessageEx(playerid, -1, "{FFFFFF}Le has pagado $%s al mecánico por su trabajo.", number_format_thousand(PLAYER_TEMP[playerid][pt_MECHANIC_PRICE]));
				SendClientMessageEx(PLAYER_TEMP[playerid][pt_MECHANIC_PID], -1, "{FFFFFF}%s te ha pagado $%s por tu trabajo.", PLAYER_TEMP[playerid][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[playerid][pt_MECHANIC_PRICE]));
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_MECHANIC_TIME] + 30) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_MECHANIC_PID])) return 1;
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_MECHANIC_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_MECHANIC_AID]) return 1;

				SendClientMessage(PLAYER_TEMP[playerid][pt_MECHANIC_PID], -1, "{FFFFFF}La persona no aceptó lo que le ofreciste.");
			}
			return 1;
		}
		case DIALOG_MECHANIC_SELECT_COL_SLOT:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{FFFFFF}El vehículo está demasiado lejos.");

			if(response)
			{
				PLAYER_TEMP[playerid][pt_MECHANIC_COLOR_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_MECHANIC_SELECT_COLOR);
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_MECHANIC_SELECT_COLOR:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{FFFFFF}El vehículo está demasiado lejos.");

			if(response)
			{
				if(PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] < 5) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes suficientes piezas, puedes comprar más piezas en el taller.");

				if(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] -= 5;
					switch(PLAYER_TEMP[playerid][pt_MECHANIC_COLOR_SLOT])
					{
						case 0: GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_1] = listitem;
						case 1: GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_2] = listitem;
					}
					ChangeVehicleColor(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COLOR_2]);

					SendClientMessage(playerid, -1, "{FFFFFF}Has necesitado 5 piezas para pintar el vehículo.");
				}
				else
				{
					PLAYER_TEMP[playerid][pt_MECHANIC_SELECTED_COLOR] = listitem;
					ShowDialog(playerid, DIALOG_MECHANIC_COLOR_PRICE);
				}
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_SELECT_COL_SLOT);
			return 1;
		}
		case DIALOG_MECHANIC_REMOVE_COMPONEN:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{FFFFFF}El vehículo está demasiado lejos.");

			if(response)
			{
				if(PLAYER_SKILLS[playerid][WORK_MECHANIC] <= 99)
				{
					SendClientMessageEx(playerid, -1, "{FFFFFF}Has realizado %d reparaciones como mecánico, necesitas 100 para tunear vehículos.", PLAYER_SKILLS[playerid][WORK_MECHANIC]);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] == 0) return ShowDialog(playerid, dialogid);

				RemoveVehicleComponent(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][ PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] ]);
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_COMPONENTS][ PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] ] = 0;

				PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] += PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES];
				SendClientMessageEx(playerid, -1, "{FFFFFF}Componente eliminado, piezas ganadas: %d, piezas totales: %d.", PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES], PLAYER_MISC[playerid][MISC_MECHANIC_PIECES]);
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_TUNING_PAINTJOB:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendClientMessage(playerid, -1, "{FFFFFF}El vehículo está demasiado lejos.");

			if(response)
			{
				if(PLAYER_SKILLS[playerid][WORK_MECHANIC] <= 99)
				{
					SendClientMessageEx(playerid, -1, "{FFFFFF}Has realizado %d reparaciones como mecánico, necesitas 100 para cambiar el paintjob de vehículos.", PLAYER_SKILLS[playerid][WORK_MECHANIC]);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] < 15) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes suficientes piezas, puedes comprar más piezas en el taller.");

				if(listitem == 0)
				{
					if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB] == 3)
					{
						SendClientMessage(playerid, -1, "{FFFFFF}El vehículo no tiene ningún paintjob.");
						return 1;
					}

					GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB] = 3;
					ChangeVehiclePaintjob(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB]);

					PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] += 15;
					SendClientMessageEx(playerid, -1, "{FFFFFF}Paintjob eliminado, piezas ganadas: 15, piezas totales: %d.", PLAYER_MISC[playerid][MISC_MECHANIC_PIECES]);
					return 1;
				}

				if(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB] = listitem - 1;
					ChangeVehiclePaintjob(PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] ][gb_vehicle_PAINTJOB]);
					SendClientMessage(playerid, -1, "{FFFFFF}Has necesitado 15 piezas para el paintjob de el vehículo.");
				}
				else
				{
					PLAYER_TEMP[playerid][pt_PAINTJOB_SELECTED_ID] = listitem - 1;
					ShowDialog(playerid, DIALOG_MECHANIC_PAINTJOB_PRICE);
				}
			}
			else ShowDialog(playerid, DIALOG_MECHANIC_MENU);
			return 1;
		}
		case DIALOG_SELECT_TRASH_ROUTE:
		{
			if(response)
			{
				if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] == INVALID_PLAYER_ID)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Necesitas un compañero para comenzar a recoger basura.");
					return 1;
				}

				TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED] = true;
				TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] = listitem;
				TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] = 0;

				SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
				SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);

				CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], listitem);
				CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], listitem);

				SendClientMessageEx(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], -1, "Ruta {42aaf4}#%d {FFFFFF}establecida, pueden comenzar.", TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);
				SendClientMessageEx(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], -1, "Ruta {42aaf4}#%d {FFFFFF}establecida, pueden comenzar.", TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);
			}
			return 1;
		}
		case DIALOG_FARMACY:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return SendClientMessage(playerid, -1, "{FFFFFF}La cantidad de medicamentos no es correcta.");
				if(inputtext[0] <= 0 || inputtext[0] > 100000) return SendClientMessage(playerid, -1, "{FFFFFF}La cantidad de medicamentos no es correcta.");

				new price = 600 * inputtext[0];
				if(price > CHARACTER_INFO[playerid][ch_CASH]) return SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar los medicamentos.", number_format_thousand(price - CHARACTER_INFO[playerid][ch_CASH]));

                PLAYER_MISC[playerid][MISC_MEDICINE] += inputtext[0];
				GivePlayerCash(playerid, -price);
				SendClientMessageEx(playerid, -1, "{FFFFFF}Has comprado {FFCC00}%sg de medicamento{FFFFFF} por {41f48f}$%s.", number_format_thousand(inputtext[0]), number_format_thousand(price));
			}
			return 1;
		}
		case DIALOG_MARIA:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return SendClientMessage(playerid, -1, "{FFFFFF}La cantidad de marihuana no es correcta.");
				if(inputtext[0] <= 0 || inputtext[0] > 100000) return SendClientMessage(playerid, -1, "{FFFFFF}La cantidad de marihuana no es correcta.");

				new price = 1000 * inputtext[0];
				if(price > CHARACTER_INFO[playerid][ch_CASH]) return SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar la marihuana.", number_format_thousand(price - CHARACTER_INFO[playerid][ch_CASH]));

                PLAYER_MISC[playerid][MISC_CANNABIS] += inputtext[0];
				GivePlayerCash(playerid, -price);
				SendClientMessageEx(playerid, -1, "{FFFFFF}Has comprado {FFCC00}%sg de marihuana{FFFFFF} por {41f48f}$%s.", number_format_thousand(inputtext[0]), number_format_thousand(price));
			}
			return 1;
		}
		case DIALOG_SEED_LIST:
		{
			if(response)
			{
				if(seed_info[listitem][seed_info_EXP] > PLAYER_SKILLS[playerid][WORK_FARMER]) return SendClientMessageEx(playerid, -1, "{FFFFFF}Necesitas haber plantado al menos {00FF00}%d plantas{FFFFFF} como cosechador para poder comprar esta semilla.", seed_info[listitem][seed_info_EXP]);

				PLAYER_TEMP[playerid][pt_SELECTED_BUY_SEED_ID] = listitem;
				ShowDialog(playerid, DIALOG_SEED_BUY);
			}
			return 1;
		}
		case DIALOG_SEED_BUY:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return SendClientMessage(playerid, -1, "{FFFFFF}La cantidad de semillas no es correcta.");
				if(inputtext[0] <= 0 || inputtext[0] > 100000) return SendClientMessage(playerid, -1, "{FFFFFF}La cantidad de semillas no es correcta.");

				new price = seed_info[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_SEED_ID] ][seed_info_PRICE] * inputtext[0];
				if(price > CHARACTER_INFO[playerid][ch_CASH]) return SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar las semillas.", number_format_thousand(price - CHARACTER_INFO[playerid][ch_CASH]));

				switch(seed_info[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_SEED_ID] ][seed_info_PLANT_TYPE])
				{
					case PLANT_TYPE_MEDICINE: PLAYER_MISC[playerid][MISC_SEED_MEDICINE] += inputtext[0];
					case PLANT_TYPE_CANNABIS: PLAYER_MISC[playerid][MISC_SEED_CANNABIS] += inputtext[0];
					case PLANT_TYPE_CRACK: PLAYER_MISC[playerid][MISC_SEED_CRACK] += inputtext[0];
				}

				GivePlayerCash(playerid, -price);
				SendClientMessageEx(playerid, -1, "{FFFFFF}Has comprado %s semillas de %s por $%s.", number_format_thousand(inputtext[0]), seed_info[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_SEED_ID] ][seed_info_NAME], number_format_thousand(price));
			}
			else ShowDialog(playerid, DIALOG_SEED_LIST);
			return 1;
		}
		case DIALOG_PLANT_PLANTS:
		{
			if(response)
			{
				if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);

				switch(seed_info[listitem][seed_info_PLANT_TYPE])
				{
					case PLANT_TYPE_MEDICINE:
					{
						if(plant_info[listitem][plant_info_SEEDS] > PLAYER_MISC[playerid][MISC_SEED_MEDICINE])
						{
							SendClientMessage(playerid, -1, "{FFFFFF}No tienes las semillas necesarias para plantar esta planta.");
							return 1;
						}
						PLAYER_MISC[playerid][MISC_SEED_MEDICINE] -= plant_info[listitem][plant_info_SEEDS];
					}
					case PLANT_TYPE_CANNABIS:
					{
						if(plant_info[listitem][plant_info_SEEDS] > PLAYER_MISC[playerid][MISC_SEED_CANNABIS])
						{
							SendClientMessage(playerid, -1, "{FFFFFF}No tienes las semillas necesarias para plantar esta planta.");
							return 1;
						}
						PLAYER_MISC[playerid][MISC_SEED_CANNABIS] -= plant_info[listitem][plant_info_SEEDS];
					}
					case PLANT_TYPE_CRACK:
					{
						if(plant_info[listitem][plant_info_SEEDS] > PLAYER_MISC[playerid][MISC_SEED_CRACK])
						{
							SendClientMessage(playerid, -1, "{FFFFFF}No tienes las semillas necesarias para plantar esta planta.");
							return 1;
						}
						PLAYER_MISC[playerid][MISC_SEED_CRACK] -= plant_info[listitem][plant_info_SEEDS];
					}
				}

				SendClientMessageEx(playerid, -1, "{FFFFFF}Estás plantando {00FF00}%s{FFFFFF}, y has gastado {FF0000}%d{FFFFFF} semillas.", plant_info[listitem][plant_info_NAME], plant_info[listitem][plant_info_SEEDS]);


				new Float:offset = floatdiv(PLAYER_SKILLS[playerid][WORK_FARMER], 10);
				if(offset > 30.0) offset = 30.0;

				PLAYER_TEMP[playerid][pt_LAST_PLANT_TIME] = gettime();
				PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED] = listitem;
				PLAYER_TEMP[playerid][pt_PLANTING] = true;
				PLAYER_TEMP[playerid][pt_WORKING_IN] = WORK_FARMER;
				PLAYER_TEMP[playerid][pt_PLANTING_PROGRESS] = frandom(10.0, 8.0, 2) + offset;
				UpdatePlantSizeTextdrawPlant(playerid);

				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3]);

				TogglePlayerControllable(playerid, false);
				SetCameraBehindPlayer(playerid);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, true, false, false, false, 0);

				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][12]);
				PLAYER_TEMP[playerid][pt_TIMERS][12] = SetTimerEx("PlantingUp", 1000, false, "id", playerid, plant_info[listitem][plant_info_SEEDS]);

			}
			return 1;
		}
		case DIALOG_BLACK_MARKET_SELECT_WEA:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;

				PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];

				if(!WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_AMMO])
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Ésta arma no necesita munición.");
					return 1;
				}

				ShowDialog(playerid, DIALOG_BLACK_MARKET_AMMO);
			}
			return 1;
		}
		case DIALOG_BLACK_MARKET_AMMO:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return ShowDialog(playerid, dialogid);
				if(inputtext[0] <= 0 || inputtext[0] > 9999) return SendClientMessage(playerid, -1, "{FFFFFF}La cantidad de munición no es correcta.");

				new price = 3 * inputtext[0];
				if(price > CHARACTER_INFO[playerid][ch_CASH]) return SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar la munición.", number_format_thousand(price - CHARACTER_INFO[playerid][ch_CASH]));

				if(PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO] + inputtext[0] > 9999)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}A esta arma no le entra tanta municion.");
					return 1;
				}

				GivePlayerCash(playerid, -price);
				GivePlayerWeaponEx(playerid, PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID], inputtext[0]);

				SendClientMessageEx(playerid, -1, "{FFFFFF}Has comprado {98d16c}%s {FFFFFF}balas para tu {98d16c}'%s' {FFFFFF}por $%s.", number_format_thousand(inputtext[0]), WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(price));
			}
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;

				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == 13 + 20) // Eliminar todo
				{
					ShowDialog(playerid, DIALOG_PLAYER_WEAPONS_DELETE_A);
					return 1;
				}

				PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_PLAYER_WEAPONS_DELETE);
			}
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE_A:
		{
			if(response)
			{
				new DB_Query[90];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_WEAPONS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				ResetPlayerWeaponsEx(playerid);

				SendClientMessage(playerid, -1, "{FFFFFF}Ha eliminado todas tus armas.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_WEAPONS);
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE:
		{
			if(response)
			{
				SendClientMessageEx(playerid, -1, "{FFFFFF}Has eliminado tu '%s' de tus armas.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME]);
				RemovePlayerSlotWeapon(playerid, PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT], true);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_WEAPONS);
			return 1;
		}
		case DIALOG_ANIMS:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);//rendirse
		            case 1: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 0, 0);//blowjob
		            case 2: ApplyAnimation(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);//rodar
		            case 3: ApplyAnimation(playerid,"PED", "WALK_DRUNK",4.0,1,1,1,1,500);//borracho
		            case 4: ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);//bomba
		            case 5: ApplyAnimation( playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1,500);//apuntar
		            case 6: ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0,0);//reir
		            case 7: ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 1,500);//amenazar
		            case 8: ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 0);//paja
		            case 9: ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0);//herido
		            case 10: ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 1, 1, 0, 4000);//cruzarbrazos
		            case 11: ApplyAnimation(playerid,"SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0);//recostarse
		            case 12: ApplyAnimation(playerid, "ped", "cower", 4.0, 1, 0, 0, 0, 0);//crubrirse
		            case 13: ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);//vomitar
		            case 14: ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);//comer
		            case 15: ApplyAnimation(playerid, "KISSING", "BD_GF_Wave", 3.0, 0, 0, 0, 0, 0);//despedir
		            case 16: ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);//nalgada
		            case 17: ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);//agonizar
		            case 18: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.0, 0, 0, 0, 0, 0);//besar
		            case 19: ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0);//crack
		            case 20: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);//mear
		            case 21: ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_in", 4.000000, 0, 1, 1, 1, 0);//sentarse
		            case 22: ApplyAnimation( playerid,"ped", "fucku", 4.0, 0, 1, 1, 1, 1 );//fucku
		            case 23: ApplyAnimation(playerid, "ped", "phone_in", 4.000000, 0, 0, 0, 1, 4000);//llamar
		            case 24: ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop",  4.1,7,5,1,1,1);//taichi
		            case 25: ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000);//beber
		            case 26: ApplyAnimation(playerid, "GYMNASIUM", "gym_shadowbox",  4.1,7,5,1,1,1);//boxear
		            case 27: ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1,0,0,0,0,0);//saludar
		            case 28: ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop",4.1,0,0,0,0,0);//llorar
		            case 29: ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0);//dormir
		            case 30: ApplyAnimation(playerid,"RAPPING","RAP_B_Loop",4.0,1,0,0,0,8000);//rapear
		            case 31: ApplyAnimation(playerid,"STRIP","strip_A",4.1,7,5,1,1,1);//strip
		            case 32: ApplyAnimation(playerid,"DANCING","DAN_Down_A",4.1,7,5,1,1,1);//bailar
		            case 33: ApplyAnimation(playerid,"ON_LOOKERS","shout_02",4.1,7,5,1,1,1);//alentar
		            case 34: ApplyAnimation(playerid,"PED","IDLE_chat",4.1,7,5,1,1,1);//hablar
					case 35: ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 1, 1, 1, 0);//asiento
		        }
				SendClientMessage(playerid, -1, "{FFFFFF}Para detener la animacion utiliza /parar.");
			}
			return 1;
		}
		case DIALOG_TRICKS_FOOD:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return SendClientMessage(playerid, -1, "{FFFFFF}Has tardado mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor ya no está en el servidor.");
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xFFFFFFFF, "El vendedor está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor no está disponible.");


				new to_player_slot = GetEmptyPlayerPocketSlot(playerid);
				if(to_player_slot == -1)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}No tienes espacio en tus /alimentos para comprar esto.");
					return 1;
				}

				TransferPlayerPocketObject(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA], playerid, to_player_slot);

				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_PRICE]);

				new action[64];
				format(action, sizeof action, "y %s llegan a un acuerdo.", PLAYER_TEMP[playerid][pt_RP_NAME]);
				Auto_SendPlayerAction(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], action);
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return 1;
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return 1;

				SendClientMessage(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], -1, "{FFFFFF}El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_TRICKS_MEDICINE:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return SendClientMessage(playerid, -1, "{FFFFFF}Has tardado mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor ya no está en el servidor.");
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xFFFFFFFF, "El vendedor está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor no está disponible.");


				PLAYER_MISC[playerid][MISC_MEDICINE] += PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];
				PLAYER_MISC[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][MISC_MEDICINE] -= PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];


				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_PRICE]);

				new action[64];
				format(action, sizeof action, "le vende algo a %s.", PLAYER_TEMP[playerid][pt_RP_NAME]);
				Auto_SendPlayerAction(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], action);
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return 1;
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return 1;

				SendClientMessage(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], -1, "{FFFFFF}El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_TRICKS_CANNABIS:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return SendClientMessage(playerid, -1, "{FFFFFF}Has tardado mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor ya no está en el servidor.");
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xFFFFFFFF, "El vendedor está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor no está disponible.");


				PLAYER_MISC[playerid][MISC_CANNABIS] += PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];
				PLAYER_MISC[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][MISC_CANNABIS] -= PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];


				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_PRICE]);

				new action[64];
				format(action, sizeof action, "le vende algo a %s.", PLAYER_TEMP[playerid][pt_RP_NAME]);
				Auto_SendPlayerAction(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], action);
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return 1;
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return 1;

				SendClientMessage(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], -1, "{FFFFFF}El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_TRICKS_CRACK:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return SendClientMessage(playerid, -1, "{FFFFFF}Has tardado mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor ya no está en el servidor.");
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xFFFFFFFF, "El vendedor está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor no está disponible.");


				PLAYER_MISC[playerid][MISC_CRACK] += PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];
				PLAYER_MISC[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][MISC_CRACK] -= PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];


				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_PRICE]);

				new action[64];
				format(action, sizeof action, "le vende algo a %s.", PLAYER_TEMP[playerid][pt_RP_NAME]);
				Auto_SendPlayerAction(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], action);
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return 1;
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return 1;

				SendClientMessage(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], -1, "{FFFFFF}El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_TRICKS_WEAPON:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return SendClientMessage(playerid, -1, "{FFFFFF}Has tardado mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor ya no está en el servidor.");
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xFFFFFFFF, "El vendedor está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor no está disponible.");


				if(PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA] ][player_weapon_VALID])
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{FFFFFF}Para comprar esta arma tienes que deshacerte de tu '%s' (%d) para tener espacio.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA] ][player_weapon_ID] ][weapon_info_NAME], PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA]);
					return 1;
				}

				TransferPlayerWeapon(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA], playerid);

				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_PRICE]);

				new action[64];
				format(action, sizeof action, "le vende algo a %s.", PLAYER_TEMP[playerid][pt_RP_NAME]);
				Auto_SendPlayerAction(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], action);
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return 1;
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return 1;

				SendClientMessage(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], -1, "{FFFFFF}El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_TRICKS_SU:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return SendClientMessage(playerid, -1, "{FFFFFF}Has tardado mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor ya no está en el servidor.");
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xFFFFFFFF, "El vendedor está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor no está disponible.");


				ACCOUNT_INFO[playerid][ac_SD] += PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];
				ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_SD] -= PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];

				new DB_Query_update[256];
				format
				(
					DB_Query_update, sizeof DB_Query_update,

						"\
							UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';\
							UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';\
						",
							ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_ID],
							ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_SD], ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID]
				);
				db_query(Database, DB_Query_update);



				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_PRICE]);
				SendClientMessageEx(playerid, -1, "{FFFFFF}Te has gastado $%s con esta compra.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
				SendClientMessageEx(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], -1, "{FFFFFF}Has ganado $%s con esta venta.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));

				new action[64];
				format(action, sizeof action, "y %s llegan a un acuerdo.", PLAYER_TEMP[playerid][pt_RP_NAME]);
				Auto_SendPlayerAction(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], action);
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return 1;
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return 1;

				SendClientMessage(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], -1, "{FFFFFF}El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_TRICKS_WOOD:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return SendClientMessage(playerid, -1, "{FFFFFF}Has tardado mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor ya no está en el servidor.");
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xFFFFFFFF, "El vendedor está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor no está disponible.");


				PLAYER_MISC[playerid][MISC_WOOD] += PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];
				PLAYER_MISC[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][MISC_WOOD] -= PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];


				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_PRICE]);

				new action[64];
				format(action, sizeof action, "le vende algo a %s.", PLAYER_TEMP[playerid][pt_RP_NAME]);
				Auto_SendPlayerAction(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], action);
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return 1;
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return 1;

				SendClientMessage(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], -1, "{FFFFFF}El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_TRICKS_IRON:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return SendClientMessage(playerid, -1, "{FFFFFF}Has tardado mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor ya no está en el servidor.");
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xFFFFFFFF, "El vendedor está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{FFFFFF}El vendedor no está disponible.");


				PLAYER_MISC[playerid][MISC_PIECES_WEAPON] += PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];
				PLAYER_MISC[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][MISC_PIECES_WEAPON] -= PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];


				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_TRICK_PRICE]);
				GivePlayerCash(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_PRICE]);

				new action[64];
				format(action, sizeof action, "le vende algo a %s.", PLAYER_TEMP[playerid][pt_RP_NAME]);
				Auto_SendPlayerAction(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], action);
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return 1;
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return 1;

				SendClientMessage(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], -1, "{FFFFFF}El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_VEHICLE_BOOT:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == MAX_BOOT_SLOTS + 20)
				{
					ShowDialog(playerid, DIALOG_VEHICLE_BOOT_DELETE_ALL);
					return 1;
				}

				PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_VEHICLE_BOOT_OPTIONS);
			}

		}
		case DIALOG_VEHICLE_BOOT_DELETE_ALL:
		{
			if(response)
			{
				new DB_Query[90];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `VEHICLE_BOOT` WHERE `ID_VEHICLE` = '%d';", PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][player_vehicle_ID]);
				db_query(Database, DB_Query);

				new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT];
				for(new i = 0; i != MAX_BOOT_SLOTS; i ++) VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i] = temp_VEHICLE_BOOT;

				SendClientMessage(playerid, -1, "{FFFFFF}Ha eliminado todo de este maletero.");
			}
			return 1;
		}
		case DIALOG_VEHICLE_BOOT_OPTIONS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(!VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No hay nada en ese slot.");
						if(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_TYPE] != BOOT_TYPE_WEAPON) return SendClientMessage(playerid, -1, "{FFFFFF}En ese slot no hay armas.");

						new to_slot = WEAPON_INFO[ VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ][weapon_info_SLOT];
						if(PLAYER_WEAPONS[playerid][to_slot][player_weapon_VALID])
						{
							PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{FFFFFF}Para sacar esta arma tienes que deshacerte de tu '%s' (%d) para tener espacio.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ to_slot ][player_weapon_ID] ][weapon_info_NAME], to_slot);
							return 1;
						}

						new DB_Query[64];
						format(DB_Query, sizeof DB_Query, "DELETE FROM `VEHICLE_BOOT` WHERE `ID_OBJECT` = '%d';", VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_OBJECT_ID]);
						db_query(Database, DB_Query);

						GivePlayerWeaponEx(playerid, VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT], VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT_EXTRA]);
						RegisterNewPlayerWeapon(playerid, to_slot);

						new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT]; VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ] = temp_VEHICLE_BOOT;

						Auto_SendPlayerAction(playerid, "saca un arma del maletero de su vehículo.");
					}
					case 1: ShowDialog(playerid, DIALOG_VEHICLE_BOOT_DELETE);
				}
			}
			else ShowDialog(playerid, DIALOG_VEHICLE_BOOT);
			return 1;
		}
		case DIALOG_VEHICLE_BOOT_DELETE:
		{
			if(response)
			{
				SendClientMessageEx(playerid, -1, "{FFFFFF}Has eliminado tu '%s' de este maletero.", WEAPON_INFO[ VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ][weapon_info_NAME]);


				new DB_Query[64];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `VEHICLE_BOOT` WHERE `ID_OBJECT` = '%d';", VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_OBJECT_ID]);
				db_query(Database, DB_Query);

				new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT]; VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ] = temp_VEHICLE_BOOT;
			}
			else ShowDialog(playerid, DIALOG_VEHICLE_BOOT_OPTIONS);
			return 1;
		}
		case DIALOG_SELECT_POLICE_SKIN:
		{
			if(response)
			{
				if(!PLAYER_WORKS[playerid][WORK_POLICE]) return 1;
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				if(POLICE_SKINS[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][police_skin_RANK] > PLAYER_SKILLS[playerid][WORK_POLICE]) return ShowDialog(playerid, dialogid);

				SetPlayerSkin(playerid, POLICE_SKINS[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][police_skin_SKIN]);
				StartPlayerJob(playerid, WORK_POLICE);
				SetPlayerColorEx(playerid, 0x00CCFF00);
			}
			return 1;
		}
		case DIALOG_POLICE_RADIOS:
		{
			if(response)
			{
				PLAYER_TEMP[playerid][pt_POLICE_RADIO] = listitem;
				SendClientMessageEx(playerid, -1, "Tu radio ha sido ajustada a la frecuencia %d.", listitem + 1);
			}
			return 1;
		}
		case DIALOG_POLICE_LIST:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_WORKS` WHERE `ID_WORK` = '%d' AND `SET` = '1';", WORK_POLICE);

					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_WORKS` WHERE `ID_WORK` = '%d' AND `SET` = '1';", WORK_POLICE);

					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
				else
				{
					if(PLAYER_SKILLS[playerid][WORK_POLICE] >= 4)
					{
						PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
						ShowDialog(playerid, DIALOG_POLICE_MODIFY);
					}
				}
			}
			return 1;
		}
		case DIALOG_POLICE_MODIFY:
		{
			if(response)
			{
				if(listitem > PLAYER_SKILLS[playerid][WORK_POLICE])
				{
					SendClientMessage(playerid, -1, "{FFFFFF}El rango que has seleccionado es superior al tuyo.");
					return 1;
				}

				new DBResult:Result, DB_Query[256], name[24], connected, player_id, current_rank, bool:found;
				format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `CUENTA`.`CONNECTED`, `CUENTA`.`PLAYERID`, `PLAYER_SKILLS`.`TOTAL` FROM `CUENTA`, `PLAYER_SKILLS` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_SKILLS`.`ID_USER` = `CUENTA`.`ID` AND `PLAYER_SKILLS`.`ID_WORK` = '%d';", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID], WORK_POLICE);
				Result = db_query(Database, DB_Query);

				if(db_num_rows(Result))
				{
					db_get_field_assoc(Result, "NAME", name, 24);
					connected = db_get_field_assoc_int(Result, "CONNECTED");
					player_id = db_get_field_assoc_int(Result, "PLAYERID");
					current_rank = db_get_field_assoc_int(Result, "TOTAL");
					found = true;
				}
				else found = false;
				db_free_result(Result);

				if(!found) return 1;
				if(current_rank > PLAYER_SKILLS[playerid][WORK_POLICE])
				{
					SendClientMessage(playerid, -1, "{FFFFFF}No puedes modificar el rango de este policía porque es un rango superior al tuyo.");
					return 1;
				}

				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL` = '%d' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", listitem, PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID], WORK_POLICE);
				db_query(Database, DB_Query);
				SendClientMessageEx(playerid, -1, "{FFFFFF}El nuevo rango de %s es: '%s'.", name, POLICE_RANKS[listitem]);

				if(listitem == 0)
				{
					format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_WORKS` SET `SET` = '0' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID], WORK_POLICE);
					db_query(Database, DB_Query);
				}

				if(connected)
				{
					PLAYER_SKILLS[player_id][WORK_POLICE] = listitem;

					if(listitem == 0)
					{
						if(PLAYER_TEMP[player_id][pt_WORKING_IN] == WORK_POLICE) EndPlayerJob(player_id);
						PLAYER_WORKS[player_id][WORK_POLICE] = false;
						SendClientMessageEx(player_id, -1, "{FFFFFF}El %s %s te ha expulsado del cuerpo de policía.", POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], PLAYER_TEMP[playerid][pt_RP_NAME]);
						ACCOUNT_INFO[player_id][ac_BLACK_SAPD] = 1;

						format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_WEAPONS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
						db_query(Database, DB_Query);

						ResetPlayerWeaponsEx(playerid);

						SendClientMessage(playerid, -1, "{FFFFFF}Se le han removido todas las armas del cuerpo de policía.");

						
						format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `BLACK_SAPD` = '1' WHERE `ID` = '%d';", ACCOUNT_INFO[player_id][ac_ID]);
						db_query(Database, DB_Query);
					}
					else SendClientMessageEx(player_id, -1, "{FFFFFF}El %s %s ha modificado tu rango del cuerpo de policía a '%s'.", POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], PLAYER_TEMP[playerid][pt_RP_NAME], POLICE_RANKS[listitem]);
				}
			}
			else ShowDialog(playerid, DIALOG_POLICE_LIST);
			return 1;
		}
		case DIALOG_POLICE_SHOP:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_POLICE_WEAPONS);
					case 1: ShowDialog(playerid, DIALOG_POLICE_SELECT_WEAPON);
					case 2: ShowDialog(playerid, DIALOG_POLICE_ARMOUR);
				}
			}
			return 1;
		}
		case DIALOG_POLICE_SELECT_WEAPON:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;

				PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];

				if(!WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_AMMO])
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Este tipo de arma no necesita munición.");
					return 1;
				}

				ShowDialog(playerid, DIALOG_POLICE_AMMO);
			}
			return 1;
		}
		case DIALOG_POLICE_AMMO:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return ShowDialog(playerid, dialogid);
				if(inputtext[0] <= 0 || inputtext[0] > 9999) return SendClientMessage(playerid, -1, "{FFFFFF}La cantidad de munición no es correcta.");

				new price = inputtext[0];
				if(price > CHARACTER_INFO[playerid][ch_CASH]) return SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar la munición.", number_format_thousand(price - CHARACTER_INFO[playerid][ch_CASH]));

				if(PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO] + inputtext[0] > 9999)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}A esta arma no le entra tanta municion.");
					return 1;
				}

				GivePlayerCash(playerid, -price);
				GivePlayerWeaponEx(playerid, PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID], inputtext[0]);

				SendClientMessageEx(playerid, -1, "{FFFFFF}Has comprado {98d16c}%s {FFFFFF}balas para tu {98d16c}'%s' {FFFFFF}por $%s.", number_format_thousand(inputtext[0]), WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(price));
			}
			return 1;
		}
		case DIALOG_POLICE_ARMOUR:
		{
			if(response)
			{
				GetPlayerArmour(playerid, CHARACTER_INFO[playerid][ch_ARMOUR]);
				if(CHARACTER_INFO[playerid][ch_ARMOUR] > 99.5) return ShowPlayerMessage(playerid, "Ya tienes chaleco.", 3);
				SetPlayerArmourEx(playerid, 100.0);
			}
			return 1;
		}
		case DIALOG_POLICE_WEAPONS:
		{
			if(response)
			{
				if(POLICE_SHOP_WEAPONS[listitem][police_shop_RANK] > PLAYER_SKILLS[playerid][WORK_POLICE])
				{
					SendClientMessageEx(playerid, -1, "{FFFFFF}Necesitas el rango %s para poder comprar esta arma.", POLICE_RANKS[ POLICE_SHOP_WEAPONS[listitem][police_shop_RANK] ]);
					return 1;
				}


				if(CHARACTER_INFO[playerid][ch_CASH] >= POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_PRICE])
				{
					new weapon_slot = WEAPON_INFO[ POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_ID] ][weapon_info_SLOT];
					if(PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID] != 0)
					{
						SendClientMessageEx(playerid, -1, "{FFFFFF}Para comprar esta arma tienes que deshacerte de tu '%s' (%d) para tener espacio.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID] ][weapon_info_NAME], weapon_slot);
						return 1;
					}

					GivePlayerCash(playerid, -POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_PRICE]);

					if(WEAPON_INFO[ POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_ID] ][weapon_info_AMMO]) GivePlayerWeaponEx(playerid, POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_ID], 100);
					else GivePlayerWeaponEx(playerid, POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_ID], 1);

					RegisterNewPlayerWeapon(playerid, weapon_slot);
					SendClientMessageEx(playerid, -1, "{FFFFFF}Arma {98d16c}'%s' {FFFFFF}comprada por $%s.", WEAPON_INFO[ POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_ID] ][weapon_info_NAME], number_format_thousand(POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_PRICE]));
				}
				else
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar esta arma.", number_format_thousand(POLICE_SHOP_WEAPONS[listitem][police_shop_WEAPON_PRICE] - CHARACTER_INFO[playerid][ch_CASH]));
				}
			}
			return 1;
		}
		case DIALOG_ANNOUNCES:
		{
			if(response)
			{
			    new pok[126];
				switch(listitem)
				{
					case 0: format(pok,sizeof(pok),"~g~~h~vendo medicamentos ~w~(Movil: ~g~~h~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -30);
					case 1: format(pok,sizeof(pok),"~r~~h~vendo crack ~w~(Movil: ~r~~h~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -30);
					case 2: format(pok,sizeof(pok),"~w~vendo piezas de arma ~w~(Movil: ~y~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -30);
					case 3: format(pok,sizeof(pok),"~w~vendo piezas de madera ~w~(Movil: ~y~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -30);
					case 4: format(pok,sizeof(pok),"~b~~h~vendo banda ~w~(Movil: ~b~~h~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -50);
					case 5: format(pok,sizeof(pok),"~b~~h~vendo propiedad ~w~(Movil: ~b~~h~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -80);
					case 6: format(pok,sizeof(pok),"~r~~h~vendo arma ~w~(Movil: ~r~~h~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -80);
					case 7: format(pok,sizeof(pok),"~p~vendo koins ~w~(Movil: ~p~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -80);
					case 8: format(pok,sizeof(pok),"~p~vendo auto ~w~(Movil: ~p~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -15);
					case 9: format(pok,sizeof(pok),"~p~vendo moto ~w~(Movil: ~p~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -15);
					case 10: format(pok,sizeof(pok),"~r~~h~compro arma ~w~(Movil: ~r~~h~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -80);
					case 11: format(pok,sizeof(pok),"~b~~h~compro vehiculo usado ~w~(Movil: ~b~~h~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -30);
					case 12: format(pok,sizeof(pok),"~g~~h~compro medicamento ~w~(Movil: ~g~~h~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -30);
					case 13: format(pok,sizeof(pok),"~r~~h~compro crack ~w~(Movil: ~y~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -30);
					case 14: format(pok,sizeof(pok),"~w~compro piezas de arma ~w~(Movil: ~y~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -30);
					case 15: format(pok,sizeof(pok),"~w~compro piezas de madera ~w~(Movil: ~y~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -30);
					case 16: format(pok,sizeof(pok),"~p~~h~compro koins ~w~(Movil: ~p~~h~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -50);
					case 17: format(pok,sizeof(pok),"~b~~h~compro banda ~w~(Movil: ~b~~h~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -50);
					case 18: format(pok,sizeof(pok),"~b~~h~compro propiedad ~w~(Movil: ~b~~h~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -50);
					case 19: format(pok,sizeof(pok),"~y~~h~busco compañero basurero ~w~(Movil: ~y~~h~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -10);
					case 20: format(pok,sizeof(pok),"~r~~h~busco armero ~w~(Movil: ~r~~h~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -70);
					case 21: format(pok,sizeof(pok),"~r~~h~busco mecánico ~w~(Movil: ~r~~h~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -20);
					case 22: format(pok,sizeof(pok),"~r~~h~busco taxista ~w~(Movil: ~r~~h~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -20);
					case 23: format(pok,sizeof(pok),"~r~~h~busco médico ~w~(Movil: ~r~~h~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -20);
					case 24: format(pok,sizeof(pok),"~r~~h~busco banda ~w~(Movil: ~r~~h~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -20);
					case 25: format(pok,sizeof(pok),"~w~busco miembros para banda ~w~(Movil: ~y~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]), GivePlayerCash(playerid, -50);
				}
				EnviarPopUp(playerid,pok);
			}
			return 1;
		}
		case DIALOG_HELP:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_HELP_GENERAL);
					case 1: ShowDialog(playerid, DIALOG_HELP_CHARACTER);
					case 2: ShowDialog(playerid, DIALOG_HELP_PROPERTIES);
					case 3: ShowDialog(playerid, DIALOG_HELP_WORKS);
					case 4: ShowDialog(playerid, DIALOG_HELP_VEHICLES);
					case 5: ShowDialog(playerid, DIALOG_HELP_CREWS);
					case 6: ShowDialog(playerid, DIALOG_SU_BUY);
					case 7: ShowDialog(playerid, DIALOG_HELP_INFO);
					case 8: ShowDialog(playerid, DIALOG_HELP_SD);
					case 9: ShowDialog(playerid, DIALOG_HELP_CONCEPTOS);
				}
			}
			return 1;
		}
		case DIALOG_ADMIN_CMDS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_ADMIN_AYUDANTE);
					case 1: ShowDialog(playerid, DIALOG_ADMIN_MOD);
					case 2: ShowDialog(playerid, DIALOG_ADMIN_ADMINISTRADOR);
				}
			}
			return 1;
		}
		case DIALOG_HELP_WORKS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_WORKS_TAXI);
					case 1: ShowDialog(playerid, DIALOG_WORKS_CAMIONERO);
					case 2: ShowDialog(playerid, DIALOG_WORKS_MECANICO);
					case 3: ShowDialog(playerid, DIALOG_WORKS_COSECHADOR);
					case 4: ShowDialog(playerid, DIALOG_WORKS_FUMIGADOR);
					case 5: ShowDialog(playerid, DIALOG_WORKS_BASURERO);
					case 6: ShowDialog(playerid, DIALOG_WORKS_LENADOR);
					case 7: ShowDialog(playerid, DIALOG_WORKS_POLICIA);
					case 8: ShowDialog(playerid, DIALOG_WORKS_PIZZERO);
					case 9: ShowDialog(playerid, DIALOG_WORKS_MEDICO);
					case 10: ShowDialog(playerid, DIALOG_WORKS_ARMERO);
				}
			}
			return 1;
		}
		case DIALOG_SANS_LIST:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= GetDatabasePages("SELECT COUNT() FROM `CUENTA` WHERE `WARN_STATUS` = 1;", PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = GetDatabasePages("SELECT COUNT() FROM `CUENTA` WHERE `WARN_STATUS` = 1;", PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
				else
				{
					PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
					ShowDialog(playerid, DIALOG_SANS_MODIFY);
				}
			}
			return 1;
		}
		case DIALOG_SANS_MODIFY:
		{
			if(response)
			{
				new DBResult:Result, DB_Query[256], name[24], connected, player_id, bool:found;
				format(DB_Query, sizeof DB_Query, "SELECT `NAME`, `CONNECTED`, `PLAYERID`, `WARN_STATUS` FROM `CUENTA` WHERE `ID` = '%d';", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
				Result = db_query(Database, DB_Query);

				if(db_num_rows(Result))
				{
					db_get_field_assoc(Result, "NAME", name, 24);
					connected = db_get_field_assoc_int(Result, "CONNECTED");
					player_id = db_get_field_assoc_int(Result, "PLAYERID");
					found = true;
				}
				else found = false;
				db_free_result(Result);

				if(!found) return 1;

				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `WARN_STATUS` = '0' WHERE `ID` = '%d';", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
				db_query(Database, DB_Query);
				SendClientMessageEx(playerid, -1, "Le has quitado la sanción a %s.", name, ADMIN_LEVELS[listitem]);

				if(connected)
				{
					ACCOUNT_INFO[player_id][ac_WARN_STATUS] = 0;//aqui xd
					SendClientMessage(player_id, -1, "Te han quitado la sanción.");
				}
			}
			else ShowDialog(playerid, DIALOG_SANS_LIST);
			return 1;
		}
		case DIALOG_ADMIN_LIST:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= GetDatabasePages("SELECT COUNT() FROM `CUENTA` WHERE `ADMIN_LEVEL` > 0;", PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = GetDatabasePages("SELECT COUNT() FROM `CUENTA` WHERE `ADMIN_LEVEL` > 0;", PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
				else
				{
					if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= 4)
					{
						PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
						ShowDialog(playerid, DIALOG_ADMIN_MODIFY);
					}
				}
			}
			return 1;
		}
		case DIALOG_ADMIN_MODIFY:
		{
			if(response)
			{
				if(listitem > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
				{
					SendClientMessage(playerid, -1, "El rango que has seleccionado es superior al tuyo.");
					return 1;
				}

				new DBResult:Result, DB_Query[256], name[24], connected, player_id, current_rank, bool:found;
				format(DB_Query, sizeof DB_Query, "SELECT `NAME`, `CONNECTED`, `PLAYERID`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ID` = '%d';", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
				Result = db_query(Database, DB_Query);

				if(db_num_rows(Result))
				{
					db_get_field_assoc(Result, "NAME", name, 24);
					connected = db_get_field_assoc_int(Result, "CONNECTED");
					player_id = db_get_field_assoc_int(Result, "PLAYERID");
					current_rank = db_get_field_assoc_int(Result, "ADMIN_LEVEL");
					found = true;
				}
				else found = false;
				db_free_result(Result);

				if(!found) return 1;
				if(current_rank > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL])
				{
					SendClientMessage(playerid, -1, "No puedes modificar el rango de este admin porque es un rango superior al tuyo.");
					return 1;
				}

				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `ADMIN_LEVEL` = '%d' WHERE `ID` = '%d';", listitem, PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
				db_query(Database, DB_Query);
				SendClientMessageEx(playerid, -1, "El nuevo rango de %s es: '%s'.", name, ADMIN_LEVELS[listitem]);

				if(connected)
				{
					ACCOUNT_INFO[player_id][ac_ADMIN_LEVEL] = listitem;
					SendClientMessageEx(player_id, -1, "%s cambió tu rango administrativo a: %s.", ACCOUNT_INFO[playerid][ac_NAME], ADMIN_LEVELS[listitem]);
				}
			}
			else ShowDialog(playerid, DIALOG_ADMIN_LIST);
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD:
		{
			if(response)
			{
				if(!strlen(inputtext)) return ShowDialog(playerid, dialogid);

				new password[64 + 1];
				SHA256_PassHash(inputtext, ACCOUNT_INFO[playerid][ac_SALT], password, sizeof password);

				if(!strcmp(password, ACCOUNT_INFO[playerid][ac_PASS], false))
				{
					ShowDialog(playerid, DIALOG_CHANGE_PASSWORD_PASS);
					PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] = 0;
				}
				else // Error
				{
					PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] ++;
					if(PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] > MAX_BAD_LOGIN_ATTEMPS) return Kick(playerid);
					SendClientMessageEx(playerid, 0xFFFFFFFF, "Contraseña incorrecta, aviso %d/%d.", PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP], MAX_BAD_LOGIN_ATTEMPS);
				}
			}
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD_PASS:
		{
			if(response)
			{
				if(strlen(inputtext) < MIN_PASS_LENGTH || strlen(inputtext) > MAX_PASS_LENGTH) return ShowDialog(playerid, dialogid);

				new salt[16];
				getRandomSalt(salt);
				format(ACCOUNT_INFO[playerid][ac_SALT], 16, "%s", salt);
				SHA256_PassHash(inputtext, ACCOUNT_INFO[playerid][ac_SALT], ACCOUNT_INFO[playerid][ac_PASS], 64 + 1);

				new DB_Query[160];
				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SALT` = '%q' `PASS` = '%q' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_SALT], ACCOUNT_INFO[playerid][ac_PASS], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				SendClientMessage(playerid, -1, "{FFFFFF}Tu contraseña ha sido cambiada correctamente.");
			}
			return 1;
		}
		case DIALOG_ANTI_CHEAT:
		{
			if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 1;

			if(response)
			{
				PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] = listitem;
				ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY);
			}
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY:
		{
			if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 1;

			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Enabled]) ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Enabled] = false;
						else ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Enabled] = true;
					}
					case 1: return ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY_DETECT);
					case 2:
					{
						if(ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Kick]) ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Kick] = false;
						else ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Kick] = true;
					}
				}
				WriteAnticheatRules();
				ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY);
			}
			else ShowDialog(playerid, DIALOG_ANTI_CHEAT);
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY_DETECT:
		{
			if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 1;

			if(response)
			{
				new detections, seconds;
				if(sscanf(inputtext, "p<:>dd", detections, seconds))
				{
					SendClientMessage(playerid, -1, "Sintaxis no válida.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(detections < 1 || detections > 99999)
				{
					SendClientMessage(playerid, -1, "El número de detecciones debe ser 1 o mayor.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(seconds < 0 || seconds > 99999)
				{
					SendClientMessage(playerid, -1, "Los segundos no pueden ser un valor negativo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Detections] = detections;
				ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Interval] = seconds;

				WriteAnticheatRules();
				ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY);
			}
			else ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY);
			return 1;
		}
		case DIALOG_SHOP_ARTICLE_MODIFY:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Por favor introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] < 0)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Por favor introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] > 1000000000)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}El precio es demasiado alto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new DB_Query[80];
				format(DB_Query, sizeof DB_Query, "UPDATE `SHOP` SET `PRICE` = '%d' WHERE `ID` = '%d';", inputtext[0], PLAYER_TEMP[playerid][pt_SHOP_SELECTED_ARTICLE_ID]);
				db_query(Database, DB_Query);

				UpdatePlayerShop(playerid);
				SendClientMessage(playerid, -1, "{FFFFFF}El precio de tu artículo ha sido actualizado.");
			}
			return 1;
		}
		case DIALOG_SHOP_ARTICLE_REMOVE:
		{
			if(response)
			{
				new DB_Query[80];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `SHOP` WHERE `ID` = '%d';", PLAYER_TEMP[playerid][pt_SHOP_SELECTED_ARTICLE_ID]);
				db_query(Database, DB_Query);

				if(PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS])
				{
					PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_MY_ADS;
					UpdatePlayerShop(playerid);
				}
				else
				{
					PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
					UpdatePlayerShop(playerid);
				}
				SendClientMessage(playerid, -1, "{FFFFFF}Tu producto se ha eliminado.");
			}
			return 1;
		}
		case DIALOG_SHOP_ADD:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						PLAYER_TEMP[playerid][pt_NOTARY_OPTION] = 2;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
					}
					case 1:
					{
						PLAYER_TEMP[playerid][pt_NOTARY_OPTION] = 2;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
					}
					case 2:
					{
						PLAYER_TEMP[playerid][pt_SHOP_ADD_TYPE] = SHOP_ARTICLE_TYPE_OTHER;
						PLAYER_TEMP[playerid][pt_SHOP_ADD_MODELID] = 1314;
						PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL1] = 0;
						PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL2] = 0;
						ShowDialog(playerid, DIALOG_SHOP_ADD_TEXT);
					}
				}
			}
			return 1;
		}
		case DIALOG_SHOP_ADD_TEXT:
		{
			if(response)
			{
				if(strlen(inputtext) > 24) return ShowDialog(playerid, dialogid);
				new text[24];
				if(sscanf(inputtext, "s[24]", text)) return ShowDialog(playerid, dialogid);
				if(!td_str_legal(text)) return ShowDialog(playerid, dialogid);

				format(PLAYER_TEMP[playerid][pt_SHOP_ADD_TEXT], 24, "%s", inputtext);
				ShowDialog(playerid, DIALOG_SHOP_ADD_PRICE);
			}
			return 1;
		}
		case DIALOG_SHOP_ADD_PRICE:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Por favor introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] < 0)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Por favor introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] > 1000000000)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}El precio es demasiado alto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				if(500 > CHARACTER_INFO[playerid][ch_CASH]) return SendClientMessage(playerid, -1, "{FFFFFF}Necesitas 500$ para poner el anuncio.");

				AddNewAd(playerid, PLAYER_TEMP[playerid][pt_SHOP_ADD_TYPE], inputtext[0], PLAYER_TEMP[playerid][pt_SHOP_ADD_TEXT], PLAYER_TEMP[playerid][pt_SHOP_ADD_MODELID], PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL1], PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL2]);
				GivePlayerCash(playerid, -500);
				SendClientMessage(playerid, -1, "{FFFFFF}Tu anuncio se ha publicado correctamente.");
			}
			return 1;
		}
		case DIALOG_CRANE_SELECT_VEHICLE:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;

				new veh_money = (VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 100) + 350;
				if(veh_money > CHARACTER_INFO[playerid][ch_CASH])
				{
					SendClientMessageEx(playerid, -1, "{FFFFFF}Necesitas $%s para remolcar este vehículo al depósito municipal.", veh_money);
					return 1;
				}

				if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_OCCUPIED])
				{
					SendClientMessage(playerid, -1, "{FFFFFF}No podemos remolcar tu vehículo porque hay alguien conduciéndolo.");
					return 1;
				}

				new crane_point = random(sizeof(CRANE_POINTS));
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_SPAWN_X] = CRANE_POINTS[crane_point][0];
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_SPAWN_Y] = CRANE_POINTS[crane_point][1];
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_SPAWN_Z] = CRANE_POINTS[crane_point][2];
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_SPAWN_ANGLE] = CRANE_POINTS[crane_point][3];

				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_LAST_CLOSED_TIME] = gettime();
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_PARAMS_ENGINE] = 0;
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_PARAMS_LIGHTS] = 0;
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_PARAMS_DOORS] = 1;
				UpdateVehicleParams(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem]);
				SetVehicleToRespawnEx(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem]);

				GivePlayerCash(playerid, -veh_money);
				SendClientMessageEx(playerid, -1, "{FFFFFF}Tu vehículo %s ha sido remolcado hasta el depósito municipal.", VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
			}
			return 1;
		}
		case DIALOG_CREATE_CREW:
		{
			if(response)
			{
				if(ACCOUNT_INFO[playerid][ac_LEVEL] < 4) return SendClientMessage(playerid, -1, "{FFFFFF}Necesitas ser nivel 5 para poder crear una banda.");
				ShowDialog(playerid, DIALOG_CREATE_CREW_NAME);
			}
			return 1;
		}
		case DIALOG_CREATE_CREW_NAME:
		{
			if(response)
			{
				if(strlen(inputtext) >= 32)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Como máximo puedes introducir un nombre de 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new crew_name[32];
				if(sscanf(inputtext, "s[32]", crew_name))
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Introduce un nombre para tu banda.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				format(PLAYER_TEMP[playerid][pt_CREATE_CREW_NAME], 32, "%s", crew_name);
				ShowDialog(playerid, DIALOG_CREATE_CREW_COLOR);
			}
			return 1;
		}
		case DIALOG_CREATE_CREW_COLOR:
		{
			if(response)
			{
				PLAYER_TEMP[playerid][pt_CREATE_CREW_COLOR] = listitem;
				ShowDialog(playerid, DIALOG_CREATE_CREW_CONFIRM);
			}
			else ShowDialog(playerid, DIALOG_CREATE_CREW_NAME);
			return 1;
		}
		case DIALOG_CREATE_CREW_CONFIRM:
		{
			if(response)
			{
				new index = GetAvaibleCrewIndex();
				if(index == -1)
				{
					SendClientMessageEx(playerid, -1, "{FFFFFF}No se puede crear la banda porque no hay espacio disponible, el límite de bandas es %d.", MAX_CREWS);
					return 1;
				}

				if(200000 > CHARACTER_INFO[playerid][ch_CASH])
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Necesitas $200.000 para crear la banda.");
					return 1;
				}

				GivePlayerCash(playerid, -200000);
				CREW_INFO[index][crew_VALID] = true;
				format(CREW_INFO[index][crew_NAME], 32, "%s", PLAYER_TEMP[playerid][pt_CREATE_CREW_NAME]);
				CREW_INFO[index][crew_COLOR] = RandomColors[ PLAYER_TEMP[playerid][pt_CREATE_CREW_COLOR] ];

				CREW_RANK_INFO[index][0][crew_rank_VALID] = true;
				format(CREW_RANK_INFO[index][0][crew_rank_NAME], 32, "Fundador");

				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_INVITE] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_DELETE_PROPERTIES] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_LEAVE_TERRITORY] =
				CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_DELETE] = 1;

				NewCrewRegister(index);

				PLAYER_CREW[playerid][player_crew_VALID] = true;
				PLAYER_CREW[playerid][player_crew_ID] = CREW_INFO[index][crew_ID];
				PLAYER_CREW[playerid][player_crew_RANK] = 0;
				PLAYER_CREW[playerid][player_crew_INDEX] = index;

				new DB_Query[200];
				format(DB_Query, sizeof DB_Query,

						"\
							DELETE FROM `PLAYER_CREW` WHERE `ID_USER` = '%d';\
							INSERT INTO `PLAYER_CREW` (`ID_USER`, `ID_CREW`, `RANK`) VALUES ('%d', '%d', '%d');\
						",
							ACCOUNT_INFO[playerid][ac_ID],
							ACCOUNT_INFO[playerid][ac_ID],
							PLAYER_CREW[playerid][player_crew_ID],
							PLAYER_CREW[playerid][player_crew_RANK]
				);
				db_query(Database, DB_Query);

				SendClientMessageEx(playerid, -1, "La banda {%06x}'%s' {FFFFFF}se ha creado correctamente, usa {f4f142}/banda {FFFFFF}para administrarla.", CREW_INFO[index][crew_COLOR] >>> 8, CREW_INFO[index][crew_NAME]);
                ShowPlayerMessageNotification(playerid, "Ya eres líder de tu propia banda, revisa todas las opciones de tu organización con ~y~/banda~w~.", 7);
			}
			return 1;
		}
		case DIALOG_CREW_MENU:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La banda ya no existe.");

			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;

				switch(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem])
				{
					case CREW_RANK_SIZE: //Lista de miembros
					{
						PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
						PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
						ShowDialog(playerid, DIALOG_CREW_MEMBER_LIST);
					}
					case CREW_RANK_CHANGE_NAME:
					{
						if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");
						if(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{FFFFFF}No se puede cambiar el nombre de la banda cuando la banda está en combate.");
						ShowDialog(playerid, DIALOG_CREW_CHANGE_NAME);
					}
					case CREW_RANK_CAST_MEMBERS:
					{
						if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

						PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
						PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
						ShowDialog(playerid, DIALOG_CREW_MEMBER_LIST_DELETE);
					}

					case CREW_RANK_MODIFY_RANKS:
					{
						if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

						ShowDialog(playerid, DIALOG_CREW_RANKS);
					}
					case CREW_RANK_CHANGE_COLOR:
					{
						if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

						if(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{FFFFFF}No se puede cambiar el color cuando la banda está en combate.");
						ShowDialog(playerid, DIALOG_CREW_MODIFY_COLOR);
					}
					case CREW_RANK_DELETE:
					{
						if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

						ShowDialog(playerid, DIALOG_CREW_DELETE);
					}
					case CREW_RANK_MODIFY_MEMBERS:
					{
						if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

						PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
						PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
						ShowDialog(playerid, DIALOG_CREW_MODIFY_MEMBERS);
					}
					case CREW_RANK_SIZE + 1: //Abandonar banda
					{
						if(PLAYER_CREW[playerid][player_crew_RANK] == 0)
						{
							new DB_Query[128], DBResult:Result_count, total;
							format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '0';", PLAYER_CREW[playerid][player_crew_ID]);
							Result_count = db_query(Database, DB_Query);

							if(db_num_rows(Result_count)) total = db_get_field_int(Result_count, 0);
							db_free_result(Result_count);

							if(total <= 1)
							{
								SendClientMessage(playerid, -1, "{FFFFFF}No puedes abandonar la banda porque eres el único miembro con el rango fundador.");
								return 1;
							}
						}
						ShowDialog(playerid, DIALOG_CREW_LEAVE);
					}
				}
			}
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La banda ya no existe.");

			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, dialogid);
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);

					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);

					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_CHANGE_NAME:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

			if(response)
			{
				if(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{FFFFFF}No se puede cambiar el nombre de la banda cuando la banda está en combate.");
				if(strlen(inputtext) >= 32)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Como máximo puedes introducir un nombre de 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new crew_name[32];
				if(sscanf(inputtext, "s[32]", crew_name))
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Introduce un nombre para tu banda.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				format(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], 32, "%s", crew_name);

				new DB_Query[128];
				format(DB_Query, sizeof DB_Query, "UPDATE `CREW` SET `NAME` = '%q' WHERE `ID` = '%d';", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID]);
				db_query(Database, DB_Query);
				//actualizar nombre casas pickups


				new message[145], label_str[256];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) cambió el nombre de la banda a '%s'.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);
				SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], -1, message);


				for(new i = 0; i != MAX_PROPERTIES; i ++)
				{
					if(!PROPERTY_INFO[i][property_VALID]) continue;
					if(!PROPERTY_INFO[i][property_CREW]) continue;
					if(PROPERTY_INFO[i][property_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) continue;
					new	name_house[24];
	                if(PROPERTY_INFO[ i ][property_EXTRA] == 0) name_house = "Casa";
	                if(PROPERTY_INFO[ i ][property_EXTRA] == 2) name_house = "Garaje";
	                if(PROPERTY_INFO[ i ][property_EXTRA] == 4) name_house = "Negocio";


					format
					(
						label_str,
						sizeof label_str,
						"\
						    {00FF00}%s\n\n\
							{FFFFFF}Dirección {00FF00}%d\n\
							{FFFFFF}Dueño {00FF00}Banda %s\n\
							{FFFFFF}Presiona {00CCFF}N {FFFFFF}o usa {FFFF00}/entrar{FFFFFF}.\
						", name_house, PROPERTY_INFO[i][property_ID], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]
					);

					UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFAA, label_str);
				}

				ShowDialog(playerid, DIALOG_CREW_MENU);
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST_DELETE:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);

					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);

					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
				else
				{
					PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];

					new DBResult:Result, DB_Query[256], name[24], current_rank, bool:found;
					format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `PLAYER_CREW`.`RANK` FROM `CUENTA`, `PLAYER_CREW` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_CREW`.`ID_USER` = `CUENTA`.`ID`;", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
					Result = db_query(Database, DB_Query);

					if(db_num_rows(Result))
					{
						db_get_field_assoc(Result, "NAME", name, 24);
						current_rank = db_get_field_assoc_int(Result, "RANK");
						found = true;
					}
					else found = false;
					db_free_result(Result);

					if(!found) return 1;
					if(current_rank < PLAYER_CREW[playerid][player_crew_RANK]) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes echar a este miembro porque es un rango superior al tuyo.");
					if(current_rank == 0)
					{
						new DBResult:Result_count, total;
						format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '0';", PLAYER_CREW[playerid][player_crew_ID]);
						Result_count = db_query(Database, DB_Query);

						if(db_num_rows(Result_count)) total = db_get_field_int(Result_count, 0);
						db_free_result(Result_count);

						if(total <= 1)
						{
							SendClientMessage(playerid, -1, "{FFFFFF}No se puede echar a este miembro ya que es el único miembro con el rango fundador.");
							return 1;
						}
					}

					ShowDialog(playerid, DIALOG_CREW_CAST_MEMBER_CONFIRM);
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_CAST_MEMBER_CONFIRM:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

			if(response)
			{
				new DBResult:Result, DB_Query[320], name[24], current_rank, connected, player_id, bool:found;
				format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `CUENTA`.`CONNECTED`, `CUENTA`.`PLAYERID`, `PLAYER_CREW`.`RANK` FROM `CUENTA`, `PLAYER_CREW` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_CREW`.`ID_USER` = `CUENTA`.`ID`;", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
				Result = db_query(Database, DB_Query);

				if(db_num_rows(Result))
				{
					db_get_field_assoc(Result, "NAME", name, 24);
					connected = db_get_field_assoc_int(Result, "CONNECTED");
					player_id = db_get_field_assoc_int(Result, "PLAYERID");
					current_rank = db_get_field_assoc_int(Result, "RANK");
					found = true;
				}
				else found = false;
				db_free_result(Result);

				if(!found) return 1;
				if(current_rank < PLAYER_CREW[playerid][player_crew_RANK]) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes echar a este miembro porque es un rango superior al tuyo.");
				if(current_rank == 0)
				{
					new DBResult:Result_count, total;
					format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '0';", PLAYER_CREW[playerid][player_crew_ID]);
					Result_count = db_query(Database, DB_Query);

					if(db_num_rows(Result_count)) total = db_get_field_int(Result_count, 0);
					db_free_result(Result_count);

					if(total <= 1)
					{
						SendClientMessage(playerid, -1, "{FFFFFF}No se puede echar a este miembro ya que es el único miembro con el rango fundador.");
						return 1;
					}
				}

				new message[145];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) ha echado a %s de la banda.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], name);
				SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], -1, message);

				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_CREW` WHERE `ID_USER` = '%d';", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
				db_query(Database, DB_Query);

				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MEMBERS] --;
				if(connected)
				{
					CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ONLINE_MEMBERS] --;
					SetPlayerColorEx(player_id, PLAYER_COLOR);
					if(PLAYER_TEMP[playerid][pt_LAST_TERRITORY] != INVALID_STREAMER_ID)
					{
						TextDrawHideForPlayer(player_id, Textdraws[textdraw_TERRITORY_BOX]);
						TextDrawHideForPlayer(player_id, TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_TEXTDRAW]);
					}
					PLAYER_CREW[player_id][player_crew_VALID] = false;
					PLAYER_CREW[player_id][player_crew_ID] = 0;
					PLAYER_CREW[player_id][player_crew_RANK] = 0;
					PLAYER_CREW[player_id][player_crew_INDEX] = 0;
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_MEMBER_LIST_DELETE);
			return 1;
		}
		case DIALOG_CREW_INVITE_RANK:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_INVITE]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] < PLAYER_CREW[playerid][player_crew_RANK])
				{
					SendClientMessage(playerid, -1, "{FFFFFF}No puedes invitar con este rango porque es superior al tuyo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_CREW_INVITE_PID])) return SendClientMessage(playerid, -1, "{FFFFFF}El jugador está desconectado.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_CREW_INVITE_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return 1;
				if(PLAYER_WORKS[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}Esta persona es policía y no puede tener banda.");
				if(PLAYER_CREW[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}Esta persona pertenece a otra banda.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes invitar a este jugador ahora.");
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_CREW_INVITE_AID]) return SendClientMessage(playerid, -1, "{FFFFFF}El jugador está desconectado.");

				SendClientMessageEx(playerid, -1, "Has ofrecido a %s unirse a la banda con el rango %s.", PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][crew_rank_NAME]);

				PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_CREW_INVITE_INFO][0] = PLAYER_CREW[playerid][player_crew_ID];
				PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_CREW_INVITE_INFO][1] = PLAYER_CREW[playerid][player_crew_INDEX];
				PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_CREW_INVITE_INFO][2] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_CREW_INVITE_INFO][3] = gettime();
				ShowDialog(PLAYER_TEMP[playerid][pt_CREW_INVITE_PID], DIALOG_CREW_INVITE_ACCEPT);
			}
			return 1;
		}
		case DIALOG_CREW_INVITE_ACCEPT:
		{
			if(response)
			{
				if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}Esta banda ya no existe.");
				if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1] ][ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][2] ][crew_rank_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}El rango que te han ofrecio ya no existe.");
				if(gettime() > PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][3] + 20) return SendClientMessage(playerid, -1, "{FFFFFF}Has tardado mucho en aceptar.");
				if(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes unirte a la banda cuando la banda está en combate.");

				PLAYER_CREW[playerid][player_crew_VALID] = true;
				PLAYER_CREW[playerid][player_crew_ID] = PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][0];
				PLAYER_CREW[playerid][player_crew_RANK] = PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][2];
				PLAYER_CREW[playerid][player_crew_INDEX] = PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1];
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MEMBERS] ++;
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ONLINE_MEMBERS] ++;
				PLAYER_TEMP[playerid][pt_LAST_GOT_CREW] = gettime();

				new DB_Query[200];
				format(DB_Query, sizeof DB_Query,

						"\
							DELETE FROM `PLAYER_CREW` WHERE `ID_USER` = '%d';\
							INSERT INTO `PLAYER_CREW` (`ID_USER`, `ID_CREW`, `RANK`) VALUES ('%d', '%d', '%d');\
						",
							ACCOUNT_INFO[playerid][ac_ID],
							ACCOUNT_INFO[playerid][ac_ID],
							PLAYER_CREW[playerid][player_crew_ID],
							PLAYER_CREW[playerid][player_crew_RANK]
				);
				db_query(Database, DB_Query);

				new message[145];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s se ha unido a la banda con el rango %s.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME]);
				SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], -1, message);
			}
			return 1;
		}
		case DIALOG_CREW_RANKS:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

			if(response)
			{
				if(listitem < PLAYER_CREW[playerid][player_crew_RANK])
				{
					if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][listitem][crew_rank_VALID]) SendClientMessage(playerid, -1, "{FFFFFF}No puedes modificar este rango porque es un rango superior al tuyo.");
					else SendClientMessage(playerid, -1, "{FFFFFF}No puedes crear un rango en este puesto porque es superior al tuyo.");
					return 1;
				}

				PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] = listitem;
				if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][listitem][crew_rank_VALID]) ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY);
				else ShowDialog(playerid, DIALOG_CREW_RANK_CREATE);
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY_NAME);
					case 1:
					{
						if(PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] == 0)
						{
							SendClientMessage(playerid, -1, "{FFFFFF}No se pueden modificar los permisos de este rango porque es el rango fundador.");
							return 1;
						}

						ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY_PERMISS);
					}
					case 2:
					{
						if(PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] == 0)
						{
							SendClientMessage(playerid, -1, "{FFFFFF}No se puede eliminar este rango porque es el rango fundador.");
							return 1;
						}

						SendClientMessageEx(playerid, -1, "{f1df53}[Atención] {FFFFFF}Selecciona el nuevo rango para los miembros que actualmente tienen el rango {4eba18}'%s'.", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME]);
						ShowDialog(playerid, DIALOG_CREW_RANK_DELETE);
					}
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_RANKS);
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_NAME:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

			if(response)
			{
				if(strlen(inputtext) >= 32)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Como máximo puedes introducir un nombre de 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new rank_name[32];
				if(sscanf(inputtext, "s[32]", rank_name))
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Introduce el nuevo nombre para el rango.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				SendClientMessageEx(playerid, -1, "Has modificado el nombre del rango '%s' a '%s'.", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME], rank_name);
				format(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME], 32, "%s", rank_name);

				new DB_Query[145];
				format(DB_Query, sizeof DB_Query, "UPDATE `CREW_RANKS` SET `RANK_NAME` = '%q' WHERE `ID` = '%d';", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_ID]);
				db_query(Database, DB_Query);
			}
			else ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY);
			return 1;
		}
		case DIALOG_CREW_RANK_CREATE:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

			if(response)
			{
				if(strlen(inputtext) >= 32)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Como máximo puedes introducir un nombre de 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new rank_name[32];
				if(sscanf(inputtext, "s[32]", rank_name))
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Introduce un nombre para el rango.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_VALID])
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Parece que alguien ya ha creado un rango en este espacio.");
					return 1;
				}


				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_VALID] = true;
				format(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME], 32, "%s", rank_name);

				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_INVITE] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE_PROPERTIES] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_LEAVE_TERRITORY] =
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE] = 0;
				RegisterNewCrewRank(PLAYER_CREW[playerid][player_crew_INDEX], PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK]);

				SendClientMessageEx(playerid, -1, "El rango '%s' ha sido creado, ahora puedes editarlo y darle permisos.", rank_name);
				ShowDialog(playerid, DIALOG_CREW_RANKS);
			}
			else ShowDialog(playerid, DIALOG_CREW_RANKS);
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_PERMISS:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

			if(response)
			{
				if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][listitem])
				{
					SendClientMessage(playerid, -1, "{FFFFFF}No puedes cambiar este permiso porque tu no tienes este permiso.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				if(CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][listitem]) CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][listitem] = false;
				else CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][listitem] = true;

				new DB_Query[120];
				format(DB_Query, sizeof DB_Query, "UPDATE `RANK_PERMISSIONS` SET `SET` = '%d' WHERE `ID_RANK` = '%d' AND `PERMISSION` = '%d';", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][listitem], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_ID], listitem);
				db_query(Database, DB_Query);

				ShowDialog(playerid, dialogid);
			}
			else ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY);
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] < PLAYER_CREW[playerid][player_crew_RANK])
				{
					SendClientMessage(playerid, -1, "{FFFFFF}No puedes seleccionar este rango porque es superior al tuyo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				PLAYER_TEMP[playerid][pt_CREW_SELECTED_NEW_RANK] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_CREW_RANK_DELETE_CONFIRM);
			}
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE_CONFIRM:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

			if(response)
			{
				new DB_Query[256];
				format(DB_Query, sizeof DB_Query,
					"\
						DELETE FROM `CREW_RANKS` WHERE `ID` = '%d';\
						UPDATE `PLAYER_CREW` SET `RANK` = '%d' WHERE `ID_CREW` = '%d' AND `RANK` = '%d';\
					",
						CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_ID],

						PLAYER_TEMP[playerid][pt_CREW_SELECTED_NEW_RANK],
						PLAYER_CREW[playerid][player_crew_ID],
						PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK]
				);
				db_query(Database, DB_Query);

				SendClientMessageEx(playerid, -1, "{FFFFFF}Has eliminado el rango '%s'.", CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME]);

				new message[145];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) cambió tu rango al rango '%s'.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_NEW_RANK] ][crew_rank_NAME]);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PLAYER_CREW[i][player_crew_VALID])
						{
							if(PLAYER_CREW[i][player_crew_ID] == PLAYER_CREW[playerid][player_crew_ID])
							{
								if(PLAYER_CREW[i][player_crew_RANK] == PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK])
								{
									PLAYER_CREW[i][player_crew_RANK] = PLAYER_TEMP[playerid][pt_CREW_SELECTED_NEW_RANK];
									SendClientMessage(i, -1, message);
								}
							}
						}
					}
				}

				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_VALID] = false;
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_ID] = 0;
				CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME][0] = EOS;
				for(new i = 0; i != CREW_RANK_SIZE; i ++) CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][i] = 0;

			}
			else ShowDialog(playerid, DIALOG_CREW_RANKS);
			return 1;
		}
		case DIALOG_CREW_MODIFY_COLOR:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

			if(response)
			{
				if(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{FFFFFF}No se puede cambiar el color cuando la banda está en combate.");

				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] = RandomColors[listitem];


				new r, g, b, a,		new_territory_color;
				HexToRGBA(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR], r, g, b, a);
				new_territory_color = RGBAToHex(r, g, b, 135);
				for(new i = 0; i != MAX_TERRITORIES; i ++)
				{
					if(!TERRITORIES[i][territory_VALID]) continue;
					if(!TERRITORIES[i][territory_OCCUPIED]) continue;

					if(TERRITORIES[i][territory_CREW_ID] == PLAYER_CREW[playerid][player_crew_ID])
					{
						TERRITORIES[i][territory_COLOR] = new_territory_color;
						UpdateGangZoneColor(i);
					}
				}

				new DB_Query[90];
				format(DB_Query, sizeof DB_Query, "UPDATE `CREW` SET `COLOR` = '%d' WHERE `ID` = '%d';", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ID]);
				db_query(Database, DB_Query);

				SendClientMessage(playerid, -1, "{FFFFFF}El color de la banda se ha cambiado.");
				ShowDialog(playerid, DIALOG_CREW_MENU);
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_DELETE:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

			if(response)
			{
				if(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{FFFFFF}No se puede borrar la banda cuando está en combate.");

				new message[145];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) ha eliminado la banda.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME]);

				new DB_Query[350];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `CREW` WHERE `ID` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);
				db_query(Database, DB_Query);

				new tmp_CREW_INFO[enum_CREW_INFO], old_crew_id = PLAYER_CREW[playerid][player_crew_ID];
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ] = tmp_CREW_INFO;

				new tmp_CREW_RANK_INFO[enum_CREW_RANK_INFO];
				for(new i = 0; i != MAX_CREW_RANKS; i ++) CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][i] = tmp_CREW_RANK_INFO;

				new tmp_PLAYER_CREW[enum_PLAYER_CREW];
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PLAYER_CREW[i][player_crew_VALID])
						{
							if(PLAYER_CREW[i][player_crew_ID] == PLAYER_CREW[playerid][player_crew_ID])
							{
								SetPlayerColorEx(i, PLAYER_COLOR);

								if(PLAYER_TEMP[i][pt_LAST_TERRITORY] != INVALID_STREAMER_ID)
								{
									TextDrawHideForPlayer(i, Textdraws[textdraw_TERRITORY_BOX]);
									TextDrawHideForPlayer(i, TERRITORIES[ PLAYER_TEMP[i][pt_LAST_TERRITORY] ][territory_TEXTDRAW]);
								}
								PLAYER_CREW[i] = tmp_PLAYER_CREW;
								SendClientMessage(i, -1, message);
							}
						}
					}
				}

				for(new i = 0; i != MAX_TERRITORIES; i ++)
				{
					if(!TERRITORIES[ i ][territory_VALID]) continue;
					if(!TERRITORIES[ i ][territory_OCCUPIED]) continue;
					if(TERRITORIES[ i ][territory_CREW_ID] != old_crew_id) continue;

					TERRITORIES[ i ][territory_OCCUPIED] = false;
					TERRITORIES[ i ][territory_CREW_ID] = 0;
					TERRITORIES[ i ][territory_CREW_INDEX] = 0;
					TERRITORIES[ i ][territory_COLOR] = 0xCCCCCC55;
					UpdateGangZoneColor(i);
				}

				for(new i = 0; i != MAX_PROPERTIES; i ++)
				{
					if(!PROPERTY_INFO[i][property_VALID]) continue;
					if(!PROPERTY_INFO[i][property_CREW]) continue;
					if(PROPERTY_INFO[i][property_CREW_ID] != old_crew_id) continue;

					PROPERTY_INFO[ i ][property_SOLD] = false;
					PROPERTY_INFO[ i ][property_CREW] = false;
					PROPERTY_INFO[ i ][property_OWNER_ID] = 0;
					PROPERTY_INFO[ i ][property_CREW_ID] = 0;
					format(PROPERTY_INFO[ i ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ i ][property_ID]);

					new label_str[256], info[3], type_house[24];
					if(PROPERTY_INFO[ i ][property_EXTRA] == 0) type_house = "Casa en venta";
					if(PROPERTY_INFO[ i ][property_EXTRA] == 2) type_house = "Garaje en venta";
					if(PROPERTY_INFO[ i ][property_EXTRA] == 3) type_house = "Oficina en venta";
					if(PROPERTY_INFO[ i ][property_EXTRA] == 4) type_house = "Negocio en venta";
					format
					(
						label_str,
						sizeof label_str,
						"\
						    {00FF00}%s\n\n\
							{FFFFFF}Dirección: {00FF00}%d\n\
							{FFFFFF}Precio: {41f48f}$%s\n\
							{FFFFFF}Nivel necesario: {00FF00}%d\n\
							{FFFFFF}Usa {FFFF00}/ayuda casas {FFFFFF}para ver como comprarla.\
						", type_house, PROPERTY_INFO[ i ][property_ID], number_format_thousand(PROPERTY_INFO[ i ][property_PRICE]), PROPERTY_INFO[ i ][property_LEVEL]
					);
					UpdateDynamic3DTextLabelText(PROPERTY_INFO[ i ][property_EXT_LABEL_ID], 0xFFFFFFAA, label_str);

					DestroyDynamicPickup(PROPERTY_INFO[ i ][property_EXT_PICKUP_ID]);
					PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;

	                if(PROPERTY_INFO[i][property_EXTRA] == 0) PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ i ][property_EXT_X], PROPERTY_INFO[ i ][property_EXT_Y], PROPERTY_INFO[ i ][property_EXT_Z], 0, PROPERTY_INFO[ i ][property_EXT_INTERIOR]);
	                if(PROPERTY_INFO[i][property_EXTRA] == 2) PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1272, 1, PROPERTY_INFO[ i ][property_EXT_X], PROPERTY_INFO[ i ][property_EXT_Y], PROPERTY_INFO[ i ][property_EXT_Z], 0, PROPERTY_INFO[ i ][property_EXT_INTERIOR]);
	                if(PROPERTY_INFO[i][property_EXTRA] == 4) PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = CreateDynamicPickup(19524, 1, PROPERTY_INFO[ i ][property_EXT_X], PROPERTY_INFO[ i ][property_EXT_Y], PROPERTY_INFO[ i ][property_EXT_Z], 0, PROPERTY_INFO[ i ][property_EXT_INTERIOR]);
					info[0] = PICKUP_TYPE_PROPERTY;
					info[1] = i; // Index
					info[2] = 2; // Pickup Exterior
					Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ i ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

					format(DB_Query, sizeof(DB_Query), "DELETE FROM `PROPERTY_TERRITORY` WHERE `ID_PROPERTY` = '%d';", PROPERTY_INFO[i][property_ID]);
					db_query(Database, DB_Query);
				}

			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_LEAVE:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La banda ya no existe.");

			if(response)
			{
				new DB_Query[128];
				if(PLAYER_CREW[playerid][player_crew_RANK] == 0)
				{
					new DBResult:Result_count, total;
					format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '0';", PLAYER_CREW[playerid][player_crew_ID]);
					Result_count = db_query(Database, DB_Query);

					if(db_num_rows(Result_count)) total = db_get_field_int(Result_count, 0);
					db_free_result(Result_count);

					if(total <= 1)
					{
						SendClientMessage(playerid, -1, "{FFFFFF}No puedes abandonar la banda porque eres el único miembro con el rango fundador.");
						return 1;
					}
				}

				new message[145];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) ha abandonado la banda.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME]);
				SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], -1, message);

				format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_CREW` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				SetPlayerColorEx(playerid, PLAYER_COLOR);
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_MEMBERS] --;
				CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_ONLINE_MEMBERS] --;

				new tmp_PLAYER_CREW[enum_PLAYER_CREW];
				PLAYER_CREW[playerid] = tmp_PLAYER_CREW;
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBERS:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);

					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
					ShowDialog(playerid, dialogid);
				}
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					new the_query[128];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", PLAYER_CREW[playerid][player_crew_ID]);

					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
					ShowDialog(playerid, dialogid);
				}
				else
				{
					PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
					ShowDialog(playerid, DIALOG_CREW_MODIFY_MEMBER);
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBER:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;

				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] < PLAYER_CREW[playerid][player_crew_RANK])
				{
					SendClientMessage(playerid, -1, "{FFFFFF}No puedes dar este rango porque es un rango superior al tuyo.");
					return 1;
				}

				new DBResult:Result, DB_Query[320], name[24], current_rank, connected, player_id, bool:found;
				format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `CUENTA`.`CONNECTED`, `CUENTA`.`PLAYERID`, `PLAYER_CREW`.`RANK` FROM `CUENTA`, `PLAYER_CREW` WHERE `CUENTA`.`ID` = '%d' AND `PLAYER_CREW`.`ID_USER` = `CUENTA`.`ID`;", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
				Result = db_query(Database, DB_Query);

				if(db_num_rows(Result))
				{
					db_get_field_assoc(Result, "NAME", name, 24);
					connected = db_get_field_assoc_int(Result, "CONNECTED");
					player_id = db_get_field_assoc_int(Result, "PLAYERID");
					current_rank = db_get_field_assoc_int(Result, "RANK");
					found = true;
				}
				else found = false;
				db_free_result(Result);

				if(!found) return 1;
				if(current_rank < PLAYER_CREW[playerid][player_crew_RANK]) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes modificar el rango de este miembro porque es un rango superior al tuyo.");
				if(current_rank == 0)
				{
					new DBResult:Result_count, total;
					format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d' AND `RANK` = '0';", PLAYER_CREW[playerid][player_crew_ID]);
					Result_count = db_query(Database, DB_Query);

					if(db_num_rows(Result_count)) total = db_get_field_int(Result_count, 0);
					db_free_result(Result_count);

					if(total <= 1)
					{
						SendClientMessage(playerid, -1, "{FFFFFF}No se puede modificar el rango de este miembro ya que es el único miembro con el rango fundador.");
						return 1;
					}
				}

				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_CREW` SET `RANK` = '%d' WHERE `ID_USER` = '%d';", PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem], PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
				db_query(Database, DB_Query);

				new message[145];
				if(connected)
				{
					PLAYER_CREW[player_id][player_crew_RANK] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
					format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) cambió tu rango al rango '%s'.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][crew_rank_NAME]);
					SendClientMessage(player_id, -1, message);
				}

				format(message, sizeof message, "Has modificado el rango de '%s' al rango '%s'.", name, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][crew_rank_NAME]);
				SendClientMessage(playerid, -1, message);
			}
			else ShowDialog(playerid, DIALOG_CREW_MODIFY_MEMBERS);
			return 1;
		}
		case DIALOG_CREW_PROPERTY_CONFIRM:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

			if(response)
			{
				if(!TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La propiedad no está dentro de un territorio de tu banda.");
				if(!TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_OCCUPIED]) return SendClientMessage(playerid, -1, "{FFFFFF}La propiedad no está dentro de un territorio de tu banda.");
				if(TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) return SendClientMessage(playerid, -1, "{FFFFFF}La propiedad no está dentro de un territorio de tu banda.");
				if(!IsPointInDynamicArea(TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_AREA], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z])) return SendClientMessage(playerid, -1, "{FFFFFF}La propiedad no está dentro de un territorio de tu banda.");
				if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, -1, "{FFFFFF}Esta no es tu propiedad.");


				new index = PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED];
				PROPERTY_INFO[ index ][property_CREW] = true;
				PROPERTY_INFO[ index ][property_OWNER_ID] = 0;
				PROPERTY_INFO[ index ][property_CREW_ID] = PLAYER_CREW[playerid][player_crew_ID];
				format(PROPERTY_INFO[ index ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ index ][property_ID]);

				new label_str[256], name_house[24];
                if(PROPERTY_INFO[ index ][property_EXTRA] == 0) name_house = "Casa";
                if(PROPERTY_INFO[ index ][property_EXTRA] == 2) name_house = "Garaje";
                if(PROPERTY_INFO[ index ][property_EXTRA] == 4) name_house = "Negocio";

				format
				(
					label_str,
					sizeof label_str,
					"\
					    {00FF00}%s\n\n\
						{FFFFFF}Dirección {00FF00}%d\n\
						{FFFFFF}Dueño {00FF00}Banda %s\n\
						{FFFFFF}Presiona {00CCFF}N {FFFFFF}o usa {FFFF00}/entrar{FFFFFF}.\
					", name_house, PROPERTY_INFO[index][property_ID], CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]
				);
				UpdateDynamic3DTextLabelText(PROPERTY_INFO[ index ][property_EXT_LABEL_ID], 0xFFFFFFAA, label_str);

				new DB_Query[350];

				format(DB_Query, sizeof(DB_Query), "INSERT INTO `PROPERTY_TERRITORY` (`ID_PROPERTY`, `ID_TERRITORY`) VALUES ('%d', '%d');", PROPERTY_INFO[ index ][property_ID], TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_ID]);
				db_query(Database, DB_Query);

				format(DB_Query, sizeof(DB_Query), "DELETE FROM `PROPERTY_OWNER` WHERE `ID_PROPERTY` = '%d';", PROPERTY_INFO[ index ][property_ID]);
				db_query(Database, DB_Query);

				new message[145];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) ha añadido una nueva propiedad en %s.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_NAME]);
				SendMessageToCrewMembers(PLAYER_CREW[playerid][player_crew_ID], -1, message);
			}
			return 1;
		}
		case DIALOG_CREW_LEAVE_TERRITORY:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_LEAVE_TERRITORY]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

			if(response)
			{
				if(!IsPlayerInDynamicArea(playerid, TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_AREA])) return SendClientMessage(playerid, -1, "{FFFFFF}No estás en un territorio de tu banda.");
				if(TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) return SendClientMessage(playerid, -1, "{FFFFFF}No estás en un territorio de tu banda.");
				if(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes abandonar territorios mientras tu banda está en combate.");
				if(TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_WAR]) return SendClientMessage(playerid, -1, "{FFFFFF}No se puede abandonar este territorio cuando está siendo conquistado.");

				TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_OCCUPIED] = false;
				TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_CREW_ID] = 0;
				TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_CREW_INDEX] = 0;
				TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_COLOR] = 0xCCCCCC55;
				UpdateGangZoneColor(PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO]);

				new DB_Query[350];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `CREW_TERRITORIES` WHERE `ID_TERRITORY` = '%d';", TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_ID]);
				db_query(Database, DB_Query);

				for(new i = 0; i != MAX_PROPERTIES; i ++)
				{
					if(!PROPERTY_INFO[i][property_VALID]) continue;
					if(!PROPERTY_INFO[i][property_CREW]) continue;
					if(PROPERTY_INFO[i][property_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) continue;

					if(IsPointInDynamicArea(TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_AREA], PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], PROPERTY_INFO[i][property_EXT_Z]))
					{
						PROPERTY_INFO[ i ][property_SOLD] = false;
						PROPERTY_INFO[ i ][property_CREW] = false;
						PROPERTY_INFO[ i ][property_OWNER_ID] = 0;
						PROPERTY_INFO[ i ][property_CREW_ID] = 0;
						format(PROPERTY_INFO[ i ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ i ][property_ID]);

						new label_str[256], info[3], type_house[24];
						if(PROPERTY_INFO[ i ][property_EXTRA] == 0) type_house = "Casa en venta";
						if(PROPERTY_INFO[ i ][property_EXTRA] == 2) type_house = "Garaje en venta";
						if(PROPERTY_INFO[ i ][property_EXTRA] == 3) type_house = "Oficina en venta";
						if(PROPERTY_INFO[ i ][property_EXTRA] == 4) type_house = "Negocio en venta";
						format
						(
							label_str,
							sizeof label_str,
							"\
							    {00ff00}%s\n\n\
								{FFFFFF}Dirección: {00FF00}%d\n\
								{FFFFFF}Precio: {41f48f}$%s\n\
								{FFFFFF}Nivel necesario: {00FF00}%d\n\
								{FFFFFF}Usa {FFFF00}/ayuda propiedades {FFFFFF}para ver como comprarla.\
							", type_house, PROPERTY_INFO[ i ][property_ID], number_format_thousand(PROPERTY_INFO[ i ][property_PRICE]), PROPERTY_INFO[ i ][property_LEVEL]
						);
						UpdateDynamic3DTextLabelText(PROPERTY_INFO[ i ][property_EXT_LABEL_ID], 0xFFFFFFAA, label_str);

						DestroyDynamicPickup(PROPERTY_INFO[ i ][property_EXT_PICKUP_ID]);
						PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;

		                if(PROPERTY_INFO[i][property_EXTRA] == 0) PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ i ][property_EXT_X], PROPERTY_INFO[ i ][property_EXT_Y], PROPERTY_INFO[ i ][property_EXT_Z], 0, PROPERTY_INFO[ i ][property_EXT_INTERIOR]);
		                if(PROPERTY_INFO[i][property_EXTRA] == 2) PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1272, 1, PROPERTY_INFO[ i ][property_EXT_X], PROPERTY_INFO[ i ][property_EXT_Y], PROPERTY_INFO[ i ][property_EXT_Z], 0, PROPERTY_INFO[ i ][property_EXT_INTERIOR]);
		                if(PROPERTY_INFO[i][property_EXTRA] == 4) PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = CreateDynamicPickup(19524, 1, PROPERTY_INFO[ i ][property_EXT_X], PROPERTY_INFO[ i ][property_EXT_Y], PROPERTY_INFO[ i ][property_EXT_Z], 0, PROPERTY_INFO[ i ][property_EXT_INTERIOR]);
						info[0] = PICKUP_TYPE_PROPERTY;
						info[1] = i; // Index
						info[2] = 2; // Pickup Exterior
						Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ i ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

						format(DB_Query, sizeof(DB_Query), "DELETE FROM `PROPERTY_TERRITORY` WHERE `ID_PROPERTY` = '%d';", PROPERTY_INFO[ i ][property_ID]);
						db_query(Database, DB_Query);
					}
				}

				new message[145];
				format(message, sizeof message, "{65C207}[MILICOS] {0D91AE}La banda '{ffffff}%s' {0D91AE}ha abandonado un territorio en %s.", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME], TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_NAME]);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PLAYER_CREW[i][player_crew_VALID])
						{
							SendClientMessage(i, -1, message);
						}
					}
				}
			}
			return 1;
		}
		case DIALOG_CREW_LEAVE_PROPERTY:
		{
			if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE_PROPERTIES]) return SendClientMessage(playerid, 0xFFFFFFFF, "No tienes permiso.");

			if(response)
			{
				if(!PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_CREW]) return SendClientMessage(playerid, -1, "{FFFFFF}Esta no es una propiedad de tu banda.");
				if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) return SendClientMessage(playerid, -1, "{FFFFFF}Esta no es una propiedad de tu banda.");
				if(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes liberar una propiedad cuando tu banda está en combate.");

				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_SOLD] = false;
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_CREW] = false;
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] = 0;
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_CREW_ID] = 0;
				format(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);

				new label_str[256], info[3], type_house[24];
				if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXTRA] == 0) type_house = "Casa en venta";
				if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXTRA] == 2) type_house = "Garaje en venta";
				if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXTRA] == 3) type_house = "Oficina en venta";
				if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXTRA] == 4) type_house = "Negocio en venta";
				format
				(
					label_str,
					sizeof label_str,
					"\
					    {00FF00}%s\n\n\
						{FFFFFF}Dirección: {00FF00}%d\n\
						{FFFFFF}Precio: {41f48f}$%s\n\
						{FFFFFF}Nivel necesario: {00FF00}%d\n\
						{FFFFFF}Usa {FFFF00}/ayuda propiedades {FFFFFF}para ver como comprarla.\
					",type_house, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID], number_format_thousand(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE]), PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_LEVEL]
				);
				UpdateDynamic3DTextLabelText(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_LABEL_ID], 0xFFFFFFAA, label_str);

				DestroyDynamicPickup(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID]);
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;

                if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXTRA] == 0) PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z], 0, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_INTERIOR]);
                if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXTRA] == 2) PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1272, 1, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z], 0, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_INTERIOR]);
                if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXTRA] == 4) PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID] = CreateDynamicPickup(19524, 1, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z], 0, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_INTERIOR]);
				info[0] = PICKUP_TYPE_PROPERTY;
				info[1] = PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]; // Index
				info[2] = 2; // Pickup Exterior
				Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

				new DB_Query[128];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `PROPERTY_TERRITORY` WHERE `ID_PROPERTY` = '%d';", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);
				db_query(Database, DB_Query);

				SendClientMessage(playerid, -1, "{FFFFFF}La propiedad ha sido liberada.");
			}
			return 1;
		}
		case DIALOG_POLICE_PENALTY:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_POLICE_PEN_TIME] + 20)
				{
					GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_POLICE_PEN_IM]);
					GivePlayerCash(PLAYER_TEMP[playerid][pt_POLICE_PEN_PID], PLAYER_TEMP[playerid][pt_POLICE_PEN_IM]/2);
					SetPlayerWantedLevelEx(playerid, 0, "indefinido");
			 		SendClientMessage(playerid, -1, "{FFFFFF}Has tardado en pagar la multa, está se cobrará en automático.");
				}
				if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_POLICE_PEN_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_POLICE_PEN_AID]) return SendClientMessage(playerid, 0x00FF00FF, "¡Escapa!{FFFFFF}, te has salvado, el policía ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_POLICE_PEN_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xFFFFFFFF, "El policía no está cerca tuya.");

				if(PLAYER_TEMP[playerid][pt_POLICE_PEN_IM] > CHARACTER_INFO[playerid][ch_CASH])
				{
					SendClientMessage(playerid, -1, "No tienes dinero para pagar la multa.");
					SendClientMessage(PLAYER_TEMP[playerid][pt_POLICE_PEN_PID], -1, "La persona aceptó pagar la multa, pero no tiene dinero.");
					return 1;
				}

				GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_POLICE_PEN_IM]);
				GivePlayerCash(PLAYER_TEMP[playerid][pt_POLICE_PEN_PID], PLAYER_TEMP[playerid][pt_POLICE_PEN_IM]/2);
				SetPlayerWantedLevelEx(playerid, 0, "indefinido");

				SendClientMessage(playerid, 0x00FF00FF, "Buen ciudadano{FFFFFF}, has pagado la multa y se te han quitado los cargos.");
				SendClientMessage(PLAYER_TEMP[playerid][pt_POLICE_PEN_PID], -1, "La persona {00FF00}ha pagado la multa{FFFFFF}, la mitad de ésta te la has quedado.");
			}
			return 1;
		}
		case DIALOG_SERVER_ECO:
		{
			if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 1;

			if(response)
			{
				PLAYER_TEMP[playerid][pt_DIALOG_ECO_SELECTED] = listitem;
				ShowDialog(playerid, DIALOG_SERVER_ECO_MODIFY);
			}
			return 1;
		}
		case DIALOG_SERVER_ECO_MODIFY:
		{
			if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 1;

			if(response)
			{
				new Float:multiplier;
				if(sscanf(inputtext, "f", multiplier))
				{
					SendClientMessage(playerid, -1, "Sintaxis no válida.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				switch(PLAYER_TEMP[playerid][pt_DIALOG_ECO_SELECTED])
				{
					case 0: MULTIPLIER_PROPERITES = multiplier;
					case 1: MULTIPLIER_VEHICLES = multiplier;
					case 2: MULTIPLIER_TOYS = multiplier;
					case 3: MULTIPLIER_SKINS = multiplier;
					case 4: MULTIPLIER_WEAPONS = multiplier;
					case 5: SD_VALUE = floatround(multiplier);
					case 6: SU_SD_PRICE = floatround(multiplier);
				}

				WriteEconomyMultipliers();
				UpdateEconomy(PLAYER_TEMP[playerid][pt_DIALOG_ECO_SELECTED]);
				ShowDialog(playerid, DIALOG_SERVER_ECO);
			}
			else ShowDialog(playerid, DIALOG_SERVER_ECO);
			return 1;
		}
		case DIALOG_SU_BUY:
		{
			if(response)
			{
				if(SU_SD_PRICE > ACCOUNT_INFO[playerid][ac_SD])
				{
					SendClientMessageEx(playerid, -1, "{FFFFFF}Te faltan {f44242}%d koins{FFFFFF} para poder ser {f4d942}premium{FFFFFF}.", SU_SD_PRICE - ACCOUNT_INFO[playerid][ac_SD]);
					return 1;
				}

				ACCOUNT_INFO[playerid][ac_SD] -= SU_SD_PRICE;
				ACCOUNT_INFO[playerid][ac_SU] = true;

				new DB_Query[128], DBResult:Result;
				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SD` = '%d', `SU` = '1', `SU_EXPIRE_DATE` = DATETIME('NOW', '+30 day') WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				format(DB_Query, sizeof DB_Query, "SELECT `SU_EXPIRE_DATE` FROM `CUENTA` WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				Result = db_query(Database, DB_Query);
				if(db_num_rows(Result)) db_get_field(Result, 0, ACCOUNT_INFO[playerid][ac_SU_EXPIRE_DATE], 24);
				db_free_result(Result);

				new dialog[624];
				format(dialog, sizeof dialog, "{FFFFFF}Superlandia Market\n\nTicket de compra (Presiona F8 por si hay algún error)\n------------------------\n{00FF00} Productos: Premium\n{FFFFFF} Usted pago: %d koins\n------------------------\n¡Gracias por su compra! y esperamos verlo pronto.", SU_SD_PRICE);
				ShowPlayerDialog(playerid, -1, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Premium > ¡Compra exitosa!", dialog, "Salir", "");

				if(GetPlayerSkin(playerid) == CHARACTER_INFO[playerid][ch_SKIN]) SetPlayerToys(playerid);
				UnlockPlayerVehicles(playerid);
			}
			return 1;
		}
		case DIALOG_SU:
		{
			if(response)
			{
				if(SU_SD_PRICE > ACCOUNT_INFO[playerid][ac_SD])
				{
					SendClientMessageEx(playerid, -1, "{FFFFFF}Te faltan {f44242}%d koins{FFFFFF} para poder comprar {f4d942}premium{ffffff}.", SU_SD_PRICE - ACCOUNT_INFO[playerid][ac_SD]);
					return 1;
				}

				ACCOUNT_INFO[playerid][ac_SD] -= SU_SD_PRICE;
				ACCOUNT_INFO[playerid][ac_SU] = true;

				new DB_Query[128], DBResult:Result;
				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SD` = '%d', `SU` = '1', `SU_EXPIRE_DATE` = DATETIME(`SU_EXPIRE_DATE`, '+30 day') WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				format(DB_Query, sizeof DB_Query, "SELECT `SU_EXPIRE_DATE` FROM `CUENTA` WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				Result = db_query(Database, DB_Query);

				new dialog[624];
				format(dialog, sizeof dialog, "{FFFFFF}Superlandia Market\n\nTicket de compra (Presiona F8 por si hay algún error)\n------------------------\n{00FF00} Productos: Premium\n{FFFFFF} Usted pago: %d koins\n------------------------\n¡Gracias por su compra! y esperamos verlo pronto.", SU_SD_PRICE);
				ShowPlayerDialog(playerid, -1, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Premium > ¡Compra exitosa!", dialog, "Salir", "");

				if(db_num_rows(Result)) db_get_field(Result, 0, ACCOUNT_INFO[playerid][ac_SU_EXPIRE_DATE], 24);
				db_free_result(Result);
			}
			return 1;
		}
		case DIALOG_SD:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return SendClientMessage(playerid, -1, "{FFFFFF}Formato no válido.");
				if(inputtext[0] <= 0) return SendClientMessage(playerid, -1, "{FFFFFF}Cantidad no válida.");
				if(inputtext[0] > ACCOUNT_INFO[playerid][ac_SD]) return ShowPlayerMessage(playerid, "No tienes esa cantidad.", 4);

				new prize = SD_VALUE * inputtext[0];
				ACCOUNT_INFO[playerid][ac_SD] -= inputtext[0];
				GivePlayerCash(playerid, prize);

				new DB_Query[128];
				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				format(DB_Query, sizeof DB_Query, "UPDATE `PERSONAJE` SET `CASH` = '%d' WHERE `ID_USER` = '%d';", CHARACTER_INFO[playerid][ch_CASH], ACCOUNT_INFO[playerid][ac_ID]);
				db_query(Database, DB_Query);

				SendClientMessageEx(playerid, -1, "Has convertido %d Sd y has recibido $%s.", inputtext[0], number_format_thousand(prize));
			}
			return 1;
		}
		case DIALOG_METAL_BUY:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return SendClientMessage(playerid, -1, "{FFFFFF}Formato no válido.");
				if(inputtext[0] <= 0) return SendClientMessage(playerid, -1, "{FFFFFF}Cantidad no válida.");
				if(inputtext[0] > CHARACTER_INFO[playerid][ch_CASH]) return ShowPlayerMessage(playerid, "No tienes esa cantidad.", 4);

				new price = inputtext[0] * 600;
				if(price > CHARACTER_INFO[playerid][ch_CASH])
				{
					SendClientMessageEx(playerid, -1, "{FFFFFF}Necesitas {41f48f}$%s{FFFFFF} para poder comprar {00FF00}%d piezas de arma.", number_format_thousand(price), inputtext[0]);
					return 1;
				}

				GivePlayerCash(playerid, -price);
				PLAYER_MISC[playerid][MISC_PIECES_WEAPON] += inputtext[0];

				SendClientMessageEx(playerid, -1, "{FFFFFF}Has comprado {00FF00}%s{FFFFFF} piezas de arma por {FFCC00}$%s.", number_format_thousand(inputtext[0]), number_format_thousand(price));
			}
			return 1;
		}
		case DIALOG_REPUESTOS_BUY:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return SendClientMessage(playerid, -1, "{FFFFFF}Formato no válido.");
				if(inputtext[0] <= 0) return SendClientMessage(playerid, -1, "{FFFFFF}Cantidad no válida.");
				if(inputtext[0] > CHARACTER_INFO[playerid][ch_CASH]) return ShowPlayerMessage(playerid, "No tienes esa cantidad.", 4);

				new price = inputtext[0] * 50;
				if(price > CHARACTER_INFO[playerid][ch_CASH])
				{
					SendClientMessageEx(playerid, -1, "{FFFFFF}Necesitas {41f48f}$%s{FFFFFF} para poder comprar {00FF00}%d repuestos mecánicos.", number_format_thousand(price), inputtext[0]);
					return 1;
				}

				GivePlayerCash(playerid, -price);
				PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] += inputtext[0];

				SendClientMessageEx(playerid, -1, "{FFFFFF}Has comprado {00FF00}%s{FFFFFF} repuestos mecánicos por {FFCC00}$%s.", number_format_thousand(inputtext[0]), number_format_thousand(price));
			}
			return 1;
		}
		case DIALOG_EMISORAS:
		{
			if(response)
			{
			    new vehicleid = GetPlayerVehicleID(playerid);
			    if(listitem == 0)
			    {
					if(PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE])
					{
						for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
						{
							if(IsPlayerConnected(i))
							{
								if(IsPlayerInAnyVehicle(i))
								{
									if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i))
									{
								        StopAudioStreamForPlayer(i);
								        PlayAudioStreamForPlayer(i, "http://us5.internet-radio.com:8487/listen.pls");
									}
								}
							}
						}
						PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE] = false;
						GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 1;
						Auto_SendPlayerAction(playerid, "cambia la emisora a la de reggae.");
					}
				}
			    if(listitem == 1)
			    {
					if(PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE])
					{
						for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
						{
							if(IsPlayerConnected(i))
							{
								if(IsPlayerInAnyVehicle(i))
								{
									if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i))
									{
								        StopAudioStreamForPlayer(i);
								        PlayAudioStreamForPlayer(i, "http://192.99.8.192:2762/listen.pls");
									}
								}
							}
						}
						PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE] = false;
						GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 2;
						Auto_SendPlayerAction(playerid, "cambia la emisora a la de cumbia.");
					}
				}
				if(listitem == 2)
				{
					if(PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE])
					{
						for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
						{
							if(IsPlayerConnected(i))
							{
								if(IsPlayerInAnyVehicle(i))
								{
									if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i))
									{
								        StopAudioStreamForPlayer(i);
								        PlayAudioStreamForPlayer(i, "http://149.56.175.167:5244/listen.pls");
									}
								}
							}
						}
						PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE] = false;
						GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 3;
						Auto_SendPlayerAction(playerid, "cambia la emisora a la de banda norteña.");
					}
				}
				if(listitem == 3)
				{
					if(PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE])
					{
						for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
						{
							if(IsPlayerConnected(i))
							{
								if(IsPlayerInAnyVehicle(i))
								{
									if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i))
									{
								        StopAudioStreamForPlayer(i);
								        PlayAudioStreamForPlayer(i, "http://188.40.32.140:8061/listen.pls");
									}
								}
							}
						}
						PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE] = false;
						GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 4;
						Auto_SendPlayerAction(playerid, "cambia la emisora a la de rock.");
					}
				}
				if(listitem == 4)
				{
					if(PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE])
					{
						for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
						{
							if(IsPlayerConnected(i))
							{
								if(IsPlayerInAnyVehicle(i))
								{
									if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i))
									{
								        StopAudioStreamForPlayer(i);
								        PlayAudioStreamForPlayer(i, "http://www.partyviberadio.com:8040/listen.pls");
									}
								}
							}
						}
						PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE] = false;
						GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 5;
						Auto_SendPlayerAction(playerid, "cambia la emisora a la de dubstep.");
					}
				}
				if(listitem == 5)
				{
					if(PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE])
					{
						for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
						{
							if(IsPlayerConnected(i))
							{
								if(IsPlayerInAnyVehicle(i))
								{
									if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i))
									{
								        StopAudioStreamForPlayer(i);
								        PlayAudioStreamForPlayer(i, "http://uk7.internet-radio.com:8000/listen.pls");
									}
								}
							}
						}
						PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE] = false;
						GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 6;
						Auto_SendPlayerAction(playerid, "cambia la emisora a la de electrónica.");
					}
				}
				if(listitem == 6)
				{
					if(PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE])
					{
						for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
						{
							if(IsPlayerConnected(i))
							{
								if(IsPlayerInAnyVehicle(i))
								{
									if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i))
									{
								        StopAudioStreamForPlayer(i);
								        PlayAudioStreamForPlayer(i, "http://uk7.internet-radio.com:8000/listen.pls");
									}
								}
							}
						}
						PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE] = false;
						GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 7;
						Auto_SendPlayerAction(playerid, "cambia la emisora a la de deep house.");
					}
				}
				if(listitem == 7)
				{
					if(PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE])
					{
						for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
						{
							if(IsPlayerConnected(i))
							{
								if(IsPlayerInAnyVehicle(i))
								{
									if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i))
									{
								        StopAudioStreamForPlayer(i);
								        PlayAudioStreamForPlayer(i, "http://cacoteo.com:7000/listen.pls");
									}
								}
							}
						}
						PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE] = false;
						GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 8;
						Auto_SendPlayerAction(playerid, "cambia la emisora a la de reggaetón.");
					}
				}
				if(listitem == 8)
				{
					if(PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE])
					{
						for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
						{
							if(IsPlayerConnected(i))
							{
								if(IsPlayerInAnyVehicle(i))
								{
									if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i))
									{
								        StopAudioStreamForPlayer(i);
								        PlayAudioStreamForPlayer(i, "http://uk7.internet-radio.com:8040/listen.pls");
									}
								}
							}
						}
						PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE] = false;
						GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 9;
						Auto_SendPlayerAction(playerid, "cambia la emisora a la de pop.");
					}
				}
				if(listitem == 9)
				{
					if(PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE])
					{
						for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
						{
							if(IsPlayerConnected(i))
							{
								if(IsPlayerInAnyVehicle(i))
								{
									if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i))
									{
								        StopAudioStreamForPlayer(i);
								        PlayAudioStreamForPlayer(i, "http://198.178.123.14:7516/listen.pls");
									}
								}
							}
						}
						PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE] = false;
						GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 10;
						Auto_SendPlayerAction(playerid, "cambia la emisora a la de salsa.");
					}
				}
				if(listitem == 10)
				{
					if(PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE])
					{
						for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
						{
							if(IsPlayerConnected(i))
							{
								if(IsPlayerInAnyVehicle(i))
								{
									if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i))
									{
								        StopAudioStreamForPlayer(i);
								        PlayAudioStreamForPlayer(i, "http://162.252.57.90:9336/listen.pls");
									}
								}
							}
						}
						PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE] = false;
						GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 11;
						Auto_SendPlayerAction(playerid, "cambia la emisora a la de trap.");
					}
				}
				if(listitem == 11)
				{
					if(PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE])
					{
						for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
						{
							if(IsPlayerConnected(i))
							{
								if(IsPlayerInAnyVehicle(i))
								{
									if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i))
									{
								        StopAudioStreamForPlayer(i);
								        PlayAudioStreamForPlayer(i, "http://uk3.internet-radio.com:8060/listen.pls");
									}
								}
							}
						}
						PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE] = false;
						GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 12;
						Auto_SendPlayerAction(playerid, "cambia la emisora a la de opera.");
					}
				}
				if(listitem == 12)
				{
					if(PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE])
					{
						for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
						{
							if(IsPlayerConnected(i))
							{
								if(IsPlayerInAnyVehicle(i))
								{
									if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i))
									{
								        StopAudioStreamForPlayer(i);
								        PlayAudioStreamForPlayer(i, "http://uk7.internet-radio.com:8078/listen.pls");
									}
								}
							}
						}
						PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE] = false;
						GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 13;
						Auto_SendPlayerAction(playerid, "cambia la emisora a la de hiphop.");
					}
				}
				if(listitem == 13)
				{
					if(PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE])
					{
						for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
						{
							if(IsPlayerConnected(i))
							{
								if(IsPlayerInAnyVehicle(i))
								{
									if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i))
									{
								        StopAudioStreamForPlayer(i);
									}
								}
							}
						}
						PLAYER_TEMP[playerid][pt_MUSIC_FOR_VEHICLE] = false;
						GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 0;
						Auto_SendPlayerAction(playerid, "apaga la radio.");
					}
				}
			}
			return 1;
		}
		case DIALOG_VOBJECT_MENU:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
					case 1: //Comprar
					{
						new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);
						if(!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
						{
							PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Premium", "{FFFFFF}Necesitas ser usuario {f4d942}premium{FFFFFF} para tener más objetos en vehículos compra el {f4d942}premium{FFFFFF} con sólo {f44242}5 koins.", "Salir", "");
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if(slot == -1)
						{
							SendClientMessage(playerid, -1, "{FFFFFF}No hay más espacio para objetos en este vehículo.");
							ShowDialog(playerid, dialogid);
							return 1;
						}

						PLAYER_TEMP[playerid][pt_TUNING_GARAGE_SHOP] = true;

						new Float:p[6];
						GetPlayerCameraPos(playerid, p[0], p[1], p[2]);
						GetPlayerCameraLookAt(playerid, p[3], p[4], p[5]);
						InterpolateCameraPos(playerid, p[0], p[1], p[2], 2514.361328, -1517.794555, 24.301185, 2000);
						InterpolateCameraLookAt(playerid, p[3], p[4], p[5], 2517.655761, -1521.059570, 22.433773, 2000);

						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][0]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][1]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][2]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][3]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][4]);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP]);
						//PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] = 0;

						UpdateTuningShop(playerid);

						SendClientMessage(playerid, -1, "Pulsa {00CCFF}ESCAPE {FFFFFF}para dejar de comprar objetos.");
						SelectTextDrawEx(playerid, 0xe8d08fFF);
					}
					case 2:
					{
						new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);
						if(!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
						{
							PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Premium", "{FFFFFF}Necesitas ser usuario {f4d942}premium{FFFFFF} para tener más objetos en vehículos compra el {f4d942}premium{FFFFFF} con sólo {f44242}5 koins.", "Salir", "");
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if(slot == -1)
						{
							SendClientMessage(playerid, -1, "{FFFFFF}No hay más espacio para objetos en este vehículo.");
							ShowDialog(playerid, dialogid);
							return 1;
						}

						if(2000 > CHARACTER_INFO[playerid][ch_CASH])
						{
							PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar este objeto.", number_format_thousand(2000 - CHARACTER_INFO[playerid][ch_CASH]));
							ShowDialog(playerid, dialogid);
							return 1;
						}

						PLAYER_TEMP[playerid][pt_COUNTRY_TYPE] = 0;
						ShowDialog(playerid, DIALOG_VOBJECT_COUNTRY);
					}
					case 3:
					{
						new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);
						if(!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
						{
							PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Premium", "{FFFFFF}Necesitas ser usuario {f4d942}premium{FFFFFF} para tener más objetos en vehículos compra el {f4d942}premium{FFFFFF} con sólo {f44242}5 koins.", "Salir", "");
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if(slot == -1)
						{
							SendClientMessage(playerid, -1, "{FFFFFF}No hay más espacio para objetos en este vehículo.");
							ShowDialog(playerid, dialogid);
							return 1;
						}

						if(2000 > CHARACTER_INFO[playerid][ch_CASH])
						{
							PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar este objeto.", number_format_thousand(2000 - CHARACTER_INFO[playerid][ch_CASH]));
							ShowDialog(playerid, dialogid);
							return 1;
						}

						PLAYER_TEMP[playerid][pt_COUNTRY_TYPE] = 1;
						ShowDialog(playerid, DIALOG_VOBJECT_COUNTRY);
					}
					/*case 2://texto
					{
						new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);
						if(!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
						{
							PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Premium", "{FFFFFF}Necesitas ser usuario {f4d942}premium{FFFFFF} para tener más objetos en los vehículos compra el {f4d942}premium{FFFFFF} con sólo {f44242}5 koins.", "Salir", "");
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if(slot == -1)
						{
							SendClientMessage(playerid, -1, "{FFFFFF}No hay más espacio para objetos en este vehículo.");
							ShowDialog(playerid, dialogid);
							return 1;
						}

						if(500 > CHARACTER_INFO[playerid][ch_CASH])
						{
							PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar este objeto.", number_format_thousand(500 - CHARACTER_INFO[playerid][ch_CASH]));
							ShowDialog(playerid, dialogid);
							return 1;
						}

						GivePlayerCash(playerid, -500);

						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_VALID] = true;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_TYPE] = VOBJECT_TYPE_TEXT;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ID] = 0;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_MODELID] = 19327;
						format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_NAME], 32, "Texto");
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ATTACHED] = true;

						format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_TEXT], 32, "Mi texto");
						format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_FONT], 24, "Arial");
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_FONT_SIZE] = 24;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_BOLD] = false;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_FONT_COLOR] = 0xFF000000;

						RegisterNewVehicleObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot);
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot, true);

						SendClientMessage(playerid, -1, "{FFFFFF}El objeto de texto ha sido añadido.");
						PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] = slot;
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
					}*/
				}
			}
			else
			{
				PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE] = false;
				SetVehicleVirtualWorldEx(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetVehiclePosEx(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 2520.4453, -1510.1904, 23.6391);//entrega auto tun
				SetVehicleZAngle(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 0.7672);

				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_PARAMS_ENGINE] = 1;
				UpdateVehicleParams(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);

				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) PutPlayerInVehicleEx(playerid, PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 0);

				ShowPlayerSpeedoMeter(playerid);
				SetCameraBehindPlayer(playerid);
			}
			return 1;
		}
		case DIALOG_VOBJECT_COUNTRY:
		{
			if(response)
			{
				new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);
				if(!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Premium", "{FFFFFF}Necesitas ser usuario {f4d942}premium{FFFFFF} para tener más objetos en vehículos compra el {f4d942}premium{FFFFFF} con sólo {f44242}5 koins.", "Salir", "");
					ShowDialog(playerid, DIALOG_VOBJECT_MENU);
					return 1;
				}
				if(slot == -1)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}No hay más espacio para objetos en este vehículo.");
					ShowDialog(playerid, DIALOG_VOBJECT_MENU);
					return 1;
				}

				if(2000 > CHARACTER_INFO[playerid][ch_CASH])
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar este objeto.", number_format_thousand(2000 - CHARACTER_INFO[playerid][ch_CASH]));
					ShowDialog(playerid, DIALOG_VOBJECT_MENU);
					return 1;
				}

				GivePlayerCash(playerid, -2000);

				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_VALID] = true;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ID] = 0;
				if(PLAYER_TEMP[playerid][pt_COUNTRY_TYPE] == 0)
				{
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_TYPE] = VOBJECT_TYPE_COUNTRY_FLAG;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_MODELID] = 19307;
				}
				else if(PLAYER_TEMP[playerid][pt_COUNTRY_TYPE] == 1)
				{
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_TYPE] = VOBJECT_TYPE_COUNTRY_PANEL;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_MODELID] = 2661;
				}
				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_NAME], 32, "Pais");
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ATTACHED] = true;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_COLORS][0] = listitem;

				RegisterNewVehicleObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot);
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot, true);

				SendClientMessage(playerid, -1, "{FFFFFF}El objeto ha sido añadido.");
				PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] = slot;
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECTS:
		{
			if(response)
			{
				if(listitem == MAX_SU_VOBJECTS) return ShowDialog(playerid, DIALOG_VOBJECT_DELETE_ALL);
				if(!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][listitem][vobject_VALID])
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Este slot está vacío, aquí puedes comprar un nuevo objeto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
						{
							SendClientMessage(playerid, -1, "{FFFFFF}Objeto guardado.");
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED] = false;
							UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
							ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
						}
						else
						{
							SendClientMessage(playerid, -1, "{FFFFFF}Objeto colocado.");
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED] = true;
							UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
							ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
						}
					}
					case 1: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_CNAME);
					case 2:
					{
						if(!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
						{
							SendClientMessage(playerid, -1, "{FFFFFF}Debes colocar el objeto primero.");
							ShowDialog(playerid, dialogid);
							return 1;
						}

						EditVehicleObject(playerid, PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
					}
					case 3:
					{
						switch(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_TYPE])
						{
							case VOBJECT_TYPE_OBJECT:
							{
								if(!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
								{
									SendClientMessage(playerid, -1, "{FFFFFF}Debes colocar el objeto primero.");
									ShowDialog(playerid, dialogid);
									return 1;
								}
								ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
							}
							case VOBJECT_TYPE_TEXT:
							{
								if(!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
								{
									SendClientMessage(playerid, -1, "{FFFFFF}Debes colocar el objeto primero.");
									ShowDialog(playerid, dialogid);
									return 1;
								}
								ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
							}
							case VOBJECT_TYPE_COUNTRY_FLAG, VOBJECT_TYPE_COUNTRY_PANEL: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_CDELETE);
						}
					}
					case 4: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_CDELETE);
				}

			}
			else
			{
				UpdateVehicleObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CNAME:
		{
			if(response)
			{
				if(!strlen(inputtext) || strlen(inputtext) > 32)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}El nombre del objeto debe contener de 1 a 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME], 32, "%s", inputtext);
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLORS:
		{
			if(response)
			{
				PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLOR);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT] ] = 0;
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
						SendClientMessage(playerid, -1, "{FFFFFF}Color actualizado.");
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
					}
					case 1:
					{
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT] ] = RGBAToARGB(VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_1] ]);
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
						SendClientMessage(playerid, -1, "{FFFFFF}Color actualizado.");
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
					}
					case 2:
					{
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT] ] = RGBAToARGB(VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_2] ]);
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
						SendClientMessage(playerid, -1, "{FFFFFF}Color actualizado.");
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
					}
					case 3: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLOR_HEX);
				}
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR_HEX:
		{
			if(response)
			{
				if(strlen(inputtext) < 8) return ShowDialog(playerid, dialogid);

				new hexcolor;
				if(sscanf(inputtext, "h", hexcolor))
				{
					ShowDialog(playerid, dialogid);
					return 1;
				}

				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT] ] = hexcolor;
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
				SendClientMessage(playerid, -1, "{FFFFFF}Color actualizado.");
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLOR);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CDELETE:
		{
			if(response)
			{
				if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
				{
					DestroyDynamicObject(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OBJECT_ID]);
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
				}

				new DB_Query[128];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `VEHICLE_OBJECTS` WHERE `ID` = '%d';", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ID]);
				db_query(Database, DB_Query);

				new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ] = temp_VEHICLE_OBJECTS;

				SendClientMessage(playerid, -1, "{FFFFFF}Objeto eliminado.");
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_DELETE_ALL:
		{
			if(response)
			{
				new DB_Query[128];
				format(DB_Query, sizeof DB_Query, "DELETE FROM `VEHICLE_OBJECTS` WHERE `ID_VEHICLE` = '%d';", PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][player_vehicle_ID]);
				db_query(Database, DB_Query);

				new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
				for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
					{
						DestroyDynamicObject(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_OBJECT_ID]);
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
					}

					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i] = temp_VEHICLE_OBJECTS;
				}

				SendClientMessage(playerid, -1, "{FFFFFF}Todos los objetos de este vehículo han sido eliminados.");
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_MENU:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_VOBJECT_TEXT_TEXT);
					case 1: ShowDialog(playerid, DIALOG_VOBJECT_TEXT_FONT);
					case 2: ShowDialog(playerid, DIALOG_VOBJECT_TEXT_FONT_SIZE);
					case 3:
					{
						if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_BOLD])
						{
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_BOLD] = false;
							SendClientMessage(playerid, -1, "Negrita deshabilitada.");
						}
						else
						{
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_BOLD] = true;
							SendClientMessage(playerid, -1, "Negrita habilitada.");
						}
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
						ShowDialog(playerid, dialogid);
					}
					case 4: ShowDialog(playerid, DIALOG_VOBJECT_TEXT_FONT_COLOR);
				}
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_TEXT:
		{
			if(response)
			{
				if(strlen(inputtext) >= 32)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Como máximo puedes introducir un texto de 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				if(sscanf(inputtext, "s[32]", inputtext))
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Introduce un texto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_TEXT], 32, "%s", inputtext);
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
				SendClientMessage(playerid, -1, "Texto actualizado.");
			}
			ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT:
		{
			if(response)
			{
				if(strlen(inputtext) >= 24)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Como máximo puedes introducir una fuente de 24 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				if(sscanf(inputtext, "s[24]", inputtext))
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Introduce un texto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT], 24, "%s", inputtext);
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
				SendClientMessage(playerid, -1, "Fuente actualizada.");
			}
			ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_SIZE:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0 || inputtext[0] >= 255)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Introduce un valor entre 1 y 255.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT_SIZE] = inputtext[0];
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
				SendClientMessage(playerid, -1, "Tamaño de letra actualizado.");
			}
			ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_COLOR:
		{
			if(response)
			{
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT_COLOR] = RGBAToARGB(RandomColors[listitem]);
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
				SendClientMessage(playerid, -1, "Color de letra actualizado.");
			}
			ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
			return 1;
		}
	}
	return 0;
}

GetDatabasePages(query[], limit)
{
    new DBResult:pages;
	pages = db_query(Database, query);

	new Float:tpages = floatdiv(floatround(db_get_field_int(pages, 0)), limit);
	db_free_result(pages);
	return floatround(tpages, floatround_ceil);
}

AddNewAd(playerid, type, price, text[], modelid, vcol1 = 0, vcol2 = 0)
{
	new Float:rots[4];
	switch(type)
	{
		case SHOP_ARTICLE_TYPE_PROPERTY: rots = Float:{345.0, 0.0, 30.0, 1.20};
		case SHOP_ARTICLE_TYPE_VEHICLE: rots = Float:{345.0, 0.0, 330.0, 1.0};
		case SHOP_ARTICLE_TYPE_OTHER: rots = Float:{0.0, 0.0, 330.0, 1.20};
	}

	new DB_Query[450];
	format(DB_Query, sizeof DB_Query,
		"\
			INSERT INTO `SHOP` (`ID_USER`, `TYPE`, `PRICE`, `TEXT`, `MODELID`, `RX`, `RY`, `RZ`, `ZOOM`, `VCOL1`, `VCOL2`) VALUES ('%d', '%d', '%d', '%q', '%d', '%f', '%f', '%f', '%f', '%d', '%d');\
			DELETE FROM `SHOP` WHERE `ID` NOT IN (SELECT `ID` FROM `SHOP` ORDER BY `DATE` DESC LIMIT 300);\
		",
			ACCOUNT_INFO[playerid][ac_ID], type, price, text, modelid, rots[0], rots[1], rots[2], rots[3], vcol1, vcol2
	);
	db_query(Database, DB_Query);
	return 1;
}

GetEmptyPlayer_GPS_Slot(playerid)
{
	for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i ++)
	{
		if(!PLAYER_GPS[playerid][i][player_gps_VALID]) return i;
	}
	return -1;
}

SetPlayer_GPS_Checkpoint(playerid, Float:x, Float:y, Float:z, world, interior)
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = CreateDynamicCP(x, y, z, 5.0, world, interior, playerid, 9999999999.0);

	new info[1];
	info[0] = CHECKPOINT_TYPE_GPS;
	Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT], E_STREAMER_EXTRA_ID, info);

	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED])
		{
			if(IsPlayerConnected(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER]))
			{
				if(IsValidDynamicCP(PLAYER_TEMP[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT]))
				{
					DestroyDynamicCP(PLAYER_TEMP[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT]);
					PLAYER_TEMP[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
				}
				PLAYER_TEMP[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT] = CreateDynamicCP(x, y, z, 5.0, world, interior, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], 9999999999.0);

				new taxi_info[1];
				taxi_info[0] = CHECKPOINT_TYPE_GPS;
				Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT], E_STREAMER_EXTRA_ID, taxi_info);

				Auto_SendPlayerAction(playerid, "configura su GPS y se lo muestra al taxista.");
				return 1;
			}
		}
	}

	Auto_SendPlayerAction(playerid, "configura su GPS.");
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
    if(CHECKPOINT_RACE[playerid]) // if it's true
    {
		if(PLAYER_IN_RACE[playerid] == 1)
		{
			GivePlayerCash(playerid, BET_RACE);
		    SendClientMessageEx(playerid, -1, "Has ganado {41f48f}$%d {FFFFFF}con la carrera.", BET_RACE);
		    foreach(PLAYERS_IN_RACE, i) PLAYER_IN_RACE[i] = 0;
		    foreach(PLAYERS_IN_RACE, i) CHECKPOINT_RACE[i] = false;
		    foreach(PLAYERS_IN_RACE, i) DisablePlayerCheckpoint(i);
		    foreach(PLAYERS_IN_RACE, i) Iter_Remove(PLAYERS_IN_RACE, i);

		    BET_RACE = 0;
			ARENA_RACE = 0;
		}
	}
    return 1;
}
public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(PLAYER_IN_RACE[playerid] == 1)
	{
	    CHARACTER_INFO[playerid][ch_CASH] += BET_RACE;
	    foreach(PLAYERS_IN_RACE, i) PLAYER_IN_RACE[i] = 0;
	    foreach(PLAYERS_IN_RACE, i) DisablePlayerRaceCheckpoint(i);
	    SendClientMessageEx(playerid, -1, "Ganaste la carrera, y te has llevado $%s.", BET_RACE);

	    BET_RACE = 0;
		ARENA_RACE = 0;
	}
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	new info[2];
	Streamer_GetArrayData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID, info);

	switch(info[0])
	{
		case AREA_TYPE_GANGZONE:
		{
			new index = info[1];

			if(TERRITORIES[index][territory_VALID])
			{
				PLAYER_TEMP[playerid][pt_LAST_TERRITORY] = index;
				if(PLAYER_CREW[playerid][player_crew_VALID])
				{
					if(TERRITORIES[index][territory_WAR])
					{
						SendClientMessageEx(playerid, -1, "Este territorio está siendo atacado por la banda {%06x}'%s'.", CREW_INFO[ TERRITORIES[index][territory_ATTACKER_CREW_INDEX] ][crew_COLOR] >>> 8, CREW_INFO[ TERRITORIES[index][territory_ATTACKER_CREW_INDEX] ][crew_NAME]);

						new r, g, b, a;
						HexToRGBA(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR], r, g, b, a);
						SetPlayerColorEx(playerid, RGBAToHex(r, g, b, 0));

						TextDrawShowForPlayer(playerid, Textdraws[textdraw_TERRITORY_BOX]);
						TextDrawShowForPlayer(playerid, TERRITORIES[index][territory_TEXTDRAW]);
					}
				}
			}
		}
	}

	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	new info[2];
	Streamer_GetArrayData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID, info);

	switch(info[0])
	{
		case AREA_TYPE_NONE:
		{
			if(areaid == Lumberjack_Area)
			{
				if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_LUMBERJACK)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Has abandonado el trabajo de leñador porque te has alejado demasiado de la zona.");
					EndPlayerJob(playerid);
				}
			}
			else if(areaid == Harvest_Area)
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_HARVESTER)
					{
						SendClientMessage(playerid, -1, "{FFFFFF}Has abandonado tu trabajo de cosechador porque te has alejado demasiado de la zona.");
						EndPlayerJob(playerid);
					}
				}
			}

			if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL)
			{
				if(areaid == Jail_Areas[0] || areaid == Jail_Areas[1] || areaid == Jail_Areas[2])
				{
					SetPlayerPosEx(playerid, JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);
				}
			}
		}
		case AREA_TYPE_GANGZONE:
		{
			new index = info[1];

			if(TERRITORIES[index][territory_VALID])
			{
				if(PLAYER_CREW[playerid][player_crew_VALID])
				{
					SetPlayerColorEx(playerid, PLAYER_COLOR);
					TextDrawHideForPlayer(playerid, Textdraws[textdraw_TERRITORY_BOX]);
					TextDrawHideForPlayer(playerid, TERRITORIES[index][territory_TEXTDRAW]);
				}
			}
		}
	}
	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	new info[1];
	Streamer_GetArrayData(STREAMER_TYPE_CP, checkpointid, E_STREAMER_EXTRA_ID, info);

	switch(info[0])
	{
		case CHECKPOINT_TYPE_GPS:
		{
			DestroyDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]);
			PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
			ShowPlayerMessage(playerid, "Has llegado a tú destino.", 5);
		}
		case CHECKPOINT_TYPE_UNLOAD_TRUCK:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRUCK]) return 1;
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRUCK) return 1;

			new vehicleid = GetPlayerVehicleID(playerid);
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_WORK) return 1;
			if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_TRUCK) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED]) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, -1, "{FFFFFF}Solo aceptaremos la carga del conductor de este camión.");

			DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]);
			PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;

			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);

			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
			UpdateVehicleParams(vehicleid);

			TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING] = true;
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], "Descargando_cami¦n...");
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);

			PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] = 40.0;
			UpdatePlayerLoadingTruckSize(playerid);
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);
			PLAYER_TEMP[playerid][pt_TIMERS][9] = SetTimerEx("TruckUnLoadUp", 1000, false, "ii", playerid, vehicleid);

			SendClientMessage(playerid, -1, "{FFFFFF}El camión se está descargando.");
		}
		case CHECKPOINT_TYPE_FINISH_TRUCK:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRUCK]) return 1;
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRUCK) return 1;

			if(gettime() < PLAYER_TEMP[playerid][pt_CAMION_TIME_KICK] + 100) return SendClientMessage(playerid, 0xFFFFFFAA, "El tiempo con el que hiciste este trabajo fue muy rápido, no te pagaremos nada.");

			new vehicleid = GetPlayerVehicleID(playerid);
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_WORK) return 1;
			if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_TRUCK) return 1;
			if(!TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED]) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, -1, "{FFFFFF}Solo le pagaremos al conductor que entregó la mercancía.");

			DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]);
			PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;

			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);

			new work_extra_payment;
			if(work_info[WORK_TRUCK][work_info_EXTRA_PAY] > 0 && work_info[WORK_TRUCK][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_TRUCK][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_TRUCK], work_info[WORK_TRUCK][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT];

				if(ACCOUNT_INFO[playerid][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
			}

			if(Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_PIEZAS] > 0)
			{
				PLAYER_MISC[playerid][MISC_MECHANIC_PIECES] += Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_PIEZAS];
				SendClientMessageEx(playerid, -1, "{00FF00}¡Perfecto!{FFFFFF}, la empresa te deposito {41f48f}$%s{FFFFFF} en tu cuenta bancaria, y te han dado {00FF00}+%d repuestos.", Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_PIEZAS]);
			}
			else if(Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_SEMILLAS] > 0)
			{
				PLAYER_MISC[playerid][MISC_SEED_CANNABIS] += Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_SEMILLAS];
				PLAYER_MISC[playerid][MISC_MEDICINE] += Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_MEDICAMENTOS];
				SendClientMessageEx(playerid, -1, "{00FF00}¡Perfecto!{FFFFFF}, la empresa te deposito {41f48f}$%s{FFFFFF} en tu cuenta bancaria, y te han dado {00FF00}+%dg marihuana / +%dg medicamentos.", number_format_thousand(Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_MONEY] + work_extra_payment), Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_SEMILLAS], Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_MEDICAMENTOS]);
			}
			else if(Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_WOOD] > 0)
			{
				PLAYER_MISC[playerid][MISC_WOOD] += Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_WOOD];
				SendClientMessageEx(playerid, -1, "{00FF00}¡Perfecto!{FFFFFF}, la empresa te deposito {41f48f}$%s{FFFFFF} en tu cuenta bancaria, y te han dado {00FF00}+%d piezas de madera.", number_format_thousand(Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_MONEY] + work_extra_payment), Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_WOOD]);
			}
			else if(Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_METAL] > 0)
			{
				PLAYER_MISC[playerid][MISC_PIECES_WEAPON] += Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_METAL];
				SendClientMessageEx(playerid, -1, "{00FF00}¡Perfecto!{FFFFFF}, la empresa te deposito {41f48f}$%s{FFFFFF} en tu cuenta bancaria, y te han dado {00FF00}+%d piezas de arma.", number_format_thousand(Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_MONEY] + work_extra_payment), Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_METAL]);
			}
			
			if(PLAYER_PHONE[playerid][player_phone_VALID])
			{
				new message[64]; format(message, sizeof message, "%s", number_format_thousand(Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_MONEY]));
				RegisterPhoneMessage(6740, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
				if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, 0x12bc7eFF, "@WHATSAPP:{25d366} recibido de {12bc7e}Banco:{25d366} recibió un depósito de Camioneros S.A: +$%s", message);
			}

			//GivePlayerCash(playerid, Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_MONEY] + work_extra_payment);
			BANK_ACCOUNT[playerid][bank_account_BALANCE] += Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_MONEY];
			PLAYER_SKILLS[playerid][WORK_TRUCK] ++;
			SetVehicleToRespawnEx(vehicleid);
		}
		case CHECKPOINT_TYPE_TRASH:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRASH]) return DestroyPlayerTrashCheckpoint(playerid);
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRASH) return DestroyPlayerTrashCheckpoint(playerid);
			if(!PLAYER_TEMP[playerid][pt_TRASH_PASSENGER]) return 1;

			new driver = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID];
			SendClientMessage(driver, -1, "{FFFFFF}Espera mientras tu compañero recoge la basura.");

			new Float:offset = floatdiv(PLAYER_SKILLS[playerid][WORK_TRASH], 10);
			if(offset > 30.0) offset = 30.0;

			PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] = 10.0 + offset;
			UpdatePlayerTrashRecycleSize(playerid);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][3]);

			TogglePlayerControllable(playerid, false);
			SetCameraBehindPlayer(playerid);
			ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.1, true, false, false, false, 0);

			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][10]);
			PLAYER_TEMP[playerid][pt_TIMERS][10] = SetTimerEx("RecycleUp", 1000, false, "i", playerid);
		}
		case CHECKPOINT_TYPE_FINISH_TRASH:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRASH]) return DestroyPlayerTrashCheckpoint(playerid);
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRASH) return DestroyPlayerTrashCheckpoint(playerid);
			if(!PLAYER_TEMP[playerid][pt_TRASH_DRIVER]) return 1;

			new route = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE];
			new money = TRASH_OBJECTS[route][trash_route_MONEY];

			new driver_work_extra_payment, passenger_work_extra_payment;
			if(work_info[WORK_TRASH][work_info_EXTRA_PAY] > 0 && work_info[WORK_TRASH][work_info_EXTRA_PAY_EXP] > 0)
			{
				driver_work_extra_payment = (work_info[WORK_TRASH][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_TRASH], work_info[WORK_TRASH][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT] != 0) if(driver_work_extra_payment > work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT]) driver_work_extra_payment = work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT];
				if(ACCOUNT_INFO[playerid][ac_SU]) driver_work_extra_payment += SU_WORK_EXTRA_PAY;

				passenger_work_extra_payment = (work_info[WORK_TRASH][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] ][WORK_TRASH], work_info[WORK_TRASH][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT] != 0) if(passenger_work_extra_payment > work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT]) passenger_work_extra_payment = work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT];
				if(ACCOUNT_INFO[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] ][ac_SU]) passenger_work_extra_payment += SU_WORK_EXTRA_PAY;
			}

			//GivePlayerCash(playerid, money + driver_work_extra_payment);
			BANK_ACCOUNT[playerid][bank_account_BALANCE] += money;
			SendClientMessageEx(playerid, -1, "{00FF00}¡Bien!{FFFFFF}, la empresa te ha depositado {41f48f}$%s{FFFFFF} en tu cuenta bancaria.", number_format_thousand(money + driver_work_extra_payment));
			PLAYER_SKILLS[playerid][WORK_TRASH] ++;

			//GivePlayerCash(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], money + passenger_work_extra_payment);
			BANK_ACCOUNT[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] ][bank_account_BALANCE] += money;
			SendClientMessageEx(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], -1, "{00FF00}¡Bien!{FFFFFF}, la empresa te ha depositado {41f48f}$%s{FFFFFF} en tu cuenta bancaria.", number_format_thousand(money + passenger_work_extra_payment));
			PLAYER_SKILLS[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] ][WORK_TRASH] ++;

			CancelTrashWork(playerid, TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
		}
		case CHECKPOINT_TYPE_LUMBERJACK:
		{
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_LUMBERJACK)
			{
				DestroyDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;

				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				RemovePlayerAttachedObject(playerid, 8);
				PLAYER_TEMP[playerid][pt_PLAYER_CARRYING_TREE] = false;
				ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 1, 1, 0, 0, 1);

				new work_extra_payment;
				if(work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY] > 0 && work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_EXP] > 0)
				{
					work_extra_payment = (work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_LUMBERJACK], work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_EXP])));
					if(work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_LIMIT];

					if(ACCOUNT_INFO[playerid][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
				}

 				new Rand = random(3);
				switch(Rand)
				{
					case 0:
					{
						GivePlayerCash(playerid, 80);
						PLAYER_MISC[playerid][MISC_WOOD] += 1;
						SendClientMessage(playerid, 0x00FF00FF, "Muy bien!{FFFFFF}, has ganado {41f48f}$80{FFFFFF} y te hemos regalado {00FF00}1 pieza de madera.");
					}
					case 1:
					{
						GivePlayerCash(playerid, 120);
						SendClientMessage(playerid, 0x00FF00FF, "Bien hecho!{FFFFFF}, has ganado {41f48f}$120{FFFFFF}.");
		    		}
					case 2:
					{
						GivePlayerCash(playerid, 80);
						PLAYER_MISC[playerid][MISC_WOOD] += 2;
						SendClientMessage(playerid, 0x00FF00FF, "Perfecto!{FFFFFF}, has ganado {41f48f}$80{FFFFFF} y te hemos regalado {00FF00}2 piezas de madera.");
		    		}
				}
				PLAYER_SKILLS[playerid][WORK_LUMBERJACK] ++;
			}
			else
			{
				DestroyDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
			}
		}
		case CHECKPOINT_TYPE_PIZZA_DEL:
		{
			PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS] --;
			PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS] ++;
			DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
			PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT_DELI] = true;
			PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;

			SendClientMessage(playerid, -1, "El viaje ha sido {00FF00}concluido{FFFFFF}, regrese el avión al {FF0000}hángar de Los Santos{FFFFFF}.");
			SetPlayer_Pizza_Checkpoint(playerid, -1);
		}
		case CHECKPOINT_TYPE_PIZZA_FINISH:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;

			new vehicleid = GetPlayerVehicleID(playerid);
			if(!PIZZA_VEHICLE[vehicleid][pizza_vehicle_STARTED]) return 1;
			if(PIZZA_VEHICLE[vehicleid][pizza_vehicle_DRIVER_AID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, -1, "{FFFFFF}Solo le pagaremos al conductor que realizó el trabajo.");

			new work_extra_payment;
			if(work_info[WORK_PIZZA][work_info_EXTRA_PAY] > 0 && work_info[WORK_PIZZA][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_PIZZA][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_PIZZA], work_info[WORK_PIZZA][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_PIZZA][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_PIZZA][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_PIZZA][work_info_EXTRA_PAY_LIMIT];

				if(ACCOUNT_INFO[playerid][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
			}

			new Rand = random(3);
			switch(Rand)
			{
				case 0:
				{
					new money = 4500;
					GivePlayerCash(playerid, money);
					SendClientMessageEx(playerid, 0x00FF00FF, "Excelente viaje!{FFFFFF}, has ganado {41f48f}$%s{FFFFFF} y te hemos regalado una {00FF00}Champagne Moet.", number_format_thousand(money));

					new slot = GetEmptyPlayerPocketSlot(playerid);
					if(slot == -1)
					{
						PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, -1, "{FFFFFF}No has podido guardar tu Champagne porque ya no tenías espacio en {FFFF00}/alimentos.");
						return 1;
					}

					PLAYER_POCKET[playerid][slot][player_pocket_VALID] = true;
					format(PLAYER_POCKET[playerid][slot][player_pocket_object_NAME], 24, "Champagne Moet");
					PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY] = 10.0;
					PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST] = 50.0;
					PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK] = 2000;
					RegisterNewPlayerPocketObject(playerid, slot);
				}
				case 1:
				{
					new money = 4500;
					GivePlayerCash(playerid, money);
					SendClientMessageEx(playerid, 0x00FF00FF, "Buen viaje{FFFFFF}, has ganado {41f48f}$%s{FFFFFF}.", number_format_thousand(money));
	    		}
				case 2:
				{
					new money = 4500;
					GivePlayerCash(playerid, money);
					SendClientMessageEx(playerid, 0x00FF00FF, "Buen viaje{FFFFFF}, has ganado {41f48f}$%s{FFFFFF}.", number_format_thousand(money));
	    		}
			}

			PLAYER_SKILLS[playerid][WORK_PIZZA] ++;
			EndPlayerJob(playerid);
		}
		default: return 1;
	}
	return 1;
}

RegisterNewPlayer_GPS_Site(playerid, slot)
{
	new DBResult:Result, DB_Query[340];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PLAYER_GPS`\
		(\
			`ID_USER`, `NAME`, `X`, `Y`, `Z`, `WORLD`, `INTERIOR`\
		)\
		VALUES\
		(\
			'%d', '%q', '%f', '%f', '%f', '%d', '%d'\
		);\
		SELECT MAX(`ID`) FROM `PLAYER_GPS`;\
	",
		ACCOUNT_INFO[playerid][ac_ID], PLAYER_GPS[playerid][slot][player_gps_NAME], PLAYER_GPS[playerid][slot][player_gps_X], PLAYER_GPS[playerid][slot][player_gps_Y], PLAYER_GPS[playerid][slot][player_gps_Z], PLAYER_GPS[playerid][slot][player_gps_WORLD], PLAYER_GPS[playerid][slot][player_gps_INTERIOR]
	);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result)) PLAYER_GPS[playerid][slot][player_gps_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);
	return 1;
}

SetPlayerToys(playerid)
{
	for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) RemovePlayerAttachedObject(playerid, i);

	for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
	{
		if(i >= MAX_NU_TOYS && !ACCOUNT_INFO[playerid][ac_SU]) break;

		if(PLAYER_TOYS[playerid][i][player_toy_VALID])
		{
			if(PLAYER_TOYS[playerid][i][player_toy_ATTACHED])
			{
				SetPlayerAttachedObject
				(
					playerid,
					i,
					PLAYER_TOYS[playerid][ i ][player_toy_MODELID],
					PLAYER_TOYS[playerid][ i ][player_toy_BONE],
					PLAYER_TOYS[playerid][ i ][player_toy_OFFSET_X],
					PLAYER_TOYS[playerid][ i ][player_toy_OFFSET_Y],
					PLAYER_TOYS[playerid][ i ][player_toy_OFFSET_Z],
					PLAYER_TOYS[playerid][ i ][player_toy_ROT_X],
					PLAYER_TOYS[playerid][ i ][player_toy_ROT_Y],
					PLAYER_TOYS[playerid][ i ][player_toy_ROT_Z],
					PLAYER_TOYS[playerid][ i ][player_toy_SCALE_X],
					PLAYER_TOYS[playerid][ i ][player_toy_SCALE_Y],
					PLAYER_TOYS[playerid][ i ][player_toy_SCALE_Z],
					PLAYER_TOYS[playerid][ i ][player_toy_COLOR_1],
					PLAYER_TOYS[playerid][ i ][player_toy_COLOR_2]
				);
			}
		}
	}

	return 1;
}

UpdatePlayerToy(playerid, index)
{
	RemovePlayerAttachedObject(playerid, index);
	SetPlayerAttachedObject
	(
		playerid,
		index,
		PLAYER_TOYS[playerid][ index ][player_toy_MODELID],
		PLAYER_TOYS[playerid][ index ][player_toy_BONE],
		PLAYER_TOYS[playerid][ index ][player_toy_OFFSET_X],
		PLAYER_TOYS[playerid][ index ][player_toy_OFFSET_Y],
		PLAYER_TOYS[playerid][ index ][player_toy_OFFSET_Z],
		PLAYER_TOYS[playerid][ index ][player_toy_ROT_X],
		PLAYER_TOYS[playerid][ index ][player_toy_ROT_Y],
		PLAYER_TOYS[playerid][ index ][player_toy_ROT_Z],
		PLAYER_TOYS[playerid][ index ][player_toy_SCALE_X],
		PLAYER_TOYS[playerid][ index ][player_toy_SCALE_Y],
		PLAYER_TOYS[playerid][ index ][player_toy_SCALE_Z],
		PLAYER_TOYS[playerid][ index ][player_toy_COLOR_1],
		PLAYER_TOYS[playerid][ index ][player_toy_COLOR_2]
	);
	return 1;
}

EditPlayerToy(playerid)
{
	if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);

	SetPlayerAttachedObject
	(
		playerid,
		PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
	);

	SendClientMessage(playerid, -1, "{FFFFFF}Ajusta el accesorio y haz clic en el icono de guardar, si pulsas {00CCFF}'ESCAPE' {FFFFFF}no se guardará la configuración.");
	SendClientMessage(playerid, -1, "{FFFFFF}Mantén presionado {00CCFF}'ESPACIO' {FFFFFF}para mover la cámara.");
	EditAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(index != PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]) return 0;

    if(response)
    {
        if(fScaleX >= 1.5 || fScaleY >= 1.5 || fScaleZ >= 1.5)
	    {
	        SendClientMessage(playerid, -1, "{FFFFFF}El tamaño del accesorio es demasiado grande.");

			RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
			if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED])
			{
				SetPlayerAttachedObject
				(
					playerid,
					PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
				);
			}
			return 1;
	    }
        if((fOffsetX >= 0.6 || -0.6 >= fOffsetX) || (fOffsetY >= 0.6 || -0.6 >= fOffsetY) || (fOffsetZ >= 0.6 || -0.6 >= fOffsetZ))
        {
            SendClientMessage(playerid, -1, "{FFFFFF}La posición del objeto está demasiado lejos de ti.");

			RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
			if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED])
			{
				SetPlayerAttachedObject
				(
					playerid,
					PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
				);
			}
			return 1;
        }

		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X] = fOffsetX;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y] = fOffsetY;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z] = fOffsetZ;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X] = fRotX;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y] = fRotY;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z] = fRotZ;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X] = fScaleX;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y] = fScaleY;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z] = fScaleZ;

		if(!PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED] = true;

        SendClientMessageEx(playerid, -1, "{FFFFFF}Accesorio {98d16c}'%s' {FFFFFF}actualizado.", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
    }
    else
    {
        RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
		if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED])
		{
			SetPlayerAttachedObject
			(
				playerid,
				PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
			);
		}

        SendClientMessage(playerid, -1, "{FFFFFF}Has cancelado la edición.");
    }
    return 1;
}

ConnectDatabase()
{
    /*new MySQLOpt: option_id = mysql_init_options();
	mysql_set_option(option_id, AUTO_RECONNECT, true);
    SMF_DATABASE = mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE, option_id);
    if(mysql_errno(SMF_DATABASE) == 0)
    {
        print("La conexión con la base de datos funciona.");
    }
    else
    {
		print("\n----------------------------------");
		print("  ¡ATENCION! No hay conexión con la base de datos.\n");
		print("----------------------------------\n");
		mysql_close();
		SendRconCommand("exit");
    }*/
    
    
    
	Database = db_open("SERVER/InfinityZone.db");

	if(Database == DB:0)
	{
		print("\n----------------------------------");
		print("  ¡ATENCION! No hay conexión con la base de datos.\n");
		print("----------------------------------\n");
		SendRconCommand("exit");
	}
	else
	{
		print("La conexión con la base de datos funciona.");
		db_query(Database,
		"\
			PRAGMA FOREIGN_KEYS = ON;\
			UPDATE `CUENTA` SET `CONNECTED` = '0', PLAYERID = '-1';\
		");
	}
	return 1;
}

/*CreateDatabase()
{
	print("[DATABASE] Creando alter table...");
	db_query(Database, "ALTER TABLE CUENTA ADD WARN_STATUS INTEGER DEFAULT 0");
	print("[DATABASE] Creacion de alter table correctamente creada ...");
	return 1;
}*/

ClearPlayerChat(playerid)
{
	for(new i = 0; i != 32; i++) SendClientMessage(playerid, -1, " ");
	return 1;
}

RegisterBankAccountTransaction(account_id, transaction_type, ammount, extra = -1)
{
	new DB_Query[215];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `BANK_TRANSACTIONS`\
		(\
			`ID_ACCOUNT`, `TRANSACTION_TYPE`, `AMMOUNT`, `EXTRA`\
		)\
		VALUES\
		(\
			'%d', '%d', '%d', '%d'\
		);\
	", account_id, transaction_type, ammount, extra);
	db_query(Database, DB_Query);
	return 1;
}

RegisterNewPlayer(playerid)
{
	if(PLAYER_TEMP[playerid][pt_USER_EXIT]) return 0;

	new DBResult:Result, DB_Query[800];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `CUENTA`\
		(\
			`IP`, `NAME`, `EMAIL`, `SALT`, `PASS`, `CONNECTED`, `PLAYERID`, `TIME_FOR_REP`\
		)\
		VALUES\
		(\
			'%q', '%q', '%q', '%q', '%q', '1', '%d', '%d'\
		);\
		SELECT `ID`, `LAST_CONNECTION` FROM `CUENTA` WHERE `NAME` = '%s';\
	", ACCOUNT_INFO[playerid][ac_IP], ACCOUNT_INFO[playerid][ac_NAME], ACCOUNT_INFO[playerid][ac_EMAIL], ACCOUNT_INFO[playerid][ac_SALT], ACCOUNT_INFO[playerid][ac_PASS], playerid, TIME_FOR_REP, ACCOUNT_INFO[playerid][ac_NAME]);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result))
	{
		ACCOUNT_INFO[playerid][ac_ID] = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "LAST_CONNECTION", ACCOUNT_INFO[playerid][ac_LAST_CONNECTION], 24);
		ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL] = true;
	}
	db_free_result(Result);

	DB_Query[0] = EOS;
	new DBResult:Result_reg;
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `REGISTRO`\
		(\
			`ID_USER`, `IP`, `NAME`, `EMAIL`, `SALT`, `PASS`\
		)\
		VALUES\
		(\
			'%d', '%q', '%q', '%q', '%q', '%q'\
		);\
		SELECT `DATE` FROM `REGISTRO` WHERE `ID_USER` = '%d';\
	", ACCOUNT_INFO[playerid][ac_ID], ACCOUNT_INFO[playerid][ac_IP], ACCOUNT_INFO[playerid][ac_NAME], ACCOUNT_INFO[playerid][ac_EMAIL], ACCOUNT_INFO[playerid][ac_SALT], ACCOUNT_INFO[playerid][ac_PASS], ACCOUNT_INFO[playerid][ac_ID]);
	Result_reg = db_query(Database, DB_Query);

	if(db_num_rows(Result_reg)) db_get_field_assoc(Result, "DATE", ACCOUNT_INFO[playerid][reg_DATE], 24);
	db_free_result(Result_reg);


	DB_Query[0] = EOS;
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PERSONAJE`\
		(\
			`ID_USER`, `SKIN`, `CASH`, `POS_X`, `POS_Y`, `POS_Z`, `ANGLE`, `SEX`\
		)\
		VALUES\
		(\
			'%d', '%d', '%d', '%f', '%f', '%f', '%f', '%d'\
		);\
	", ACCOUNT_INFO[playerid][ac_ID], CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_CASH], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], CHARACTER_INFO[playerid][ch_SEX]);
	db_query(Database, DB_Query);

	DB_Query[0] = EOS;
	format(DB_Query, sizeof DB_Query, "INSERT INTO `PLAYER_OBJECT` (`ID_USER`) VALUES ('%d');", ACCOUNT_INFO[playerid][ac_ID]);
	db_query(Database, DB_Query);

	PLAYER_TEMP[playerid][pt_USER_EXIT] = true;
	return 1;
}

SaveUserData(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_USER_EXIT] || !PLAYER_TEMP[playerid][pt_USER_LOGGED]) return 0;

	new DB_Query[1800];
	format(DB_Query, sizeof(DB_Query), "\
		UPDATE `CUENTA` SET \
			`IP` = '%q',\
			`NAME` = '%q',\
			`EMAIL` = '%q',\
			`SALT` = '%q',\
			`PASS` = '%q',\
			`LAST_CONNECTION` = CURRENT_TIMESTAMP,\
			`TIME-PLAYING` = '%d',\
			`LEVEL` = '%d',\
			`REP` = '%d',\
			`STATE` = '%d',\
			`DOUBT_CHANNEL` = '%d',\
			`TIME_FOR_REP` = '%d',\
			`ADMIN_LEVEL` = '%d',\
			`PAYDAY_REP` = '%d', \
			`SD` = '%d', \
			`WARN_STATUS` = '%d', \
			`BLACK_SAPD` = '%d' \
		WHERE `ID` = '%d';\
		\
		UPDATE `PERSONAJE` SET \
			`SKIN` = '%d',\
			`CASH` = '%d',\
			`POS_X` = '%f',\
			`POS_Y` = '%f',\
			`POS_Z` = '%f',\
			`ANGLE` = '%f',\
			`STATE` = '%d',\
			`INTERIOR` = '%d',\
			`LOCAL_INTERIOR` = '%d',\
			`FIGHT_STYLE` = '%d',\
			`HEALTH` = '%f',\
			`ARMOUR` = '%f',\
			`SEX` = '%d',\
			`HUNGRY` = '%f',\
			`THIRST` = '%f',\
			`BLACK_MARKET_LEVEL` = '%d',\
			`WANTED_LEVEL` = '%d',\
			`POLICE_JAIL_TIME` = '%d',\
			`POLICE_JAIL_ID` = '%d' \
		WHERE `ID_USER` = '%d';\
		\
		UPDATE `BANK_ACCOUNTS` SET\
			`BALANCE` = '%d' \
		WHERE `ID_ACCOUNT` = '%d';\
		\
		UPDATE `PHONE` SET\
			`PHONE_NUMBER` = '%d',\
			`PHONE_STATE` = '%d',\
			`VISIBLE_NUMBER` = '%d' \
		WHERE `ID_USER` = '%d';\
		\
		UPDATE `PLAYER_OBJECT` SET\
			`GPS` = '%d',\
			`MP3` = '%d',\
			`PHONE_RESOLVER` = '%d' \
		WHERE `ID_USER` = '%d';\
	",
		ACCOUNT_INFO[playerid][ac_IP], ACCOUNT_INFO[playerid][ac_NAME], ACCOUNT_INFO[playerid][ac_EMAIL], ACCOUNT_INFO[playerid][ac_SALT], ACCOUNT_INFO[playerid][ac_PASS], ACCOUNT_INFO[playerid][ac_TIME_PLAYING], ACCOUNT_INFO[playerid][ac_LEVEL], ACCOUNT_INFO[playerid][ac_REP], ACCOUNT_INFO[playerid][ac_STATE], ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL], ACCOUNT_INFO[playerid][ac_TIME_FOR_REP], ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL], ACCOUNT_INFO[playerid][ac_PAYDAY_REP], ACCOUNT_INFO[playerid][ac_SD], ACCOUNT_INFO[playerid][ac_WARN_STATUS], ACCOUNT_INFO[playerid][ac_BLACK_SAPD], ACCOUNT_INFO[playerid][ac_ID],
		CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_CASH], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], CHARACTER_INFO[playerid][ch_STATE], CHARACTER_INFO[playerid][ch_INTERIOR], CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA], CHARACTER_INFO[playerid][ch_FIGHT_STYLE], CHARACTER_INFO[playerid][ch_HEALTH], CHARACTER_INFO[playerid][ch_ARMOUR],  CHARACTER_INFO[playerid][ch_SEX], CHARACTER_INFO[playerid][ch_HUNGRY], CHARACTER_INFO[playerid][ch_THIRST], CHARACTER_INFO[playerid][ch_BLACK_MARKET_LEVEL], CHARACTER_INFO[playerid][ch_WANTED_LEVEL], CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME], CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID], ACCOUNT_INFO[playerid][ac_ID],
		BANK_ACCOUNT[playerid][bank_account_BALANCE], BANK_ACCOUNT[playerid][bank_account_ID],
		PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE[playerid][player_phone_STATE], PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER], ACCOUNT_INFO[playerid][ac_ID],
		PLAYER_OBJECT[playerid][po_GPS], PLAYER_OBJECT[playerid][po_MP3], PLAYER_OBJECT[playerid][po_PHONE_RESOLVER], ACCOUNT_INFO[playerid][ac_ID]
	);
	db_query(Database, DB_Query);

	if(BANK_ACCOUNT[playerid][bank_account_ID] != 0)
	{
		new DBResult:Result;
		format(DB_Query, sizeof DB_Query,

			"DELETE FROM `BANK_TRANSACTIONS` WHERE `ID_ACCOUNT` = '%d' AND `ID_TRANSACTION` NOT IN (SELECT `ID_TRANSACTION` FROM `BANK_TRANSACTIONS` WHERE `ID_ACCOUNT` = '%d' ORDER BY `DATE` DESC LIMIT %d);",

			BANK_ACCOUNT[playerid][bank_account_ID], BANK_ACCOUNT[playerid][bank_account_ID], MAX_BANK_TRANSACTIONS_DIALOG
		);
		Result = db_query(Database, DB_Query);
		db_free_result(Result);
	}

	if(PLAYER_PHONE[playerid][player_phone_VALID])
	{
		new DBResult:Result;
		format(DB_Query, sizeof DB_Query,

			"DELETE FROM `PHONE_MESSAGES` WHERE `FROM` = '%d' AND `ID_MESSAGE` NOT IN (SELECT `ID_MESSAGE` FROM `PHONE_MESSAGES` WHERE `FROM` = '%d' ORDER BY `DATE` DESC LIMIT 10);\
			 DELETE FROM `PHONE_MESSAGES` WHERE `TO` = '%d' AND `ID_MESSAGE` NOT IN (SELECT `ID_MESSAGE` FROM `PHONE_MESSAGES` WHERE `TO` = '%d' ORDER BY `DATE` DESC LIMIT 10);",

			PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE[playerid][player_phone_NUMBER],
			PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE[playerid][player_phone_NUMBER]
		);
		Result = db_query(Database, DB_Query);
		db_free_result(Result);
	}
	return 1;
}

SendClientMessageEx(playerid, color, form[], {Float, _}: ...)
{
    #pragma unused form

    static
        tmp[524]
    ;
    new
        t1 = playerid,
        t2 = color
    ;
    const
        n4 = -4,
        n16 = -16,
        size = sizeof tmp
    ;
    #emit stack 28
    #emit push.c size
    #emit push.c tmp
    #emit stack n4
    #emit sysreq.c format
    #emit stack n16

    return (t1 == -1 ? (SendClientMessageToAll(t2, tmp)) : (SendClientMessage(t1, t2, tmp)) );
}

stock TimeConvert(seconds)
{
	new tmp[16];
 	new minutes = floatround(seconds/60);
  	seconds -= minutes*60;
   	format(tmp, sizeof(tmp), "%d:%02d", minutes, seconds);
   	return tmp;
}

stock TimeConvertEx(sec, &days, &hours, &minutes, &seconds)
{
	days = floatround(sec / 86400);
	hours = floatround((sec - (days * 86400)) / 3600);
	minutes = floatround((sec - (days * 86400) - (hours * 3600)) / 60);
	seconds = sec % 60;
   	return 1;
}

ProxDetector(playerid, Float:radi, string[], col1, col2, col3, col4, col5)
{
	new Float:oldposx, Float:oldposy, Float:oldposz, current_vw = GetPlayerVirtualWorld(playerid), current_int = GetPlayerInterior(playerid);
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!PLAYER_TEMP[i][pt_USER_LOGGED]) continue;
		if(GetPlayerVirtualWorld(i) != current_vw) continue;
		if(GetPlayerInterior(i) != current_int) continue;

		if(IsPlayerInRangeOfPoint(i, radi/16, oldposx, oldposy, oldposz)) SendClientMessage(i, col1, string);
		else if(IsPlayerInRangeOfPoint(i, radi/8, oldposx, oldposy, oldposz)) SendClientMessage(i, col2, string);
		else if(IsPlayerInRangeOfPoint(i, radi/4, oldposx, oldposy, oldposz)) SendClientMessage(i, col3, string);
		else if(IsPlayerInRangeOfPoint(i, radi/2, oldposx, oldposy, oldposz)) SendClientMessage(i, col4, string);
		else if(IsPlayerInRangeOfPoint(i, radi, oldposx, oldposy, oldposz)) SendClientMessage(i, col5, string);
	}
	return 1;
}

NearbyMessage(Float:pos_x, Float:pos_y, Float:pos_z, current_int, current_vw, Float:radi, col, string[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!PLAYER_TEMP[i][pt_USER_LOGGED]) continue;
		if(GetPlayerVirtualWorld(i) != current_vw) continue;
		if(GetPlayerInterior(i) != current_int) continue;

		if(IsPlayerInRangeOfPoint(i, radi, pos_x, pos_y, pos_z)) SendClientMessage(i, col, string);
	}
	return 1;
}

IsValidName(name[])
{
	for(new c = 0; c < strlen(name); c++)
	{
	    switch(name[c])
	    {
	        case 'A' .. 'Z', 'a' .. 'z', '_': continue;
	        default: return false;
	    }
	}
	return true;
}

NickSpam(SPAM[])
{
    new SSPAM;
    new CUENTAP,CUENTAN,CUENTAGB;
	for(SSPAM = 0; SSPAM < strlen(SPAM); SSPAM ++)
	{
	    if(SPAM[SSPAM] == '.') CUENTAP ++;
	    if(SPAM[SSPAM] == '0' || SPAM[SSPAM] == '1' || SPAM[SSPAM] == '2' || SPAM[SSPAM] == '3' || SPAM[SSPAM] == '4' || SPAM[SSPAM] == '5' || SPAM[SSPAM] == '6' || SPAM[SSPAM] == '7' || SPAM[SSPAM] == '8' || SPAM[SSPAM] == '9') CUENTAN ++; //Cuenta los Numeros
	    if(SPAM[SSPAM] == '_') CUENTAGB ++;
	}
 	if(CUENTAP >= 3 && CUENTAN >= 7) return 1;
 	if(CUENTAGB > 1) return 1;
 	if((strfind(SPAM, ".com", true) != -1 || strfind(SPAM, ".com.ar", true) != -1 || strfind(SPAM, ".org", true) != -1 || strfind(SPAM, ".ru", true) != -1 || strfind(SPAM, ".net", true) != -1 || strfind(SPAM, ".es", true) != -1 || strfind(SPAM, ".exe", true) != -1) && CUENTAN >= 4 ) return 1;
 	if(strfind(SPAM, "juega", true) != -1 && strfind(SPAM, "megarp", true) != -1) return 1;
 	if(strfind(SPAM, "juega", true) != -1 && strfind(SPAM, "mega", true) != -1) return 1;
 	if(strfind(SPAM, "mega", true) != -1 && strfind(SPAM, "roleplay", true) != -1) return 1;
	if(strfind(SPAM, "mega", true) != -1 && strfind(SPAM, "rp", true) != -1) return 1;
 	if(strfind(SPAM, "megarp", true) != -1) return 1;
 	if(strfind(SPAM, "superdanova", true) != -1 && strfind(SPAM, "roleplay", true) != -1) return 1;
 	if(strfind(SPAM, "superdanova", true) != -1 && strfind(SPAM, "rp", true) != -1) return 1;
	if(strfind(SPAM, "super", true) != -1 && strfind(SPAM, "danova", true) != -1) return 1;
	if(strfind(SPAM, "golden", true) != -1 && strfind(SPAM, "state", true) != -1) return 1;
	if(strfind(SPAM, "nextgaming", true) != -1) return 1;
	if(strfind(SPAM, "next", true) != -1 && strfind(SPAM, "gaming", true) != -1) return 1;
 	if(strfind(SPAM, "gaming", true) != -1) return 1;
 	if(strfind(SPAM, "next", true) != -1) return 1;
 	if(strfind(SPAM, "mega", true) != -1) return 1;
 	if(strfind(SPAM, "danova", true) != -1) return 1;
 	if(strfind(SPAM, "fz", true) != -1) return 1;
 	if(strfind(SPAM, "fenixzone", true) != -1) return 1;
 	if(strfind(SPAM, "fenix", true) != -1 && strfind(SPAM, "zone", true) != -1) return 1;
 	if(strfind(SPAM, "servidor", true) != -1) return 1;
 	if(strfind(SPAM, "server", true) != -1) return 1;
	return 0;
}

DetectarSpam(SPAM[])
{
    new SSPAM;
    new CUENTAP,CUENTAN;
	for(SSPAM = 0; SSPAM < strlen(SPAM); SSPAM ++)
	{
	    if(SPAM[SSPAM] == '.') CUENTAP ++; //Cuenta los Puntos
	    if(SPAM[SSPAM] == '0' || SPAM[SSPAM] == '1' || SPAM[SSPAM] == '2' || SPAM[SSPAM] == '3' || SPAM[SSPAM] == '4' || SPAM[SSPAM] == '5' || SPAM[SSPAM] == '6' || SPAM[SSPAM] == '7' || SPAM[SSPAM] == '8' || SPAM[SSPAM] == '9') CUENTAN ++; //Cuenta los Numeros
	}
 	if(CUENTAP >= 4 && CUENTAN >= 7) return 1;
 	if(strfind(SPAM, ".com", true) != -1 || strfind(SPAM, ".com.ar", true) != -1 || strfind(SPAM, ".org", true) != -1 || strfind(SPAM, ".com", true) != -1 || strfind(SPAM, ".es", true) != -1 || strfind(SPAM, ".tk", true) != -1) return 1;
 	if(strfind(SPAM, "juega", true) != -1 && strfind(SPAM, "megarp", true) != -1) return 1;
 	if(strfind(SPAM, "juega", true) != -1 && strfind(SPAM, "mega", true) != -1) return 1;
 	if(strfind(SPAM, "mega", true) != -1 && strfind(SPAM, "roleplay", true) != -1) return 1;
	if(strfind(SPAM, "mega", true) != -1 && strfind(SPAM, "rp", true) != -1) return 1;
 	if(strfind(SPAM, "megarp", true) != -1) return 1;
 	if(strfind(SPAM, "superdanova", true) != -1 && strfind(SPAM, "roleplay", true) != -1) return 1;
 	if(strfind(SPAM, "superdanova", true) != -1 && strfind(SPAM, "rp", true) != -1) return 1;
	if(strfind(SPAM, "super", true) != -1 && strfind(SPAM, "danova", true) != -1) return 1;
	if(strfind(SPAM, "golden", true) != -1 && strfind(SPAM, "state", true) != -1) return 1;
	if(strfind(SPAM, "nextgaming", true) != -1) return 1;
	if(strfind(SPAM, "next", true) != -1 && strfind(SPAM, "gaming", true) != -1) return 1;
 	if(strfind(SPAM, "gaming", true) != -1) return 1;
 	if(strfind(SPAM, "next", true) != -1) return 1;
 	if(strfind(SPAM, "mega", true) != -1) return 1;
 	if(strfind(SPAM, "danova", true) != -1) return 1;
 	if(strfind(SPAM, "fz", true) != -1) return 1;
 	if(strfind(SPAM, "fenixzone", true) != -1) return 1;
 	if(strfind(SPAM, "fenix", true) != -1 && strfind(SPAM, "zone", true) != -1) return 1;
	return 0;
}

KickEx(playerid, time = 0)
{
	PLAYER_TEMP[playerid][pt_KICKED] = true;
	if(!time) Kick(playerid);
	else
	{
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][0]);
		PLAYER_TEMP[playerid][pt_TIMERS][0] = SetTimerEx("KickPlayer", time, false, "i", playerid);
	}
	return 1;
}

forward KickPlayer(playerid);
public KickPlayer(playerid)
{
	return Kick(playerid);
}

RP_GetPlayerName(playerid)
{
	new name[24];
	format(name, 24, "%s", PLAYER_TEMP[playerid][pt_NAME]);
    for(new i = 0; i < 24; i++) {
		if (name[i] == '_') name[i] = ' ';
	}

	return name;
}

LoadPlayerData(playerid)
{
	new DBResult:Result, DB_Query[1200];
	format(DB_Query, sizeof(DB_Query),
	"\
		SELECT CUENTA.*, REGISTRO.DATE, PERSONAJE.INTERIOR, PERSONAJE.LOCAL_INTERIOR, PERSONAJE.POS_X, PERSONAJE.POS_Y, PERSONAJE.POS_Z, PERSONAJE.ANGLE, PERSONAJE.STATE AS PSTATE FROM `CUENTA`, `REGISTRO`, `PERSONAJE` WHERE CUENTA.`NAME` = '%q' AND REGISTRO.`ID_USER` = CUENTA.`ID` AND PERSONAJE.`ID_USER` = CUENTA.`ID`;\
		UPDATE `CUENTA` SET `CONNECTED` = '1', `PLAYERID` = '%d' WHERE `NAME` = '%q';\
	", PLAYER_TEMP[playerid][pt_NAME], playerid, PLAYER_TEMP[playerid][pt_NAME]);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result))
	{
		ACCOUNT_INFO[playerid][ac_ID] = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "IP", ACCOUNT_INFO[playerid][ac_IP], 16);
		db_get_field_assoc(Result, "NAME", ACCOUNT_INFO[playerid][ac_NAME], 24);
		db_get_field_assoc(Result, "EMAIL", ACCOUNT_INFO[playerid][ac_EMAIL], 32);
		db_get_field_assoc(Result, "PASS", ACCOUNT_INFO[playerid][ac_PASS], 64 + 1);
		db_get_field_assoc(Result, "SALT", ACCOUNT_INFO[playerid][ac_SALT], 16);

		db_get_field_assoc(Result, "LAST_CONNECTION", ACCOUNT_INFO[playerid][ac_LAST_CONNECTION], 24);
		ACCOUNT_INFO[playerid][ac_TIME_PLAYING] = db_get_field_assoc_int(Result, "TIME-PLAYING");
		ACCOUNT_INFO[playerid][ac_LEVEL] = db_get_field_assoc_int(Result, "LEVEL");
		ACCOUNT_INFO[playerid][ac_REP] = db_get_field_assoc_int(Result, "REP");
		ACCOUNT_INFO[playerid][ac_STATE] = db_get_field_assoc_int(Result, "STATE");
		db_get_field_assoc(Result, "DATE", ACCOUNT_INFO[playerid][reg_DATE], 24);
		ACCOUNT_INFO[playerid][ac_DOUBT_CHANNEL] = db_get_field_assoc_int(Result, "DOUBT_CHANNEL");
		ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = db_get_field_assoc_int(Result, "TIME_FOR_REP");
		ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] = db_get_field_assoc_int(Result, "ADMIN_LEVEL");
		ACCOUNT_INFO[playerid][ac_TEMP_LVL_ADM] = db_get_field_assoc_int(Result, "ADMIN_LEVEL");
		ACCOUNT_INFO[playerid][ac_PAYDAY_REP] = db_get_field_assoc_int(Result, "PAYDAY_REP");
		ACCOUNT_INFO[playerid][ac_SU] = db_get_field_assoc_int(Result, "SU");
		db_get_field_assoc(Result, "SU_EXPIRE_DATE", ACCOUNT_INFO[playerid][ac_SU_EXPIRE_DATE], 24);
		ACCOUNT_INFO[playerid][ac_SD] = db_get_field_assoc_int(Result, "SD");
		ACCOUNT_INFO[playerid][ac_WARN_STATUS] = db_get_field_assoc_int(Result, "WARN_STATUS");
		ACCOUNT_INFO[playerid][ac_BLACK_SAPD] = db_get_field_assoc_int(Result, "BLACK_SAPD");


		CHARACTER_INFO[playerid][ch_INTERIOR] = db_get_field_assoc_int(Result, "INTERIOR");
		CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = db_get_field_assoc_int(Result, "LOCAL_INTERIOR");
		CHARACTER_INFO[playerid][ch_POS][0] = db_get_field_assoc_float(Result, "POS_X");
		CHARACTER_INFO[playerid][ch_POS][1] = db_get_field_assoc_float(Result, "POS_Y");
		CHARACTER_INFO[playerid][ch_POS][2] = db_get_field_assoc_float(Result, "POS_Z");
		CHARACTER_INFO[playerid][ch_ANGLE] = db_get_field_assoc_float(Result, "ANGLE");
		CHARACTER_INFO[playerid][ch_STATE] = db_get_field_assoc_int(Result, "PSTATE");

		switch(CHARACTER_INFO[playerid][ch_STATE])
		{
			case ROLEPLAY_STATE_INTERIOR:
			{
				new index = GetEnterExitIndexById(CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA]);
				if(index == -1)
				{
					CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
					CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
					CHARACTER_INFO[playerid][ch_POS][0] = New_User_Pos[0];
					CHARACTER_INFO[playerid][ch_POS][1] = New_User_Pos[1];
					CHARACTER_INFO[playerid][ch_POS][2] = New_User_Pos[2];
					CHARACTER_INFO[playerid][ch_ANGLE] = New_User_Pos[3];
					CHARACTER_INFO[playerid][ch_INTERIOR] = 0;
				}
				else
				{
					CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
					CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
					CHARACTER_INFO[playerid][ch_POS][0] = ENTER_EXIT[index][ee_EXT_X];
					CHARACTER_INFO[playerid][ch_POS][1] = ENTER_EXIT[index][ee_EXT_Y];
					CHARACTER_INFO[playerid][ch_POS][2] = ENTER_EXIT[index][ee_EXT_Z];
					CHARACTER_INFO[playerid][ch_ANGLE] = ENTER_EXIT[index][ee_EXT_ANGLE];
					CHARACTER_INFO[playerid][ch_INTERIOR] = ENTER_EXIT[index][ee_EXT_INTERIOR];
				}
			}
			case ROLEPLAY_STATE_OWN_PROPERTY:
			{
				new index = GetPropertyIndexByID(CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA]);
				if(index == -1)
				{
					CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
					CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
					CHARACTER_INFO[playerid][ch_POS][0] = New_User_Pos[0];
					CHARACTER_INFO[playerid][ch_POS][1] = New_User_Pos[1];
					CHARACTER_INFO[playerid][ch_POS][2] = New_User_Pos[2];
					CHARACTER_INFO[playerid][ch_ANGLE] = New_User_Pos[3];
					CHARACTER_INFO[playerid][ch_INTERIOR] = 0;
				}
				else
				{
					if(PROPERTY_INFO[index][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
					{
						CHARACTER_INFO[playerid][ch_POS][0] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_X];
						CHARACTER_INFO[playerid][ch_POS][1] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_Y];
						CHARACTER_INFO[playerid][ch_POS][2] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_Z];
						CHARACTER_INFO[playerid][ch_ANGLE] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_ANGLE];
						CHARACTER_INFO[playerid][ch_INTERIOR] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_INTERIOR];
					}
					else
					{
						CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
						CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
						CHARACTER_INFO[playerid][ch_POS][0] = PROPERTY_INFO[index][property_EXT_X];
						CHARACTER_INFO[playerid][ch_POS][1] = PROPERTY_INFO[index][property_EXT_Y];
						CHARACTER_INFO[playerid][ch_POS][2] = PROPERTY_INFO[index][property_EXT_Z];
						CHARACTER_INFO[playerid][ch_ANGLE] = PROPERTY_INFO[index][property_EXT_ANGLE];
						CHARACTER_INFO[playerid][ch_INTERIOR] = PROPERTY_INFO[index][property_EXT_INTERIOR];
					}
				}
			}
			case ROLEPLAY_STATE_GUEST_PROPERTY:
			{
				new index = GetPropertyIndexByID(CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA]);
				if(index == -1)
				{
					CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
					CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
					CHARACTER_INFO[playerid][ch_POS][0] = New_User_Pos[0];
					CHARACTER_INFO[playerid][ch_POS][1] = New_User_Pos[1];
					CHARACTER_INFO[playerid][ch_POS][2] = New_User_Pos[2];
					CHARACTER_INFO[playerid][ch_ANGLE] = New_User_Pos[3];
					CHARACTER_INFO[playerid][ch_INTERIOR] = 0;
				}
				else
				{
					CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
					CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
					CHARACTER_INFO[playerid][ch_POS][0] = PROPERTY_INFO[index][property_EXT_X];
					CHARACTER_INFO[playerid][ch_POS][1] = PROPERTY_INFO[index][property_EXT_Y];
					CHARACTER_INFO[playerid][ch_POS][2] = PROPERTY_INFO[index][property_EXT_Z];
					CHARACTER_INFO[playerid][ch_ANGLE] = PROPERTY_INFO[index][property_EXT_ANGLE];
					CHARACTER_INFO[playerid][ch_INTERIOR] = PROPERTY_INFO[index][property_EXT_INTERIOR];
				}
			}
		}
	}
	db_free_result(Result);
	return 1;
}

LoadCharacterData(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[80];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PERSONAJE` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result))
	{
		CHARACTER_INFO[playerid][ch_SKIN] = db_get_field_assoc_int(Result, "SKIN");
		CHARACTER_INFO[playerid][ch_CASH] = db_get_field_assoc_int(Result, "CASH");
		/*CHARACTER_INFO[playerid][ch_POS][0] = db_get_field_assoc_float(Result, "POS_X");
		CHARACTER_INFO[playerid][ch_POS][1] = db_get_field_assoc_float(Result, "POS_Y");
		CHARACTER_INFO[playerid][ch_POS][2] = db_get_field_assoc_float(Result, "POS_Z");
		CHARACTER_INFO[playerid][ch_ANGLE] = db_get_field_assoc_float(Result, "ANGLE");
		CHARACTER_INFO[playerid][ch_STATE] = db_get_field_assoc_int(Result, "STATE");
		CHARACTER_INFO[playerid][ch_INTERIOR] = db_get_field_assoc_int(Result, "INTERIOR");
		CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = db_get_field_assoc_int(Result, "LOCAL_INTERIOR");*/
		CHARACTER_INFO[playerid][ch_FIGHT_STYLE] = db_get_field_assoc_int(Result, "FIGHT_STYLE");
		CHARACTER_INFO[playerid][ch_HEALTH] = db_get_field_assoc_float(Result, "HEALTH");
		CHARACTER_INFO[playerid][ch_ARMOUR] = db_get_field_assoc_float(Result, "ARMOUR");
		CHARACTER_INFO[playerid][ch_SEX] = db_get_field_assoc_int(Result, "SEX");
		CHARACTER_INFO[playerid][ch_HUNGRY] = db_get_field_assoc_float(Result, "HUNGRY");
		CHARACTER_INFO[playerid][ch_THIRST] = db_get_field_assoc_float(Result, "THIRST");
		CHARACTER_INFO[playerid][ch_BLACK_MARKET_LEVEL] = db_get_field_assoc_int(Result, "BLACK_MARKET_LEVEL");
		CHARACTER_INFO[playerid][ch_WANTED_LEVEL] = db_get_field_assoc_int(Result, "WANTED_LEVEL");
		CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = db_get_field_assoc_int(Result, "POLICE_JAIL_TIME");
		CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] = db_get_field_assoc_int(Result, "POLICE_JAIL_ID");
	}
	db_free_result(Result);
	return 1;
}

LoadPlayerBankAccountData(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[85];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `BANK_ACCOUNTS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result))
	{
		BANK_ACCOUNT[playerid][bank_account_ID] = db_get_field_assoc_int(Result, "ID_ACCOUNT");
		BANK_ACCOUNT[playerid][bank_account_BALANCE] = db_get_field_assoc_int(Result, "BALANCE");
	}
	db_free_result(Result);
	return 1;
}

LoadPlayerObjectsData(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[85];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_OBJECT` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result))
	{
		PLAYER_OBJECT[playerid][po_GPS] = db_get_field_assoc_int(Result, "GPS");
		PLAYER_OBJECT[playerid][po_MP3] = db_get_field_assoc_int(Result, "MP3");
		PLAYER_OBJECT[playerid][po_PHONE_RESOLVER] = db_get_field_assoc_int(Result, "PHONE_RESOLVER");
	}
	db_free_result(Result);
	return 1;
}

LoadPlayerPhoneData(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[100];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PHONE` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result))
	{
		PLAYER_PHONE[playerid][player_phone_VALID] = true;
		PLAYER_PHONE[playerid][player_phone_NUMBER] = db_get_field_assoc_int(Result, "PHONE_NUMBER");
		PLAYER_PHONE[playerid][player_phone_STATE] = db_get_field_assoc_int(Result, "PHONE_STATE");
		PLAYER_PHONE[playerid][player_phone_VISIBLE_NUMBER] = db_get_field_assoc_int(Result, "VISIBLE_NUMBER");
	}
	db_free_result(Result);


	DB_Query[0] = EOS;
	new DBResult:Result_phonebook;
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PHONE_BOOK` WHERE `PHONE_ID` = '%d' LIMIT %d;", PLAYER_PHONE[playerid][player_phone_NUMBER], MAX_PHONE_CONTACTS);
	Result_phonebook = db_query(Database, DB_Query);

	new index;
	for(new i; i < db_num_rows(Result_phonebook); i++ )
	{
		if(index >= MAX_PHONE_CONTACTS)
		{
			printf("---> Límite superado en array 'PB' al intentar cargar de la base de datos.");
			break;
		}

		PLAYER_PHONE_BOOK[playerid][index][phone_book_contact_VALID] = true;

		PLAYER_PHONE_BOOK[playerid][index][phone_book_contact_ID] = db_get_field_assoc_int(Result_phonebook, "CONTACT_ID");
		db_get_field_assoc(Result_phonebook, "NAME", PLAYER_PHONE_BOOK[playerid][index][phone_book_contact_NAME], 24);
		PLAYER_PHONE_BOOK[playerid][index][phone_book_contact_PHONE_NUMBER] = db_get_field_assoc_int(Result_phonebook, "PHONE_NUMBER");

		index ++;
		db_next_row(Result_phonebook);
	}
	db_free_result(Result_phonebook);
	return 1;
}

RegisterNewPlayerPhone(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DB_Query[200];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PHONE`\
		(\
			`PHONE_NUMBER`, `ID_USER`\
		)\
		VALUES\
		(\
			'%d', '%d'\
		);\
	",
		PLAYER_PHONE[playerid][player_phone_NUMBER], ACCOUNT_INFO[playerid][ac_ID]
	);
	db_query(Database, DB_Query);
	return 1;
}

RegisterNewPlayerPhoneBook(playerid, slot)
{
	new DBResult:Result, DB_Query[300];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PHONE_BOOK`\
		(\
			`PHONE_ID`, `NAME`, `PHONE_NUMBER`\
		)\
		VALUES\
		(\
			'%d', '%q', '%d'\
		);\
		SELECT MAX(`CONTACT_ID`) FROM `PHONE_BOOK`;\
	",
		PLAYER_PHONE[playerid][player_phone_NUMBER], PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER]
	);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result)) PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);
	return 1;
}

RegisterPhoneMessage(from, to, message[], offline = 0)
{
	new DB_Query[300];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PHONE_MESSAGES`\
		(\
			`FROM`, `TO`, `MESSAGE`, `OFFLINE`\
		)\
		VALUES\
		(\
			'%d', '%d', '%q', '%d'\
		);\
	", from, to, message, offline);
	db_query(Database, DB_Query);
	return 1;
}


forward NoCallResponse(playerid);
public NoCallResponse(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return 0;
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return 0;
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] != CALL_STATE_WAITING_RESPONSE) return 0;
    ShowPlayerMessage(playerid, "Llamada cancelada porque nadie contesto.", 4);
	EndPhoneCall(playerid);
	return 1;
}

EndPhoneCall(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return 0;

	if(PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] || PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION])
	{
		PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = false;
		return 1;
	}

	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return 0;
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] == CALL_GAME_STATE_NONE) return 0;

	new to_playerid = PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID];
	switch(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE])
	{
		case CALL_STATE_WAITING_RESPONSE:
		{
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][6]);

			PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = false;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
		}
		case CALL_STATE_INCOMING_CALL:
		{
			SendClientMessage(to_playerid, -1, "{FFFFFF}No respondieron el teléfono...");
			KillTimer(PLAYER_TEMP[to_playerid][pt_TIMERS][6]);

			PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = false;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
		}
		case CALL_STATE_ESTABLISHED:
		{
			SendClientMessage(to_playerid, -1, "{f47d42}Llamada finalizada.");
			PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = false;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			SetPlayerSpecialAction(to_playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		}
	}

	PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = false;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
	return 1;
}

convertPhoneNumber(playerid, number)
{
	new f_string[24], bool:exists;
	for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
	{
		if(!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) continue;
		if(number == PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER])
		{
			exists = true;
			format(f_string, sizeof f_string, "%s", PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME]);
			break;
		}
	}

	if(!exists) format(f_string, sizeof f_string, "%s", number_format_dash(number));
	return f_string;
}

GetEmptyPlayerPhoneBookSlot(playerid)
{
	for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
	{
		if(!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) return i;
	}
	return -1;
}

RegisterNewPlayerPocketObject(playerid, slot)
{
	new DBResult:Result, DB_Query[350];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PLAYER_POCKET`\
		(\
			`ID_USER`, `NAME`, `HUNGRY`, `THIRST`, `DRUNK`\
		)\
		VALUES\
		(\
			'%d', '%q', '%f', '%f', '%d'\
		);\
		SELECT MAX(`ID_OBJECT`) FROM `PLAYER_POCKET`;\
	",
		ACCOUNT_INFO[playerid][ac_ID], PLAYER_POCKET[playerid][slot][player_pocket_object_NAME], PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY], PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST], PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK]
	);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result)) PLAYER_POCKET[playerid][slot][player_pocket_object_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);
	return 1;
}

LoadPlayerPocketData(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[90];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_POCKET` WHERE `ID_USER` = '%d' LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], MAX_PLAYER_POCKET_OBJECTS);
	Result = db_query(Database, DB_Query);

	new index;
	for(new i; i < db_num_rows(Result); i++ )
	{
		if(index >= MAX_PLAYER_POCKET_OBJECTS)
		{
			printf("---> Límite superado en array 'PP' al intentar cargar de la base de datos.");
			break;
		}

		PLAYER_POCKET[playerid][index][player_pocket_VALID] = true;

		PLAYER_POCKET[playerid][index][player_pocket_object_ID] = db_get_field_assoc_int(Result, "ID_OBJECT");
		db_get_field_assoc(Result, "NAME", PLAYER_POCKET[playerid][index][player_pocket_object_NAME], 24);
		PLAYER_POCKET[playerid][index][player_pocket_object_HUNGRY] = db_get_field_assoc_float(Result, "HUNGRY");
		PLAYER_POCKET[playerid][index][player_pocket_object_THIRST] = db_get_field_assoc_float(Result, "THIRST");
		PLAYER_POCKET[playerid][index][player_pocket_object_DRUNK] = db_get_field_assoc_int(Result, "DRUNK");

		index ++;
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

TransferPlayerPocketObject(from_playerid, from_slot, to_playerid, to_slot)
{
	new DB_Query[130];
	format(DB_Query, sizeof(DB_Query), "UPDATE `PLAYER_POCKET` SET `ID_USER` = '%d' WHERE `ID_OBJECT` = '%d';", ACCOUNT_INFO[to_playerid][ac_ID], PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_ID]);
	db_query(Database, DB_Query);

	PLAYER_POCKET[to_playerid][to_slot][player_pocket_VALID] = true;
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_ID] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_ID];
	format(PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_NAME], 24, "%s", PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_NAME]);
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_HUNGRY] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_HUNGRY];
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_THIRST] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_THIRST];
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_DRUNK] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_DRUNK];

	PLAYER_POCKET[from_playerid][from_slot][player_pocket_VALID] = false;
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_ID] = 0;
	format(PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_NAME], 24, "");
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_HUNGRY] = 0.0;
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_THIRST] = 0.0;
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_DRUNK] = 0;
	return 1;
}

DeletePlayerPocketObject(playerid, slot)
{
	new DB_Query[140];
	format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_POCKET` WHERE `ID_OBJECT` = '%d' AND `ID_USER` = '%d';", PLAYER_POCKET[playerid][slot][player_pocket_object_ID], ACCOUNT_INFO[playerid][ac_ID]);
	db_query(Database, DB_Query);

	PLAYER_POCKET[playerid][slot][player_pocket_VALID] = false;
	PLAYER_POCKET[playerid][slot][player_pocket_object_ID] = 0;
	format(PLAYER_POCKET[playerid][slot][player_pocket_object_NAME], 24, "");
	PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY] = 0.0;
	PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST] = 0.0;
	PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK] = 0;
	return 1;
}

GetEmptyPlayerPocketSlot(playerid)
{
	for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++)
	{
		if(!PLAYER_POCKET[playerid][i][player_pocket_VALID]) return i;
	}
	return -1;
}

LoadPlayerGPSData(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[90];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_GPS` WHERE `ID_USER` = '%d' LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], MAX_PLAYER_GPS_SAVES);
	Result = db_query(Database, DB_Query);

	new index;
	for(new i; i < db_num_rows(Result); i++ )
	{
		if(index >= MAX_PLAYER_GPS_SAVES)
		{
			printf("---> Límite superado en array 'P_GPS' al intentar cargar de la base de datos.");
			break;
		}

		PLAYER_GPS[playerid][index][player_gps_VALID] = true;

		PLAYER_GPS[playerid][index][player_gps_ID] = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", PLAYER_GPS[playerid][index][player_gps_NAME], 24);
		PLAYER_GPS[playerid][index][player_gps_X] = db_get_field_assoc_float(Result, "X");
		PLAYER_GPS[playerid][index][player_gps_Y] = db_get_field_assoc_float(Result, "Y");
		PLAYER_GPS[playerid][index][player_gps_Z] = db_get_field_assoc_float(Result, "Z");
		PLAYER_GPS[playerid][index][player_gps_WORLD] = db_get_field_assoc_int(Result, "WORLD");
		PLAYER_GPS[playerid][index][player_gps_INTERIOR] = db_get_field_assoc_int(Result, "INTERIOR");

		index ++;
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

LoadPlayerToysData(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[90];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_TOYS` WHERE `ID_USER` = '%d' LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], MAX_PLAYER_ATTACHED_OBJECTS);
	Result = db_query(Database, DB_Query);

	new index;
	for(new i; i < db_num_rows(Result); i++ )
	{
		if(index >= MAX_PLAYER_ATTACHED_OBJECTS)
		{
			printf("---> Límite superado en array 'PTOYS' al intentar cargar de la base de datos.");
			break;
		}

		PLAYER_TOYS[playerid][index][player_toy_VALID] = true;

		PLAYER_TOYS[playerid][index][player_toy_ID] = db_get_field_assoc_int(Result, "ID_TOY");
		db_get_field_assoc(Result, "NAME", PLAYER_TOYS[playerid][index][player_toy_NAME], 24);
		PLAYER_TOYS[playerid][index][player_toy_ATTACHED] = db_get_field_assoc_int(Result, "ATTACHED");
		PLAYER_TOYS[playerid][index][player_toy_MODELID] = db_get_field_assoc_int(Result, "MODELID");
		PLAYER_TOYS[playerid][index][player_toy_BONE] = db_get_field_assoc_int(Result, "BONE");
		PLAYER_TOYS[playerid][index][player_toy_OFFSET_X] = db_get_field_assoc_float(Result, "OFFSET_X");
		PLAYER_TOYS[playerid][index][player_toy_OFFSET_Y] = db_get_field_assoc_float(Result, "OFFSET_Y");
		PLAYER_TOYS[playerid][index][player_toy_OFFSET_Z] = db_get_field_assoc_float(Result, "OFFSET_Z");
		PLAYER_TOYS[playerid][index][player_toy_ROT_X] = db_get_field_assoc_float(Result, "ROT_X");
		PLAYER_TOYS[playerid][index][player_toy_ROT_Y] = db_get_field_assoc_float(Result, "ROT_Y");
		PLAYER_TOYS[playerid][index][player_toy_ROT_Z] = db_get_field_assoc_float(Result, "ROT_Z");
		PLAYER_TOYS[playerid][index][player_toy_SCALE_X] = db_get_field_assoc_float(Result, "SCALE_X");
		PLAYER_TOYS[playerid][index][player_toy_SCALE_Y] = db_get_field_assoc_float(Result, "SCALE_Y");
		PLAYER_TOYS[playerid][index][player_toy_SCALE_Z] = db_get_field_assoc_float(Result, "SCALE_Z");
		PLAYER_TOYS[playerid][index][player_toy_COLOR_1] = db_get_field_assoc_int(Result, "COLOR_1");
		PLAYER_TOYS[playerid][index][player_toy_COLOR_2] = db_get_field_assoc_int(Result, "COLOR_2");

		index ++;
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

SavePlayerToysData(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_USER_EXIT] || !PLAYER_TEMP[playerid][pt_USER_LOGGED]) return 0;

	for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
	{
		if(!PLAYER_TOYS[playerid][i][player_toy_VALID]) continue;

		new DB_Query[1000];
		format(DB_Query, sizeof(DB_Query), "\
			UPDATE `PLAYER_TOYS` SET \
				`NAME` = '%q',\
				`ATTACHED` = '%d',\
				`MODELID` = '%d',\
				`BONE` = '%d',\
				`OFFSET_X` = '%f',\
				`OFFSET_Y` = '%f',\
				`OFFSET_Z` = '%f',\
				`ROT_X` = '%f',\
				`ROT_Y` = '%f',\
				`ROT_Z` = '%f',\
				`SCALE_X` = '%f',\
				`SCALE_Y` = '%f',\
				`SCALE_Z` = '%f',\
				`COLOR_1` = '%d',\
				`COLOR_2` = '%d' \
			WHERE `ID_TOY` = '%d';\
		",
			PLAYER_TOYS[playerid][i][player_toy_NAME], PLAYER_TOYS[playerid][i][player_toy_ATTACHED],
			PLAYER_TOYS[playerid][i][player_toy_MODELID], PLAYER_TOYS[playerid][i][player_toy_BONE],
			PLAYER_TOYS[playerid][i][player_toy_OFFSET_X], PLAYER_TOYS[playerid][i][player_toy_OFFSET_Y], PLAYER_TOYS[playerid][i][player_toy_OFFSET_Z],
			PLAYER_TOYS[playerid][i][player_toy_ROT_X], PLAYER_TOYS[playerid][i][player_toy_ROT_Y], PLAYER_TOYS[playerid][i][player_toy_ROT_Z],
			PLAYER_TOYS[playerid][i][player_toy_SCALE_X], PLAYER_TOYS[playerid][i][player_toy_SCALE_Y], PLAYER_TOYS[playerid][i][player_toy_SCALE_Z],
			PLAYER_TOYS[playerid][i][player_toy_COLOR_1], PLAYER_TOYS[playerid][i][player_toy_COLOR_2],

			PLAYER_TOYS[playerid][i][player_toy_ID]
		);

		db_query(Database, DB_Query);
	}
	return 1;
}

GetEmptyPlayerToySlot(playerid)
{
	for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
	{
		if(!PLAYER_TOYS[playerid][i][player_toy_VALID]) return i;
	}
	return -1;
}

stock minrand(min, max) //By Alex "Y_Less" Cole
{
	return random(max - min) + min;
}

//PARA QUE PASEN 24 HORAS EN EL JUEGO EN		1 MINUTO REAL    NECESITO UN TIMER DE 125/3 MS
SetMyWorldTime(minutes_for_day)
{
	new interval = floatround(floatmul(float(minutes_for_day), floatdiv(125, 3)));

	SERVER_TIME[0] = 15;
	SERVER_TIME[1] = 0;
	UpdateServerTimeTextDraw();

	SetTimer("UpdateWorldTime", interval, true);
	return 1;
}

forward UpdateWorldTime();
public UpdateWorldTime()
{
	SERVER_TIME[1] ++;
	if(SERVER_TIME[1] == 60)
	{
		SERVER_TIME[0] ++;
		if(SERVER_TIME[0] == 24) SERVER_TIME[0] = 0;
		SERVER_TIME[1] = 0;
	}

	UpdateServerTimeTextDraw();
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_DEAD)
			{
				SetPlayerTime(i, SERVER_TIME[0], SERVER_TIME[1]);
				SetPlayerWeather(i, SERVER_WEATHER);
			}
		}
 	}
	return 1;
}

UpdateServerTimeTextDraw()
{
	new td_str[16]; format(td_str, sizeof td_str, "%02d:%02d", SERVER_TIME[0], SERVER_TIME[1]);
	TextDrawSetString(Textdraws[textdraw_iPhone][6], td_str);
	TextDrawSetString(Textdraws[textdraw_iPhone][5], td_str);
	return 1;
}

SendMessageToDoubtChannel(playerid, message[])
{
    if(DetectarSpam(message))
    {
	    ShowPlayerDialog(playerid, 833, DIALOG_STYLE_MSGBOX, "{FF0000}ITZN - Advertencia", "{FFFFFF}Procura no envíar mensajes que falten el respeto a la comunidad.", "Salir", "");
	    return 0;
    }
    
	new str[540];
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) format(str, 0xff0241FF, "(Canal {ffc4d2}/d{ff0241}) %s - %s (%d){ffc4d2}: %s", ADMIN_LEVELS[ ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] ], PLAYER_TEMP[playerid][pt_RP_NAME], playerid, message);
	else format(str, 0xff0241FF, "(Canal {ffc4d2}/d{ff0241}) nivel %d - %s (%d){ffc4d2}: %s", ACCOUNT_INFO[playerid][ac_LEVEL], PLAYER_TEMP[playerid][pt_RP_NAME], playerid, message);

	PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME] = gettime();
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(strfind(message[0], "fenix", true) != -1 || strfind(message[0], "zone", true) != -1 || strfind(message[0], "danova", true) != -1 || strfind(message[0], "fz", true) != -1) return 1;
			else if((PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_DEAD))
			{
				SendClientMessage(i, 0xff0241FF, str);
			}
		}
	}
	return 1;
}

stock ConvertTime_SecondsToHours(sec, &hours, &minutes, &seconds)
{
	hours = floatround(sec / 3600);
	minutes = floatround((sec - (hours * 3600)) / 60);
	seconds = sec % 60;
   	return 1;
}

CreatePlayerTextDraws(playerid)
{
	for(new i; i < sizeof(PlayerTextdraws[]); i++) PlayerTextdraws[playerid][Player_Textdraws_Enum:i] = INVALID_TEXT_DRAW;

	PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0] = CreatePlayerTextDraw(playerid, 393.176727, 410.666687, "borde");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0.000000, 1.451086);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 233.294143, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], false);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0);

	PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1] = CreatePlayerTextDraw(playerid, 393.058807, 410.416717, "lleno");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 0.000000, 1.498144);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 233.294082, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 0);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], true);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 102);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 0);

	PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2] = CreatePlayerTextDraw(playerid, 393.117858, 410.250030, "sellena");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 6.169879, 1.527310);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 233.764572, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 0);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], true);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 0xFF0000BB);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 0);


	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0] = CreatePlayerTextDraw(playerid, 320.000000, 330.000000, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 0.000000, 6.966667);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 0.000000, 152.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 95);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], -1);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 0);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1] = CreatePlayerTextDraw(playerid, 320.000000,330.000000, "Tienda");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0.354000, 1.533629);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0.000000, 152.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], -3589377);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2] = CreatePlayerTextDraw(playerid, 320.000000, 376.000000, "COMPRAR");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 0.219666, 1.031703);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 10.000000, 43.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1936945921);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], true);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3] = CreatePlayerTextDraw(playerid, 370.000000, 376.000000, "SIGUIENTE");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 0.219666, 1.031703);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 10.000000, 43.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], -1936945921);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], true);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4] = CreatePlayerTextDraw(playerid, 270.000000, 376.000000, "ANTERIOR");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 0.219666, 1.031703);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 10.000000, 43.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], -1936945921);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], true);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5] = CreatePlayerTextDraw(playerid, 320.000000, 350.000000, "Precio:_0$~n~Ropa:_0/0");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 0.200333, 1.098074);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], -121);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0] = CreatePlayerTextDraw(playerid, 320.000000, 159.000000, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0.000000, 15.033352);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0.000000, 240.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 1869574143);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1] = CreatePlayerTextDraw(playerid, 320.000000, 156.000000, "Tienda");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0.000000, 240.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], -1633916417);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2] = CreatePlayerTextDraw(playerid, 215.000000, 184.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 80.000000, 85.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], -19201);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 5);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 18864);
	PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 344.000000, 0.000000, 109.000000, 1.000000);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3] = CreatePlayerTextDraw(playerid, 217.000000, 186.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 76.000000, 81.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], -926365441);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 5);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], Toys_Shop_Sombreros[0][shop_toy_model]);
	PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 344.000000, 0.000000, 109.000000, 1.000000);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4] = CreatePlayerTextDraw(playerid, 311.000000, 207.000000, "Modelo:__~n~Precio:__$");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 0.219000, 1.081481);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5] = CreatePlayerTextDraw(playerid, 363.000000, 233.000000, "Comprar");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 0.188333, 1.189333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 13.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1855979775); // sin dinero color = -900267777
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], true);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6] = CreatePlayerTextDraw(playerid, 404.000000, 233.000000, ">>");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 0.188333, 1.189333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 13.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], -1094795521);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], true);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7] = CreatePlayerTextDraw(playerid, 322.000000, 233.000000, "<<");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 0.188333, 1.189333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 13.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], -1094795521);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], true);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8] = CreatePlayerTextDraw(playerid, 255.000000, 271.000000, "0/0");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 0.163666, 0.832593);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], -66);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9] = CreatePlayerTextDraw(playerid, 320.000000, 284.000000, "Accesorios");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0.000000, 240.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], -1633916417);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0);


	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0] = CreatePlayerTextDraw(playerid, 553.000000, 176.000000, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0.000000, 8.766664);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0.000000, 108.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1] = CreatePlayerTextDraw(playerid, 505.000000, 181.000000, "Interior:_0/0");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 0.300000, 1.438221);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 0);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2] = CreatePlayerTextDraw(playerid, 505.000000, 206.000000, "Anterior");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 0.300000, 1.438221);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 546.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1684301055);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], true);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3] = CreatePlayerTextDraw(playerid, 555.000000, 206.000000, "Siguiente");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 0.300000, 1.438221);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 600.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1684301055);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], true);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4] = CreatePlayerTextDraw(playerid, 505.000000, 230.000000, "Crear");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 0.300000, 1.438221);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 533.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1684301055);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], true);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5] = CreatePlayerTextDraw(playerid, 542.000000, 230.000000, "Cancelar");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 0.300000, 1.438221);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 583.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1684301055);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], true);

 	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0] = CreatePlayerTextDraw(playerid, 541.930847, 382.083709, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0], 35.642749, 41.416633);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0], 842150655);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0], 4);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1] = CreatePlayerTextDraw(playerid, 579.550170, 391.500762, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1], 55.349586, 12.833288);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1], 842150655);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1], 4);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2] = CreatePlayerTextDraw(playerid, 579.550170, 406.500762, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2], 55.349586, 12.833288);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2], 842150655);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2], 4);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3] = CreatePlayerTextDraw(playerid, 560.280334, 390.250061, "202");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], 0.383639, 2.189165);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], 2.352941, 29.749998);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], -231);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], 1);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4] = CreatePlayerTextDraw(playerid, 559.845336, 411.666656, "km/h");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], 0.151078, 0.806666);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], -115);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], true);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4], 1);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5] = CreatePlayerTextDraw(playerid, 607.137084, 393.583465, "GASOLINA");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], 0.175914, 0.987496);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], 7.496335, 103.833335);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], -240);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5], true);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6] = CreatePlayerTextDraw(playerid,579.047058, 406.583374, "candado");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 0.000000, -0.964705);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 14.156266, 12.250000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 16711935);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 0);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], true);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 5);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 19804);
	PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6], 0.000000, 0.000000, 0.000000, 1.000000);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7] = CreatePlayerTextDraw(playerid, 599.169128, 406.583435, "D");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], 0.162327, 1.127500);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], -29.234996, -26.250000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], 3997695);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], true);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7], 1);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8] = CreatePlayerTextDraw(playerid, 594.076049, 408.166931, ".~n~.~n~.");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], 0.450935, 0.269998);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], 33.265003, -28.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], 3997695);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], true);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8], 1);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9] = CreatePlayerTextDraw(playerid, 611.294006, 405.416748, "!");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], 0.373293, 1.407499);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], -14540801);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], true);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9], 1);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10] = CreatePlayerTextDraw(playerid, 613.176086, 395.499847, "llave");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 0.026823, 2.386373);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 24.941236, 33.250049);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 0x000000FF);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 0);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], true);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 5);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 11746);
	PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10], 0.000000, 0.000000, 0.000000, 1.000000);

	PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11] = CreatePlayerTextDraw(playerid, 527.051513, 413.250183, "C|");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11], 0.175914, 0.987496);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11], 7.496335, 103.833335);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11], -167);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11], -256);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11], 1);

	PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0] = CreatePlayerTextDraw(playerid, 268.353088, 431.916778, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0], 93.176452, 9.333346);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0], 50);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0], 4);

	PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1] = CreatePlayerTextDraw(playerid, 268.705963, 400.750000, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1], 93.176452, 40.833343);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1], 50);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1], 4);

	PlayerTextdraws[playerid][ptextdraw_TAXI_METER][2] = CreatePlayerTextDraw(playerid, 268.294219, 400.583312, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][2], 93.176452, 13.416678);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][2], 50);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][2], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][2], 4);

	PlayerTextdraws[playerid][ptextdraw_TAXI_METER][3] = CreatePlayerTextDraw(playerid, 290.823455, 401.916625, "TAXIMETRO");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][3], 0.245764, 1.179998);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][3], -169);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][3], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][3], 1);

	PlayerTextdraws[playerid][ptextdraw_TAXI_METER][4] = CreatePlayerTextDraw(playerid, 314.823272, 431.666625, "TARIFA $50");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][4], 0.184588, 0.929166);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][4], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][4], -176);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][4], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][4], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][4], 1);

	PlayerTextdraws[playerid][ptextdraw_TAXI_METER][5] = CreatePlayerTextDraw(playerid, 312.999908, 413.416595, "$100");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][5], 0.416588, 1.920832);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][5], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][5], -176);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][5], true);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][5], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][5], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][5], 1);

	PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3] = CreatePlayerTextDraw(playerid, 320.000000, 335.000000, "Cargando_cami¦n...");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 0.213333, 1.131259);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], -111);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 0);

	PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1] = CreatePlayerTextDraw(playerid, 260.000000, 350.000000, "Borde");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0.000000, 2.633335);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 380.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], false);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0);

	PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2] = CreatePlayerTextDraw(playerid, 393.058807, 410.416717, "lleno");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 0.000000, 1.498144);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 233.294082, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 0);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], true);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 102);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 0);

	PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3] = CreatePlayerTextDraw(playerid, 393.117858, 410.250030, "sellena");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 6.169879, 1.527310);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 233.764572, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 0);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], true);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 0x00CCFFBB);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 0);

	PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0] = CreatePlayerTextDraw(playerid, 320.000000, 335.000000, "Recogiendo basura...");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 0.213333, 1.131259);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], -111);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 0);

	PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1] = CreatePlayerTextDraw(playerid, 260.000000, 350.000000, "Borde");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0.000000, 2.633335);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 380.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], false);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0);

	PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2] = CreatePlayerTextDraw(playerid, 393.058807, 410.416717, "lleno");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0.000000, 1.498144);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 233.294082, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], true);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 102);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0);

	PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][3] = CreatePlayerTextDraw(playerid, 393.117858, 410.250030, "sellena");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][3], 6.169879, 1.527310);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][3], 233.764572, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][3], 0);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][3], true);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][3], 0x00CCFFBB);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][3], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][3], 0);

	PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0] = CreatePlayerTextDraw(playerid, 260.000000, 350.000000, "Borde");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], 0.000000, 2.633335);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], 380.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], false);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0], 0);

	PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1] = CreatePlayerTextDraw(playerid, 393.058807, 410.416717, "lleno");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1], 0.000000, 1.498144);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1], 233.294082, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1], 0);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1], true);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1], 102);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1], 0);

	PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2] = CreatePlayerTextDraw(playerid, 393.117858, 410.250030, "sellena");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], 6.169879, 1.527310);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], 233.764572, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], 0);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], true);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], 0x00FF00BB);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], 0);

	PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3] = CreatePlayerTextDraw(playerid, 320.000000, 335.000000, "Plantando...");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3], 0.213333, 1.131259);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3], -111);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3], 0);


	PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0] = CreatePlayerTextDraw(playerid, 499.294128, 98.000000, "]]]]]]");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 0.535646, 2.550832);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 41);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 1);

	PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1] = CreatePlayerTextDraw(playerid, 499.294128, 98.000000, "]]]]]]");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 0.535646, 2.550832);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], -231);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 1);

	PlayerTextdraws[playerid][ptextdraw_iPhone][0] = CreatePlayerTextDraw(playerid, 597.525390, 240.999969, "hud:radar_cash");//banco
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][0], 7.964889, 9.916707);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][0], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][0], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][0], 4);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][0], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][1] = CreatePlayerTextDraw(playerid, 585.183105, 345.916748, "hud:arrow");//gps
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][1], 7.964889, 9.916707);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][1], -16776961);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][1], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][1], 4);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][1], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][2] = CreatePlayerTextDraw(playerid, 569.316528, 344.583312, "hud:radar_impound");//localizar
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][2], 7.964889, 9.916707);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][2], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][2], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][2], 4);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][2], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][3] = CreatePlayerTextDraw(playerid, 598.895996, 345.583251, "hud:radar_catalinapink");//contactos
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][3], 7.964889, 9.916707);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][3], 16711935);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][3], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][3], 4);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][3], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][4] = CreatePlayerTextDraw(playerid, 554.918029, 221.749954, "hud:radar_hostpital");//servicio medico
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][4], 7.964889, 9.916707);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][4], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][4], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][4], 4);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][4], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][5] = CreatePlayerTextDraw(playerid, 554.792602, 345.750061, "hud:radar_woozie");//whats
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][5], 7.964889, 9.916707);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][5], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][5], 13314815);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][5], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][5], 4);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][5], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][6] = CreatePlayerTextDraw(playerid, 583.623413, 221.416549, "hud:radar_toreno");//servicio taxi
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][6], 7.964889, 9.916707);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][6], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][6], -5963521);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][6], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][6], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][6], 4);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][6], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][7] = CreatePlayerTextDraw(playerid, 568.225524, 259.749877, "hud:radar_gangy");//
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][7], 7.964889, 9.916707);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][7], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][7], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][7], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][7], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][7], 4);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][7], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][8] = CreatePlayerTextDraw(playerid, 597.805358, 222.2500157, "hud:radar_modgarage");//servicio mecanico
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][8], 7.964889, 9.916707);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][8], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][8], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][8], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][8], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][8], 4);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][8], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][9] = CreatePlayerTextDraw(playerid, 568.819885, 240.749938, "hud:radar_propertyg");//mis propiedades
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][9], 7.964889, 9.916707);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][9], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][9], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][9], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][9], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][9], 4);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][9], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][10] = CreatePlayerTextDraw(playerid, 583.406860, 241.166641, "hud:radar_mcstrap");//musica
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][10], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][10], 7.964889, 9.916707);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][10], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][10], 16777215);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][10], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][10], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][10], 4);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][10], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][11] = CreatePlayerTextDraw(playerid, 554.890136, 259.666473, "hud:radar_sweet");//shop
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][11], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][11], 7.964889, 9.916707);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][11], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][11], -16711681);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][11], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][11], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][11], 4);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][11], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][12] = CreatePlayerTextDraw(playerid, 554.952758, 241.416549, "hud:radar_triadscasino");//llamar
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][12], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][12], 7.964889, 9.916707);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][12], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][12], -16711681);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][12], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][12], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][12], 4);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][12], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][13] = CreatePlayerTextDraw(playerid, 569.036621, 222.166580, "hud:radar_police");//servicio 911
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][13], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][13], 7.964889, 9.916707);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][13], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][13], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][13], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][13], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][13], 4);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][13], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][14] = CreatePlayerTextDraw(playerid, 612.357543, 225.166732, "bloq");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14], 4.685212, 29.166631);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14], 4);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][15] = CreatePlayerTextDraw(playerid, 597.588439, 260.083251, "hud:radar_waypoint");//mapa
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][15], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][15], 7.964889, 9.916707);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][15], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][15], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][15], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][15], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][15], 4);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][15], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][16] = CreatePlayerTextDraw(playerid, 583.127319, 259.916564, "hud:radar_enemyattack");//folletos
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][16], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][16], 7.964889, 9.916707);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][16], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][16], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][16], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][16], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][16], 4);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][16], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0] = CreatePlayerTextDraw(playerid, 275.000000, 325.000000, "+_Publicar_anuncio");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 10.000000, 80.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1] = CreatePlayerTextDraw(playerid, 365.000000, 325.000000, "-_Mis_anuncios");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 10.000000, 80.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2] = CreatePlayerTextDraw(playerid, 320.000000, 307.000000, "Cerrar");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 10.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3] = CreatePlayerTextDraw(playerid, 380.000000, 307.000000, "Siguiente");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 10.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4] = CreatePlayerTextDraw(playerid, 260.000000, 307.000000, "Anterior");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 10.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE] = CreatePlayerTextDraw(playerid, 320.000000, 134.000000, "-_0/0_-");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 0.169000, 0.766222);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 0);

	PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER] = CreatePlayerTextDraw(playerid, 320.000000, 152.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 0.214666, 0.936296);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 0);

	PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO] = CreatePlayerTextDraw(playerid, 321.000000, 181.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 0.259333, 1.181036);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], -36);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 0);

	PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP] = CreatePlayerTextDraw(playerid, 320.000000, 350.000000, "Objeto:_0/0~n~Precio:_0$");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 0.200333, 1.098074);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], -121);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 0);

	PlayerTextdraws[playerid][ptextdraw_MESSAGE] = CreatePlayerTextDraw(playerid, 314.823455, 373.916717, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 0.288116, 1.296666);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 1);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 1);

	PlayerTextdraws[playerid][ptextdraw_NOTIFY] = CreatePlayerTextDraw(playerid, 488.199157, 131.249969, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFY], 0.249472, 1.261666);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFY], 626.881469, 181.999984);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFY], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFY], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFY], true);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFY], 100);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFY], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFY], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFY], 48);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFY], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFY], 1);
	return 1;
}

DestroyPlayerTextDraws(playerid)
{
	for(new i; i < sizeof(PlayerTextdraws[]); i++)
	{
		if(PlayerTextdraws[playerid][Player_Textdraws_Enum:i] == INVALID_TEXT_DRAW) continue;
		PlayerTextDrawDestroy(playerid, PlayerText:PlayerTextdraws[playerid][Player_Textdraws_Enum:i]);
		PlayerTextdraws[playerid][Player_Textdraws_Enum:i] = INVALID_TEXT_DRAW;
	}
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if(clickedid == Text:INVALID_TEXT_DRAW)
    {
		PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW] = false;

		if(PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED])
		{
			ExitPlayerPropertyConstructor(playerid);
			return 1;
		}

		if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] != -1) // Tiene abierto el menú de ropa
		{
			ClosePlayerClothingMenu(playerid);
			ExitPlayerWardrobe(playerid);
		}

		if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE])
		{
		    HidePlayeriPhone(playerid);
		    HidePlayeriPhoneApps(playerid);
		}

		if(PLAYER_TEMP[playerid][pt_TOYS_SHOP]) ClosePlayerToysMenu(playerid);

		if(PLAYER_TEMP[playerid][pt_SHOP]) HidePlayerShop(playerid);

		if(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_SHOP])
		{
			CancelPlayerTuningShop(playerid);
			ShowDialog(playerid, DIALOG_VOBJECT_MENU);
		}
		return 1;
	}

	if(PLAYER_TEMP[playerid][pt_SHOP] && (PLAYER_TEMP[playerid][pt_SHOP_STATE] == PLAYER_SHOP_STATE_ALL || PLAYER_TEMP[playerid][pt_SHOP_STATE] == PLAYER_SHOP_STATE_MY_ADS))
	{
		for(new i = 0; i != 6; i ++)
		{
			if(clickedid == Textdraws[textdraw_SHOP_ARTICLES_BOX][i])
			{
				if(!PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i]) return SendClientMessage(playerid, -1, "{FFFFFF}Este anuncio ya no está disponible.");

				new DBResult:Result, DB_Query[64], bool:found;
				format(DB_Query, sizeof DB_Query, "SELECT `ID` FROM `SHOP` WHERE `ID` = '%d';", PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i]);
				Result = db_query(Database, DB_Query);

				if(db_num_rows(Result)) found = true;
				db_free_result(Result);

				if(!found) return SendClientMessage(playerid, -1, "{FFFFFF}Este anuncio ya no está disponible.");
				PLAYER_TEMP[playerid][pt_SHOP_SELECTED_ARTICLE_ID] = PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i];
				PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_AD;

				UpdatePlayerShop(playerid);
				break;
			}
		}
		return 1;
	}

	if(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_SHOP])
	{
		if(clickedid == Textdraws[textdraw_SHOP_TUNING][2]) //Comprar
		{
			new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);
			if(!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_VOBJECTS)
			{
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Premium", "{FFFFFF}Necesitas ser usuario {f4d942}premium{FFFFFF} para tener más objetos en vehículos compra el {f4d942}premium{FFFFFF} con sólo {f44242}5 koins.", "Salir", "");
				return 1;
			}
			if(slot == -1)
			{
				SendClientMessage(playerid, -1, "{FFFFFF}No hay más espacio para objetos en este vehículo.");
				return 1;
			}

			if(Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_PRICE] > CHARACTER_INFO[playerid][ch_CASH])
			{
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar este objeto.", number_format_thousand(Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_PRICE] - CHARACTER_INFO[playerid][ch_CASH]));
				return 1;
			}

			GivePlayerCash(playerid, -Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_PRICE]);

			VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_VALID] = true;
			VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_TYPE] = VOBJECT_TYPE_OBJECT;
			VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ID] = 0;
			VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_MODELID] = Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_MODELID];
			format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_NAME], 32, "%s", Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_NAME]);
			VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ATTACHED] = true;
			UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot);

			RegisterNewVehicleObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot);
			CancelPlayerTuningShop(playerid);

			SendClientMessage(playerid, -1, "{FFFFFF}Ajusta el objeto y haz clic en el icono de guardar, si pulsas {00CCFF}'ESCAPE' {FFFFFF}no se guardará la configuración.");
			SendClientMessage(playerid, -1, "{FFFFFF}Mantén presionado {00CCFF}'W' {FFFFFF}para mover la cámara.");
			EditVehicleObject(playerid, PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot);
			return 1;
		}
		else if(clickedid == Textdraws[textdraw_SHOP_TUNING][3]) //Siguiente
		{
			if(PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] == (sizeof(Tuning_Shop_Objects) - 1)) PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] = 0;
			else PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ++;
			UpdateTuningShop(playerid);
			return 1;
		}
		else if(clickedid == Textdraws[textdraw_SHOP_TUNING][4]) //Anterior
		{
			if(PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] == 0) PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] = sizeof(Tuning_Shop_Objects) - 1;
			else PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] --;
			UpdateTuningShop(playerid);
			return 1;
		}
		return 1;
	}

	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE])
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][0]) //banco
		{
            ShowDialog(playerid, DIALOG_BANK);
			HidePlayeriPhone(playerid);
			HidePlayeriPhoneApps(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][1]) //GPS
		{
           	Auto_SendPlayerAction(playerid, "mira el GPS desde su iPhone.");
			ShowDialog(playerid, DIALOG_PLAYER_GPS);
			HidePlayeriPhone(playerid);
			HidePlayeriPhoneApps(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][2]) //localizar
		{
		    ShowDialog(playerid, DIALOG_PLAYER_GPS_VEHICLES);
			HidePlayeriPhone(playerid);
			HidePlayeriPhoneApps(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][3]) //agenda
		{
			HidePlayeriPhone(playerid);
			HidePlayeriPhoneApps(playerid);
            ShowDialog(playerid, DIALOG_PHONE_BOOK);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][4]) //medico
		{
			if(CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_CRACK) return ShowPlayerMessage(playerid, "No estás delirando", 3);
   			if(PLAYER_TEMP[playerid][pt_WANT_MEDIC]) return ShowPlayerMessage(playerid, "Ya alertaste a los médicos.", 3);

			SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
			if(Iter_Count(PLAYERS_IN_MEDICO) > 0)
			{
			    PLAYER_TEMP[playerid][pt_WANT_MEDIC] = true;
				SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha envíado su llamado a los radios de los médicos, espere en su ubicación a un médico.");
				SendAlertToTaxiDrivers(playerid);
			}
			else if(Iter_Count(PLAYERS_IN_MEDICO) == 0)
			{
		 		SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}No hay ningún médico en servicio, llame más tarde.");
			}
			ShowPlayerMessage(playerid, "Llamada finalizada.", 3);

			HidePlayeriPhone(playerid);
			HidePlayeriPhoneApps(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][5]) //whats
		{
		    ShowDialog(playerid, DIALOG_PHONE_SMS_NUMBER);
			HidePlayeriPhone(playerid);
			HidePlayeriPhoneApps(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][6]) //taxis
		{
			if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
			{
				PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(playerid);
				SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
				SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha cancelado su llamado de taxistas.");
				ShowPlayerMessage(playerid, "Llamada finalizada.", 3);
				HidePlayeriPhone(playerid);
				HidePlayeriPhoneApps(playerid);
			}
			else
			{
				SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
				if(Iter_Count(PLAYERS_IN_TAXI) > 0)
				{
				    PLAYER_TEMP[playerid][pt_WANT_TAXI] = true;
					SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha envíado su llamado a los radios de los taxistas, espere en su ubicación a un taxista.");
					SendAlertToTaxiDrivers(playerid);
				}
				else if(Iter_Count(PLAYERS_IN_TAXI) == 0)
				{
			 		SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}No hay ningún taxista en servicio, llame más tarde.");
				}
				ShowPlayerMessage(playerid, "Llamada finalizada.", 3);
				HidePlayeriPhone(playerid);
				HidePlayeriPhoneApps(playerid);
			}
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][7]) //whatsapps
		{
		    ShowDialog(playerid, DIALOG_PHONE_RECEIVED_MESSAGES);
			HidePlayeriPhone(playerid);
			HidePlayeriPhoneApps(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][8]) //mecanico
		{
			if(PLAYER_TEMP[playerid][pt_WANT_MECHANIC])
			{
				PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = false;
				DisablePlayerMechanicMark(playerid);
				SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
				SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha cancelado su llamado a los mecánicos.");
				ShowPlayerMessage(playerid, "Llamada finalizada.", 3);
				HidePlayeriPhone(playerid);
				HidePlayeriPhoneApps(playerid);
			}
			else
			{
				if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{FFFFFF}Tienes que estar dentro de un vehículo averiado para llamar al mecánico.");
				if(GLOBAL_VEHICLES[ GetPlayerVehicleID(playerid) ][gb_vehicle_STATE] != VEHICLE_STATE_DAMAGED) return SendClientMessage(playerid, -1, "{FFFFFF}Tienes que estar dentro de un vehículo averiado para llamar al mecánico.");

				SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
				if(Iter_Count(PLAYERS_IN_MECANICO) > 0)
				{
				    PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = true;
					SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha envíado su llamado a los radios de los mecanicos, espere en su ubicación a un mecánico.");
					SendAlertToMechanic(playerid);
				}
				else if(Iter_Count(PLAYERS_IN_MECANICO) == 0)
				{
			 		SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}No hay ningún mecánico en servicio, llame más tarde.");
				}
				ShowPlayerMessage(playerid, "Llamada finalizada.", 3);

				HidePlayeriPhone(playerid);
				HidePlayeriPhoneApps(playerid);
			}
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][9]) //localizar casa
		{
		    ShowDialog(playerid, DIALOG_PLAYER_GPS_PROPERTIES);
			HidePlayeriPhone(playerid);
			HidePlayeriPhoneApps(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][10]) //audifonos
		{
		    ShowDialog(playerid, DIALOG_PLAYER_MP3);
			HidePlayeriPhone(playerid);
			HidePlayeriPhoneApps(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][11]) //tienda
		{
		    ShowPlayerShop(playerid);
			HidePlayeriPhone(playerid);
			HidePlayeriPhoneApps(playerid);
			ShowPlayerShop(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][12]) //llamar
		{
			ShowDialog(playerid, DIALOG_PHONE_CALL_NUMBER);
			HidePlayeriPhone(playerid);
			HidePlayeriPhoneApps(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][13]) //policia
		{
			PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
			PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = true;
			PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = false;

			SendClientMessage(playerid, 0x4286f4FF, "@911: {98baf2}Servicio de emergencias, diganos su nombre por favor...");

			HidePlayeriPhone(playerid);
			HidePlayeriPhoneApps(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][14]) //apagar
		{
            if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON)
            {
                ShowDialog(playerid, DIALOG_SHUTDOWN_IPHONE);
 				HidePlayeriPhone(playerid);
				HidePlayeriPhoneApps(playerid);
            }
            else if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF)
            {
			    if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON)
			    {
			        SendClientMessage(playerid, -1, "{FFFFFF}El iPhone ya está apagado.");
			    }
				if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF)
				{
	            	PLAYER_PHONE[playerid][player_phone_STATE] = PHONE_STATE_ON;
	            	Auto_SendPlayerAction(playerid, "enciende su iPhone.");
				}
 				HidePlayeriPhone(playerid);
				HidePlayeriPhoneApps(playerid);
			}
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][15]) //Mapa
		{
			ShowPlayerGpsMap(playerid);
			HidePlayeriPhone(playerid);
			HidePlayeriPhoneApps(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][16]) //folletos
		{
			ShowDialog(playerid, DIALOG_ANNOUNCES);

			HidePlayeriPhone(playerid);
			HidePlayeriPhoneApps(playerid);
			return 1;
		}
		return 1;
	}

	if(PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED])
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2]) //Anterior
		{
			if(PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] == 0) PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] = sizeof(PROPERTY_INTERIORS) - 1;
			else PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] --;
			UpdatePlayerPropertyContructor(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3]) //Siguiente
		{
			if(PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] == (sizeof(PROPERTY_INTERIORS) - 1)) PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] = 0;
			else PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ++;
			UpdatePlayerPropertyContructor(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4]) //Crear
		{
			Create_PlayerPropertyConstructo(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5]) //Cancelar
		{
			ExitPlayerPropertyConstructor(playerid);
			return 1;
		}
		return 1;
	}

	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return 0;

	if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] != -1)
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2]) // Comprar
		{
			new clothe_info[3];
			switch(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
			{
				case INTERIOR_BINCO:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE: clothe_info = Binco_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Binco_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_SUBURBAN:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE: clothe_info = Suburban_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Suburban_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_PROLAPS:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE: clothe_info = Prolaps_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Prolaps_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_DIDIER_SACHS:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE: clothe_info = Didier_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Didier_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_VICTIM:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE: clothe_info = Victim_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Victim_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_ZIP:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE: clothe_info = Zip_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEX_FEMALE: clothe_info = Zip_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
			}

			if(CHARACTER_INFO[playerid][ch_CASH] >= clothe_info[1])
			{
				GivePlayerCash(playerid, -clothe_info[1]);
				CHARACTER_INFO[playerid][ch_SKIN] = clothe_info[0];

				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "Gracias por comprar ropa en {00FF00}%s {FFFFFF}vuelva pronto.", Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_NAME]);

				ClosePlayerClothingMenu(playerid);
				ExitPlayerWardrobe(playerid);
			}
			else
			{
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar esta ropa.", number_format_thousand(clothe_info[1] - CHARACTER_INFO[playerid][ch_CASH]));
			}
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3]) // Siguiente
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

			switch(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
			{
				case INTERIOR_BINCO:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Binco_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Binco_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_SUBURBAN:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Suburban_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Suburban_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_PROLAPS:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Prolaps_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Prolaps_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_DIDIER_SACHS:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Didier_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Didier_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_VICTIM:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Victim_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Victim_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_ZIP:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Zip_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Zip_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
			}

			UpdateClothingShop(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4]) // Anterior
		{
			PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);

			switch(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
			{
				case INTERIOR_BINCO:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Binco_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Binco_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_SUBURBAN:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Suburban_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Suburban_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_PROLAPS:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Prolaps_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Prolaps_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_DIDIER_SACHS:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Didier_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Didier_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_VICTIM:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Victim_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Victim_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_ZIP:
				{
					switch(CHARACTER_INFO[playerid][ch_SEX])
					{
						case SEX_MALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Zip_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEX_FEMALE:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Zip_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
			}

			UpdateClothingShop(playerid);
			return 1;
		}
	}

	if(PLAYER_TEMP[playerid][pt_TOYS_SHOP])
	{
		if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TYPE] == 1)
		{
			if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]) //Comprar
			{
				if(CHARACTER_INFO[playerid][ch_CASH] < Toys_Shop_Sombreros[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]) return SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar esta prenda.", number_format_thousand(Toys_Shop_Sombreros[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price] - CHARACTER_INFO[playerid][ch_CASH]));
				if(ACCOUNT_INFO[playerid][ac_SD] < Toys_Shop_Sombreros[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd]) return ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - koins", "{FFFFFF}Necesitas comprar más {f44242}koins {FFFFFF}para adquirir ésta prenda.", "Salir", "");

				new slot = GetEmptyPlayerToySlot(playerid);
				if(!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_TOYS)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Premium", "{FFFFFF}Necesitas ser usuario {f4d942}premium{FFFFFF} para tener más objetos en vehículos compra el {f4d942}premium{FFFFFF} con sólo {f44242}5 koins.", "Salir", "");
					return 1;
				}
				if(slot == -1)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}No tienes más espacio para accesorios, elimina alguno si quieres comprar otro.");
					ClosePlayerToysMenu(playerid);
					return 1;
				}

				PLAYER_TOYS[playerid][slot][player_toy_VALID] = true;
				format(PLAYER_TOYS[playerid][slot][player_toy_NAME], 24, "%s", Toys_Shop_Sombreros[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model]);
				PLAYER_TOYS[playerid][slot][player_toy_ATTACHED] = false;
				PLAYER_TOYS[playerid][slot][player_toy_MODELID] = Toys_Shop_Sombreros[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_modelid];
				PLAYER_TOYS[playerid][slot][player_toy_BONE] = -1; // Sin utilizar aún
				PLAYER_TOYS[playerid][slot][player_toy_OFFSET_X] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Y] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Z] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_ROT_X] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_ROT_Y] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_ROT_Z] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_SCALE_X] = 1.0;
				PLAYER_TOYS[playerid][slot][player_toy_SCALE_Y] = 1.0;
				PLAYER_TOYS[playerid][slot][player_toy_SCALE_Z] = 1.0;
				PLAYER_TOYS[playerid][slot][player_toy_COLOR_1] = 0;
				PLAYER_TOYS[playerid][slot][player_toy_COLOR_2] = 0;
				RegisterNewPlayerToy(playerid, slot);

				if(Toys_Shop_Sombreros[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd] <= 0)
				{
					GivePlayerCash(playerid, -Toys_Shop_Sombreros[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]);
 				}
 				else
 				{
 				    ACCOUNT_INFO[playerid][ac_SD] -= Toys_Shop_Sombreros[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd];
 				}

				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "Gracias por comprar accesorios en {00FF00}%s {FFFFFF}para ponertelo usa {FFFF00}/objetos.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);

				ClosePlayerToysMenu(playerid);
			}
			else if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6]) // Siguiente
			{
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

				if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] == (sizeof(Toys_Shop_Sombreros) - 1)) PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = 0;
				else PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ++;

				UpdateToysShopSombreros(playerid);
			}
			else if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7]) // Anterior
			{
				PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);

				if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] == 0) PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = sizeof(Toys_Shop_Sombreros) - 1;
				else PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] --;

				UpdateToysShopSombreros(playerid);
			}
		}
		else if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TYPE] == 2)
		{
			if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]) //Comprar
			{
				if(CHARACTER_INFO[playerid][ch_CASH] < Toys_Shop_Gafas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]) return SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar esta prenda.", number_format_thousand(Toys_Shop_Gafas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price] - CHARACTER_INFO[playerid][ch_CASH]));
				if(ACCOUNT_INFO[playerid][ac_SD] < Toys_Shop_Gafas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd]) return ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - koins", "{FFFFFF}Necesitas comprar más {f44242}koins {FFFFFF}para adquirir ésta prenda.", "Salir", "");
				new slot = GetEmptyPlayerToySlot(playerid);
				if(!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_TOYS)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Premium", "{FFFFFF}Necesitas ser usuario {f4d942}premium{FFFFFF} para tener más objetos en vehículos compra el {f4d942}premium{FFFFFF} con sólo {f44242}5 koins.", "Salir", "");
					return 1;
				}
				if(slot == -1)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}No tienes más espacio para accesorios, elimina alguno si quieres comprar otro.");
					ClosePlayerToysMenu(playerid);
					return 1;
				}

				PLAYER_TOYS[playerid][slot][player_toy_VALID] = true;
				format(PLAYER_TOYS[playerid][slot][player_toy_NAME], 24, "%s", Toys_Shop_Gafas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model]);
				PLAYER_TOYS[playerid][slot][player_toy_ATTACHED] = false;
				PLAYER_TOYS[playerid][slot][player_toy_MODELID] = Toys_Shop_Gafas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_modelid];
				PLAYER_TOYS[playerid][slot][player_toy_BONE] = -1; // Sin utilizar aún
				PLAYER_TOYS[playerid][slot][player_toy_OFFSET_X] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Y] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Z] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_ROT_X] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_ROT_Y] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_ROT_Z] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_SCALE_X] = 1.0;
				PLAYER_TOYS[playerid][slot][player_toy_SCALE_Y] = 1.0;
				PLAYER_TOYS[playerid][slot][player_toy_SCALE_Z] = 1.0;
				PLAYER_TOYS[playerid][slot][player_toy_COLOR_1] = 0;
				PLAYER_TOYS[playerid][slot][player_toy_COLOR_2] = 0;
				RegisterNewPlayerToy(playerid, slot);

				if(Toys_Shop_Gafas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd] <= 0)
				{
					GivePlayerCash(playerid, -Toys_Shop_Gafas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]);
 				}
 				else
 				{
 				    ACCOUNT_INFO[playerid][ac_SD] -= Toys_Shop_Gafas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd];
 				}

				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "Gracias por comprar accesorios en {00FF00}%s {FFFFFF}para ponertelo usa {FFFF00}/objetos.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);

				ClosePlayerToysMenu(playerid);
			}
			else if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6]) // Siguiente
			{
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

				if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] == (sizeof(Toys_Shop_Gafas) - 1)) PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = 0;
				else PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ++;

				UpdateToysShopGafas(playerid);
			}
			else if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7]) // Anterior
			{
				PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);

				if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] == 0) PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = sizeof(Toys_Shop_Gafas) - 1;
				else PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] --;

				UpdateToysShopGafas(playerid);
			}
		}
		else if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TYPE] == 3)
		{
			if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]) //Comprar
			{
				if(CHARACTER_INFO[playerid][ch_CASH] < Toys_Shop_Mascaras[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]) return SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar esta prenda.", number_format_thousand(Toys_Shop_Mascaras[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price] - CHARACTER_INFO[playerid][ch_CASH]));
				if(ACCOUNT_INFO[playerid][ac_SD] < Toys_Shop_Mascaras[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd]) return ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - koins", "{FFFFFF}Necesitas comprar más {f44242}koins {FFFFFF}para adquirir ésta prenda.", "Salir", "");
				new slot = GetEmptyPlayerToySlot(playerid);
				if(!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_TOYS)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Premium", "{FFFFFF}Necesitas ser usuario {f4d942}premium{FFFFFF} para tener más objetos en vehículos compra el {f4d942}premium{FFFFFF} con sólo {f44242}5 koins.", "Salir", "");
					return 1;
				}
				if(slot == -1)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}No tienes más espacio para accesorios, elimina alguno si quieres comprar otro.");
					ClosePlayerToysMenu(playerid);
					return 1;
				}

				PLAYER_TOYS[playerid][slot][player_toy_VALID] = true;
				format(PLAYER_TOYS[playerid][slot][player_toy_NAME], 24, "%s", Toys_Shop_Mascaras[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model]);
				PLAYER_TOYS[playerid][slot][player_toy_ATTACHED] = false;
				PLAYER_TOYS[playerid][slot][player_toy_MODELID] = Toys_Shop_Mascaras[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_modelid];
				PLAYER_TOYS[playerid][slot][player_toy_BONE] = -1; // Sin utilizar aún
				PLAYER_TOYS[playerid][slot][player_toy_OFFSET_X] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Y] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Z] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_ROT_X] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_ROT_Y] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_ROT_Z] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_SCALE_X] = 1.0;
				PLAYER_TOYS[playerid][slot][player_toy_SCALE_Y] = 1.0;
				PLAYER_TOYS[playerid][slot][player_toy_SCALE_Z] = 1.0;
				PLAYER_TOYS[playerid][slot][player_toy_COLOR_1] = 0;
				PLAYER_TOYS[playerid][slot][player_toy_COLOR_2] = 0;
				RegisterNewPlayerToy(playerid, slot);

				if(Toys_Shop_Mascaras[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd] <= 0)
				{
					GivePlayerCash(playerid, -Toys_Shop_Mascaras[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]);
 				}
 				else
 				{
 				    ACCOUNT_INFO[playerid][ac_SD] -= Toys_Shop_Mascaras[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd];
 				}

				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "Gracias por comprar accesorios en {00FF00}%s {FFFFFF}para ponertelo usa {FFFF00}/objetos.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);

				ClosePlayerToysMenu(playerid);
			}
			else if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6]) // Siguiente
			{
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

				if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] == (sizeof(Toys_Shop_Mascaras) - 1)) PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = 0;
				else PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ++;

				UpdateToysShopMascaras(playerid);
			}
			else if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7]) // Anterior
			{
				PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);

				if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] == 0) PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = sizeof(Toys_Shop_Mascaras) - 1;
				else PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] --;

				UpdateToysShopMascaras(playerid);
			}
		}
		else if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TYPE] == 4)
		{
			if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]) //Comprar
			{
				if(CHARACTER_INFO[playerid][ch_CASH] <= Toys_Shop_Mochilas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]) return SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar esta prenda.", number_format_thousand(Toys_Shop_Mochilas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price] - CHARACTER_INFO[playerid][ch_CASH]));
				if(ACCOUNT_INFO[playerid][ac_SD] <= Toys_Shop_Mochilas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd]) return ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - koins", "{FFFFFF}Necesitas comprar más {f44242}koins {FFFFFF}para adquirir ésta prenda.", "Salir", "");
				new slot = GetEmptyPlayerToySlot(playerid);
				if(!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_TOYS)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Premium", "{FFFFFF}Necesitas ser usuario {f4d942}premium{FFFFFF} para tener más objetos en vehículos compra el {f4d942}premium{FFFFFF} con sólo {f44242}5 koins.", "Salir", "");
					return 1;
				}
				if(slot == -1)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}No tienes más espacio para accesorios, elimina alguno si quieres comprar otro.");
					ClosePlayerToysMenu(playerid);
					return 1;
				}

				PLAYER_TOYS[playerid][slot][player_toy_VALID] = true;
				format(PLAYER_TOYS[playerid][slot][player_toy_NAME], 24, "%s", Toys_Shop_Mochilas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model]);
				PLAYER_TOYS[playerid][slot][player_toy_ATTACHED] = false;
				PLAYER_TOYS[playerid][slot][player_toy_MODELID] = Toys_Shop_Mochilas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_modelid];
				PLAYER_TOYS[playerid][slot][player_toy_BONE] = -1; // Sin utilizar aún
				PLAYER_TOYS[playerid][slot][player_toy_OFFSET_X] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Y] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Z] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_ROT_X] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_ROT_Y] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_ROT_Z] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_SCALE_X] = 1.0;
				PLAYER_TOYS[playerid][slot][player_toy_SCALE_Y] = 1.0;
				PLAYER_TOYS[playerid][slot][player_toy_SCALE_Z] = 1.0;
				PLAYER_TOYS[playerid][slot][player_toy_COLOR_1] = 0;
				PLAYER_TOYS[playerid][slot][player_toy_COLOR_2] = 0;
				RegisterNewPlayerToy(playerid, slot);

				if(Toys_Shop_Mochilas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd] <= 0)
				{
					GivePlayerCash(playerid, -Toys_Shop_Mochilas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]);
 				}
 				else
 				{
 				    ACCOUNT_INFO[playerid][ac_SD] -= Toys_Shop_Mochilas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd];
 				}

				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "Gracias por comprar accesorios en {00FF00}%s {FFFFFF}para ponertelo usa {FFFF00}/objetos.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);

				ClosePlayerToysMenu(playerid);
			}
			else if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6]) // Siguiente
			{
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

				if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] == (sizeof(Toys_Shop_Mochilas) - 1)) PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = 0;
				else PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ++;

				UpdateToysShopMochilas(playerid);
			}
			else if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7]) // Anterior
			{
				PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);

				if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] == 0) PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = sizeof(Toys_Shop_Mochilas) - 1;
				else PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] --;

				UpdateToysShopMochilas(playerid);
			}
		}
		else if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TYPE] == 5)
		{
			if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]) //Comprar
			{
				if(CHARACTER_INFO[playerid][ch_CASH] < Toys_Shop_Relojes[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]) return SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar esta prenda.", number_format_thousand(Toys_Shop_Relojes[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price] - CHARACTER_INFO[playerid][ch_CASH]));
				if(ACCOUNT_INFO[playerid][ac_SD] < Toys_Shop_Relojes[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd]) return ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - koins", "{FFFFFF}Necesitas comprar más {f44242}koins {FFFFFF}para adquirir ésta prenda.", "Salir", "");
				new slot = GetEmptyPlayerToySlot(playerid);
				if(!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_TOYS)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Premium", "{FFFFFF}Necesitas ser usuario {f4d942}premium{FFFFFF} para tener más objetos en vehículos compra el {f4d942}premium{FFFFFF} con sólo {f44242}5 koins.", "Salir", "");
					return 1;
				}
				if(slot == -1)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}No tienes más espacio para accesorios, elimina alguno si quieres comprar otro.");
					ClosePlayerToysMenu(playerid);
					return 1;
				}

				PLAYER_TOYS[playerid][slot][player_toy_VALID] = true;
				format(PLAYER_TOYS[playerid][slot][player_toy_NAME], 24, "%s", Toys_Shop_Relojes[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model]);
				PLAYER_TOYS[playerid][slot][player_toy_ATTACHED] = false;
				PLAYER_TOYS[playerid][slot][player_toy_MODELID] = Toys_Shop_Relojes[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_modelid];
				PLAYER_TOYS[playerid][slot][player_toy_BONE] = -1; // Sin utilizar aún
				PLAYER_TOYS[playerid][slot][player_toy_OFFSET_X] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Y] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Z] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_ROT_X] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_ROT_Y] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_ROT_Z] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_SCALE_X] = 1.0;
				PLAYER_TOYS[playerid][slot][player_toy_SCALE_Y] = 1.0;
				PLAYER_TOYS[playerid][slot][player_toy_SCALE_Z] = 1.0;
				PLAYER_TOYS[playerid][slot][player_toy_COLOR_1] = 0;
				PLAYER_TOYS[playerid][slot][player_toy_COLOR_2] = 0;
				RegisterNewPlayerToy(playerid, slot);

				if(Toys_Shop_Relojes[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd] <= 0)
				{
					GivePlayerCash(playerid, -Toys_Shop_Relojes[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]);
 				}
 				else
 				{
 				    ACCOUNT_INFO[playerid][ac_SD] -= Toys_Shop_Relojes[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd];
 				}

				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "Gracias por comprar accesorios en {00FF00}%s {FFFFFF}para ponertelo usa {FFFF00}/objetos.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);

				ClosePlayerToysMenu(playerid);
			}
			else if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6]) // Siguiente
			{
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

				if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] == (sizeof(Toys_Shop_Relojes) - 1)) PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = 0;
				else PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ++;

				UpdateToysShopRelojes(playerid);
			}
			else if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7]) // Anterior
			{
				PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);

				if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] == 0) PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = sizeof(Toys_Shop_Relojes) - 1;
				else PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] --;

				UpdateToysShopRelojes(playerid);
			}
		}
		else if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TYPE] == 6)
		{
			if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]) //Comprar
			{
				if(CHARACTER_INFO[playerid][ch_CASH] < Toys_Shop_Especiales[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]) return SendClientMessageEx(playerid, -1, "{FFFFFF}No tienes dinero suficiente, te faltan {41f48f}$%s {FFFFFF}para poder comprar esta prenda.", number_format_thousand(Toys_Shop_Especiales[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price] - CHARACTER_INFO[playerid][ch_CASH]));
				if(ACCOUNT_INFO[playerid][ac_SD] < Toys_Shop_Especiales[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd]) return ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - koins", "{FFFFFF}Necesitas comprar más {f44242}koins {FFFFFF}para adquirir ésta prenda.", "Salir", "");
				new slot = GetEmptyPlayerToySlot(playerid);
				if(!ACCOUNT_INFO[playerid][ac_SU] && slot >= MAX_NU_TOYS)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Premium", "{FFFFFF}Necesitas ser usuario {f4d942}premium{FFFFFF} para tener más objetos en vehículos compra el {f4d942}premium{FFFFFF} con sólo {f44242}5 koins.", "Salir", "");
					return 1;
				}
				if(slot == -1)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{FFFFFF}No tienes más espacio para accesorios, elimina alguno si quieres comprar otro.");
					ClosePlayerToysMenu(playerid);
					return 1;
				}

				PLAYER_TOYS[playerid][slot][player_toy_VALID] = true;
				format(PLAYER_TOYS[playerid][slot][player_toy_NAME], 24, "%s", Toys_Shop_Especiales[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model]);
				PLAYER_TOYS[playerid][slot][player_toy_ATTACHED] = false;
				PLAYER_TOYS[playerid][slot][player_toy_MODELID] = Toys_Shop_Especiales[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_modelid];
				PLAYER_TOYS[playerid][slot][player_toy_BONE] = -1; // Sin utilizar aún
				PLAYER_TOYS[playerid][slot][player_toy_OFFSET_X] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Y] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Z] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_ROT_X] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_ROT_Y] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_ROT_Z] = 0.0;
				PLAYER_TOYS[playerid][slot][player_toy_SCALE_X] = 1.0;
				PLAYER_TOYS[playerid][slot][player_toy_SCALE_Y] = 1.0;
				PLAYER_TOYS[playerid][slot][player_toy_SCALE_Z] = 1.0;
				PLAYER_TOYS[playerid][slot][player_toy_COLOR_1] = 0;
				PLAYER_TOYS[playerid][slot][player_toy_COLOR_2] = 0;
				RegisterNewPlayerToy(playerid, slot);

				if(Toys_Shop_Especiales[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd] <= 0)
				{
					GivePlayerCash(playerid, -Toys_Shop_Especiales[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]);
 				}
 				else
 				{
 				    ACCOUNT_INFO[playerid][ac_SD] -= Toys_Shop_Especiales[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd];
 				}

				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, -1, "Gracias por comprar accesorios en {00FF00}%s {FFFFFF}para ponertelo usa {FFFF00}/objetos.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);

				ClosePlayerToysMenu(playerid);
			}
			else if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6]) // Siguiente
			{
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

				if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] == (sizeof(Toys_Shop_Especiales) - 1)) PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = 0;
				else PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ++;

				UpdateToysShopEspeciales(playerid);
			}
			else if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7]) // Anterior
			{
				PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);

				if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] == 0) PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = sizeof(Toys_Shop_Especiales) - 1;
				else PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] --;

				UpdateToysShopEspeciales(playerid);
			}
		}
	}

	if(PLAYER_TEMP[playerid][pt_SHOP])
	{
		HidePlayerDialog(playerid);
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0])
		{
			switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL:
				{
					if(ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return SendClientMessage(playerid, -1, "{FFFFFF}Debes ser al menos nivel 2 para publicar anuncios.");

					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return 1;
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();

					new DBResult:Result, DB_Query[80], total_ads;
					format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `SHOP` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
					Result = db_query(Database, DB_Query);

					if(db_num_rows(Result)) total_ads = db_get_field_int(Result, 0);
					db_free_result(Result);

					if(total_ads >= MAX_ADS_PER_PLAYER) return SendClientMessageEx(playerid, -1, "{FFFFFF}No puedes publicar más de %d anuncios, borra alguno.", MAX_ADS_PER_PLAYER);

					HidePlayerShop(playerid);
					ShowDialog(playerid, DIALOG_SHOP_ADD);
				}
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1])
		{
			switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL:
				{
					PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS] = true;
					PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_MY_ADS;
					UpdatePlayerShop(playerid);
				}
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2])
		{
			switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL: HidePlayerShop(playerid);
				case PLAYER_SHOP_STATE_MY_ADS: // Atras
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return 1;
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();

					PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS] = false;
					PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
					UpdatePlayerShop(playerid);
				}
				case PLAYER_SHOP_STATE_AD: ShowDialog(playerid, DIALOG_SHOP_ARTICLE_MODIFY);
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3])
		{
			switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL: // Siguiente
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return 1;
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();

					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= GetDatabasePages("SELECT COUNT() FROM `SHOP`;", PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;

					UpdatePlayerShop(playerid);
				}
				case PLAYER_SHOP_STATE_MY_ADS: // Siguiente
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return 1;
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();

					new the_query[80];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `SHOP` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);

					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;

					UpdatePlayerShop(playerid);
				}
				case PLAYER_SHOP_STATE_AD: ShowDialog(playerid, DIALOG_SHOP_ARTICLE_REMOVE);
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4])
		{
			switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL: // Anterior
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return 1;
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();

					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = GetDatabasePages("SELECT COUNT() FROM `SHOP`;", PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;

					UpdatePlayerShop(playerid);
				}
				case PLAYER_SHOP_STATE_MY_ADS: // Anterior
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return 1;
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();

					new the_query[80];
					format(the_query, sizeof the_query, "SELECT COUNT() FROM `SHOP` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);

					if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]) - 1;
					else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;

					UpdatePlayerShop(playerid);
				}
				case PLAYER_SHOP_STATE_AD: // Atrás
				{
					if(PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS])
					{
						PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_MY_ADS;
						UpdatePlayerShop(playerid);
					}
					else
					{
						PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
						UpdatePlayerShop(playerid);
					}
				}
			}
		}
	}
    return 1;
}

UpdateReputationTextDraws(playerid)
{
	new neccessary_rep = ACCOUNT_INFO[playerid][ac_LEVEL] * 7;

    SetPlayerProgressBarMaxValue(playerid, PlayerBar:barrarep[playerid], neccessary_rep);
	SetPlayerProgressBarValue(playerid, PlayerBar:barrarep[playerid], ACCOUNT_INFO[playerid][ac_REP]);
	return 1;
}

forward AddPlayerReputation(playerid);
public AddPlayerReputation(playerid)
{
	new neccessary_rep = ACCOUNT_INFO[playerid][ac_LEVEL] * 7;
	if(ACCOUNT_INFO[playerid][ac_REP] < neccessary_rep)
	{
		ACCOUNT_INFO[playerid][ac_REP] ++;
		UpdateReputationTextDraws(playerid);

		ACCOUNT_INFO[playerid][ac_PAYDAY_REP] ++;
		if(ACCOUNT_INFO[playerid][ac_PAYDAY_REP] >= REP_FOR_PAYDAY)
		{
			PlayerPayday(playerid);
			ACCOUNT_INFO[playerid][ac_PAYDAY_REP] = 0;
		}

		ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = TIME_FOR_REP;
		PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP] = gettime() * 1000;

		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][2]);
		PLAYER_TEMP[playerid][pt_TIMERS][2] = SetTimerEx("AddPlayerReputation", ACCOUNT_INFO[playerid][ac_TIME_FOR_REP], false, "i", playerid);
		return 1;
	}
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][2]);
	return 0;
}

stock SetPlayerCash(playerid, ammount)
{
	CHARACTER_INFO[playerid][ch_CASH] = ammount;
	ResetPlayerMoney(playerid);
	return 1;
}

GivePlayerCash(playerid, ammount)
{
	CHARACTER_INFO[playerid][ch_CASH] += ammount;
	ResetPlayerMoney(playerid);
	return 1;
}

LoadEnterExits()
{
	new total_enterexits, label_str[256], info[3];

	for(new i = 0; i != sizeof ENTER_EXIT; i ++)
	{
		ENTER_EXIT[total_enterexits][ee_ID] = total_enterexits + 1;

		if(ENTER_EXIT[total_enterexits][ee_TIME_OPEN] == 0 && ENTER_EXIT[total_enterexits][ee_TIME_CLOSE] == 0) format(label_str, sizeof label_str, "{00FF00}%s\n\n{FFFFFF}Presiona {00CCFF}N {FFFFFF}o usa {FFFF00}/entrar{FFFFFF}.", ENTER_EXIT[total_enterexits][ee_NAME]);
		else format(label_str, sizeof label_str, "{00FF00}%s\n{FFFFFF}Horario: {00FF00}%02d:00 - %02d:00\n\n{FFFFFF}Presiona {00CCFF}N {FFFFFF}o usa {FFFF00}/entrar{FFFFFF}.", ENTER_EXIT[total_enterexits][ee_NAME], ENTER_EXIT[total_enterexits][ee_TIME_OPEN], ENTER_EXIT[total_enterexits][ee_TIME_CLOSE]);

		ENTER_EXIT[total_enterexits][ee_INT_LABEL_ID] = CreateDynamic3DTextLabel("{FFFFFF}Presiona {00CCFF}N {FFFFFF}o usa {FFFF00}/salir{FFFFFF}.", 0xFFFFFFAA, ENTER_EXIT[total_enterexits][ee_INT_X], ENTER_EXIT[total_enterexits][ee_INT_Y], ENTER_EXIT[total_enterexits][ee_INT_Z], 10.0, .testlos = true, .worldid = ENTER_EXIT[total_enterexits][ee_INT_WORLD], .interiorid = ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);
		ENTER_EXIT[total_enterexits][ee_EXT_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFAA, ENTER_EXIT[total_enterexits][ee_EXT_X], ENTER_EXIT[total_enterexits][ee_EXT_Y], ENTER_EXIT[total_enterexits][ee_EXT_Z], 10.0, .testlos = true, .worldid = ENTER_EXIT[total_enterexits][ee_EXT_WORLD], .interiorid = ENTER_EXIT[total_enterexits][ee_EXT_INTERIOR]);

		if(ENTER_EXIT[total_enterexits][ee_INT_MAPICON] != -1) ENTER_EXIT[total_enterexits][ee_INT_MAPICON_ID] = CreateDynamicMapIcon(ENTER_EXIT[total_enterexits][ee_INT_X], ENTER_EXIT[total_enterexits][ee_INT_Y], ENTER_EXIT[total_enterexits][ee_INT_Z], ENTER_EXIT[total_enterexits][ee_INT_MAPICON], -1, ENTER_EXIT[total_enterexits][ee_INT_WORLD], ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);
		if(ENTER_EXIT[total_enterexits][ee_EXT_MAPICON] != -1) ENTER_EXIT[total_enterexits][ee_EXT_MAPICON_ID] = CreateDynamicMapIcon(ENTER_EXIT[total_enterexits][ee_EXT_X], ENTER_EXIT[total_enterexits][ee_EXT_Y], ENTER_EXIT[total_enterexits][ee_EXT_Z], ENTER_EXIT[total_enterexits][ee_EXT_MAPICON], -1, ENTER_EXIT[total_enterexits][ee_EXT_WORLD], ENTER_EXIT[total_enterexits][ee_EXT_INTERIOR]);

		ENTER_EXIT[total_enterexits][ee_INT_PICKUP_ID] = CreateDynamicPickup(19902, 1, ENTER_EXIT[total_enterexits][ee_INT_X], ENTER_EXIT[total_enterexits][ee_INT_Y], ENTER_EXIT[total_enterexits][ee_INT_Z] - 0.9, ENTER_EXIT[total_enterexits][ee_INT_WORLD], ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);
		ENTER_EXIT[total_enterexits][ee_EXT_PICKUP_ID] = CreateDynamicPickup(19902, 1, ENTER_EXIT[total_enterexits][ee_EXT_X], ENTER_EXIT[total_enterexits][ee_EXT_Y], ENTER_EXIT[total_enterexits][ee_EXT_Z] - 0.9, ENTER_EXIT[total_enterexits][ee_EXT_WORLD], ENTER_EXIT[total_enterexits][ee_EXT_INTERIOR]);

		info[0] = PICKUP_TYPE_ENTER_EXIT;
		info[1] = total_enterexits; // Index
		info[2] = 1; // Pickup Interior
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, ENTER_EXIT[total_enterexits][ee_INT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

		info[0] = PICKUP_TYPE_ENTER_EXIT;
		info[1] = total_enterexits; // Index
		info[2] = 2; // Pickup Exterior
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, ENTER_EXIT[total_enterexits][ee_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
		CreateInteriorActor(ENTER_EXIT[total_enterexits][ee_INTERIOR_TYPE], ENTER_EXIT[total_enterexits][ee_INT_WORLD], ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);

		total_enterexits ++;
	}
	return 1;
}

LoadProperties()
{
	new DBResult:Result;
	Result = db_query(Database, "SELECT `PROPERTY`.*, `PROPERTY_INFO`.* FROM `PROPERTY`, `PROPERTY_INFO` WHERE `PROPERTY_INFO`.ID_PROPERTY = `PROPERTY`.ID;");

	new total_houses, total_houses_free;
	for(new i = 0; i < db_num_rows(Result); i ++)
	{
		if(total_houses >= MAX_PROPERTIES)
		{
			printf("---> Límite superado en array 'PROPERTY_INFO' al intentar cargar de la base de datos.");
			break;
		}

		PROPERTY_INFO[total_houses][property_VALID] = true;
		PROPERTY_INFO[total_houses][property_ID] = db_get_field_assoc_int(Result, "ID");

		PROPERTY_INFO[total_houses][property_EXT_X] = db_get_field_assoc_float(Result, "EXT_X");
		PROPERTY_INFO[total_houses][property_EXT_Y] = db_get_field_assoc_float(Result, "EXT_Y");
		PROPERTY_INFO[total_houses][property_EXT_Z] = db_get_field_assoc_float(Result, "EXT_Z");
		PROPERTY_INFO[total_houses][property_EXT_ANGLE] = db_get_field_assoc_float(Result, "EXT_ANGLE");
		PROPERTY_INFO[total_houses][property_EXT_INTERIOR] = db_get_field_assoc_int(Result, "EXT_INTERIOR");
		PROPERTY_INFO[total_houses][property_EXT_FREEZE] = db_get_field_assoc_int(Result, "EXT_FREEZE");
		PROPERTY_INFO[total_houses][property_ID_INTERIOR] = db_get_field_assoc_int(Result, "ID_INTERIOR");

		PROPERTY_INFO[total_houses][property_PRICE] = db_get_field_assoc_int(Result, "PRICE");
		PROPERTY_INFO[total_houses][property_PRICE_BASE] = PROPERTY_INFO[total_houses][property_PRICE];
		PROPERTY_INFO[total_houses][property_LEVEL] = db_get_field_assoc_int(Result, "LEVEL");
		PROPERTY_INFO[total_houses][property_EXTRA] = db_get_field_assoc_int(Result, "EXTRA");


		new DBResult:Result_info_owner, DB_Query[600], owner[24], info[3], label_str[256], pickup_modelid;
		format(DB_Query, sizeof DB_Query, "SELECT `CUENTA`.`NAME`, `PROPERTY_OWNER`.`ID_USER`, `PROPERTY_OWNER`.`PROPERTY_NAME` FROM `CUENTA`, `PROPERTY_OWNER` WHERE `PROPERTY_OWNER`.`ID_PROPERTY` = '%d' AND `CUENTA`.`ID` = `PROPERTY_OWNER`.`ID_USER`;", PROPERTY_INFO[total_houses][property_ID]);
		Result_info_owner = db_query(Database, DB_Query);

		new name_house[24];
        if(PROPERTY_INFO[ total_houses ][property_EXTRA] == 0) name_house = "Casa";
        if(PROPERTY_INFO[ total_houses ][property_EXTRA] == 2) name_house = "Garaje";
        if(PROPERTY_INFO[ total_houses ][property_EXTRA] == 4) name_house = "Negocio";


		if(db_num_rows(Result_info_owner))
		{
			pickup_modelid = 0;
			PROPERTY_INFO[total_houses][property_SOLD] = true;
			PROPERTY_INFO[total_houses][property_CREW] = false;
			db_get_field_assoc(Result_info_owner, "NAME", owner, 24);
			PROPERTY_INFO[total_houses][property_OWNER_ID] = db_get_field_assoc_int(Result_info_owner, "ID_USER");
			PROPERTY_INFO[total_houses][property_CREW_ID] = 0;
			db_get_field_assoc(Result_info_owner, "PROPERTY_NAME", PROPERTY_INFO[total_houses][property_NAME], 24);

			format
			(
				label_str,
				sizeof label_str,
				"\
				    {00FF00}%s\n\n\
					{FFFFFF}Dirección {00FF00}%d\n\
					{FFFFFF}Dueño {00FF00}%s\n\
					{FFFFFF}Presiona {00CCFF}N {FFFFFF}o usa {FFFF00}/entrar{FFFFFF}.\
				", name_house, PROPERTY_INFO[total_houses][property_ID], owner
			);
		}
		else
		{
			new DBResult:Result_info_crew, crew_name[24];
			format(DB_Query, sizeof DB_Query, "SELECT `CREW`.`ID`, `CREW`.`NAME` FROM `PROPERTY_TERRITORY`, `CREW` WHERE `PROPERTY_TERRITORY`.`ID_PROPERTY` = '%d' AND `CREW`.`ID` = (SELECT `CREW_TERRITORIES`.`ID_CREW` FROM `CREW_TERRITORIES` WHERE `CREW_TERRITORIES`.`ID_TERRITORY` = `PROPERTY_TERRITORY`.`ID_TERRITORY`);", PROPERTY_INFO[total_houses][property_ID]);
			Result_info_crew = db_query(Database, DB_Query);

			if(db_num_rows(Result_info_crew))
			{
				pickup_modelid = 0;
				PROPERTY_INFO[total_houses][property_SOLD] = true;
				PROPERTY_INFO[total_houses][property_CREW] = true;
				db_get_field_assoc(Result_info_crew, "NAME", crew_name, 24);
				PROPERTY_INFO[total_houses][property_CREW_ID] = db_get_field_assoc_int(Result_info_crew, "ID");
				PROPERTY_INFO[total_houses][property_OWNER_ID] = 0;
				format(PROPERTY_INFO[total_houses][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[total_houses][property_ID]);

				format
				(
					label_str,
					sizeof label_str,
					"\
					    {00FF00}%s\n\n\
						{FFFFFF}Dirección {00FF00}%d\n\
						{FFFFFF}Dueño: banda {00FF00}%s\n\
						{FFFFFF}Presiona {00CCFF}N {FFFFFF}o usa {FFFF00}/entrar{FFFFFF}.\
					", name_house, PROPERTY_INFO[total_houses][property_ID], crew_name
				);
			}
			else
			{
				pickup_modelid = 1273;
				PROPERTY_INFO[total_houses][property_SOLD] = false;
				PROPERTY_INFO[total_houses][property_OWNER_ID] = 0;
				format(PROPERTY_INFO[total_houses][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[total_houses][property_ID]);

				new type_house[24];
				if(PROPERTY_INFO[total_houses][property_EXTRA] == 0) type_house = "Casa en venta";
				if(PROPERTY_INFO[total_houses][property_EXTRA] == 2) type_house = "Garaje en venta";
				if(PROPERTY_INFO[total_houses][property_EXTRA] == 3) type_house = "Oficina en venta";
				if(PROPERTY_INFO[total_houses][property_EXTRA] == 4) type_house = "Negocio en venta";

				format
				(
					label_str,
					sizeof label_str,
					"\
                        {00FF00}%s\n\n\
						{FFFFFF}Dirección: {00FF00}%d\n\
						{FFFFFF}Precio: {41f48f}$%s\n\
						{FFFFFF}Nivel necesario: {00FF00}%d\n\
						{FFFFFF}Usa {FFFF00}/ayuda propiedades {FFFFFF}para ver como comprarla.\
					",type_house, PROPERTY_INFO[total_houses][property_ID], number_format_thousand(PROPERTY_INFO[total_houses][property_PRICE]), PROPERTY_INFO[total_houses][property_LEVEL]
				);
				total_houses_free ++;
			}
			db_free_result(Result_info_crew);
		}
		db_free_result(Result_info_owner);

		PROPERTY_INFO[total_houses][property_EXT_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFAA, PROPERTY_INFO[total_houses][property_EXT_X], PROPERTY_INFO[total_houses][property_EXT_Y], PROPERTY_INFO[total_houses][property_EXT_Z] + 0.25, 5.0, .testlos = true, .worldid = 0, .interiorid = PROPERTY_INFO[total_houses][property_EXT_INTERIOR]);
		PROPERTY_INFO[total_houses][property_INT_LABEL_ID] = CreateDynamic3DTextLabel("{FFFFFF}Presiona {00CCFF}N {FFFFFF}o usa {FFFF00}/salir{FFFFFF}.\nUse {FFFF00}/propiedad {FFFFFF}para configurar su casa.\nUse {FFFF00}/puerta {FFFFFF}para dejar entrar", 0xFFFFFFAA, PROPERTY_INTERIORS[ PROPERTY_INFO[total_houses][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[total_houses][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[total_houses][property_ID_INTERIOR] ][property_INT_Z] + 0.25, 3.0, .testlos = true, .worldid = PROPERTY_INFO[total_houses][property_ID], .interiorid = PROPERTY_INTERIORS[ PROPERTY_INFO[total_houses][property_ID_INTERIOR] ][property_INT_INTERIOR]);

		PROPERTY_INFO[total_houses][property_EXT_PICKUP_ID] = CreateDynamicPickup(pickup_modelid, 1, PROPERTY_INFO[total_houses][property_EXT_X], PROPERTY_INFO[total_houses][property_EXT_Y], PROPERTY_INFO[total_houses][property_EXT_Z], 0, PROPERTY_INFO[total_houses][property_EXT_INTERIOR]);
		PROPERTY_INFO[total_houses][property_INT_PICKUP_ID] = CreateDynamicPickup(0, 1, PROPERTY_INTERIORS[ PROPERTY_INFO[total_houses][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[total_houses][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[total_houses][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INFO[total_houses][property_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[total_houses][property_ID_INTERIOR] ][property_INT_INTERIOR]);


		info[0] = PICKUP_TYPE_PROPERTY;
		info[1] = total_houses; // Index
		info[2] = 1; // Pickup Interior
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[total_houses][property_INT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

		info[0] = PICKUP_TYPE_PROPERTY;
		info[1] = total_houses; // Index
		info[2] = 2; // Pickup Exterior
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[total_houses][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

		TOTAL_PROPERTIES_LOADED ++;
		total_houses ++;
		db_next_row(Result);
	}
	db_free_result(Result);

	printf("---> Se han cargado %d propiedades, %d libres.", total_houses, total_houses_free);
	return 1;
}

GetOwnerIntProperty(id_house)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(CHARACTER_INFO[i][ch_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
			{
				if(CHARACTER_INFO[i][ch_INTERIOR_EXTRA] == id_house)
				{
					return i;
				}
			}
		}
	}
	return -1;
}

LoadCrews()
{
	new DBResult:Result, DB_Query[128];
	Result = db_query(Database, "SELECT * FROM `CREW`;");

	new total_crews;
	for(new i = 0; i < db_num_rows(Result); i ++)
	{
		if(total_crews >= MAX_CREWS)
		{
			printf("---> Límite superado en array 'CREW_INFO' al intentar cargar de la base de datos.");
			break;
		}

		CREW_INFO[total_crews][crew_VALID] = true;
		CREW_INFO[total_crews][crew_ID] = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", CREW_INFO[total_crews][crew_NAME], 32);
		CREW_INFO[total_crews][crew_COLOR] = db_get_field_assoc_int(Result, "COLOR");
		CREW_INFO[total_crews][crew_ONLINE_MEMBERS] = 0;

		new DBResult:Result_members;
		format(DB_Query, sizeof DB_Query, "SELECT COUNT() FROM `PLAYER_CREW` WHERE `ID_CREW` = '%d';", CREW_INFO[total_crews][crew_ID]);
		Result_members = db_query(Database, DB_Query);

		if(db_num_rows(Result_members)) CREW_INFO[total_crews][crew_MEMBERS] = db_get_field_int(Result_members, 0);
		db_free_result(Result_members);


		new DBResult:Result_ranks;
		format(DB_Query, sizeof DB_Query, "SELECT * FROM `CREW_RANKS` WHERE `ID_CREW` = '%d' LIMIT %d;", CREW_INFO[total_crews][crew_ID], MAX_CREW_RANKS);
		Result_ranks = db_query(Database, DB_Query);
		for(new x = 0; x < db_num_rows(Result_ranks); x ++)
		{
			new pos = db_get_field_assoc_int(Result_ranks, "RANK_POS");
			if(pos < 0 || pos > MAX_CREW_RANKS) continue;

			CREW_RANK_INFO[total_crews][pos][crew_rank_VALID] = true;
			CREW_RANK_INFO[total_crews][pos][crew_rank_ID] = db_get_field_assoc_int(Result_ranks, "ID");
			db_get_field_assoc(Result_ranks, "RANK_NAME", CREW_RANK_INFO[total_crews][pos][crew_rank_NAME], 32);

			new DBResult:Result_ranks_permissions;
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `RANK_PERMISSIONS` WHERE `ID_RANK` = '%d' LIMIT %d;", CREW_RANK_INFO[total_crews][pos][crew_rank_ID], CREW_RANK_SIZE);
			Result_ranks_permissions = db_query(Database, DB_Query);
			for(new z = 0; z < db_num_rows(Result_ranks_permissions); z ++)
			{
				new permission = db_get_field_assoc_int(Result_ranks_permissions, "PERMISSION");
				if(permission < 0 || permission > CREW_RANK_SIZE) continue;

				CREW_RANK_INFO[total_crews][pos][crew_rank_PERMISSION][permission] = db_get_field_assoc_int(Result_ranks_permissions, "SET");
				db_next_row(Result_ranks_permissions);
			}
			db_free_result(Result_ranks_permissions);
			db_next_row(Result_ranks);
		}
		db_free_result(Result_ranks);

		total_crews ++;
		db_next_row(Result);
	}

	db_free_result(Result);


	/*
	for(new i = 0; i != total_crews; i ++)
	{
		if(!CREW_INFO[i][crew_VALID]) continue;
		print("\n\n");
		printf("---- Index: %d, Crew ID: %d, Crew Name: %s, Crew Color: %d ----", i, CREW_INFO[i][crew_ID], CREW_INFO[i][crew_NAME], CREW_INFO[i][crew_COLOR]);

		for(new x = 0; x != MAX_CREW_RANKS; x ++)
		{
			if(!CREW_RANK_INFO[i][x][crew_rank_VALID]) continue;
			printf("\tRank Pos: %d, Rank ID: %d, Rank Name: %s", x, CREW_RANK_INFO[i][x][crew_rank_ID], CREW_RANK_INFO[i][x][crew_rank_NAME]);

			for(new z = 0; z != CREW_RANK_SIZE; z ++)
			{
				printf("\t\tPermiso: %d, Set: %d", z, CREW_RANK_INFO[i][x][crew_rank_PERMISSION][z]);
			}
		}
	}
	*/
	return 1;
}


LoadGangZones()
{
	new DBResult:Result, DB_Query[320];
	format(DB_Query, sizeof DB_Query, "SELECT * FROM `SA_ZONES` WHERE `GANG_ZONE` = '1' LIMIT %d;", MAX_TERRITORIES);
	Result = db_query(Database, DB_Query);

	new total_territories;
	for(new i = 0; i < db_num_rows(Result); i ++)
	{
		if(total_territories >= MAX_TERRITORIES)
		{
			printf("---> Límite superado en array 'TERRITORIES' al intentar cargar de la base de datos.");
			break;
		}

		TERRITORIES[total_territories][territory_VALID] = true;
		TERRITORIES[total_territories][territory_ID] = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", TERRITORIES[total_territories][territory_NAME], 32);
		TERRITORIES[total_territories][territory_MIN_X] = db_get_field_assoc_float(Result, "MIN_X");
		TERRITORIES[total_territories][territory_MIN_Y] = db_get_field_assoc_float(Result, "MIN_Y");
		TERRITORIES[total_territories][territory_MIN_Z] = db_get_field_assoc_float(Result, "MIN_Z");
		TERRITORIES[total_territories][territory_MAX_X] = db_get_field_assoc_float(Result, "MAX_X");
		TERRITORIES[total_territories][territory_MAX_Y] = db_get_field_assoc_float(Result, "MAX_Y");
		TERRITORIES[total_territories][territory_MAX_Z] = db_get_field_assoc_float(Result, "MAX_Z");
		TERRITORIES[total_territories][territory_WAR] = false;
		TERRITORIES[total_territories][territory_ATTACKER_CREW_INDEX] = 0;

		new DBResult:Result_territory_crew;
		format(DB_Query, sizeof DB_Query, "SELECT `CREW_TERRITORIES`.`ID_CREW`, `CREW`.`COLOR` FROM `CREW_TERRITORIES`, `CREW` WHERE `ID_TERRITORY` = '%d' AND `CREW`.`ID` = `CREW_TERRITORIES`.`ID_CREW`;", TERRITORIES[total_territories][territory_ID]);
		Result_territory_crew = db_query(Database, DB_Query);
		if(db_num_rows(Result_territory_crew))
		{
			TERRITORIES[total_territories][territory_OCCUPIED] = true;
			TERRITORIES[total_territories][territory_CREW_ID] = db_get_field_assoc_int(Result_territory_crew, "ID_CREW");
			new gang_color = db_get_field_assoc_int(Result_territory_crew, "COLOR");

			new r, g, b, a;
			HexToRGBA(gang_color, r, g, b, a);
			TERRITORIES[total_territories][territory_COLOR] = RGBAToHex(r, g, b, 135);

			for(new x = 0; x != MAX_CREWS; x ++)
			{
				if(!CREW_INFO[x][crew_VALID]) continue;

				if(CREW_INFO[x][crew_ID] == TERRITORIES[total_territories][territory_CREW_ID])
				{
					TERRITORIES[total_territories][territory_CREW_INDEX] = x;
					break;
				}
			}
		}
		else
		{
			TERRITORIES[total_territories][territory_OCCUPIED] = false;
			TERRITORIES[total_territories][territory_CREW_ID] = 0;
			TERRITORIES[total_territories][territory_CREW_INDEX] = 0;
			TERRITORIES[total_territories][territory_COLOR] = 0xCCCCCC55;
		}
		db_free_result(Result_territory_crew);


		TERRITORIES[total_territories][territory_AREA] = 	CreateDynamicCube
															(
																TERRITORIES[total_territories][territory_MIN_X],
																TERRITORIES[total_territories][territory_MIN_Y],
																TERRITORIES[total_territories][territory_MIN_Z],
																TERRITORIES[total_territories][territory_MAX_X],
																TERRITORIES[total_territories][territory_MAX_Y],
																TERRITORIES[total_territories][territory_MAX_Z],
																0, 0
															);

		new info[2];
		info[0] = AREA_TYPE_GANGZONE;
		info[1] = total_territories;
		Streamer_SetArrayData(STREAMER_TYPE_AREA, TERRITORIES[total_territories][territory_AREA], E_STREAMER_EXTRA_ID, info);


		TERRITORIES[total_territories][territory_GANG_ZONE] = 	GangZoneCreate
																(
																	TERRITORIES[total_territories][territory_MIN_X],
																	TERRITORIES[total_territories][territory_MIN_Y],
																	TERRITORIES[total_territories][territory_MAX_X],
																	TERRITORIES[total_territories][territory_MAX_Y]
																);

		TERRITORIES[total_territories][territory_TEXTDRAW] = TextDrawCreate(320.000000, 406.000000, "Conquista:_0");
		TextDrawLetterSize(TERRITORIES[total_territories][territory_TEXTDRAW], 0.286000, 1.276444);
		TextDrawAlignment(TERRITORIES[total_territories][territory_TEXTDRAW], 2);
		TextDrawColor(TERRITORIES[total_territories][territory_TEXTDRAW], -76);
		TextDrawSetShadow(TERRITORIES[total_territories][territory_TEXTDRAW], 0);
		TextDrawSetOutline(TERRITORIES[total_territories][territory_TEXTDRAW], 0);
		TextDrawBackgroundColor(TERRITORIES[total_territories][territory_TEXTDRAW], 255);
		TextDrawFont(TERRITORIES[total_territories][territory_TEXTDRAW], 1);
		TextDrawSetProportional(TERRITORIES[total_territories][territory_TEXTDRAW], 1);
		TextDrawSetShadow(TERRITORIES[total_territories][territory_TEXTDRAW], 0);

		total_territories ++;
		db_next_row(Result);
	}

	db_free_result(Result);
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] = pickupid;
	return 1;
}

forward OnPlayerMakeCBug(playerid);
public OnPlayerMakeCBug(playerid)
{
	FreezeThenAutoUnfreeze(playerid, 5000);
    return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return 1;

	if(newkeys & KEY_CROUCH)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL)
   			{
				for(new i = 0; i != sizeof San_Andreas_Barriers; i ++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 15.0, San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z]))
					{
						if(GetPlayerInterior(playerid) == San_Andreas_Barriers[i][barrier_INTERIOR] && GetPlayerVirtualWorld(playerid) == San_Andreas_Barriers[i][barrier_WORLD])
						{
							if(San_Andreas_Barriers[i][barrier_VEHICLE_TYPE] == VEHICLE_TYPE_WORK)
							{
								if(!PLAYER_WORKS[playerid][WORK_POLICE] && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE)
								{
									if(!PLAYER_WORKS[playerid][ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN] ]) break;
								}
							}
							if(IsDynamicObjectMoving(San_Andreas_Barriers[i][barrier_OBJECT_ID]) && !San_Andreas_Barriers[i][barrier_CLOSING]) break;

							KillTimer(San_Andreas_Barriers[i][barrier_TIMER]);
							San_Andreas_Barriers[i][barrier_TIMER] = SetTimerEx("CloseBarrier", 5000, false, "i", i);
							MoveDynamicObject(San_Andreas_Barriers[i][barrier_OBJECT_ID], San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 0.72967 + 0.01, 0.0065, 0.0, 0.0, San_Andreas_Barriers[i][barrier_ROTATION]);
							San_Andreas_Barriers[i][barrier_CLOSING] = false;
							break;
						}
						else break;
					}
				}


				if(PLAYER_WORKS[playerid][WORK_POLICE])
				{
					if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
					{
						for(new i = 0; i != sizeof POLICE_GARAGE_DOORS; i ++)
						{
							if(IsPlayerInRangeOfPoint(playerid, 20.0, POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_X], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_Y], POLICE_GARAGE_DOORS[i][police_gdoor_CLOSED_Z]))
							{
								if(IsDynamicObjectMoving(POLICE_GARAGE_DOORS[i][police_gdoor_OBJECT_ID]) && !POLICE_GARAGE_DOORS[i][police_gdoor_CLOSING]) break;

								KillTimer(POLICE_GARAGE_DOORS[i][police_gdoor_TIMER]);
								POLICE_GARAGE_DOORS[i][police_gdoor_TIMER] = SetTimerEx("ClosePoliceGarageDoor", 5000, false, "i", i);
								MoveDynamicObject(POLICE_GARAGE_DOORS[i][police_gdoor_OBJECT_ID], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_X], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_Y], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_Z], POLICE_GARAGE_DOORS[i][police_gdoor_MOVE_SPEED], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_RX], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_RY], POLICE_GARAGE_DOORS[i][police_gdoor_OPENED_RZ]);
								POLICE_GARAGE_DOORS[i][police_gdoor_CLOSING] = false;
								break;
							}
						}
					}
				}
			}
		}
		return 1;
	}
	else if(newkeys & KEY_SECONDARY_ATTACK)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] != -1)
			{
				if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_CLUB)
				{
					if(IsPlayerInRangeOfPoint(playerid, 1.5, 1208.744140, -34.261119, 1000.953125) || IsPlayerInRangeOfPoint(playerid, 1.5, 1213.738037, -33.667881, 1000.953125))
                    {
                        if(CHARACTER_INFO[playerid][ch_CASH] <= 25) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes dinero para gastarlo en propinas.");

						ApplyAnimation(playerid, "STRIP", RandomPayStripAnimations[random(sizeof(RandomPayStripAnimations))], 4.1, 0, 0, 0, 0, 0);
                        GivePlayerCash(playerid, -random(25));
                        return 1;
                    }
				}
			}
			if(PLAYER_WORKS[playerid][WORK_POLICE])
			{
				for(new i = 0; i != sizeof POLICE_DOORS; i ++)
				{
					if(GetPlayerInterior(playerid) != POLICE_DOORS[i][police_door_INTERIOR] || GetPlayerVirtualWorld(playerid) != POLICE_DOORS[i][police_door_WORLD]) continue;
					if(IsDynamicObjectMoving(POLICE_DOORS[i][police_door_OBJECT_ID]) || !POLICE_DOORS[i][police_door_CLOSED]) continue;

					new Float:pos[4];

					pos[0] = POLICE_DOORS[i][police_door_X] + (1.0 * floatsin(-POLICE_DOORS[i][police_door_RZ], degrees));
					pos[1] = POLICE_DOORS[i][police_door_Y] + (1.0 * floatcos(-POLICE_DOORS[i][police_door_RZ], degrees));
					pos[2] = POLICE_DOORS[i][police_door_X] + (-1.0 * floatsin(-POLICE_DOORS[i][police_door_RZ], degrees));
					pos[3] = POLICE_DOORS[i][police_door_Y] + (-1.0 * floatcos(-POLICE_DOORS[i][police_door_RZ], degrees));

					if(IsPlayerInRangeOfPoint(playerid, 1.8, pos[0], pos[1], POLICE_DOORS[i][police_door_Z]))
					{
						KillTimer(POLICE_DOORS[i][police_door_TIMER]);
						POLICE_DOORS[i][police_door_TIMER] = SetTimerEx("ClosePoliceDoor", 3000, false, "i", i);
						MoveDynamicObject(POLICE_DOORS[i][police_door_OBJECT_ID], POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y], POLICE_DOORS[i][police_door_Z] + 0.01, 0.0125, 0.0, 0.0, POLICE_DOORS[i][police_door_RZ] - 85.0);
						POLICE_DOORS[i][police_door_CLOSED] = false;
						break;
					}
					else if(IsPlayerInRangeOfPoint(playerid, 1.8, pos[2], pos[3], POLICE_DOORS[i][police_door_Z]))
					{
						KillTimer(POLICE_DOORS[i][police_door_TIMER]);
						POLICE_DOORS[i][police_door_TIMER] = SetTimerEx("ClosePoliceDoor", 3000, false, "i", i);
						MoveDynamicObject(POLICE_DOORS[i][police_door_OBJECT_ID], POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y], POLICE_DOORS[i][police_door_Z] + 0.01, 0.0125, 0.0, 0.0, POLICE_DOORS[i][police_door_RZ] + 85.0);
						POLICE_DOORS[i][police_door_CLOSED] = false;
						break;
					}
				}
			}
		}
		return 1;
	}
	else if(newkeys & KEY_FIRE && oldkeys & KEY_CROUCH && IsCbugWeapon(playerid))
	{
	    CallLocalFunction("OnPlayerMakeCBug", "i", playerid);
		return 1;
	}
	else if(newkeys & KEY_YES)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER || GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = INVALID_VEHICLE_ID;
		 	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)	vehicleid = GetPlayerVehicleID(playerid);
			else if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) vehicleid = GetPlayerCameraTargetVehicle(playerid);

			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS])
			{
				if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return 1;
				if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return 1;

				GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 0;
				UpdateVehicleParams(vehicleid);
				UpdateControlPanelSpeedo(playerid);
			 	new Float:x,Float:y,Float:z;
				GetPlayerPos(playerid, x, y, z);
				for(new i=0; i<MAX_PLAYERS; i++)
				{
					if(!IsPlayerConnected(i)) continue;
					if(IsPlayerInRangeOfPoint(i, 15.0, x,y,z))
					{
						PlayerPlaySound(i, 24600, 0.0, 0.0, 0.0);
					}
				}
				Auto_SendPlayerAction(playerid, "ha abierto las puertas de su vehículo.");
			}
			else if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS])
			{
				if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return 1;
				if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return 1;

				GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] = gettime();
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 1;
				UpdateVehicleParams(vehicleid);
				UpdateControlPanelSpeedo(playerid);
			 	new Float:x,Float:y,Float:z;
				GetPlayerPos(playerid, x, y, z);
				for(new i=0; i<MAX_PLAYERS; i++)
				{
					if(!IsPlayerConnected(i)) continue;
					if(IsPlayerInRangeOfPoint(i, 15.0, x,y,z))
					{
						PlayerPlaySound(i, 24600, 0.0, 0.0, 0.0);
					}
				}
				Auto_SendPlayerAction(playerid, "ha cerrado las puertas de su vehículo.");
			}
		}
	    return 1;
	}
	else if(newkeys & KEY_NO)
	{
	    //----------------------------------- A PIE
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			//----------------------------------- TRABAJOS
			for(new i = 0; i != sizeof obtain_work_coords; i ++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z]))
				{
					if(work_info[i][work_info_TYPE] == WORK_TYPE_FAMILY) continue;

					new player_jobs = CountPlayerJobs(playerid);
					if(ACCOUNT_INFO[playerid][ac_SU])
					{
						if(player_jobs >= MAX_SU_WORKS)
						{
							SendClientMessageEx(playerid, -1, "{FFFFFF}Actualmente tienes %d trabajos, usa /renunciar para dejar un trabajo.", player_jobs);
							return 1;
						}
					}
					else
					{
						if(player_jobs >= MAX_NU_WORKS)
						{
							SendClientMessageEx(playerid, -1, "{FFFFFF}Actualmente tienes %d trabajos, usa /renunciar para dejar un trabajo.", player_jobs);
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Premium", "{FFFFFF}Necesitas ser usuario {f4d942}premium{FFFFFF} para tener más trabajos compra el {f4d942}premium{FFFFFF} con sólo {f44242}5 koins.", "Salir", "");
							return 1;
						}
					}

					if(GetPlayerInterior(playerid) == obtain_work_coords[i][obtain_work_INTERIOR])
					{

						if(work_info[i][work_info_LEVEL] > ACCOUNT_INFO[playerid][ac_LEVEL])
						{
							SendClientMessageEx(playerid, -1, "Necesitas ser al menos nivel %d para obtener este trabajo.", work_info[i][work_info_LEVEL]);
							return 1;
						}

						if(PLAYER_WORKS[playerid][i])
						{
							SendClientMessageEx(playerid, -1, "{FFFFFF}Ya eres %s.", work_info[i][work_info_NAME]);
							return 1;
						}

						if(i == WORK_POLICE && PLAYER_CREW[playerid][player_crew_VALID])
						{
							SendClientMessage(playerid, -1, "{FFFFFF}No puedes ser policía porque perteneces a una banda.");
							return 1;
						}
						if(i == WORK_POLICE && ACCOUNT_INFO[playerid][ac_BLACK_SAPD] == 1)
						{
							SendClientMessage(playerid, -1, "{FFFFFF}No puedes ser policía porque ya no tienes permiso.");
							return 1;
						}

						new DB_Query[256];
						format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_WORKS` SET `SET` = '1' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", ACCOUNT_INFO[playerid][ac_ID], i);
						db_query(Database, DB_Query);

						if(i == WORK_POLICE) SetPoliceRank(playerid);

						PLAYER_WORKS[playerid][i] = true;
						SendClientMessageEx(playerid, -1, "{00FF00}¡Felicidades! {FFFFFF}te han contratado de {00FF00}%s.", work_info[i][work_info_NAME]);
						SendClientMessage(playerid, -1, "Conoce tu trabajo con {FFFF00}/ayuda trabajos {FFFFFF}y revisa lo que tienes que hacer.");
						return 1;
					}
				}
			}
			//----------------------------------- CASA E INTERIORES SALIDAS Y ENTRADAS Y PICKUPS
			new Float:pos[3];
			Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
			Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
			Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

			if(IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2]))
			{
				new info[3];
				Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
				if(info[0] == PICKUP_TYPE_NONE) return 1;

				//----------------------------------- CAJEROS AUTOMATICOS
				if(info[0] == PICKUP_TYPE_ATM)
				{
					if(BANK_ACCOUNT[playerid][bank_account_ID] == 0)
					{
						ShowPlayerMessage(playerid, "No tienes una ~p~cuenta bancaria~w~~h~, generala en un ~r~banco~w~.", 5);
						return 1;
					}
					PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = true;
					ShowDialog(playerid, DIALOG_BANK);
				}
				//----------------------------------- SALIR DE UNA CASA
				switch(info[0])
				{
					case PICKUP_TYPE_ENTER_EXIT:
					{
						if(info[2] == 1) // Está en el Pickup Interior y quiere ir al exterior
						{
							CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
							CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
							PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
							SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_EXT_X], ENTER_EXIT[info[1]][ee_EXT_Y], ENTER_EXIT[info[1]][ee_EXT_Z], ENTER_EXIT[info[1]][ee_EXT_ANGLE], ENTER_EXIT[info[1]][ee_EXT_INTERIOR], ENTER_EXIT[info[1]][ee_EXT_WORLD], false /*ENTER_EXIT[info[1]][ee_EXT_FREEZE]*/);
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
							StopAudioStreamForPlayer(playerid);
						}
					}
					case PICKUP_TYPE_PROPERTY:
					{
						if(info[2] == 1) // Está en el Pickup Interior y quiere ir al exterior
						{
							CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
							CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
							PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;
							SetPlayerPosEx(playerid, PROPERTY_INFO[info[1]][property_EXT_X], PROPERTY_INFO[info[1]][property_EXT_Y], PROPERTY_INFO[info[1]][property_EXT_Z], PROPERTY_INFO[info[1]][property_EXT_ANGLE], PROPERTY_INFO[info[1]][property_EXT_INTERIOR], 0, false /*PROPERTY_INFO[info[1]][property_EXT_FREEZE]*/, false);
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
							StopAudioStreamForPlayer(playerid);
						}
					}
				}
				//----------------------------------- ENTRADA DE UNA CASA
				switch(info[0])
				{
					case PICKUP_TYPE_ENTER_EXIT:
					{
						PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
						if(PLAYER_TEMP[playerid][pt_HOSPITAL] == -1) PLAYER_TEMP[playerid][pt_HOSPITAL] = 1;

						if(info[2] == 2) // Está en el Pickup Exterior y quiere ir al interior
						{
							if(ENTER_EXIT[info[1]][ee_TIME_OPEN] == 0 && ENTER_EXIT[info[1]][ee_TIME_CLOSE] == 0) // 24 horas
							{
								CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_INTERIOR;
								CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = ENTER_EXIT[info[1]][ee_ID];
								PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = info[1];
								SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_INT_X], ENTER_EXIT[info[1]][ee_INT_Y], ENTER_EXIT[info[1]][ee_INT_Z], ENTER_EXIT[info[1]][ee_INT_ANGLE], ENTER_EXIT[info[1]][ee_INT_INTERIOR], ENTER_EXIT[info[1]][ee_INT_WORLD], ENTER_EXIT[info[1]][ee_INT_FREEZE], true);
							}
							else
							{
								if(is_open(SERVER_TIME[0], ENTER_EXIT[info[1]][ee_TIME_OPEN], ENTER_EXIT[info[1]][ee_TIME_CLOSE]))
								{
									CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_INTERIOR;
									CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = ENTER_EXIT[info[1]][ee_ID];
									PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = info[1];
									SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_INT_X], ENTER_EXIT[info[1]][ee_INT_Y], ENTER_EXIT[info[1]][ee_INT_Z], ENTER_EXIT[info[1]][ee_INT_ANGLE], ENTER_EXIT[info[1]][ee_INT_INTERIOR], ENTER_EXIT[info[1]][ee_INT_WORLD], ENTER_EXIT[info[1]][ee_INT_FREEZE], true);
								}
								else SendClientMessageEx(playerid, -1, "{00FF00}%s {FFFFFF}está cerrado, su horario es: {00FF00}%02d:00 - %02d:00.", ENTER_EXIT[info[1]][ee_NAME], ENTER_EXIT[info[1]][ee_TIME_OPEN], ENTER_EXIT[info[1]][ee_TIME_CLOSE]);
							}
						}
					}
					case PICKUP_TYPE_PROPERTY:
					{
						PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
						if(PLAYER_TEMP[playerid][pt_HOSPITAL] == -1) PLAYER_TEMP[playerid][pt_HOSPITAL] = 1;

						if(info[2] == 2) // Está en el Pickup Exterior y quiere ir al interior
						{
							if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
							if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] > 0) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes entrar con cargos.");
							if(!PROPERTY_INFO[info[1]][property_SOLD]) return SendClientMessage(playerid, -1, "{FFFFFF}Esta propiedad está en venta.");
							if(PROPERTY_INFO[info[1]][property_EXTRA] == 0)
							{
								if(PROPERTY_INFO[info[1]][property_CREW])
								{
									if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessageEx(playerid, -1, "{FFFFFF}Solo miembros de la banda pueden entrar.");
									if(PLAYER_CREW[playerid][player_crew_ID] != PROPERTY_INFO[info[1]][property_CREW_ID]) return SendClientMessageEx(playerid, -1, "{FFFFFF}Solo miembros de la banda pueden entrar.");

									CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_GUEST_PROPERTY;
									CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = PROPERTY_INFO[info[1]][property_ID];
									PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = info[1];
									SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE], true);
								}
								else
								{
									if(PROPERTY_INFO[info[1]][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
									{
										CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_OWN_PROPERTY;
										CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = PROPERTY_INFO[info[1]][property_ID];
										PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = info[1];
										SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE], true);
									}
									else
									{
										if(gettime() < PLAYER_TEMP[playerid][pt_ANTIFLOOD_KNOCK_PROPERTY] + 10) return SendClientMessage(playerid, 0xFFFFFFFF, "Espera para volver a tocar, si no te quieren abrir vete.");

										new owner_playerid = GetOwnerIntProperty(PROPERTY_INFO[info[1]][property_ID]);
										if(owner_playerid == -1) return SendClientMessage(playerid, -1, "{FFFFFF}Esta no es tu propiedad y el dueño no está dentro para dejarte entrar.");

										PLAYER_TEMP[playerid][pt_ANTIFLOOD_KNOCK_PROPERTY] = gettime();
										PLAYER_TEMP[owner_playerid][pt_KNOCK_PLAYER_ID] = playerid;
										SendClientMessageEx(owner_playerid, -1, "{00FF00}%s {FFFFFF}está tocando la puerta, para dejarle entrar ve a la puerta y usa {FFFF00}/puerta.", PLAYER_TEMP[playerid][pt_RP_NAME]);
										SendClientMessage(playerid, -1, "{FFFFFF}Has tocado en la puerta, espera para que te abran o vete.");
									}
								}
							}
						 	if(PROPERTY_INFO[info[1]][property_EXTRA] == 4)
							{
								if(PROPERTY_INFO[info[1]][property_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID])
								{
									CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_OWN_PROPERTY;
									CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = PROPERTY_INFO[info[1]][property_ID];
									PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = info[1];
									SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE], true);
								}
								else
								{
									CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = PROPERTY_INFO[info[1]][property_ID];
									PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = info[1];
									SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE], true);
								}
							}
						}
						else ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
					}
					default: ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
				}
				return 1;
			}
			//----------------------------------- COMANDOS COMO: PRODUCTOS
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, -27.964675, -89.948631, 1003.546875))
			{
				ShowDialog(playerid, DIALOG_247_LIST);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2136.6558, -90.7147, 699.0078))
		 	{
				ShowDialog(playerid, DIALOG_FERRETERIA);
				return 1;
			}
			//----------------------------------- COMANDOS COMO: BANCO
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1909.6217, -3520.7922, 993.6496) || IsPlayerInRangeOfPoint(playerid, 1.0, 1909.6206, -3518.8193, 993.6496) || IsPlayerInRangeOfPoint(playerid, 1.0, 1909.6199, -3522.7417, 993.6496) || IsPlayerInRangeOfPoint(playerid, 1.0, 1909.6215, -3516.8120, 993.6496))
			{
				if(BANK_ACCOUNT[playerid][bank_account_ID] == 0) // no tiene cuenta bancaria
				{
					ShowDialog(playerid, DIALOG_CREATE_BANK_ACCOUNT);
					return 1;
				}
				ShowDialog(playerid, DIALOG_BANK);
				return 1;
			}
			//----------------------------------- COMANDOS COMO: BALAS
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1292.4838,-63.6694,1002.4969))
			{
				if(PLAYER_WORKS[playerid][WORK_POLICE]) return ShowPlayerMessage(playerid, "Disculpa, aquí sólo vendemos fruta", 3);
				ShowDialog(playerid, DIALOG_BLACK_MARKET_SELECT_WEA);
				return 1;
			}
			//----------------------------------- COMANDOS COMO: SEMILLAS
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1371.0372,-1890.0668,13.5728))
			{
				ShowDialog(playerid, DIALOG_SEED_LIST);
				return 1;
			}
			//-------------------------------- COMANDOS COMO: POLICIA
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1456.6003, -1721.3387, 1479.7959))
			{
				if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
				if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres policía.");
				if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE)
				{
					SendClientMessageEx(playerid, -1, "{FFFFFF}Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
					return 1;
				}
				if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) ShowDialog(playerid, DIALOG_SELECT_POLICE_SKIN);
				else EndPlayerJob(playerid);
			    return 1;
			}
			//------------------------------------ COMANDOS COMO: REPUESTOS
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2509.2632, -1522.5510, 24.0172))
			{
				if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
				if(GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
				if(!PLAYER_WORKS[playerid][WORK_MECHANIC]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres mecánico.");

				ShowDialog(playerid, DIALOG_REPUESTOS_BUY);
			    return 1;
			}
			//------------------------------------ COMANDOS COMO: METAL
			else if(IsPlayerInRangeOfPoint(playerid, 1.0, 93.1727, -187.8790, 1.4844))
			{
				if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
				if(!PLAYER_WORKS[playerid][WORK_ARMERO]) return ShowPlayerMessage(playerid, "No eres armero.", 3);
				ShowDialog(playerid, DIALOG_METAL_BUY);
			    return 1;
			}
		}
        //----------------------------------- A veh | ARRANQUE Y DETENER VEHÍCULO
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
			{
				if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING]) return SendClientMessage(playerid, -1, "{FFFFFF}Debes esperar a que se cargue el camión.");
				if(TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return SendClientMessage(playerid, -1, "{FFFFFF}Debes esperar a que se descargue el camión para arrancar.");
			}

			if(PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE]) return SendClientMessage(playerid, -1, "{FFFFFF}Termina primero.");

			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
			{
				PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
				UpdateVehicleParams(vehicleid);
				UpdateControlPanelSpeedo(playerid);

				if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) Auto_SendPlayerAction(playerid, "ha detenido su vehículo.");
				else Auto_SendPlayerAction(playerid, "ha detenido el vehículo.");
			}
			else
			{
			    ShowPlayerMessage(playerid, "Arrancando...", 1);
				PLAYER_TEMP[playerid][pt_TIMERS][7] = SetTimerEx("StartVehicleEngine", 1000, false, "ii", playerid, vehicleid);
			}
		}
		return 1;
	}
	return 1;
}

forward ClosePoliceDoor(i);
public ClosePoliceDoor(i)
{
	POLICE_DOORS[i][police_door_CLOSED] = true;
	MoveDynamicObject(POLICE_DOORS[i][police_door_OBJECT_ID], POLICE_DOORS[i][police_door_X], POLICE_DOORS[i][police_door_Y], POLICE_DOORS[i][police_door_Z], 0.0125, 0.0, 0.0, POLICE_DOORS[i][police_door_RZ]);
	return 1;
}

forward ClosePoliceGarageDoor(index);
public ClosePoliceGarageDoor(index)
{
	POLICE_GARAGE_DOORS[index][police_gdoor_CLOSING] = true;
	MoveDynamicObject(POLICE_GARAGE_DOORS[index][police_gdoor_OBJECT_ID], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_X], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_Y], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_Z], POLICE_GARAGE_DOORS[index][police_gdoor_MOVE_SPEED], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_RX], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_RY], POLICE_GARAGE_DOORS[index][police_gdoor_CLOSED_RZ]);
	return 1;
}

forward CloseBarrier(i);
public CloseBarrier(i)
{
	San_Andreas_Barriers[i][barrier_CLOSING] = true;
	MoveDynamicObject(San_Andreas_Barriers[i][barrier_OBJECT_ID], San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 0.72967, 0.0065, 0.0, -90.0, San_Andreas_Barriers[i][barrier_ROTATION]);
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if(PLAYER_TEMP[playerid][pt_KICKED]) return 1;
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return 1;

    if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NONE) ACCOUNT_INFO[playerid][ac_CHECKAFK] = gettime();

	new player_state = GetPlayerState(playerid);
	if(player_state == PLAYER_STATE_SPAWNED || player_state == PLAYER_STATE_SPECTATING) return 1;

	new player_action = GetPlayerSpecialAction(playerid), Float:player_health, Float:player_armour;
	GetPlayerHealth(playerid, player_health);
	GetPlayerArmour(playerid, player_armour);

	if(ac_Info[CHEAT_PLAYER_HEALTH][ac_Enabled])
	{
		if(player_health > CHARACTER_INFO[playerid][ch_HEALTH] + 5.0)
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_PLAYER_HEALTH][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_HEALTH);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_HEALTH][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_HEALTH][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_HEALTH);
				}
			}
		}
	}

	if(ac_Info[CHEAT_PLAYER_ARMOUR][ac_Enabled])
	{
		if(player_armour > CHARACTER_INFO[playerid][ch_ARMOUR] + 5.0)
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_PLAYER_ARMOUR][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_ARMOUR);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_ARMOUR][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_ARMOUR][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_ARMOUR);
				}
			}
		}
	}

	if(ac_Info[CHEAT_JETPACK][ac_Enabled])
	{
		if(player_action == SPECIAL_ACTION_USEJETPACK)
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_JETPACK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_JETPACK);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_JETPACK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_JETPACK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_JETPACK);
				}
			}
		}
	}

	new Keys, up_down, left_right;
	GetPlayerKeys(playerid, Keys, up_down, left_right);

	new Float:dis, Float:vehicle_health, vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) dis = GetPlayerDistanceFromPoint(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2]);
	else
	{
		dis = GetVehicleDistanceFromPoint(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);
		GetVehicleHealth(vehicleid, vehicle_health);
	}

	if(ac_Info[CHEAT_UNOCCUPIED_VEHICLE][ac_Enabled])
	{
		if(vehicleid)
		{
			if(floatabs(dis) > 20.0)
			{
				if(player_state == PLAYER_STATE_PASSENGER)
				{
					if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] == INVALID_PLAYER_ID)
					{
						GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
					}
				}
			}
		}
	}

	if(ac_Info[CHEAT_HIGH_POS][ac_Enabled])
	{
		if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY])
		{
			if(floatabs(dis) > 60.0 && CHARACTER_INFO[playerid][ch_POS][2] > -97.0)
			{
				if(player_state == PLAYER_STATE_PASSENGER)
				{
					if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] == INVALID_PLAYER_ID)
					{
						if(!ac_Info[CHEAT_HIGH_POS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_HIGH_POS, dis);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_HIGH_POS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_HIGH_POS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_HIGH_POS, dis);
						}
					}
				}
				else
				{
					if(!ac_Info[CHEAT_HIGH_POS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_HIGH_POS, dis);
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_HIGH_POS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_DETECTIONS] ++;

						PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_HIGH_POS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_HIGH_POS, dis);
					}
				}
			}
		}
	}

	switch(player_state)
	{
		case PLAYER_STATE_ONFOOT:
		{
			if(ac_Info[CHEAT_PLAYER_SPEED][ac_Enabled])
			{
				if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_IMMUNITY])
				{
					new Float:speed = GetPlayerSpeed(playerid);
					if(speed > 1000)
					{
						if(!ac_Info[CHEAT_PLAYER_SPEED][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_SPEED, speed);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_SPEED][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_SPEED][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_SPEED, speed);
						}
					}
				}
			}

			if(ac_Info[CHEAT_POS][ac_Enabled])
			{
				if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY])
				{
					if(GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID && GetPlayerSurfingObjectID(playerid) == INVALID_OBJECT_ID && player_action != SPECIAL_ACTION_ENTER_VEHICLE && player_action != SPECIAL_ACTION_EXIT_VEHICLE)
					{
						if(floatabs(dis) > 6.0 && CHARACTER_INFO[playerid][ch_POS][2] > -97.0)
						{
							if(!ac_Info[CHEAT_POS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
							else
							{
								if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_POS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] ++;

								PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] = gettime();
								if(PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_POS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
							}
						}
					}
				}
			}

			if(up_down || left_right)
			{
				switch(Keys)
				{
					case KEY_SPRINT:
					{
						PLAYER_TEMP[playerid][pt_PED_STATE] = PED_SPRINTING;
						PLAYER_TEMP[playerid][pt_HUNGRY_THIRST_DISCOUNT_TIME] = 5;
					}
					case KEY_WALK:
					{
						PLAYER_TEMP[playerid][pt_PED_STATE] = PED_WALKING;
						PLAYER_TEMP[playerid][pt_HUNGRY_THIRST_DISCOUNT_TIME] = 10;
					}
					default:
					{
						PLAYER_TEMP[playerid][pt_PED_STATE] = PED_RUNNING;
						PLAYER_TEMP[playerid][pt_HUNGRY_THIRST_DISCOUNT_TIME] = 20;
					}
				}
			}
			else PLAYER_TEMP[playerid][pt_PED_STATE] = PED_STOPPED;
		}
		case PLAYER_STATE_DRIVER:
		{
			new Float:Vehicle_Speed = GetVehicleSpeed(vehicleid);

			if(ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Enabled])
			{
				if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_IMMUNITY])
				{
					if(Vehicle_Speed > 1000)
					{
						if(!ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_SPEED_HACK);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_SPEED_HACK);
						}
					}
				}
			}

			if(ac_Info[CHEAT_VEHICLE_HEALTH][ac_Enabled])
			{
				if(vehicle_health > (GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] + 20.0))
				{
					if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY])
					{
						if(!ac_Info[CHEAT_VEHICLE_HEALTH][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_HEALTH, (GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] + 5.0) - vehicle_health);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_HEALTH][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_HEALTH][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_HEALTH);
						}
					}
				}
			}

			if(ac_Info[CHEAT_POS][ac_Enabled])
			{
				if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY])
				{
					if(Vehicle_Speed < 20.0 && floatabs(dis) >= 10.0 && GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] > -97.0)
					{
						if(!ac_Info[CHEAT_POS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_POS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_POS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
						}
					}
				}
			}

			if(ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Enabled])
			{
				if(Keys == KEY_SPRINT)
				{
					if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] && Vehicle_Speed > 60 && GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] > -97.0 && VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_ENGINE])
					{
						if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY])
						{
							if(!ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_NOFUEL);
							else
							{
								if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_DETECTIONS] ++;

								PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_LAST_DETECTION] = gettime();
								if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_NOFUEL);
							}
						}
					}
				}
			}

			if(IsPlayerInBike(playerid))
			{
				if(Keys == KEY_SPRINT)
				{
					PLAYER_TEMP[playerid][pt_PED_STATE] = PED_BYCICLING;
					PLAYER_TEMP[playerid][pt_HUNGRY_THIRST_DISCOUNT_TIME] = 10;
				}
				else
				{
					PLAYER_TEMP[playerid][pt_PED_STATE] = PED_STOPPED;
					PLAYER_TEMP[playerid][pt_HUNGRY_THIRST_DISCOUNT_TIME] = 20;
				}
			}
			else
			{
				PLAYER_TEMP[playerid][pt_PED_STATE] = PED_STOPPED;
				PLAYER_TEMP[playerid][pt_HUNGRY_THIRST_DISCOUNT_TIME] = 20;
			}
		}
	}

	CHARACTER_INFO[playerid][ch_HEALTH] = player_health;
	CHARACTER_INFO[playerid][ch_ARMOUR] = player_armour;
	GetPlayerPos(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2]);
	if(vehicleid)
	{
		GetVehiclePos(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = vehicle_health;
	}
	
	if(CHARACTER_INFO[playerid][ch_CASH] != GetPlayerMoney(playerid))
	{
		ResetPlayerMoney(playerid);
		GivePlayerMoney(playerid, CHARACTER_INFO[playerid][ch_CASH]);
	}

	return 1;
}

IsPlayerInBike(playerid)
{
	new model = GetVehicleModel(GetPlayerVehicleID(playerid));
	if(model == 481 || model == 509 || model == 510) return true;
	return false;
}

SetPlayerPosEx(playerid, Float:x, Float:y, Float:z, Float:angle, interior, world, freeze = 0, addoffset = 0)
{
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE][p_ac_info_IMMUNITY] = gettime() + 5;

	if(addoffset)
	{
		x += (1.5 * floatsin(-angle, degrees));
		y += (1.5 * floatcos(-angle, degrees));
	}

	CHARACTER_INFO[playerid][ch_POS][0] = x;
	CHARACTER_INFO[playerid][ch_POS][1] = y;
	CHARACTER_INFO[playerid][ch_POS][2] = z;
	CHARACTER_INFO[playerid][ch_ANGLE] = angle;

	SetPlayerPos(playerid, x, y, z);
	SetPlayerFacingAngle(playerid, angle);
	SetPlayerInterior(playerid, interior);
	SetPlayerVirtualWorld(playerid, world);
	SetCameraBehindPlayer(playerid);

	if(freeze)
	{
		TogglePlayerControllable(playerid, false);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
		PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
	}
	return 1;
}

forward TogglePlayerControl(playerid, bool:controlable);
public TogglePlayerControl(playerid, bool:controlable)
{
	return TogglePlayerControllable(playerid, controlable);
}

forward LoadingGas(playerid);
public LoadingGas(playerid)
{
    KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][22]);
    CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
    ShowPlayerMessage(playerid, "Gasolina cargada.", 3);
    TogglePlayerControllable(playerid, true);
	return 1;
}

forward LoginKick(playerid);
public LoginKick(playerid)
{
    KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][18]);
    Kick(playerid);
	return 1;
}

forward DescongelaTeaser(playerid);
public DescongelaTeaser(playerid)
{
    KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][21]);
    PLAYER_TEMP[playerid][pt_TEASERING] = false;
    TogglePlayerControllable(playerid, true);
	return 1;
}

GetNearestHospitalForPlayer(playerid)
{
	new Float:distance = 99999.0,
        Float:tmp_distance,
        closest = -1;

    for(new i = 0; i < sizeof Hospital_Spawn_Positions; i++)
    {
        tmp_distance = GetPlayerDistanceFromPoint(playerid, Hospital_Spawn_Positions[i][0], Hospital_Spawn_Positions[i][1], Hospital_Spawn_Positions[i][2]);
        if (tmp_distance < distance)
        {
            distance = tmp_distance;
            closest = i;
        }
    }
	return closest;
}


/*
new Float:Hospital_1_Rooms[][4] =
{
	{1956.842041, 1160.172607, -5.208699, 271.393920},
	{1955.839355, 1166.306152, -5.208699, 270.912200},
	{1956.226684, 1172.363159, -5.208699, 267.923767}
}; */

GetHospitalSpawnPosition(hospital, &Float:x, &Float:y, &Float:z, &Float:angle, &interior, &local_interior, &rp_state)
{
	x = Hospital_Spawn_Positions[hospital][0];
	y = Hospital_Spawn_Positions[hospital][1];
	z = Hospital_Spawn_Positions[hospital][2];
	angle = Hospital_Spawn_Positions[hospital][3];
	interior = 0;
	local_interior = 0;
	rp_state = ROLEPLAY_STATE_NORMAL;

	/*switch(hospital)
	{
		case 1:
		{
			new room = random(sizeof(Hospital_1_Rooms));
			x = Hospital_1_Rooms[room][0];
			y = Hospital_1_Rooms[room][1];
			z = Hospital_1_Rooms[room][2];
			angle = Hospital_1_Rooms[room][3];
			interior = 10;
			local_interior = 1;
			rp_state = ROLEPLAY_STATE_INTERIOR;
		}
		default:
		{
			x = Hospital_Spawn_Positions[hospital][0];
			y = Hospital_Spawn_Positions[hospital][1];
			z = Hospital_Spawn_Positions[hospital][2];
			angle = Hospital_Spawn_Positions[hospital][3];
			interior = 0;
			local_interior = 0;
			rp_state = ROLEPLAY_STATE_NORMAL;
		}
	}*/
	return 1;
}

UpdateHospitalSizeTextdrawLife(playerid)
{
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 270.0 + ( PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] * 0.98), 0.000000);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2]);
	return 1;
}

forward HealthUp(playerid);
public HealthUp(playerid)
{
	if(CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_HOSPITAL) return 1;

	if(PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] < 100.0)
	{
		if(ACCOUNT_INFO[playerid][ac_SU]) PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] += 10.0;
		else PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] += 5.0;

		if(PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] > 100.0) PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] = 100.0;
		UpdateHospitalSizeTextdrawLife(playerid);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][4]);
		PLAYER_TEMP[playerid][pt_TIMERS][4] = SetTimerEx("HealthUp", 1000, false, "i", playerid);
	}
	else
	{
		if(ACCOUNT_INFO[playerid][ac_SU]) CHARACTER_INFO[playerid][ch_HEALTH] = 100.0;
		else CHARACTER_INFO[playerid][ch_HEALTH] = 50.0;

		SetPlayerHealthEx(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);

		ClearPlayerChat(playerid);
		SendClientMessage(playerid, -1, "{FFFFFF}Te has recuperado.");
		new price = ACCOUNT_INFO[playerid][ac_LEVEL] * 200;
		if(price > 1200) price = 1200;
		price += minrand(100, 200);

		if(price > CHARACTER_INFO[playerid][ch_CASH])
		{
			price = CHARACTER_INFO[playerid][ch_CASH];
			if(price < 0) price = 0;
		}

		SendClientMessageEx(playerid, -1, "{FFFFFF}El coste de los servicios médicos ofrecidos es de {41f48f}$%s", number_format_thousand(price));
		GivePlayerCash(playerid, -price);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0]);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1]);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2]);
		CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = 0;
		PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;

		if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] > 0 || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED)
		{
			CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_JAIL;
			if(ACCOUNT_INFO[playerid][ac_SU]) CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 150 * CHARACTER_INFO[playerid][ch_WANTED_LEVEL];
			else CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 300 * CHARACTER_INFO[playerid][ch_WANTED_LEVEL];
			CHARACTER_INFO[playerid][ch_WANTED_LEVEL] = 0;
			CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] = 0;
			PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME] = gettime();
			SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_ANGLE], 0, 0, 0, 0, 0, 0);
			CHARACTER_INFO[playerid][ch_INTERIOR] = JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_INTERIOR];

			new time = CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME]);
			SendClientMessageEx(playerid, -1, "{FFFFFF}Te quedan %s minutos de condena.", TimeConvert(time));
		}
		else
		{
			GetHospitalSpawnPosition(PLAYER_TEMP[playerid][pt_HOSPITAL], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], CHARACTER_INFO[playerid][ch_INTERIOR], CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA], CHARACTER_INFO[playerid][ch_STATE]);
			SetSpawnInfo(playerid, NO_TEAM, CHARACTER_INFO[playerid][ch_SKIN], CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], 0, 0, 0, 0, 0, 0);
		}
		PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = true;
		TogglePlayerSpectatingEx(playerid, false);
	}
	return 1;
}

forward Tutorial1(playerid);
public Tutorial1(playerid)
{
   ShowPlayerMessageNotification(playerid, "Pero mira quien esta aqui, bienvenido a la ciudad, te explicaré unas cosas antes de continuar...", 8);
   PLAYER_TEMP[playerid][pt_TIMERS][20] = SetTimerEx("Tutorial2",8000,false,"i",playerid);
   PlayerPlaySound(playerid,30803,0.0,0.0,0.0);
   return 1;
}

forward Tutorial2(playerid);
public Tutorial2(playerid)
{
   ShowPlayerMessageNotification(playerid, "Tú sed y hambre están debajo del mapa. Puedes guardar comida y la puedes ver con ~y~/alimentos.", 10);
   PLAYER_TEMP[playerid][pt_TIMERS][20] = SetTimerEx("Tutorial3",10000,false,"i",playerid);
   PlayerPlaySound(playerid,30803,0.0,0.0,0.0);
   return 1;
}

forward Tutorial3(playerid);
public Tutorial3(playerid)
{
   ShowPlayerMessageNotification(playerid, "Ya habrás notado que eres ~g~~h~nivel 1~w~, sube de nivel llenando la barrita verde de abajo.", 10);
   PLAYER_TEMP[playerid][pt_TIMERS][20] = SetTimerEx("Tutorial4",10000,false,"i",playerid);
   PlayerPlaySound(playerid,30803,0.0,0.0,0.0);
   return 1;
}

forward Tutorial4(playerid);
public Tutorial4(playerid)
{
   ShowPlayerMessageNotification(playerid, "Cada hora recibirás tu ~r~~h~payday.~w~~h~ El payday es un pago por vivir en nuestra ciudad, literal.", 7);
   PLAYER_TEMP[playerid][pt_TIMERS][20] = SetTimerEx("Tutorial5",7000,false,"i",playerid);
   PlayerPlaySound(playerid,30803,0.0,0.0,0.0);
   return 1;
}

forward Tutorial5(playerid);
public Tutorial5(playerid)
{
   ShowPlayerMessageNotification(playerid, "Usa ~y~/ayuda~w~~h~ para conocer y entender que estás jugando y lo que se viene para tu personaje.", 8);
   PLAYER_TEMP[playerid][pt_TIMERS][20] = SetTimerEx("Tutorial6",8000,false,"i",playerid);
   PlayerPlaySound(playerid,30803,0.0,0.0,0.0);
   return 1;
}

forward Tutorial6(playerid);
public Tutorial6(playerid)
{
   ShowPlayerMessageNotification(playerid, "Te he dado un poco de ~g~~h~dinero~w~, úsalo para comprar cosas dentro de 24/7 o para lo que se te ocurra.", 8);
   PLAYER_TEMP[playerid][pt_TIMERS][20] = SetTimerEx("Tutorial7",8000,false,"i",playerid);
   PlayerPlaySound(playerid,30803,0.0,0.0,0.0);
   return 1;
}

forward Tutorial7(playerid);
public Tutorial7(playerid)
{
   ShowPlayerMessageNotification(playerid, "Ahora mismo no tienes ~p~cuenta bancaria~w~~h~, te recomiendo abrir una cuenta porque es necesaria.", 8);
   PLAYER_TEMP[playerid][pt_TIMERS][20] = SetTimerEx("Tutorial8",6401,false,"i",playerid);
   PlayerPlaySound(playerid,30803,0.0,0.0,0.0);
   return 1;
}

forward Tutorial8(playerid);
public Tutorial8(playerid)
{
   ShowPlayerMessageNotification(playerid, "Bueno, llegará el tiempo de buscar trabajo, usa ~y~/ayuda trabajos~w~~h~ y empieza a generar dinero.", 8);
   PLAYER_TEMP[playerid][pt_TIMERS][20] = SetTimerEx("Tutorial9",8000,false,"i",playerid);
   PlayerPlaySound(playerid,30803,0.0,0.0,0.0);
   return 1;
}

forward Tutorial9(playerid);
public Tutorial9(playerid)
{
   ShowPlayerMessageNotification(playerid, "Habrán algunos trabajos dónde necesitarás ~p~aprender experiencia ~w~~h~para ganar más dinero.", 8);
   PLAYER_TEMP[playerid][pt_TIMERS][20] = SetTimerEx("Tutorial10",8000,false,"i",playerid);
   PlayerPlaySound(playerid,30803,0.0,0.0,0.0);
   return 1;
}

forward Tutorial10(playerid);
public Tutorial10(playerid)
{
   ShowPlayerMessageNotification(playerid, "Por supuesto, si quieres una ~p~cuenta premium~w~~h~ usa ~y~/ayuda premium~w~~h~ para ver cómo obtenerla.", 8);
   PLAYER_TEMP[playerid][pt_TIMERS][20] = SetTimerEx("Tutorial11",8000,false,"i",playerid);
   PlayerPlaySound(playerid,30803,0.0,0.0,0.0);
   return 1;
}

forward Tutorial11(playerid);
public Tutorial11(playerid)
{
   ShowPlayerMessageNotification(playerid, "Ya por último, usa ~y~/duda~w~~h~ para resolver alguna inquietud que te surga.", 6);
   PLAYER_TEMP[playerid][pt_TIMERS][20] = SetTimerEx("Tutorial12",6000,false,"i",playerid);
   PlayerPlaySound(playerid,30803,0.0,0.0,0.0);
   return 1;
}

forward Tutorial12(playerid);
public Tutorial12(playerid)
{
   ShowPlayerMessageNotification(playerid, "Verás mis mensajes en sucesos importantes de tu vida, me voy, buena suerte...", 9);
   KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][20]);
   PlayerPlaySound(playerid,30803,0.0,0.0,0.0);
   return 1;
}

TogglePlayerSpectatingEx(playerid, bool:spectate)
{
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_TEMP[playerid][pt_PLAYER_SPECTATE] = spectate;
	return TogglePlayerSpectating(playerid, spectate);
}

CreateInteriorActor(interior_type, world, interior)
{
	if(interior_type == INTERIOR_NO_INFO) return 0;

	new skin, Float:pos[4];

	switch(interior_type)
	{
		/*case INTERIOR_GENERAL_HOSPITAL:
		{
			skin 	= 308;
			pos[0]	= 1969.236572;
			pos[1]	= 1169.541259;
			pos[2]	= -5.208700;
			pos[3]	= 178.0;
		}*/
		case INTERIOR_BINCO:
		{
			skin 	= 119;
			pos[0]	= 208.376373;
			pos[1]	= -98.703956;
			pos[2]	= 1005.257812;
			pos[3]	= 180.0;
		}
		case INTERIOR_SUBURBAN:
		{
			skin 	= 191;
			pos[0]	= 203.826187;
			pos[1]	= -41.667518;
			pos[2]	= 1001.804687;
			pos[3]	= 180.0;
		}
		case INTERIOR_PROLAPS:
		{
			skin 	= 190;
			pos[0]	= 207.139907;
			pos[1]	= -127.805473;
			pos[2]	= 1003.507812;
			pos[3]	= 180.0;
		}
		case INTERIOR_DIDIER_SACHS:
		{
			skin 	= 169;
			pos[0]	= 204.275909;
			pos[1]	= -157.829010;
			pos[2]	= 1000.523437;
			pos[3]	= 180.0;
		}
		case INTERIOR_VICTIM:
		{
			skin 	= 217;
			pos[0]	= 204.853225;
			pos[1]	= -8.764448;
			pos[2]	= 1001.210937;
			pos[3]	= 270.0;
		}
		case INTERIOR_ZIP:
		{
			skin 	= 211;
			pos[0]	= 162.226135;
			pos[1]	= -81.191978;
			pos[2]	= 1001.804687;
			pos[3]	= 180.0;
		}
		case INTERIOR_247:
		{
			skin 	= 184;
			pos[0]	= -27.483411;
			pos[1]	= -91.628837;
			pos[2]	= 1003.546875;
			pos[3]	= 0.0;
		}
		case INTERIOR_PIZZA:
		{
			skin 	= 155;
			pos[0] 	= 375.114501;
			pos[1] 	= -117.272621;
			pos[2] 	= 1001.492187;
			pos[3]	= 180.0;
		}
		case INTERIOR_CLUCKIN_BELL:
		{
			skin 	= 167;
			pos[0] 	= 368.652679;
			pos[1] 	= -4.492218;
			pos[2] 	= 1001.851562;
			pos[3]	= 180.0;
		}
		case INTERIOR_BURGER_SHOT:
		{
			skin 	= 205;
			pos[0] 	= 376.114227;
			pos[1] 	= -65.848991;
			pos[2] 	= 1001.507812;
			pos[3]	= 180.0;
		}
		case INTERIOR_CAFE:
		{
			skin 	= 11;
			pos[0] 	= 450.3446;
			pos[1] 	= -82.2277;
			pos[2] 	= 999.5547;
			pos[3]	= 180.7950;
		}
		case INTERIOR_DONUT:
		{
			skin 	= 209;
			pos[0] 	= 380.6629;
			pos[1] 	= -187.8829;
			pos[2] 	= 1000.6328;
			pos[3]	= 90.36;
		}
		case INTERIOR_UNITY_STATION:
		{
			skin 	= 184;
			pos[0] 	= 1489.038818;
			pos[1] 	= 1305.631591;
			pos[2] 	= 1093.296386;
			pos[3]	= 270.0;
		}
		case INTERIOR_ARMY:
		{
			skin 	= 127;
			pos[0] 	= 1291.2963;
			pos[1] 	= -66.8000;
			pos[2] 	= 1002.4946;
			pos[3]	= 0.0;
		}
		case INTERIOR_BAR:
		{
			skin 	= 178;
			pos[0] 	= -1.1;
			pos[1] 	= -1.1;
			pos[2] 	= 1.1;
			pos[3]	= 0.0;
		}
	}
	CreateDynamicActor(skin, pos[0], pos[1], pos[2], pos[3], true, 100.0, world, interior);
	return 1;
}

GetFastFoodLocalIndexByIntType(interior_type)
{
	for(new i = 0; i != sizeof Fast_Food_Positions; i ++)
	{
		if(Fast_Food_Positions[i][fast_food_INTERIOR_TYPE] == interior_type) return i;
	}
	return -1;
}

GetClothingShopIndexByIntType(interior_type)
{
	for(new i = 0; i != sizeof Clothing_Shop_Positions; i ++)
	{
		if(Clothing_Shop_Positions[i][clothing_shop_INTERIOR_TYPE] == interior_type) return i;
	}
	return -1;
}

ShowToysShopTextdraws(playerid)
{
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9]);
	return 1;
}

HideToysShopTextdraws(playerid)
{
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9]);
	return 1;
}

ClosePlayerToysMenu(playerid)
{
	SetPlayerVirtualWorld(playerid, ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INT_WORLD] );
	TogglePlayerControllable(playerid, true);

	HideToysShopTextdraws(playerid);
	//PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = 0;
	PLAYER_TEMP[playerid][pt_TOYS_SHOP] = false;
	PLAYER_TEMP[playerid][pt_TOYS_SHOP_TYPE] = 0;
	CancelSelectTextDrawEx(playerid);
	return 1;
}

RegisterNewPlayerToy(playerid, slot)
{
	new DBResult:Result, DB_Query[800];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PLAYER_TOYS`\
		(\
			`ID_USER`, `NAME`, `ATTACHED`, `MODELID`, `BONE`, `OFFSET_X`, `OFFSET_Y`, `OFFSET_Z`, `ROT_X`, `ROT_Y`, `ROT_Z`, `SCALE_X`, `SCALE_Y`, `SCALE_Z`, `COLOR_1`, `COLOR_2`\
		)\
		VALUES\
		(\
			'%d', '%q', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d'\
		);\
		SELECT MAX(`ID_TOY`) FROM `PLAYER_TOYS`;\
	",
		ACCOUNT_INFO[playerid][ac_ID],
		PLAYER_TOYS[playerid][slot][player_toy_NAME], PLAYER_TOYS[playerid][slot][player_toy_ATTACHED], PLAYER_TOYS[playerid][slot][player_toy_MODELID], PLAYER_TOYS[playerid][slot][player_toy_BONE],
		PLAYER_TOYS[playerid][slot][player_toy_OFFSET_X], PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Y], PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Z],
		PLAYER_TOYS[playerid][slot][player_toy_ROT_X], PLAYER_TOYS[playerid][slot][player_toy_ROT_Y], PLAYER_TOYS[playerid][slot][player_toy_ROT_Z],
		PLAYER_TOYS[playerid][slot][player_toy_SCALE_X], PLAYER_TOYS[playerid][slot][player_toy_SCALE_Y], PLAYER_TOYS[playerid][slot][player_toy_SCALE_Z],
		PLAYER_TOYS[playerid][slot][player_toy_COLOR_1], PLAYER_TOYS[playerid][slot][player_toy_COLOR_2]
	);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result)) PLAYER_TOYS[playerid][slot][player_toy_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);
	return 1;
}


UpdateToysShopSombreros(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_TOYS_SHOP]) return 0;

	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], Toys_Shop_Sombreros[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_modelid]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3]);

	if(Toys_Shop_Sombreros[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd] > 0)
	{
		new td_str[128]; format(td_str, sizeof td_str, "Modelo:_%s~n~Precio:_~r~~h~%d superdolares", Toys_Shop_Sombreros[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model], Toys_Shop_Sombreros[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd]);
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], td_str);
		if(ACCOUNT_INFO[playerid][ac_SD] < Toys_Shop_Sombreros[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd]) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], -900267777);
		else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1855979775);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	}
	else
	{
		new td_str[128]; format(td_str, sizeof td_str, "Modelo:_%s~n~Precio:_$%s", Toys_Shop_Sombreros[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model], number_format_thousand( Toys_Shop_Sombreros[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price] ));
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], td_str);
		if(CHARACTER_INFO[playerid][ch_CASH] < Toys_Shop_Sombreros[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], -900267777);
		else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1855979775);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	}

    new td_str[128];
	format(td_str, sizeof td_str, "%d/%d", PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] + 1, sizeof(Toys_Shop_Sombreros));
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], td_str);
	return 1;
}
UpdateToysShopGafas(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_TOYS_SHOP]) return 0;

	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], Toys_Shop_Gafas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_modelid]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3]);

	if(Toys_Shop_Gafas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd] > 0)
	{
		new td_str[128]; format(td_str, sizeof td_str, "Modelo:_%s~n~Precio:_~r~~h~%d superdolares", Toys_Shop_Gafas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model], Toys_Shop_Gafas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd]);
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], td_str);
		if(ACCOUNT_INFO[playerid][ac_SD] < Toys_Shop_Gafas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd]) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], -900267777);
		else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1855979775);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	}
	else
	{
		new td_str[128]; format(td_str, sizeof td_str, "Modelo:_%s~n~Precio:_$%s", Toys_Shop_Gafas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model], number_format_thousand( Toys_Shop_Gafas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price] ));
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], td_str);
		if(CHARACTER_INFO[playerid][ch_CASH] < Toys_Shop_Gafas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], -900267777);
		else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1855979775);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	}

    new td_str[128];
	format(td_str, sizeof td_str, "%d/%d", PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] + 1, sizeof(Toys_Shop_Gafas));
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], td_str);
	return 1;
}
UpdateToysShopMascaras(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_TOYS_SHOP]) return 0;

	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], Toys_Shop_Mascaras[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_modelid]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3]);

	if(Toys_Shop_Mascaras[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd] > 0)
	{
		new td_str[128]; format(td_str, sizeof td_str, "Modelo:_%s~n~Precio:_~r~~h~%d superdolares", Toys_Shop_Mascaras[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model], Toys_Shop_Mascaras[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd]);
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], td_str);
		if(ACCOUNT_INFO[playerid][ac_SD] < Toys_Shop_Mascaras[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd]) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], -900267777);
		else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1855979775);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	}
	else
	{
		new td_str[128]; format(td_str, sizeof td_str, "Modelo:_%s~n~Precio:_$%s", Toys_Shop_Mascaras[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model], number_format_thousand( Toys_Shop_Mascaras[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price] ));
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], td_str);
		if(CHARACTER_INFO[playerid][ch_CASH] < Toys_Shop_Mascaras[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], -900267777);
		else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1855979775);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	}

    new td_str[128];
	format(td_str, sizeof td_str, "%d/%d", PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] + 1, sizeof(Toys_Shop_Mascaras));
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], td_str);
	return 1;
}
UpdateToysShopMochilas(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_TOYS_SHOP]) return 0;

	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], Toys_Shop_Mochilas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_modelid]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3]);

	if(Toys_Shop_Mochilas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd] > 0)
	{
		new td_str[128]; format(td_str, sizeof td_str, "Modelo:_%s~n~Precio:_~r~~h~%d superdolares", Toys_Shop_Mochilas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model], Toys_Shop_Mochilas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd]);
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], td_str);
		if(ACCOUNT_INFO[playerid][ac_SD] < Toys_Shop_Mochilas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd]) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], -900267777);
		else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1855979775);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	}
	else
	{
		new td_str[128]; format(td_str, sizeof td_str, "Modelo:_%s~n~Precio:_$%s", Toys_Shop_Mochilas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model], number_format_thousand( Toys_Shop_Mochilas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price] ));
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], td_str);
		if(CHARACTER_INFO[playerid][ch_CASH] < Toys_Shop_Mochilas[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], -900267777);
		else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1855979775);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	}

    new td_str[128];
	format(td_str, sizeof td_str, "%d/%d", PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] + 1, sizeof(Toys_Shop_Mochilas));
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], td_str);
	return 1;
}
UpdateToysShopRelojes(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_TOYS_SHOP]) return 0;

	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], Toys_Shop_Relojes[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_modelid]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3]);

	if(Toys_Shop_Relojes[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd] > 0)
	{
		new td_str[128]; format(td_str, sizeof td_str, "Modelo:_%s~n~Precio:_~r~~h~%d superdolares", Toys_Shop_Relojes[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model], Toys_Shop_Relojes[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd]);
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], td_str);
		if(ACCOUNT_INFO[playerid][ac_SD] < Toys_Shop_Relojes[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd]) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], -900267777);
		else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1855979775);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	}
	else
	{
		new td_str[128]; format(td_str, sizeof td_str, "Modelo:_%s~n~Precio:_$%s", Toys_Shop_Relojes[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model], number_format_thousand( Toys_Shop_Relojes[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price] ));
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], td_str);
		if(CHARACTER_INFO[playerid][ch_CASH] < Toys_Shop_Relojes[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], -900267777);
		else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1855979775);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	}

    new td_str[128];
	format(td_str, sizeof td_str, "%d/%d", PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] + 1, sizeof(Toys_Shop_Relojes));
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], td_str);
	return 1;
}
UpdateToysShopEspeciales(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_TOYS_SHOP]) return 0;

	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], Toys_Shop_Especiales[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_modelid]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3]);

	if(Toys_Shop_Especiales[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd] > 0)
	{
		new td_str[128]; format(td_str, sizeof td_str, "Modelo:_%s~n~Precio:_~r~~h~%d superdolares", Toys_Shop_Especiales[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model], Toys_Shop_Especiales[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd]);
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], td_str);
		if(ACCOUNT_INFO[playerid][ac_SD] < Toys_Shop_Especiales[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price_sd]) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], -900267777);
		else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1855979775);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	}
	else
	{
		new td_str[128]; format(td_str, sizeof td_str, "Modelo:_%s~n~Precio:_$%s", Toys_Shop_Especiales[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model], number_format_thousand( Toys_Shop_Especiales[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price] ));
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], td_str);
		if(CHARACTER_INFO[playerid][ch_CASH] < Toys_Shop_Especiales[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], -900267777);
		else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1855979775);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	}

    new td_str[128];
	format(td_str, sizeof td_str, "%d/%d", PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] + 1, sizeof(Toys_Shop_Especiales));
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], td_str);
	return 1;
}


ShowClothingShopTextdraws(playerid)
{
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5]);
	return 1;
}

HideClothingShopTextdraws(playerid)
{
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5]);
	return 1;
}

ClosePlayerClothingMenu(playerid)
{
	CHARACTER_INFO[playerid][ch_POS][0] = Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_X];
	CHARACTER_INFO[playerid][ch_POS][1] = Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_Y];
	CHARACTER_INFO[playerid][ch_POS][2] = Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_Z];
	CHARACTER_INFO[playerid][ch_ANGLE] = Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_ANGLE];
	SetPlayerSkin(playerid, CHARACTER_INFO[playerid][ch_SKIN]);
	TogglePlayerControllable(playerid, true);

	HideClothingShopTextdraws(playerid);
	PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
	PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] = -1;
	PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = 0;
	CancelSelectTextDrawEx(playerid);
	return 1;
}

ExitPlayerWardrobe(playerid)
{
	SetPlayerPosEx(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], CHARACTER_INFO[playerid][ch_ANGLE], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INT_INTERIOR], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INT_WORLD], false, true);
	return 1;
}

UpdateClothingShop(playerid)
{
	if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] == -1) return 0;

	new cost, textdraw_str[128];
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_NAME]);

	switch(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
	{
		case INTERIOR_BINCO:
		{
			switch(CHARACTER_INFO[playerid][ch_SEX])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Binco_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Binco_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_$%s~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Binco_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Binco_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Binco_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_$%s~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Binco_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_SUBURBAN:
		{
			switch(CHARACTER_INFO[playerid][ch_SEX])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Suburban_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Suburban_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_$%s~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Suburban_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Suburban_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Suburban_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_$%s~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Suburban_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_PROLAPS:
		{
			switch(CHARACTER_INFO[playerid][ch_SEX])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Prolaps_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Prolaps_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_$%s~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Prolaps_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Prolaps_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Prolaps_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_$%s~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Prolaps_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_DIDIER_SACHS:
		{
			switch(CHARACTER_INFO[playerid][ch_SEX])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Didier_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Didier_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_$%s~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Didier_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Didier_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Didier_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_$%s~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Didier_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_VICTIM:
		{
			switch(CHARACTER_INFO[playerid][ch_SEX])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Victim_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Victim_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_$%s~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Victim_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Victim_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Victim_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_$%s~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Victim_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_ZIP:
		{
			switch(CHARACTER_INFO[playerid][ch_SEX])
			{
				case SEX_MALE:
				{
					SetPlayerSkin(playerid, Zip_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Zip_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_$%s~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Zip_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEX_FEMALE:
				{
					SetPlayerSkin(playerid, Zip_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Zip_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(CHARACTER_INFO[playerid][ch_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_$%s~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Zip_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
	}
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2]);
	return 1;
}

stock number_format_thousand(e_number) /* By adri1 - SFR3 4.3 */
{
	new f_string[24], bool:negative;
	format(f_string, sizeof f_string, "%d", e_number);
	if(e_number < 0)
	{
		negative = true;
		strdel(f_string, 0, 1);
	}

	new numbers = strlen(f_string);
	while(numbers > 3)
	{
		numbers -= 3;
		strins(f_string, ".", numbers);
	}

	if(negative) strins(f_string, "-", 0);
	return f_string;
}

stock number_format_dash(e_number) /* By adri1 - SFR3 4.3 */
{
	new f_string[24], bool:negative;
	format(f_string, sizeof f_string, "%d", e_number);
	if(e_number < 0)
	{
		negative = true;
		strdel(f_string, 0, 1);
	}

	new numbers = strlen(f_string);
	while(numbers > 3)
	{
		numbers -= 3;
		strins(f_string, "-", numbers);
	}

	if(negative) strins(f_string, "- ", 0);
	return f_string;
}

SelectTextDrawEx(playerid, color)
{
	PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW] = true;
	return SelectTextDraw(playerid, color);
}

CancelSelectTextDrawEx(playerid)
{
	PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW] = false;
	return CancelSelectTextDraw(playerid);
}

UpdatePlayerHud(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_HUD_TEXTDRAWS]) return 0;

	SetPlayerProgressBarValue(playerid, PlayerBar:barrahungry[playerid], CHARACTER_INFO[playerid][ch_HUNGRY]);
    SetPlayerProgressBarMaxValue(playerid, PlayerBar:barrahungry[playerid], 100);

	SetPlayerProgressBarValue(playerid, PlayerBar:barrased[playerid], CHARACTER_INFO[playerid][ch_THIRST]);
    SetPlayerProgressBarMaxValue(playerid, PlayerBar:barrased[playerid], 100);
	return 1;
}

#define INTERVAL_HUNGRY_THIRST_DOWN	2 // 2 segundos de timer

#define THIRST_HOURS_STOPPED	9 // 9 horas parado si agua esta a 100 va a 0
#define HUNGRY_HOURS_STOPPED	12 // 12 horas parado si alimentacion esta a 100 va a 0

#define THIRST_HOURS_WALKING	6 // 6 horas andando si agua esta a 100 va a 0
#define HUNGRY_HOURS_WALKING	8 // 8 horas andando si alimentacion esta a 100 va a 0

#define THIRST_HOURS_RUNNING	2 // 2 horas corriendo si agua esta a 100 va a 0
#define HUNGRY_HOURS_RUNNING	4 // 4 horas corriendo si alimentacion esta a 100 va a 0

#define THIRST_HOURS_SPRINTING	1 // 1 horas esprintando si agua esta a 100 va a 0
#define HUNGRY_HOURS_SPRINTING	2 // 2 horas esprintando si alimentacion esta a 100 va a 0

#define THIRST_HOURS_BYCICLING	3
#define HUNGRY_HOURS_BYCICLING	6

forward HungryThirstDown(playerid);
public HungryThirstDown(playerid)
{
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return HidePlayerHud(playerid);
	if(!PLAYER_TEMP[playerid][pt_HUD_TEXTDRAWS]) return HidePlayerHud(playerid);

	if(ACCOUNT_INFO[playerid][ac_SU])
	{
		if(gettime() - PLAYER_TEMP[playerid][pt_LAST_SU_CHECK] > 300)
		{
			CheckPlayerSuperUser(playerid);
		}
	}

	if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] > 0 && CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_NORMAL && !PLAYER_TEMP[playerid][pt_CUFFED])
	{
		if(gettime() - PLAYER_TEMP[playerid][pt_LAST_SET_WANTED_LEVEL] > 300)
		{
			if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] == 1)
			{
				SendClientMessageEx(playerid, -1, "{FFFFFF}Has perdido de vista a la policía.");
				SetPlayerWantedLevelEx(playerid, 0, "indefinido");
			}
			else SetPlayerWantedLevelEx(playerid, CHARACTER_INFO[playerid][ch_WANTED_LEVEL] - 1, "indefinido");
		}
	}

	switch(PLAYER_TEMP[playerid][pt_PED_STATE])
	{
		case PED_STOPPED:
		{
			CHARACTER_INFO[playerid][ch_THIRST] -= floatdiv(float(INTERVAL_HUNGRY_THIRST_DOWN), floatmul(THIRST_HOURS_STOPPED, 36));
			CHARACTER_INFO[playerid][ch_HUNGRY] -= floatdiv(float(INTERVAL_HUNGRY_THIRST_DOWN), floatmul(HUNGRY_HOURS_STOPPED, 36));
		}
		case PED_WALKING:
		{
			CHARACTER_INFO[playerid][ch_THIRST] -= floatdiv(float(INTERVAL_HUNGRY_THIRST_DOWN), floatmul(THIRST_HOURS_WALKING, 36));
			CHARACTER_INFO[playerid][ch_HUNGRY] -= floatdiv(float(INTERVAL_HUNGRY_THIRST_DOWN), floatmul(HUNGRY_HOURS_WALKING, 36));
		}
		case PED_RUNNING:
		{
			CHARACTER_INFO[playerid][ch_THIRST] -= floatdiv(float(INTERVAL_HUNGRY_THIRST_DOWN), floatmul(THIRST_HOURS_RUNNING, 36));
			CHARACTER_INFO[playerid][ch_HUNGRY] -= floatdiv(float(INTERVAL_HUNGRY_THIRST_DOWN), floatmul(HUNGRY_HOURS_RUNNING, 36));
		}
		case PED_SPRINTING:
		{
			CHARACTER_INFO[playerid][ch_THIRST] -= floatdiv(float(INTERVAL_HUNGRY_THIRST_DOWN), floatmul(THIRST_HOURS_SPRINTING, 36));
			CHARACTER_INFO[playerid][ch_HUNGRY] -= floatdiv(float(INTERVAL_HUNGRY_THIRST_DOWN), floatmul(HUNGRY_HOURS_SPRINTING, 36));
		}
		case PED_BYCICLING:
		{
			CHARACTER_INFO[playerid][ch_THIRST] -= floatdiv(float(INTERVAL_HUNGRY_THIRST_DOWN), floatmul(THIRST_HOURS_BYCICLING, 36));
			CHARACTER_INFO[playerid][ch_HUNGRY] -= floatdiv(float(INTERVAL_HUNGRY_THIRST_DOWN), floatmul(HUNGRY_HOURS_BYCICLING, 36));
		}
	}

	if(CHARACTER_INFO[playerid][ch_THIRST] <= 0.5) CHARACTER_INFO[playerid][ch_THIRST] = 0.5;
	if(CHARACTER_INFO[playerid][ch_HUNGRY] <= 0.5) CHARACTER_INFO[playerid][ch_HUNGRY] = 0.5;

	if((gettime() - PLAYER_TEMP[playerid][pt_HUNGRY_THIRST_TIME]) > PLAYER_TEMP[playerid][pt_HUNGRY_THIRST_DISCOUNT_TIME])
	{
		if(CHARACTER_INFO[playerid][ch_THIRST] < 5.0)
		{
			CHARACTER_INFO[playerid][ch_HEALTH] -= 2.5;

			if(CHARACTER_INFO[playerid][ch_THIRST] <= 1.0 || CHARACTER_INFO[playerid][ch_HEALTH] <= 0.5)
			{
				SendClientMessage(playerid, -1, "{FFFFFF}Te has desmayado por deshidratación.");
				SetPlayerHealthEx(playerid, 0.0);
				CHARACTER_INFO[playerid][ch_THIRST] = 75.0;
				return 1;
			}

			PLAYER_TEMP[playerid][pt_HUNGRY_THIRST_TIME] = gettime();
			SetPlayerHealthEx(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);

			if(!PLAYER_TEMP[playerid][pt_THIRST_MESSAGE])
			{
				SendClientMessage(playerid, -1, "{FFFFFF}Tienes sed, si no bebes agua pronto acabarás mueriendo.");
				PLAYER_TEMP[playerid][pt_THIRST_MESSAGE] = true;
			}
		}

		if(CHARACTER_INFO[playerid][ch_HUNGRY] < 5.0)
		{
			CHARACTER_INFO[playerid][ch_HEALTH] -= 1.5;

			if(CHARACTER_INFO[playerid][ch_HUNGRY] <= 1.0 || CHARACTER_INFO[playerid][ch_HEALTH] <= 0.5)
			{
				SendClientMessage(playerid, -1, "{FFFFFF}Te has desmayado por hambre.");
				SetPlayerHealthEx(playerid, 0.0);
				CHARACTER_INFO[playerid][ch_HUNGRY] = 55.0;
				return 1;
			}

			PLAYER_TEMP[playerid][pt_HUNGRY_THIRST_TIME] = gettime();
			SetPlayerHealthEx(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);

			if(!PLAYER_TEMP[playerid][pt_HUNGRY_MESSAGE])
			{
				SendClientMessage(playerid, -1, "{FFFFFF}Tienes hambre, si no comes nada pronto acabarás mueriendo.");
				PLAYER_TEMP[playerid][pt_HUNGRY_MESSAGE] = true;
			}
		}
	}

	UpdatePlayerHud(playerid);
	return 1;
}

ShowPlayerHud(playerid)
{
	PLAYER_TEMP[playerid][pt_HUD_TEXTDRAWS] = true;
	UpdatePlayerHud(playerid);

	ShowPlayerProgressBar(playerid, PlayerBar:barrahungry[playerid]);

	ShowPlayerProgressBar(playerid, PlayerBar:barrased[playerid]);

	PLAYER_TEMP[playerid][pt_TIMERS][5] = SetTimerEx("HungryThirstDown", INTERVAL_HUNGRY_THIRST_DOWN * 1000, true, "i", playerid);
	return 1;
}

HidePlayerHud(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][5]);
	PLAYER_TEMP[playerid][pt_HUD_TEXTDRAWS] = false;

	HidePlayerProgressBar(playerid, PlayerBar:barrahungry[playerid]);

	HidePlayerProgressBar(playerid, PlayerBar:barrased[playerid]);

	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1]);
	return 1;
}

is_open(hour, open, close)
{
	if(open > close)
	{
		if( ( (hour >= open) && (hour < 24) ) || ( (hour >= 0) && (hour < close) ) )
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	else if(open < close)
	{
		if((hour >= open) && (hour < close))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	return false;
}

Add_Hungry_Thirst(playerid, Float:hungry, Float:thirst)
{
	CHARACTER_INFO[playerid][ch_HUNGRY] += hungry;
	if(CHARACTER_INFO[playerid][ch_HUNGRY] > 30.0) PLAYER_TEMP[playerid][pt_HUNGRY_MESSAGE] = false;
	if(CHARACTER_INFO[playerid][ch_HUNGRY] > 100.0) CHARACTER_INFO[playerid][ch_HUNGRY] = 100.0;

	CHARACTER_INFO[playerid][ch_THIRST] += thirst;
	if(CHARACTER_INFO[playerid][ch_THIRST] > 30.0) PLAYER_TEMP[playerid][pt_THIRST_MESSAGE] = false;
	if(CHARACTER_INFO[playerid][ch_THIRST] > 100.0) CHARACTER_INFO[playerid][ch_THIRST] = 100.0;

	UpdatePlayerHud(playerid);
	return 1;
}

GetPlayerIdByBankAccountId(account_id)
{
	for(new i = 0; i != sizeof(BANK_ACCOUNT); i ++)
	{
		if(BANK_ACCOUNT[i][bank_account_ID] == 0) continue;
		if(BANK_ACCOUNT[i][bank_account_ID] == account_id) return i;
	}
	return -1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(PLAYER_TEMP[playerid][pt_KICKED]) return 1;

	if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL)
	{
		if(newstate != PLAYER_STATE_SPAWNED && oldstate != PLAYER_STATE_SPAWNED)
		{
			if(ac_Info[CHEAT_STATE_SPAMMER][ac_Enabled])
			{
				if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY])
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_STATE]);

					if(interval < 50)
					{
						if(!ac_Info[CHEAT_STATE_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_STATE_SPAMMER, float(interval));
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_STATE_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_STATE_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_STATE_SPAMMER, float(interval));
						}
					}
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_STATE] = GetTickCount();
				}
			}
		}
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER || GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] == 1)
		{
	        StopAudioStreamForPlayer(playerid);
	        SendClientMessage(playerid, -1, "Sintonizando emisora de {00FF00}reggae{FFFFFF}...");
	        PlayAudioStreamForPlayer(playerid, "http://us3.internet-radio.com:8137/listen.pls");
		}
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] == 2)
		{
	        StopAudioStreamForPlayer(playerid);
	        SendClientMessage(playerid, -1, "Sintonizando emisora de {00FF00}cumbia{FFFFFF}...");
	        PlayAudioStreamForPlayer(playerid, "http://192.99.8.192:2762/listen.pls");
		}
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] == 3)
		{
	        StopAudioStreamForPlayer(playerid);
	        SendClientMessage(playerid, -1, "Sintonizando emisora de {00FF00}norteña{FFFFFF}...");
	        PlayAudioStreamForPlayer(playerid, "http://149.56.175.167:5244/listen.pls");
		}
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] == 4)
		{
	        StopAudioStreamForPlayer(playerid);
	        SendClientMessage(playerid, -1, "Sintonizando emisora de {00FF00}rock{FFFFFF}...");
	        PlayAudioStreamForPlayer(playerid, "http://188.40.32.140:8061/listen.pls");
		}
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] == 5)
		{
	        StopAudioStreamForPlayer(playerid);
	        SendClientMessage(playerid, -1, "Sintonizando emisora de {00FF00}dubstep{FFFFFF}...");
	        PlayAudioStreamForPlayer(playerid, "http://www.partyviberadio.com:8040/listen.pls");
		}
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] == 6)
		{
	        StopAudioStreamForPlayer(playerid);
	        SendClientMessage(playerid, -1, "Sintonizando emisora de {00FF00}electrónica{FFFFFF}...");
	        PlayAudioStreamForPlayer(playerid, "http://37.59.28.208:8665/listen.pls");
		}
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] == 7)
		{
	        StopAudioStreamForPlayer(playerid);
	        SendClientMessage(playerid, -1, "Sintonizando emisora de {00FF00}deep house{FFFFFF}...");
	        PlayAudioStreamForPlayer(playerid, "http://uk2.internet-radio.com:8140/listen.pls");
		}
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] == 8)
		{
	        StopAudioStreamForPlayer(playerid);
	        SendClientMessage(playerid, -1, "Sintonizando emisora de {00FF00}reggaetón{FFFFFF}...");
	        PlayAudioStreamForPlayer(playerid, "http://cacoteo.com:7000/listen.pls");
		}
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] == 9)
		{
	        StopAudioStreamForPlayer(playerid);
	        SendClientMessage(playerid, -1, "Sintonizando emisora de {00FF00}pop{FFFFFF}...");
	        PlayAudioStreamForPlayer(playerid, "http://uk7.internet-radio.com:8226/listen.pls");
		}
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] == 10)
		{
	        StopAudioStreamForPlayer(playerid);
	        SendClientMessage(playerid, -1, "Sintonizando emisora de {00FF00}salsa{FFFFFF}...");
	        PlayAudioStreamForPlayer(playerid, "http://199.217.118.215:8064/listen.pls");
		}
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] == 11)
		{
	        StopAudioStreamForPlayer(playerid);
	        SendClientMessage(playerid, -1, "Sintonizando emisora de {00FF00}trap{FFFFFF}...");
	        PlayAudioStreamForPlayer(playerid, "http://185.126.217.8:9350/listen.pls");
		}
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] == 12)
		{
	        StopAudioStreamForPlayer(playerid);
	        SendClientMessage(playerid, -1, "Sintonizando emisora de {00FF00}opera{FFFFFF}...");
	        PlayAudioStreamForPlayer(playerid, "http://185.105.4.53:3006/listen.pls");
		}
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] == 13)
		{
	        StopAudioStreamForPlayer(playerid);
	        SendClientMessage(playerid, -1, "Sintonizando emisora de {00FF00}hiphop{FFFFFF}...");
	        PlayAudioStreamForPlayer(playerid, "http://89.39.189.2:8400/listen.pls");
		}
	}

    if(newstate == PLAYER_STATE_DRIVER)
    {
		new vehicleid = GetPlayerVehicleID(playerid);
		if(ac_Info[CHEAT_OCCUPIED_VEHICLE_ENTER][ac_Enabled])
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] && GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] != INVALID_PLAYER_ID)
			{
				if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_OCCUPIED_VEHICLE_ENTER][p_ac_info_IMMUNITY])
				{
					if(!ac_Info[CHEAT_OCCUPIED_VEHICLE_ENTER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_OCCUPIED_VEHICLE_ENTER);
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_OCCUPIED_VEHICLE_ENTER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_OCCUPIED_VEHICLE_ENTER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_OCCUPIED_VEHICLE_ENTER][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_OCCUPIED_VEHICLE_ENTER][p_ac_info_DETECTIONS] ++;

						PLAYER_AC_INFO[playerid][CHEAT_OCCUPIED_VEHICLE_ENTER][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_OCCUPIED_VEHICLE_ENTER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_OCCUPIED_VEHICLE_ENTER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_OCCUPIED_VEHICLE_ENTER);
					}

					PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] = INVALID_VEHICLE_ID;
					return 1;
				}
			}
		}

		SendClientMessage(playerid, -1, "Presiona {00CCFF}N{FFFFFF} para encender o apagar, presiona {00CCFF}Y{FFFFFF} para cerrar o abrir, use {FFFF00}/emisoras{FFFFFF}.");

		SetPlayerArmedWeapon(playerid, 0);
		PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
		PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
		PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] = vehicleid;

		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] = playerid;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_DRIVER] = playerid;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] = true;

		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] && VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_DRIVER_DOOR]) //cerrado
		{
			if(gettime() - GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] > 5) // Si el tiempo que paso desde que cerro es mayor a 5
			{
				if(ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Enabled])
				{
					if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_IMMUNITY])
					{
						if(!ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						}
					}
				}
			}
		}

		switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE])
		{
			case VEHICLE_TYPE_SELL:
			{
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = vehicleid;

				new DBResult:Result, DB_Query[120], player_vehicles;
				format(DB_Query, sizeof(DB_Query), "SELECT COUNT(`ID_USER`) AS `VEHICLES` FROM `PLAYER_VEHICLES` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
				Result = db_query(Database, DB_Query);
				if(db_num_rows(Result)) player_vehicles = db_get_field_assoc_int(Result, "VEHICLES");
				db_free_result(Result);


				if(player_vehicles >= MAX_SU_VEHICLES) return SendClientMessageEx(playerid, -1, "{FFFFFF}No puedes comprar más vehículos, el límite es %d.", MAX_SU_VEHICLES);
				if(!ACCOUNT_INFO[playerid][ac_SU])
				{
					if(player_vehicles >= MAX_NU_VEHICLES)
					{
      					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Premium", "{FFFFFF}Necesitas ser usuario {f4d942}premium{FFFFFF} para tener más vehículos compra el {f4d942}premium{FFFFFF} con sólo {f44242}5 koins.", "Salir", "");
						return 1;
					}
				}

				ShowDialog(playerid, DIALOG_BUY_VEHICLE);
				return 1;
			}
			case VEHICLE_TYPE_WORK:
			{
				if(!PLAYER_WORKS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ])
				{
					if(ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
					{
						if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
						{
							if(!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							else
							{
								if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;

								PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
								if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							}
						}
					}
					return 1;
				}

				if(PLAYER_TEMP[playerid][pt_WORKING_IN] && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
				{
					if(ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
					{
						if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
						{
							if(!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							else
							{
								if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;

								PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
								if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							}
						}
					}
					return 1;
				}

				if(WORK_VEHICLES[vehicleid][work_vehicle_NEED_DUTY])
				{
					if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
					{
						if(ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
						{
							if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
							{
								if(!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
								else
								{
									if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
									else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;

									PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
									if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
								}
							}
						}
						return 1;
					}
				}

				if(WORK_VEHICLES[vehicleid][work_vehicle_EXP] > PLAYER_SKILLS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ])
				{
					if(ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
					{
						if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
						{
							if(!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							else
							{
								if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;

								PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
								if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							}
						}
					}
					return 1;
				}

				switch(WORK_VEHICLES[vehicleid][work_vehicle_WORK])
				{
					case WORK_TAXI, WORK_HARVESTER, WORK_FUMIGATOR: StartPlayerJob(playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
					case WORK_TRUCK:
					{
						if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED])
						{
							if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] != ACCOUNT_INFO[playerid][ac_ID])
							{
								SendClientMessage(playerid, -1, "{FFFFFF}No eres el conductor de este camión.");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}
							else StartPlayerJob(playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
						}
						else StartPlayerJob(playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
					}
					case WORK_TRASH:
					{
						if(TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED])
						{
							if(TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] != playerid)
							{
								SendClientMessage(playerid, -1, "{FFFFFF}No eres el conductor de este camión.");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}

							SetPlayerTrashCheckpoint(playerid, vehicleid);
						}
						else
						{
							if(PLAYER_TEMP[playerid][pt_TRASH_DRIVER] || PLAYER_TEMP[playerid][pt_TRASH_PASSENGER])
							{
								SendClientMessage(playerid, -1, "{FFFFFF}Ya estás trabajando con otro compañero.");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}

							PLAYER_TEMP[playerid][pt_TRASH_DRIVER] = true;
							PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] = vehicleid;
							TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] = playerid;

							if(TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] == INVALID_PLAYER_ID) SendClientMessage(playerid, -1, "{FFFFFF}Necesitas un compañero para empezar con el trabajo.");
							else ShowDialog(playerid, DIALOG_SELECT_TRASH_ROUTE);
						}
					}
					case WORK_PIZZA:
					{
						if(PIZZA_VEHICLE[vehicleid][pizza_vehicle_STARTED])
						{
							if(PIZZA_VEHICLE[vehicleid][pizza_vehicle_DRIVER_AID] != ACCOUNT_INFO[playerid][ac_ID])
							{
								if(GetVehicleDistanceFromPoint(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z]) < 20.0)
								{
									SetVehicleToRespawnEx(vehicleid);
								}

								SendClientMessage(playerid, -1, "{FFFFFF}No eres el conductor de esta moto.");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}
						}
						else
						{
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_STARTED] = true;
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_DRIVER_AID] = ACCOUNT_INFO[playerid][ac_ID];
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZAS] = 1;
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT] = random( sizeof(PIZZA_DELIVERY_POINT) );
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT_DELI] = false;
							PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS] = PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZAS];
							PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS] = 0;

							SendClientMessageEx(playerid, -1, "Avión comercial con {00FF00}permiso para despegar{FFFFFF}, su ruta ha sido marcada en el mapa.", PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZAS]);
							SetPlayer_Pizza_Checkpoint(playerid, PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT]);
						}
					}
				}
			}
		}
		if(VEHICLE_INFO[GetVehicleModel(vehicleid) - 400][vehicle_info_VALID] && !PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE]) ShowPlayerSpeedoMeter(playerid);

		if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_NORMAL)
			{
				PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(playerid);

				SendClientMessage(playerid, -1, "{FFFFFF}Tu taxi se ha cancelado porque te has subido a un vehículo.");
			}
		}
		if(PLAYER_TEMP[playerid][pt_WANT_MECHANIC])
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_NORMAL)
			{
				PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = false;
				DisablePlayerMechanicMark(playerid);

				SendClientMessage(playerid, -1, "{FFFFFF}Tu mecánico se ha cancelado porque te has subido a un vehículo.");
			}
		}
    }
	else if(newstate == PLAYER_STATE_PASSENGER)
	{
		SetPlayerArmedWeapon(playerid, 0);
		PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;

		new vehicleid = GetPlayerVehicleID(playerid);
		PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] = vehicleid;

		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] && VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_PASSENGER_DOOR]) //cerrado
		{
			if(gettime() - GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] > 5) // Si el tiempo que paso desde que cerro es mayor a 5
			{
				if(ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Enabled])
				{
					if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_IMMUNITY])
					{
						if(!ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						}
					}
				}
			}
		}


		if(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED])
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] == INVALID_PLAYER_ID) return 1;
			if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
			{
				PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(playerid);
			}
			else
			{
				ShowPlayerTaxiMeter(playerid);
				TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED] = true;
				GetVehiclePos(vehicleid, TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Z]);
				KillTimer(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER]);
				TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], playerid);
			}
			return 1;
		}
		
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			switch(WORK_VEHICLES[vehicleid][work_vehicle_WORK])
			{
				case WORK_TAXI:
				{
					if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] == INVALID_PLAYER_ID) return 1;
					if(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED])
					{
						if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
						{
							PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
							DisablePlayerTaxiMark(playerid);
						}
						return 1;
					}

					ShowPlayerTaxiMeter(playerid);
					if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
					{
						PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
						DisablePlayerTaxiMark(playerid);
					}

					TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED] = true;
					GetVehiclePos(vehicleid, TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Z]);
					KillTimer(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER]);
					TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], playerid);
				}
				case WORK_TRASH:
				{
					if(!PLAYER_WORKS[playerid][WORK_TRASH])
					{
						//SendClientMessageEx(playerid, -1, "{FFFFFF}Necesitas ser %s para poder conducir este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
                        ShowPlayerMessage(playerid, "~r~No tienes permiso~w~ de usar este vehículo porque no trabajas ahí.", 5);
						RemovePlayerFromVehicle(playerid);
						return 1;
					}

					if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRASH)
					{
						SendClientMessage(playerid, -1, "{FFFFFF}No estás de servicio como basurero, ve a vestirte en el puesto de la entrada del vertedero.");
						RemovePlayerFromVehicle(playerid);
						return 1;
					}

					if(TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED])
					{
						if(TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] != playerid)
						{
							SendClientMessage(playerid, -1, "{FFFFFF}No eres el acompañante de este camión.");
							RemovePlayerFromVehicle(playerid);
							return 1;
						}

						SetPlayerTrashCheckpoint(playerid, vehicleid);
					}
					else
					{
						if(PLAYER_TEMP[playerid][pt_TRASH_DRIVER] || PLAYER_TEMP[playerid][pt_TRASH_PASSENGER])
						{
							SendClientMessage(playerid, -1, "{FFFFFF}Ya estás trabajando con otro compañero.");
							RemovePlayerFromVehicle(playerid);
							return 1;
						}

						PLAYER_TEMP[playerid][pt_TRASH_PASSENGER] = true;
						PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] = vehicleid;
						TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] = playerid;

						if(TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] == INVALID_PLAYER_ID) SendClientMessage(playerid, -1, "{FFFFFF}Necesitas un compañero para empezar con el trabajo.");
						else ShowDialog(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], DIALOG_SELECT_TRASH_ROUTE);
					}
				}
			}
		}

		if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_NORMAL)
			{
				PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(playerid);

				SendClientMessage(playerid, -1, "{FFFFFF}Tu taxi se ha cancelado porque te has subido a un vehículo.");
			}
		}
		if(PLAYER_TEMP[playerid][pt_WANT_MECHANIC])
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_NORMAL)
			{
				PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = false;
				DisablePlayerMechanicMark(playerid);

				SendClientMessage(playerid, -1, "{FFFFFF}Tu mecánico se ha cancelado porque te has subido a un vehículo.");
			}
		}
	}
	else if(newstate == PLAYER_STATE_SPECTATING)
	{
		if(!PLAYER_TEMP[playerid][pt_PLAYER_SPECTATE])
		{
			if(ac_Info[CHEAT_SPECTATE][ac_Enabled])
			{
				if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_IMMUNITY])
				{
					if(!ac_Info[CHEAT_SPECTATE][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_SPECTATE);
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_SPECTATE][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_DETECTIONS] ++;

						PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_SPECTATE][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_SPECTATE);
					}
				}
			}
		}
	}

	if(oldstate == PLAYER_STATE_DRIVER)
	{
		PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
		if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
		{
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);


			GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
			GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
			GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] = playerid;
			GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_OCCUPIED] = false;

			StopAudioStreamForPlayer(playerid);
			HidePlayerSpeedoMeter(playerid);
			
			if(PLAYER_WORKS[playerid][WORK_TAXI])
			{
		 		if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_TAXI) return EndPlayerJob(playerid);
	 		}

			if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
			{
				switch(WORK_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][work_vehicle_WORK])
				{
					case WORK_TAXI, WORK_HARVESTER, WORK_FUMIGATOR, WORK_TRUCK: EndPlayerJob(playerid);
					case WORK_PIZZA:
					{
						if(PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_STARTED])
						{
							if(PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS])
							{
								new Float:distance =	GetPlayerDistanceFromPoint
																(
																	playerid,
																	PIZZA_DELIVERY_POINT[ PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT] ][0],
																	PIZZA_DELIVERY_POINT[ PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT] ][1],
																	PIZZA_DELIVERY_POINT[ PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT] ][2]
																);

								if(distance > 20.0)
								{
								    SendClientMessage(playerid, -1, "Se canceló el viaje por haber salido del avión.");
									EndPlayerJob(playerid);
									if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
									{
										DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
										PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
									}
								}
								else
								{
									if(IsPlayerInDynamicCP(playerid, PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
									{
										PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS] --;
										PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS] ++;
										DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
										PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
										PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT_DELI] = true;
										SendClientMessage(playerid, -1, "El viaje ha sido {00FF00}concluido{FFFFFF}, regrese el avión al {FF0000}hángar de Los Santos{FFFFFF}.");
										SetPlayer_Pizza_Checkpoint(playerid, -1);
									}
									else
									{
										SetPlayerArmedWeapon(playerid, 0);
									}
								}
							}
						}
					}
				}
			}
			if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] == PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID])
			{
				if(PLAYER_TEMP[playerid][pt_TRASH_DRIVER])
				{
					if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
					{
						if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID] == playerid) SendClientMessage(playerid, -1, "{FFFFFF}Si quieres dejar de trabajar ve al vertedero y ponte tu ropa.");
					}
					else
					{
						TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID] = INVALID_PLAYER_ID;
						PLAYER_TEMP[playerid][pt_TRASH_DRIVER] = false;
						PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
					}
				}
			}
		}
	}
	else if(oldstate == PLAYER_STATE_PASSENGER)
	{
		if(PLAYER_TEMP[playerid][pt_TAXI_METER_ENABLED])
		{
			new driver = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_DRIVER];

			new work_extra_payment;
			if(work_info[WORK_TAXI][work_info_EXTRA_PAY] > 0 && work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_TAXI][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[ driver ][WORK_TAXI], work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT];

				if(ACCOUNT_INFO[playerid][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
			}
			PLAYER_SKILLS[driver][WORK_TAXI] ++;

			SendClientMessageEx(driver, -1, "{FFFFFF}Has ganado {41f48f}$%s{FFFFFF} con este viaje.", number_format_thousand(TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_PAYMENT] + work_extra_payment));
			GivePlayerCash(driver, TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_PAYMENT] + work_extra_payment);
			GivePlayerCash(playerid, -TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_PAYMENT]);

			SendClientMessageEx(playerid, -1, "{FFFFFF}El taxista te ha cobrado {41f48f}$%s{FFFFFF}.", number_format_thousand(TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_PAYMENT]));
			ResetVehicleTaxiMeter(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
			HidePlayerTaxiMeter(playerid);
			UpdatePlayerTaxiMeterTextdraws(driver);


			new passenger = GetVehicleFirstPassenger( PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] );
			if(passenger != INVALID_PLAYER_ID)
			{
				ShowPlayerTaxiMeter(passenger);
				if(PLAYER_TEMP[passenger][pt_WANT_TAXI])
				{
					PLAYER_TEMP[passenger][pt_WANT_TAXI] = false;
					DisablePlayerTaxiMark(passenger);
				}

				TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_ENABLED] = true;
				GetVehiclePos(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID], TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_OLD_Z]);
				KillTimer(TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_TIMER]);
				TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_DRIVER], passenger);
			}
		}
		if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] == PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID])
		{
			if(PLAYER_TEMP[playerid][pt_TRASH_PASSENGER])
			{
				if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
				{
					if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] == playerid)
					{
						if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] >= TRASH_OBJECTS[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] ][trash_route_OBJECTS]) SendClientMessage(playerid, -1, "{FFFFFF}Sube al camión para volver al vertedero y recibir la paga.");
						else
						{
							new cp = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP];
							new route = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE];
							new Float:distance =	GetPlayerDistanceFromPoint
													(
														playerid,
														TRASH_OBJECTS[ route ][trash_object_X][ cp ],
														TRASH_OBJECTS[ route ][trash_object_Y][ cp ],
														TRASH_OBJECTS[ route ][trash_object_Z][ cp ]
													);

							if(distance > 10.0) SendClientMessage(playerid, -1, "{FFFFFF}Vuelve a subir al camión, aún estás demasiado lejos del punto de recogida.");
							else
							{
								if(IsPlayerInDynamicCP(playerid, PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]))
								{
									if(!PLAYER_WORKS[playerid][WORK_TRASH]) return DestroyPlayerTrashCheckpoint(playerid);
									if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRASH) return DestroyPlayerTrashCheckpoint(playerid);
									if(!PLAYER_TEMP[playerid][pt_TRASH_PASSENGER]) return 1;

									new driver = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID];
									SendClientMessage(driver, -1, "{FFFFFF}Espera mientras tu compañero recoge la basura.");

									new Float:offset = floatdiv(PLAYER_SKILLS[playerid][WORK_TRASH], 10);
									if(offset > 30.0) offset = 30.0;

									PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] = 10.0 + offset;
									UpdatePlayerTrashRecycleSize(playerid);
									PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0]);
									PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1]);
									PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2]);
									PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][3]);

									TogglePlayerControllable(playerid, false);
									SetCameraBehindPlayer(playerid);
									ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.1, true, false, false, false, 0);

									KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][10]);
									PLAYER_TEMP[playerid][pt_TIMERS][10] = SetTimerEx("RecycleUp", 1000, false, "i", playerid);
									return 1;
								}
								SendClientMessage(playerid, -1, "{FFFFFF}Recoge la basura y vuelve al camión para continuar.");
							}
						}
					}
				}
				else
				{
					TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] = INVALID_PLAYER_ID;
					PLAYER_TEMP[playerid][pt_TRASH_PASSENGER] = false;
					PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
				}
			}
		}
	}
    return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	StopAudioStreamForPlayer(playerid);
	HidePlayerTaxiMeter(playerid);
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;

	if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL)
	{
		if(ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_IMMUNITY])
			{
				new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_ENTER_VEHICLE]);

				if(interval < 50)
				{
					if(!ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_ENTER_SPAMMER, float(interval));
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_DETECTIONS] ++;

						PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_ENTER_SPAMMER, float(interval));
					}
				}
				PLAYER_TEMP[playerid][pt_ANTIFLOOD_ENTER_VEHICLE] = GetTickCount();
			}
		}
	}

	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK)
	{
		SetPlayerPosEx(playerid, PLAYER_TEMP[playerid][pt_INJURED_POS][0], PLAYER_TEMP[playerid][pt_INJURED_POS][1], PLAYER_TEMP[playerid][pt_INJURED_POS][2], PLAYER_TEMP[playerid][pt_INJURED_POS][3], 0, 0);
		ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.1, true, 0, 0, 1, 0, 1);
		return 1;
	}

	new Float:sx, Float:sy, Float:sz;
	GetPlayerPos(playerid, sx, sy, sz);

	if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_MEDIC)
	{
		if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_MEDIC)
		{
			SendClientMessage(playerid, -1, "{FFFFFF}Estando de servicio como médico solo puedes llevar ambulancias.");
			RemovePlayerFromVehicle(playerid);
			SetPlayerPos(playerid, sx, sy, sz);
			return 1;
		}
	}

	if(!ispassenger)
	{
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED])
		{
			if(PLAYER_VEHICLES[vehicleid][player_vehicle_VALID])
			{
				if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID])
				{
					SendClientMessage(playerid, -1, "{FFFFFF}No puedes robar vehículos sin rolearlo.");
					RemovePlayerFromVehicle(playerid);
					SetPlayerPos(playerid, sx, sy, sz);

					TogglePlayerControllable(playerid, false);
					KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
					PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 5000, false, "ib", playerid, true);
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, -1, "{FFFFFF}No puedes robar vehículos sin rolearlo.");
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);

				TogglePlayerControllable(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
				PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 5000, false, "ib", playerid, true);
				return 1;
			}

			PLAYER_AC_INFO[playerid][CHEAT_OCCUPIED_VEHICLE_ENTER][p_ac_info_IMMUNITY] = gettime() + 10;
		}

		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			if(!PLAYER_WORKS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ])
			{
				//SendClientMessageEx(playerid, -1, "{FFFFFF}Necesitas ser %s para poder conducir este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
                ShowPlayerMessage(playerid, "~r~No tienes permiso~w~ de usar este vehículo porque no trabajas ahí.", 5);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}

			if(PLAYER_TEMP[playerid][pt_WORKING_IN] && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
			{
				SendClientMessageEx(playerid, -1, "{FFFFFF}Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}

			if(WORK_VEHICLES[vehicleid][work_vehicle_NEED_DUTY])
			{
				if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
				{
					//SendClientMessageEx(playerid, -1, "{FFFFFF}Necesitas estar de servicio como %s para poder conducir este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
                    ShowPlayerMessage(playerid, "Consigue la ~b~~h~vestimenta~w~ correcta para usar este vehículo.", 5);
					RemovePlayerFromVehicle(playerid);
					SetPlayerPos(playerid, sx, sy, sz);
					return 1;
				}
			}

			if(WORK_VEHICLES[vehicleid][work_vehicle_EXP] > PLAYER_SKILLS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ])
			{
				SendClientMessageEx(playerid, -1, "{FFFFFF}Necesitas más experiencia en este trabajo para llevar este vehículo. (%d/%d)", PLAYER_SKILLS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ], WORK_VEHICLES[vehicleid][work_vehicle_EXP]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
		}
	}
	else
	{
		if(WORK_VEHICLES[vehicleid][work_vehicle_VALID] && WORK_VEHICLES[vehicleid][work_vehicle_WORK] == WORK_TRASH)
		{
			if(!PLAYER_WORKS[playerid][WORK_TRASH])
			{
				//SendClientMessageEx(playerid, -1, "{FFFFFF}Necesitas ser %s para poder entrar a este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
                ShowPlayerMessage(playerid, "~r~No tienes permiso~w~ de usar este vehículo porque no trabajas ahí.", 5);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}

			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
			{
				//SendClientMessageEx(playerid, -1, "{FFFFFF}Necesitas estar de servicio como %s para poder conducir este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
                ShowPlayerMessage(playerid, "Consigue la ~b~~h~vestimenta~w~ correcta para usar este vehículo.", 5);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
		}
	}
	return 1;
}

AddTestVehicle(bool:static_veh, modelid, Float:X, Float:Y, Float:Z, Float:Angle, Color1, Color2)
{
	new vehicle_id = INVALID_VEHICLE_ID;
	if(static_veh) vehicle_id = AddStaticVehicleEx(modelid, X, Y, Z, Angle, Color1, Color2, -1, false);
	else vehicle_id = CreateVehicle(modelid, X, Y, Z, Angle, Color1, Color2, -1, false);

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_TEST;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = modelid;
	format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "Test Vehicle");
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = X;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = Y;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = Z;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = Angle;

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = Color1;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = Color2;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = VEHICLE_INFO[modelid - 400][vehicle_info_MAX_GAS];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_INTERIOR] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = 0;

	SetVehicleToRespawnEx(vehicle_id);
	return vehicle_id;
}

AddPersonalVehicle(playerid, modelid, Float:X, Float:Y, Float:Z, Float:Angle, Color1, Color2, Float:max_gas)
{
	new vehicle_id = INVALID_VEHICLE_ID;
	vehicle_id = CreateVehicle(modelid, X, Y, Z, Angle, Color1, Color2, -1);

	if(vehicle_id == INVALID_VEHICLE_ID) return false;

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_PERSONAL;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = modelid;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = X;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = Y;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = Z;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = Angle;

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = Color1;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = Color2;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = max_gas;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = max_gas;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_INTERIOR] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = 0;

	PLAYER_VEHICLES[vehicle_id][player_vehicle_VALID] = true;
	PLAYER_VEHICLES[vehicle_id][player_vehicle_OWNER_ID] = ACCOUNT_INFO[playerid][ac_ID];
	RegisterNewPlayerVehicle(playerid, vehicle_id);

	SetVehicleToRespawnEx(vehicle_id);
	return vehicle_id;
}

RegisterNewPlayerVehicle(playerid, vehicleid)
{
	new DBResult:Result, DB_Query[400];
	format
	(
		DB_Query, sizeof DB_Query,
		"\
			INSERT INTO `PLAYER_VEHICLES`\
			(\
				`ID_USER`, `MODELID`, `SPAWN_X`, `SPAWN_Y`, `SPAWN_Z`, `SPAWN_ANGLE`, `COLOR_1`, `COLOR_2`, `GAS`, `MAX_GAS`\
			)\
			VALUES\
			(\
				'%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%f', '%f'\
			);\
			SELECT MAX(`ID`) FROM `PLAYER_VEHICLES`;\
		",
		ACCOUNT_INFO[playerid][ac_ID],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_ANGLE],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS],
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]
	);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result))
	{
		PLAYER_VEHICLES[vehicleid][player_vehicle_ID] = db_get_field_int(Result, 0);
		format(GLOBAL_VEHICLES[vehicleid][gb_vehicle_NUMBER_PLATE], 32, "%04d %c%c%c", PLAYER_VEHICLES[vehicleid][player_vehicle_ID], getRandomLetter(), getRandomLetter(), getRandomLetter());

		DB_Query[0] = EOS;
		format
		(
			DB_Query, sizeof DB_Query,
			"\
				INSERT INTO `PLAYER_VEHICLE_COMPONENTS` (`ID_VEHICLE`) VALUES ('%d');\
				UPDATE `PLAYER_VEHICLES` SET `PLATE` = '%q' WHERE `ID` = '%d';\
			",
				PLAYER_VEHICLES[vehicleid][player_vehicle_ID],
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_NUMBER_PLATE], PLAYER_VEHICLES[vehicleid][player_vehicle_ID]
		);
		db_query(Database, DB_Query);
	}
	db_free_result(Result);

	return 1;
}

LoadPlayerVehicles(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[360];
	format(DB_Query, sizeof(DB_Query), "SELECT `PLAYER_VEHICLES`.*, `PLAYER_VEHICLE_COMPONENTS`.* FROM `PLAYER_VEHICLES`, `PLAYER_VEHICLE_COMPONENTS` WHERE `PLAYER_VEHICLES`.`ID_USER` = '%d' AND `PLAYER_VEHICLE_COMPONENTS`.`ID_VEHICLE` = `PLAYER_VEHICLES`.`ID` ORDER BY `PLAYER_VEHICLES`.`ID` DESC LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], MAX_SU_VEHICLES);
	Result = db_query(Database, DB_Query);

	new total_vehicles;
	for(new i; i < db_num_rows(Result); i++ )
	{
		if(total_vehicles >= MAX_SU_VEHICLES)
		{
			printf("---> MAX_SU_VEHICLES superado al cargar de base de datos.");
			break;
		}

		new modelid, Float:pos[4], color[2];
		modelid = db_get_field_assoc_int(Result, "MODELID");
		pos[0] = db_get_field_assoc_float(Result, "SPAWN_X");
		pos[1] = db_get_field_assoc_float(Result, "SPAWN_Y");
		pos[2] = db_get_field_assoc_float(Result, "SPAWN_Z");
		pos[3] = db_get_field_assoc_float(Result, "SPAWN_ANGLE");
		color[0] = db_get_field_assoc_int(Result, "COLOR_1");
		color[1] = db_get_field_assoc_int(Result, "COLOR_2");

		new vehicle_id = INVALID_VEHICLE_ID;
		vehicle_id = CreateVehicle
		(
			modelid,
			pos[0],
			pos[1],
			pos[2],
			pos[3],
			color[0],
			color[1],
			-1
		);

		if(vehicle_id == INVALID_VEHICLE_ID)
		{
			db_free_result(Result);
			return false;
		}

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_PERSONAL;

		PLAYER_VEHICLES[vehicle_id][player_vehicle_VALID] = true;
		PLAYER_VEHICLES[vehicle_id][player_vehicle_OWNER_ID] = ACCOUNT_INFO[playerid][ac_ID];
		PLAYER_VEHICLES[vehicle_id][player_vehicle_ID] = db_get_field_assoc_int(Result, "ID");
		PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = true;

		db_get_field_assoc(Result, "PLATE", GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32);
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = modelid;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = pos[0];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = pos[1];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = pos[2];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = pos[3];

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = db_get_field_assoc_float(Result, "HEALTH");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = db_get_field_assoc_int(Result, "DAMAGE_PANELS");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = db_get_field_assoc_int(Result, "DAMAGE_DOORS");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = db_get_field_assoc_int(Result, "DAMAGE_LIGHTS");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = db_get_field_assoc_int(Result, "DAMAGE_TIRES");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = color[0];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = color[1];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = db_get_field_assoc_int(Result, "PAINTJOB");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = db_get_field_assoc_float(Result, "MAX_GAS");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = db_get_field_assoc_float(Result, "GAS");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_DOORS] = db_get_field_assoc_int(Result, "CLOSED");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = db_get_field_assoc_int(Result, "STATE");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_INTERIOR] = db_get_field_assoc_int(Result, "INTERIOR");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = db_get_field_assoc_int(Result, "WORLD");

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][0] = db_get_field_assoc_int(Result, "SLOT_0");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][1] = db_get_field_assoc_int(Result, "SLOT_1");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][2] = db_get_field_assoc_int(Result, "SLOT_2");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][3] = db_get_field_assoc_int(Result, "SLOT_3");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][4] = db_get_field_assoc_int(Result, "SLOT_4");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][5] = db_get_field_assoc_int(Result, "SLOT_5");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][6] = db_get_field_assoc_int(Result, "SLOT_6");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][7] = db_get_field_assoc_int(Result, "SLOT_7");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][8] = db_get_field_assoc_int(Result, "SLOT_8");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][9] = db_get_field_assoc_int(Result, "SLOT_9");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][10] = db_get_field_assoc_int(Result, "SLOT_10");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][11] = db_get_field_assoc_int(Result, "SLOT_11");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][12] = db_get_field_assoc_int(Result, "SLOT_12");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS][13] = db_get_field_assoc_int(Result, "SLOT_13");


		new DBResult:Result_vobjects, vobjects;
		format(DB_Query, sizeof(DB_Query), "SELECT * FROM `VEHICLE_OBJECTS` WHERE `ID_VEHICLE` = '%d' LIMIT %d;", PLAYER_VEHICLES[vehicle_id][player_vehicle_ID], MAX_SU_VOBJECTS);
		Result_vobjects = db_query(Database, DB_Query);

		for(new z; z < db_num_rows(Result_vobjects); z++ )
		{
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_VALID] = true;
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ID] = db_get_field_assoc_int(Result_vobjects, "ID");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_TYPE] = db_get_field_assoc_int(Result_vobjects, "TYPE");
			db_get_field_assoc(Result_vobjects, "NAME", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_NAME], 32);
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_MODELID] = db_get_field_assoc_int(Result_vobjects, "MODELID");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_OFFSET][0] = db_get_field_assoc_float(Result_vobjects, "OFF_X");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_OFFSET][1] = db_get_field_assoc_float(Result_vobjects, "OFF_Y");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_OFFSET][2] = db_get_field_assoc_float(Result_vobjects, "OFF_Z");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ROT][0] = db_get_field_assoc_float(Result_vobjects, "ROT_X");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ROT][1] = db_get_field_assoc_float(Result_vobjects, "ROT_Y");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ROT][2] = db_get_field_assoc_float(Result_vobjects, "ROT_Z");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_ATTACHED] = db_get_field_assoc_int(Result_vobjects, "ATTACHED");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][0] = db_get_field_assoc_int(Result_vobjects, "COLOR_0");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][1] = db_get_field_assoc_int(Result_vobjects, "COLOR_1");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][2] = db_get_field_assoc_int(Result_vobjects, "COLOR_2");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][3] = db_get_field_assoc_int(Result_vobjects, "COLOR_3");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_COLORS][4] = db_get_field_assoc_int(Result_vobjects, "COLOR_4");
			db_get_field_assoc(Result_vobjects, "TEXT", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_TEXT], 32);
			db_get_field_assoc(Result_vobjects, "FONT", VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_FONT], 24);
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_FONT_SIZE] = db_get_field_assoc_int(Result_vobjects, "FONT_SIZE");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_BOLD] = db_get_field_assoc_int(Result_vobjects, "FONT_BOLD");
			VEHICLE_OBJECTS[vehicle_id][vobjects][vobject_text_FONT_COLOR] = db_get_field_assoc_int(Result_vobjects, "FONT_COLOR");
			UpdateVehicleAttachedObject(vehicle_id, vobjects, true);

			vobjects ++;
			db_next_row(Result_vobjects);
		}
		db_free_result(Result_vobjects);

		SetVehicleToRespawnEx(vehicle_id);



		new max_slots = VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_BOOT_SLOTS];
		if(max_slots > 0)
		{
			new DBResult:boot_Result, boot_DB_Query[90], boot_slot;
			format(boot_DB_Query, sizeof(boot_DB_Query), "SELECT * FROM `VEHICLE_BOOT` WHERE `ID_VEHICLE` = '%d' LIMIT %d;", PLAYER_VEHICLES[vehicle_id][player_vehicle_ID], max_slots);
			boot_Result = db_query(Database, boot_DB_Query);
			for(new x; x < db_num_rows(boot_Result); x++ )
			{
				VEHICLE_BOOT[vehicle_id][boot_slot][vehicle_boot_VALID] = true;
				VEHICLE_BOOT[vehicle_id][boot_slot][vehicle_boot_OBJECT_ID] = db_get_field_assoc_int(boot_Result, "ID_OBJECT");
				VEHICLE_BOOT[vehicle_id][boot_slot][vehicle_boot_TYPE] = db_get_field_assoc_int(boot_Result, "TYPE");
				VEHICLE_BOOT[vehicle_id][boot_slot][vehicle_boot_INT] = db_get_field_assoc_int(boot_Result, "INT");
				VEHICLE_BOOT[vehicle_id][boot_slot][vehicle_boot_INT_EXTRA] = db_get_field_assoc_int(boot_Result, "INT_EXTRA");

				boot_slot ++;
				db_next_row(boot_Result);
			}
			db_free_result(boot_Result);
		}

		total_vehicles ++;
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

SavePlayerVehicles(playerid, destroy = false)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	for(new i = 0; i != MAX_VEHICLES; i ++)
	{
		if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
		if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) continue;

		GetVehiclePos(i, GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Z]);
		GetVehicleZAngle(i, GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_ANGLE]);
		GetVehicleHealth(i, GLOBAL_VEHICLES[i][gb_vehicle_HEALTH]);
		if(GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] > 1000.0) GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] = 1000.0;
		if(GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] < MIN_VEHICLE_HEALTH) GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] = MIN_VEHICLE_HEALTH;
		GetVehicleDamageStatus(i, GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_PANELS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_DOORS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_LIGHTS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_TIRES]);
		GLOBAL_VEHICLES[i][gb_vehicle_WORLD] = 0; /*GetVehicleVirtualWorld(i);*/

		new DB_Query[1800];
		format(DB_Query, sizeof DB_Query,
		"\
			UPDATE `PLAYER_VEHICLES` SET \
				`PLATE` = '%q',\
				`MODELID` = '%d',\
				`SPAWN_X` = '%f',\
				`SPAWN_Y` = '%f',\
				`SPAWN_Z` = '%f',\
				`SPAWN_ANGLE` = '%f',\
				`HEALTH` = '%f',\
				`DAMAGE_PANELS` = '%d',\
				`DAMAGE_DOORS` = '%d',\
				`DAMAGE_LIGHTS` = '%d',\
				`DAMAGE_TIRES` = '%d',\
				`COLOR_1` = '%d',\
				`COLOR_2` = '%d',\
				`PAINTJOB` = '%d',\
				`GAS` = '%f',\
				`MAX_GAS` = '%f',\
				`CLOSED` = '%d',\
				`INTERIOR` = '%d',\
				`WORLD` = '%d',\
				`STATE` = '%d' \
			WHERE `ID` = '%d';\
		",
			GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE],
			GLOBAL_VEHICLES[i][gb_vehicle_MODELID],
			GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_X],
			GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Y],
			GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Z],
			GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_ANGLE],
			GLOBAL_VEHICLES[i][gb_vehicle_HEALTH],
			GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_PANELS],
			GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_DOORS],
			GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_LIGHTS],
			GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_TIRES],
			GLOBAL_VEHICLES[i][gb_vehicle_COLOR_1],
			GLOBAL_VEHICLES[i][gb_vehicle_COLOR_2],
			GLOBAL_VEHICLES[i][gb_vehicle_PAINTJOB],
			GLOBAL_VEHICLES[i][gb_vehicle_GAS],
			GLOBAL_VEHICLES[i][gb_vehicle_MAX_GAS],
			GLOBAL_VEHICLES[i][gb_vehicle_PARAMS_DOORS],
			GLOBAL_VEHICLES[i][gb_vehicle_INTERIOR],
			GLOBAL_VEHICLES[i][gb_vehicle_WORLD],
			GLOBAL_VEHICLES[i][gb_vehicle_STATE],

			PLAYER_VEHICLES[i][player_vehicle_ID]
		);
		db_query(Database, DB_Query);

		for(new x = 0; x != MAX_VEHICLE_COMPONENTS; x ++)
		{
			DB_Query[0] = EOS;

			format(DB_Query, sizeof DB_Query,
			"\
				UPDATE `PLAYER_VEHICLE_COMPONENTS` SET \
					`SLOT_0` = '%d',\
					`SLOT_1` = '%d',\
					`SLOT_2` = '%d',\
					`SLOT_3` = '%d',\
					`SLOT_4` = '%d',\
					`SLOT_5` = '%d',\
					`SLOT_6` = '%d',\
					`SLOT_7` = '%d',\
					`SLOT_8` = '%d',\
					`SLOT_9` = '%d',\
					`SLOT_10` = '%d',\
					`SLOT_11` = '%d',\
					`SLOT_12` = '%d',\
					`SLOT_13` = '%d' \
				WHERE `ID_VEHICLE` = '%d';\
			",
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][0],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][1],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][2],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][3],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][4],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][5],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][6],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][7],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][8],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][9],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][10],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][11],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][12],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][13],

				PLAYER_VEHICLES[i][player_vehicle_ID]
			);
			db_query(Database, DB_Query);
		}

		if(destroy) DestroyVehicleEx(i);
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED] = true;

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] < MIN_VEHICLE_HEALTH) GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = MIN_VEHICLE_HEALTH;

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
	{
		if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] == WORK_TRASH)
		{
			if(TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED])
			{
				CancelTrashWork(TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID], TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID], vehicleid);
			}
		}

		GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = frandom(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] / 3, 2);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] = false;

		switch(WORK_VEHICLES[vehicleid][work_vehicle_WORK])
		{
			case WORK_TAXI: ResetVehicleTaxiMeter(vehicleid);
			case WORK_TRUCK: ResetTruckInfo(vehicleid);
			case WORK_TRASH: ResetTrashInfo(vehicleid);
			case WORK_PIZZA: ResetPizzaInfo(vehicleid);
		}
	}
	SetVehicleNumberPlate(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_NUMBER_PLATE]);
	SetVehicleHealthEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH]);
	UpdateVehicleDamageStatus(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES]);
    ChangeVehicleColor(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2]);
	ChangeVehiclePaintjob(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PAINTJOB]);
	SetVehiclePosEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z]);
	SetVehicleZAngle(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_ANGLE]);
	LinkVehicleToInteriorEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_INTERIOR]);
	SetVehicleVirtualWorldEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD]);
	AddVehicleComponents(vehicleid);

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 0;
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BONNET] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE] = 1;
	UpdateVehicleParams(vehicleid);
	return 1;
}

UpdateVehicleParams(vehicleid)
{
	SetVehicleParamsEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS], 0, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BONNET], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT], 0);
	SetVehicleParamsCarWindows(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE]);
	return 1;
}

SetVehicleHealthEx(vehicleid, Float:health, forplayerid = INVALID_PLAYER_ID)
{
	if(forplayerid != INVALID_PLAYER_ID) PLAYER_AC_INFO[forplayerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = health;
	SetVehicleHealth(vehicleid, health);
	return 1;
}

RepairVehicleEx(vehicleid, forplayerid = INVALID_PLAYER_ID)
{
	if(forplayerid != INVALID_PLAYER_ID) PLAYER_AC_INFO[forplayerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES] = 0;
	SetVehicleHealthEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH]);
	RepairVehicle(vehicleid);
	return 1;
}

SetVehiclePosEx(vehicleid, Float:x, Float:y, Float:z)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0] = x;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1] = y;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] = z;
	return SetVehiclePos(vehicleid, x, y, z);
}

LinkVehicleToInteriorEx(vehicleid, interior)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_INTERIOR] = interior;
	return LinkVehicleToInterior(vehicleid, interior);
}

SetVehicleToRespawnEx(vehicleid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED] = false;
	return SetVehicleToRespawn(vehicleid);
}

public OnVehicleDeath(vehicleid, killerid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED] = false;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] = false;

	switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE])
	{
		case VEHICLE_TYPE_TEST: DestroyVehicleEx(vehicleid);
		case VEHICLE_TYPE_PERSONAL:
		{
			if(VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_VALID])
			{
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_DAMAGED;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = MIN_VEHICLE_HEALTH;
			}
			else
			{
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
			}

			new playerid = GetPlayerIdFromAccountId(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID]);
			if(playerid != INVALID_PLAYER_ID)
			{
				if(PLAYER_PHONE[playerid][player_phone_VALID])
				{
					new message[64]; format(message, sizeof message, "Vehículo de sustitución entregado en últ. estacionamiento.");
					RegisterPhoneMessage(111, PLAYER_PHONE[playerid][player_phone_NUMBER], message);
					if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON)
					{
						if((PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_DEAD))
						{
							SendClientMessageEx(playerid, 0x12bc7eFF, "@WHATSAPP:{25d366} recibido de {12bc7e}%s:{25d366} %s", convertPhoneNumber(playerid, 111), message);
						}
					}
				}
			}
		}
		default:
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = frandom(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] / 3, 2);
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS] = 0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS] = 0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS] = 0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES] = 0;
		}
	}
    return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID])
	{
		if(ac_Info[CHEAT_UNOCCUPIED_VEHICLE][ac_Enabled])
		{
			if(PLAYER_TEMP[playerid][pt_KICKED]) return 0;

			new Float:veh_x, Float:veh_y, Float:veh_z, Float:veh_dis;
			GetVehiclePos(vehicleid, veh_x, veh_y, veh_z);
			veh_dis = GetVehicleDistanceFromPoint(vehicleid, new_x, new_y, new_z);

			if(gettime() > GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] && GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED])
			{
				if(veh_dis > 20.0 && veh_z > -70.0)
				{
					if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE][p_ac_info_IMMUNITY])
					{
						if(!ac_Info[CHEAT_UNOCCUPIED_VEHICLE][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_UNOCCUPIED_VEHICLE, veh_dis);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_UNOCCUPIED_VEHICLE][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_UNOCCUPIED_VEHICLE][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_UNOCCUPIED_VEHICLE, veh_dis);
						}
					}

					SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
					return 0;
				}
			}
		}

		new Float:spawn_distance = GetVehicleDistanceFromPoint(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z]);
		switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE])
		{
			case VEHICLE_TYPE_SELL:
			{
				if(spawn_distance > 3.0) SetVehicleToRespawnEx(vehicleid);
			}
			case VEHICLE_TYPE_WORK:
			{
				if(TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED]) return 1;
				if(spawn_distance < 25.0)
				{
					if(spawn_distance > 10.0) SetVehicleToRespawnEx(vehicleid);
				}
			}
		}
	}
    return 1;
}

GetPlayerIdFromAccountId(accountid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(ACCOUNT_INFO[i][ac_ID] == accountid)
			{
				return i;
			}
		}
	}
	return INVALID_PLAYER_ID;
}

CMD:retar(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 10.0, 907.4092, 2430.1453, 10.7255))
	{
		new to_player, cashbet;
		if(sscanf(params, "ud", to_player, cashbet)) return SendClientMessage(playerid, 0xFFFF00FF, "/retar {FFFFFF}[PlayerID/Nombre] [$dinero apuesta]");
		new vehicleid = GetPlayerVehicleID(playerid);
		if(ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return SendClientMessage(playerid, -1, "{FFFFFF}Necesitas ser nivel 2 para poder correr.");
		if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendClientMessage(playerid, 0xFFFFFFFF, "Sólo puedes correr con coches personales.");
		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, 0xFFFFFFFF, "Sólo puedes correr con coches personales.");
		new Float:pos[3]; GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
		if(!IsPlayerInRangeOfPoint(playerid, 6.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xFFFFFFFF, "La persona no está cerca.");
		if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "{FFFFFF}El jugador está desconectado.");
		if(to_player == playerid) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes retarte a tí mismo.");
		if(CHARACTER_INFO[to_player][ch_CASH] < cashbet) return SendClientMessage(playerid, -1, "{FFFFFF}Ésta persona no tiene el dinero que tú pides en la apuesta.");
		if(ARENA_RACE == 1) return SendClientMessage(playerid, -1, "{FFFFFF}La pista está siendo ocupada, espera a que se desocupe.");
		if(PLAYER_IN_RACE[to_player] == 1) return SendClientMessage(playerid, -1, "Ésta persona está en una carrera.");

	    GivePlayerCash(to_player, -cashbet);
	    GivePlayerCash(playerid, -cashbet);
	    PLAYER_IN_RACE[to_player] = 1;
	    PLAYER_IN_RACE[playerid] = 1;
	    TogglePlayerControllable(to_player, 0);
	    TogglePlayerControllable(playerid, 0);
	    Iter_Add(PLAYERS_IN_RACE, to_player);
		Iter_Add(PLAYERS_IN_RACE, playerid);
	    BET_RACE = cashbet+cashbet;
	    ARENA_RACE = 1;

		new vehicleidtoplayer = GetPlayerVehicleID(to_player);
		SetVehiclePosEx(vehicleidtoplayer, 909.8016, 2429.9749, 10.6371);
		SetVehicleZAngle(vehicleidtoplayer, 180.0);
		SetVehiclePosEx(vehicleid, 904.7460, 2429.9749, 10.6371);
		SetVehicleZAngle(vehicleid, 180.0);

	    SendClientMessageEx(to_player, -1, "Quién gane la carrerá se llevará la cantidad de {41f48f}$%d, {FFFFFF}¡mucha suerte!.", BET_RACE);
	    SendClientMessageEx(playerid, -1, "Quién gane la carrerá se llevará la cantidad de {41f48f}$%d, {FFFFFF}¡mucha suerte!.", BET_RACE);

	   	CountDownRace();
	   	SetTimer("DesocuparArena",60000,false);
	}
	return 1;
}

CMD:trabajar(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);

	new player_jobs = CountPlayerJobs(playerid);
	if(ACCOUNT_INFO[playerid][ac_SU])
	{
		if(player_jobs >= MAX_SU_WORKS)
		{
			SendClientMessageEx(playerid, -1, "{FFFFFF}Actualmente tienes %d trabajos, usa /renunciar para dejar un trabajo.", player_jobs);
			return 1;
		}
	}
	else
	{
		if(player_jobs >= MAX_NU_WORKS)
		{
			SendClientMessageEx(playerid, -1, "{FFFFFF}Actualmente tienes %d trabajos, usa /renunciar para dejar un trabajo.", player_jobs);
			ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Premium", "{FFFFFF}Necesitas ser usuario {f4d942}premium{FFFFFF} para tener más trabajos compra el {f4d942}premium{FFFFFF} con sólo {f44242}5 koins.", "Salir", "");
			return 1;
		}
	}

	for(new i = 0; i != sizeof obtain_work_coords; i ++)
	{
		if(work_info[i][work_info_TYPE] == WORK_TYPE_FAMILY) continue;

		if(GetPlayerInterior(playerid) == obtain_work_coords[i][obtain_work_INTERIOR])
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z]))
			{
				if(work_info[i][work_info_LEVEL] > ACCOUNT_INFO[playerid][ac_LEVEL])
				{
					SendClientMessageEx(playerid, -1, "Necesitas ser al menos nivel %d para obtener este trabajo.", work_info[i][work_info_LEVEL]);
					return 1;
				}

				if(work_info[i][work_info_BANK] == true)
				{
				    if(BANK_ACCOUNT[playerid][bank_account_ID] == 0)
				    {
						ShowPlayerMessage(playerid, "Necesitas una ~p~~h~cuenta bancaria~w~~h~ para cobrar en este trabajo.", 5);
						return 1;
					}
				}

				if(PLAYER_WORKS[playerid][i])
				{
					SendClientMessageEx(playerid, -1, "{FFFFFF}Ya eres %s.", work_info[i][work_info_NAME]);
					return 1;
				}

				if(i == WORK_POLICE && PLAYER_CREW[playerid][player_crew_VALID])
				{
					ShowPlayerMessage(playerid, "No puedes ser policía porque estás en una banda.", 5);
					return 1;
				}
				if(i == WORK_POLICE && PLAYER_CREW[playerid][player_crew_VALID])
				{
					ShowPlayerMessage(playerid, "Necesitas una ~p~~h~cuenta bancaria~w~~h~ para cobrar en este trabajo.", 5);
					return 1;
				}

				new DB_Query[256];
				format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_WORKS` SET `SET` = '1' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", ACCOUNT_INFO[playerid][ac_ID], i);
				db_query(Database, DB_Query);

				if(i == WORK_POLICE) SetPoliceRank(playerid);

				PLAYER_WORKS[playerid][i] = true;
				SendClientMessageEx(playerid, -1, "{00FF00}¡Felicidades! {FFFFFF}te han contratado de {00FF00}%s.", work_info[i][work_info_NAME]);
				SendClientMessage(playerid, -1, "Conoce tu trabajo con {FFFF00}/ayuda trabajos {FFFFFF}y revisa lo que tienes que hacer.");
				return 1;
			}
		}
	}

	ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	return 1;
}

CMD:dimitir(playerid, params[])
{
	new player_jobs = CountPlayerJobs(playerid);
	if(!player_jobs) return 1;

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;

	new work;
	if(sscanf(params, "d", work))
	{
		new works[32 * sizeof(work_info)], line_str[32], count;
		for(new i = 1; i != sizeof(work_info); i ++)
		{
			if(PLAYER_WORKS[playerid][i])
			{
				if(count > 0) strcat(works, ", ");

				format(line_str, sizeof line_str, "%s ({FFAABB}%d{FFFFFF})", work_info[i][work_info_NAME], i);
				strcat(works, line_str);

				count ++;
			}
		}
		SendClientMessageEx(playerid, -1, "{FFFFFF}Tus trabajos: %s", works);
		SendClientMessageEx(playerid, -1, "{FFFFFF}Utiliza {FFFF00}/renunciar [{FFAABB}id de trabajo{FFFF00}] {FFFFFF}para dejar de trabajar.");
		return 1;
	}

	if(work < 1 || work >= sizeof work_info) return SendClientMessage(playerid, -1, "El trabajo no es válido.");

	if(!PLAYER_WORKS[playerid][work]) return SendClientMessageEx(playerid, -1, "{FFFFFF}No eres %s.", work_info[work][work_info_NAME]);
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] == work) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora mismo estás de servicio en ese trabajo, deja de trabajar para abandonar el trabajo.");

	new DB_Query[256];
	format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_WORKS` SET `SET` = '0' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", ACCOUNT_INFO[playerid][ac_ID], work);
	db_query(Database, DB_Query);

	if(work == WORK_POLICE)
	{
		format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL` = '0' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", ACCOUNT_INFO[playerid][ac_ID], work);
		db_query(Database, DB_Query);
        PLAYER_SKILLS[playerid][WORK_POLICE] = 0;
		PLAYER_SKILLS[playerid][work] = 0;
		ACCOUNT_INFO[playerid][ac_BLACK_SAPD] = 1;
	
		format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_WEAPONS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
		db_query(Database, DB_Query);

		ResetPlayerWeaponsEx(playerid);

		SendClientMessage(playerid, -1, "{FFFFFF}Se le han removido todas las armas del cuerpo de policía.");

		format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `BLACK_SAPD` = '1' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
		db_query(Database, DB_Query);
	}

	SendClientMessageEx(playerid, -1, "{FFFFFF}Has abandonado tu trabajo de %s.", work_info[work][work_info_NAME]);
	PLAYER_WORKS[playerid][work] = false;
	return 1;
}

CMD:renunciar(playerid, params[])
{
	return cmd_dimitir(playerid, params);
}

CMD:maletero(playerid, params[])
{
	new option[24];
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);

	new vehicleid = GetPlayerCameraTargetVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "{FFFFFF}No estás cerca de tu vehículo.");

	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}Este no es tú vehículo.");
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, -1, "{FFFFFF}Este no es tú vehículo.");

	if(sscanf(params, "s[24]d", option)) return SendClientMessage(playerid, 0xFFFF00FF, "/maletero ver");
 	if(!strcmp(option, "ver", true))
    {
		if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT]) return ShowPlayerMessage(playerid, "El maletero está cerrado, use ~b~~h~/abrir maletero~w~.", 3);
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT])
		{
		    Auto_SendPlayerAction(playerid, "observa el maletero de su vehículo.");
			PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] = vehicleid;
			ShowDialog(playerid, DIALOG_VEHICLE_BOOT);
			return 1;
		}
 	}
	return 1;
}

CMD:abrir(playerid, params[])
{
	new option[32];
	if(!sscanf(params,"s[32]",option))
	{
		if(strcmp(option,"maletero",true)==0)
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);

			new vehicleid = GetPlayerCameraTargetVehicle(playerid);
			if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "{FFFFFF}No estás cerca de tu vehículo.");

			if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}Este no es tú vehículo.");
			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, -1, "{FFFFFF}Este no es tú vehículo.");

			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT]) return ShowPlayerMessage(playerid, "El maletero ya está abierto.", 3);
			if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT])
			{
				Auto_SendPlayerAction(playerid, "abre el maletero de su vehículo.");
		        GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT] = 1;
		        UpdateVehicleParams(vehicleid);
		        return 1;
			}
		}
	}
	if(sscanf(params, "s[30]", option))
	{
		new vehicleid = INVALID_VEHICLE_ID;
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) vehicleid = GetPlayerVehicleID(playerid);
		else if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) vehicleid = GetPlayerCameraTargetVehicle(playerid);

		if(vehicleid == INVALID_VEHICLE_ID) return ShowPlayerMessage(playerid, "No estás cerca de tu vehículo.", 3);
		if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return ShowPlayerMessage(playerid, "Éste no es tu vehículo.", 3);
		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return ShowPlayerMessage(playerid, "Éste no es tu vehículo.", 3);

		if(!ACCOUNT_INFO[playerid][ac_SU] && !PLAYER_VEHICLES[vehicleid][player_vehicle_ACCESSIBLE])
		{
			SendClientMessage(playerid, -1, "{FFFFFF}Este vehículo está bloqueado, desbloquealo con una membresía VIP.");
			ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Premium", "{FFFFFF}Necesitas ser usuario {f4d942}premium{FFFFFF} para usar o tener más vehículos compra el {f4d942}premium{FFFFFF} con sólo {f44242}5 koins.", "Salir", "");
			return 1;
		}

		if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS]) return ShowPlayerMessage(playerid, "Tu vehículo ya está abierto.", 3);

		GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 0;
		UpdateVehicleParams(vehicleid);
		UpdateControlPanelSpeedo(playerid);
	 	new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid, x, y, z);
		for(new i=0; i<MAX_PLAYERS; i++)
		{
			if(!IsPlayerConnected(i)) continue;
			if(IsPlayerInRangeOfPoint(i, 15.0, x,y,z))
			{
				PlayerPlaySound(i, 24600, 0.0, 0.0, 0.0);
			}
		}
		Auto_SendPlayerAction(playerid, "ha abierto las puertas de su vehículo.");
	}
	return 1;
}

CMD:cerrar(playerid, params[])
{
	new option[32];
	if(!sscanf(params,"s[32]",option))
	{
		if(strcmp(option,"maletero",true)==0)
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);

			new vehicleid = GetPlayerCameraTargetVehicle(playerid);
			if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "{FFFFFF}No estás cerca de tu vehículo.");

			if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}Este no es tú vehículo.");
			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, -1, "{FFFFFF}Este no es tú vehículo.");

			if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT]) return ShowPlayerMessage(playerid, "El maletero ya está cerrado.", 3);
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT])
			{
				Auto_SendPlayerAction(playerid, "cierra el maletero de su vehículo.");
		        GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT] = 0;
		        UpdateVehicleParams(vehicleid);
		        return 1;
			}
		}
	}
	if(sscanf(params, "s[30]", option))
	{
		new vehicleid = INVALID_VEHICLE_ID;
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) vehicleid = GetPlayerVehicleID(playerid);
		else if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) vehicleid = GetPlayerCameraTargetVehicle(playerid);

		if(vehicleid == INVALID_VEHICLE_ID) return ShowPlayerMessage(playerid, "No estás cerca de tu vehículo.", 3);
		if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return ShowPlayerMessage(playerid, "Éste no es tu vehículo.", 3);
		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return ShowPlayerMessage(playerid, "Éste no es tu vehículo.", 3);
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS]) return ShowPlayerMessage(playerid, "Tu vehículo ya está cerrado.", 3);

		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] = gettime();
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 1;
		UpdateVehicleParams(vehicleid);
		UpdateControlPanelSpeedo(playerid);
		new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid, x, y, z);
		for(new i=0; i<MAX_PLAYERS; i++)
		{
			if(!IsPlayerConnected(i)) continue;
			if(IsPlayerInRangeOfPoint(i, 15.0, x,y,z))
			{
				PlayerPlaySound(i, 24600, 0.0, 0.0, 0.0);
			}
		}
		Auto_SendPlayerAction(playerid, "ha cerrado las puertas de su vehículo.");
	}
	return 1;
}

CMD:aparcar(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) vehicleid = GetPlayerVehicleID(playerid);

	if(vehicleid == INVALID_VEHICLE_ID) return ShowPlayerMessage(playerid, "No estás en tu vehículo.", 3);
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return ShowPlayerMessage(playerid, "Éste no es tu vehículo.", 3);
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return ShowPlayerMessage(playerid, "Éste no es tu vehículo.", 3);

	new Float:pos[3], Float:angle;
	GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
	GetVehicleZAngle(vehicleid, angle);

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X] = pos[0];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y] = pos[1];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z] = pos[2];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_ANGLE] = angle;

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] = gettime();
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 1;
	UpdateVehicleParams(vehicleid);
	UpdateControlPanelSpeedo(playerid);
	Auto_SendPlayerAction(playerid, "detuvo, y estacionó su vehículo.");
	return 1;
}

CMD:estacionar(playerid, params[])
{
	return cmd_aparcar(playerid, params);
}

CMD:ventanas(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(IsPlayerInBike(playerid)) return 0;
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE])
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE] = 0;
			UpdateVehicleParams(vehicleid);

			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) Auto_SendPlayerAction(playerid, "ha abierto las ventanas del vehículo.");
			else Auto_SendPlayerAction(playerid, "ha abierto las ventanas del vehículo.");
		}
		else
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE] = 1;
			UpdateVehicleParams(vehicleid);

			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) Auto_SendPlayerAction(playerid, "ha cerrado las ventanas del vehículo.");
			else Auto_SendPlayerAction(playerid, "ha cerrado las ventanas del vehículo.");
		}
	}
	return 1;
}

CMD:luces(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS])
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 0;
			UpdateVehicleParams(vehicleid);
			UpdateControlPanelSpeedo(playerid);

			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) Auto_SendPlayerAction(playerid, "ha apagado las luces de su vehículo.");
			else Auto_SendPlayerAction(playerid, "ha apagado las luces de el vehículo.");
		}
		else
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 1;
			UpdateVehicleParams(vehicleid);
			UpdateControlPanelSpeedo(playerid);

			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) Auto_SendPlayerAction(playerid, "ha encendido las luces de su vehículo.");
			else Auto_SendPlayerAction(playerid, "ha encendido las luces de el vehículo.");
		}
	}
	return 1;
}

CMD:detener(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING]) return SendClientMessage(playerid, -1, "{FFFFFF}Debes esperar a que se cargue el camión para arrancar.");
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return SendClientMessage(playerid, -1, "{FFFFFF}Debes esperar a que se descargue el camión para arrancar.");
		}

		if(PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE]) return SendClientMessage(playerid, -1, "{FFFFFF}Termina primero.");
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);

		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
		{
			PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
			UpdateVehicleParams(vehicleid);
			UpdateControlPanelSpeedo(playerid);

			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) Auto_SendPlayerAction(playerid, "ha detenido su vehículo.");
			else Auto_SendPlayerAction(playerid, "ha detenido el vehículo.");
		}
	}
	return 1;
}

CMD:arrancar(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING]) return SendClientMessage(playerid, -1, "{FFFFFF}Debes esperar a que se cargue el camión para arrancar.");
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return SendClientMessage(playerid, -1, "{FFFFFF}Debes esperar a que se descargue el camión para arrancar.");
		}

		if(PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE]) return SendClientMessage(playerid, -1, "{FFFFFF}Termina primero.");
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
		if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
		{
			ShowPlayerMessage(playerid, "Arrancando...", 1);
			PLAYER_TEMP[playerid][pt_TIMERS][7] = SetTimerEx("StartVehicleEngine", 1000, false, "ii", playerid, vehicleid);
		}

	}
	return 1;
}

CMD:motor(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING]) return SendClientMessage(playerid, -1, "{FFFFFF}Debes esperar a que se cargue el camión para arrancar.");
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return SendClientMessage(playerid, -1, "{FFFFFF}Debes esperar a que se descargue el camión para arrancar.");
		}

		if(PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE]) return SendClientMessage(playerid, -1, "{FFFFFF}Termina primero.");

		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
		{
			PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
			UpdateVehicleParams(vehicleid);
			UpdateControlPanelSpeedo(playerid);

			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) Auto_SendPlayerAction(playerid, "ha detenido su vehículo.");
			else Auto_SendPlayerAction(playerid, "ha detenido el vehículo.");
		}
		else
		{
			ShowPlayerMessage(playerid, "Arrancando...", 1);
			PLAYER_TEMP[playerid][pt_TIMERS][7] = SetTimerEx("StartVehicleEngine", 1000, false, "ii", playerid, vehicleid);
		}
	}
	return 1;
}

forward StartVehicleEngine(playerid, vehicleid);
public StartVehicleEngine(playerid, vehicleid)
{
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_DAMAGED) return Auto_SendPlayerAction(playerid, "intentó arrancar el vehículo pero el motor está dañado.");
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] <= 0.1) return Auto_SendPlayerAction(playerid, "intentó arrancar el vehículo pero no tiene gasolina.");

	//new modelid = GetVehicleModel(vehicleid);
	//if(!VEHICLE_INFO[modelid - 400][vehicle_info_VALID]) return 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vehicleid);
	UpdateControlPanelSpeedo(playerid);

	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == ACCOUNT_INFO[playerid][ac_ID]) Auto_SendPlayerAction(playerid, "ha arrancado su vehículo.");
	else Auto_SendPlayerAction(playerid, "ha arrancado el vehículo.");
	return 1;
}

AddVehicleComponents(vehicleid)
{
	for(new i = 0; i != MAX_VEHICLE_COMPONENTS; i ++)
	{
		RemoveVehicleComponent(vehicleid, i);

		if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][i]) continue;
		AddVehicleComponent(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][i]);
	}
	return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
    if(enterexit) // Entra
    {
		SendClientMessage(playerid, -1, " ");
		SendClientMessage(playerid, -1, "{FFFFFF}Solo puedes tunear vehículos en el mecánico, búscalo con el /GPS.");
		SendClientMessage(playerid, -1, "{ffff35}[ATENCION] {FFFFFF}Si realizas alguna modificación al vehículo en este garaje serás expulsado.");
    }
	else
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(vehicleid != INVALID_VEHICLE_ID)
		{
			ChangeVehicleColor(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2]);
			ChangeVehiclePaintjob(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PAINTJOB]);
			AddVehicleComponents(vehicleid);
		}
	}
    return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(ac_Info[CHEAT_CAR_MOD][ac_Enabled])
	{
		if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_IMMUNITY])
		{
			if(!ac_Info[CHEAT_CAR_MOD][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
			else
			{
				if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_CAR_MOD][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] = 0;
				else PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] ++;

				PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] = gettime();
				if(PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_CAR_MOD][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
			}
		}
	}
    return 0;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(ac_Info[CHEAT_CAR_MOD][ac_Enabled])
	{
		if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_IMMUNITY])
		{
			if(!(-1 < paintjobid < 3) && paintjobid != 255)
			{
				if(!ac_Info[CHEAT_CAR_MOD][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_CAR_MOD][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_CAR_MOD][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
				}
			}
		}
	}
	return 1;
}

DestroyVehicleEx(vehicleid)
{
	if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID]) return false;

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] != INVALID_PLAYER_ID)
	{
		PLAYER_AC_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
		PLAYER_AC_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	}

	if(DestroyVehicle(vehicleid))
	{
		new temp_GLOBAL_VEHICLES[Global_Vehicles_Info]; GLOBAL_VEHICLES[vehicleid] = temp_GLOBAL_VEHICLES;
		new temp_PLAYER_VEHICLES[Player_Vehicles_Info]; PLAYER_VEHICLES[vehicleid] = temp_PLAYER_VEHICLES;
		new temp_SELL_VEHICLES[SELL_VEHICLES_Enum]; SELL_VEHICLES[vehicleid] = temp_SELL_VEHICLES;

		new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT];
		for(new i = 0; i != MAX_BOOT_SLOTS; i ++) VEHICLE_BOOT[vehicleid][i] = temp_VEHICLE_BOOT;

		new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
		for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
		{
			if(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID] != INVALID_STREAMER_ID) DestroyDynamicObject(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID]);
			VEHICLE_OBJECTS[vehicleid][i] = temp_VEHICLE_OBJECTS;
		}

		return true;
	}
	return false;
}

stock getRandomLetter()
{
    return 65 + random(25);
}

UpdateControlPanelSpeedo(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid), modelid = GetVehicleModel(vehicleid);
	if(!vehicleid) return 1;
	if(!VEHICLE_INFO[modelid - 400][vehicle_info_VALID]) return 1;
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) return 1;
	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return 1;

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS])
	{
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6]);
	}
	else if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS])
	{
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6]);
	}

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
	{
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10]);
	}
	else if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
	{
	    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10]);
	}

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS])
	{
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8]);
	}
	else if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS])
	{
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7]);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8]);
	}
	return 1;
}

ShowPlayerSpeedoMeter(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 0;
	new vehicleid = GetPlayerVehicleID(playerid), modelid = GetVehicleModel(vehicleid);
	if(!VEHICLE_INFO[modelid - 400][vehicle_info_VALID]) return 0;
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][8]);

	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], "0");

    ShowPlayerProgressBar(playerid, PlayerBar:barra[playerid]);
    ShowPlayerProgressBar(playerid, PlayerBar:barratemp[playerid]);

	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2]);

	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5]);

	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11]);

	UpdateControlPanelSpeedo(playerid);

	PLAYER_TEMP[playerid][pt_FUEL_DOWN_TIME] = gettime();
	PLAYER_TEMP[playerid][pt_TIMERS][8] = SetTimerEx("UpdatePlayerSpeedo", 250, true, "iif", playerid, vehicleid, VEHICLE_INFO[modelid - 400][vehicle_info_MAX_VEL]);
	return 1;
}

HidePlayerSpeedoMeter(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][8]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][5]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][6]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][7]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][8]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][10]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][11]);
	HidePlayerProgressBar(playerid, PlayerBar:barra[playerid]);
	HidePlayerProgressBar(playerid, PlayerBar:barratemp[playerid]);
	return 1;
}

forward UpdatePlayerSpeedo(playerid, vehicleid, Float:maxvel);
public UpdatePlayerSpeedo(playerid, vehicleid, Float:maxvel)
{
	if(vehicleid != GetPlayerVehicleID(playerid))
	{
		HidePlayerSpeedoMeter(playerid);
		ShowPlayerSpeedoMeter(playerid);

		GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_DRIVER] = playerid;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] = false;
		PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] = GetPlayerVehicleID(playerid);
		GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_OCCUPIED] = true;
		return 0;
	}

	new Float:vel = GetVehicleSpeed(vehicleid);

	if(ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Enabled])
	{
		if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_IMMUNITY])
		{
			if(vel > maxvel + 100.0)
			{
				if(!ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_SPEED_HACK);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_SPEED_HACK);
				}
			}
		}
	}

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_NORMAL)
	{
		GetVehicleHealth(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH]);
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] < MIN_VEHICLE_HEALTH)
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_DAMAGED;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = MIN_VEHICLE_HEALTH;
			SetVehicleHealthEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH], playerid);

			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
			UpdateVehicleParams(vehicleid);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9]);

			ShowPlayerMessageNotification(playerid, "El vehículo no va a encender. Usa ~y~/servicio mecánico~w~ para llamar a un mecánico.", 6);
		}
		else if (GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] > MIN_VEHICLE_HEALTH)
		{
            PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9]);
		}
	}

	if(gettime() > PLAYER_TEMP[playerid][pt_FUEL_DOWN_TIME] + 5)
	{
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] -= floatmul(floatdiv(vel, maxvel), 0.1);

			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] <= 0.1)
			{
				PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = 0.0;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
				UpdateVehicleParams(vehicleid);
				UpdateControlPanelSpeedo(playerid);

				ShowPlayerMessageNotification(playerid, "El vehículo se quedó sin gasolina. Usa tu ~y~/gps~w~ para ir a una gasolinería.", 6);
			}
			else if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] < 5.0)
			{
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9]);
			}
			else if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] >= 5.0)
			{
           		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][9]);
			}
		}
		PLAYER_TEMP[playerid][pt_FUEL_DOWN_TIME] = gettime();
	}

	new td_str[64];

	SetPlayerProgressBarValue(playerid, PlayerBar:barratemp[playerid], (1000.0 - GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH]));
	SetPlayerProgressBarMaxValue(playerid, PlayerBar:barratemp[playerid], 650.0);
 	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] >= 700.0)
 	{
 		SetPlayerProgressBarColour(playerid, PlayerBar:barratemp[playerid], 0x00CCFFFF);
	}
	else if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] < 700.0 && GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] >= 400.0)
	{
	    SetPlayerProgressBarColour(playerid, PlayerBar:barratemp[playerid], 0xFFFF00FF);
	}
 	else if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] < 400.0)
 	{
 	    SetPlayerProgressBarColour(playerid, PlayerBar:barratemp[playerid], 0xFF0000FF);
 	}

	SetPlayerProgressBarValue(playerid, PlayerBar:barra[playerid], GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS]);
    SetPlayerProgressBarMaxValue(playerid, PlayerBar:barra[playerid], GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]);

	format(td_str, 64, "%d", floatround(vel));
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SPEEDO_METER][3], td_str);

	GetVehiclePos(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);
	return 1;
}

stock Float:GetVehicleSpeed(vehicleid)
{
    new Float:vx, Float:vy, Float:vz;
    GetVehicleVelocity(vehicleid, vx, vy, vz);
	new Float:vel = floatmul(floatsqroot(floatadd(floatadd(floatpower(vx, 2), floatpower(vy, 2)),  floatpower(vz, 2))), 181.5);
	return vel;
}

UpdatePlayerPropertyContructor(playerid)
{
	SetPlayerPosEx
	(
		playerid,
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_X],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_Y],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_Z],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_ANGLE],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_INTERIOR],
		0, false, true
	);

	new td_str[45]; format(td_str, sizeof td_str, "Interior:_%d/%d", PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] + 1, sizeof PROPERTY_INTERIORS);
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], td_str);
	SelectTextDrawEx(playerid, 0xe8d08fFF);
	return 1;
}

ExitPlayerPropertyConstructor(playerid)
{
	CancelSelectTextDrawEx(playerid);
	PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED] = false;

	SetPlayerPosEx
	(
		playerid,
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_X],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Y],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Z],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_ANG],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_INT],
		0, false, true
	);

	for(new i = 0; i != 6; i ++) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][i]);
	return 1;
}

Create_PlayerPropertyConstructo(playerid)
{
	new slot = GetEmptyPropertySlot();
	if(slot == -1)
	{
		SendClientMessage(playerid, -1, "No hay mas slots.");
		ExitPlayerPropertyConstructor(playerid);
		return 1;
	}

	PROPERTY_INFO[slot][property_VALID] = true;
	PROPERTY_INFO[slot][property_EXT_X] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_X];
	PROPERTY_INFO[slot][property_EXT_Y] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Y];
	PROPERTY_INFO[slot][property_EXT_Z] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Z];
	PROPERTY_INFO[slot][property_EXT_ANGLE] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_ANG];
	PROPERTY_INFO[slot][property_EXT_INTERIOR] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_INT];
	PROPERTY_INFO[slot][property_EXT_FREEZE] = false;
	PROPERTY_INFO[slot][property_ID_INTERIOR] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO];

	PROPERTY_INFO[slot][property_SOLD] = false;
	PROPERTY_INFO[slot][property_OWNER_ID] = 0;
	PROPERTY_INFO[slot][property_PRICE] = PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_creator_PRICE];
	PROPERTY_INFO[slot][property_LEVEL] = PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_creator_LEVEL];
	PROPERTY_INFO[slot][property_EXTRA] = PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_creator_TYPE];
 	PROPERTY_INFO[slot][property_TYPE] = PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_creator_TYPE];


	new DBResult:Result, DB_Query[600];
	format
	(
		DB_Query, sizeof DB_Query,
		"\
			INSERT INTO `PROPERTY`\
			(\
				`EXT_X`, `EXT_Y`, `EXT_Z`, `EXT_ANGLE`, `EXT_INTERIOR`, `EXT_FREEZE`, `ID_INTERIOR`\
			)\
			VALUES\
			(\
				'%f', '%f', '%f', '%f', '%d', '%d', '%d'\
			);\
			SELECT MAX(`ID`) FROM `PROPERTY`;\
		",
		PROPERTY_INFO[slot][property_EXT_X], PROPERTY_INFO[slot][property_EXT_Y], PROPERTY_INFO[slot][property_EXT_Z], PROPERTY_INFO[slot][property_EXT_ANGLE], PROPERTY_INFO[slot][property_EXT_INTERIOR], PROPERTY_INFO[slot][property_EXT_FREEZE],
		PROPERTY_INFO[slot][property_ID_INTERIOR]
	);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result)) PROPERTY_INFO[slot][property_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);

	DB_Query[0] = EOS;
	format
	(
		DB_Query, sizeof DB_Query,
		"\
			INSERT INTO `PROPERTY_INFO`\
			(\
				`ID_PROPERTY`, `PRICE`, `LEVEL`, `EXTRA`\
			)\
			VALUES\
			(\
				'%d', '%d', '%d', '%d'\
			);\
		",
		PROPERTY_INFO[slot][property_ID], PROPERTY_INFO[slot][property_PRICE], PROPERTY_INFO[slot][property_LEVEL], PROPERTY_INFO[slot][property_EXTRA]
	);
	db_query(Database, DB_Query);

	new label_str[256];
	format(PROPERTY_INFO[slot][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[slot][property_ID]);
	new type_house[24];
	if(PROPERTY_INFO[slot][property_EXTRA] == 0) type_house = "Casa en venta";
	if(PROPERTY_INFO[slot][property_EXTRA] == 2) type_house = "Garaje en venta";
	if(PROPERTY_INFO[slot][property_EXTRA] == 3) type_house = "Oficina en venta";
	if(PROPERTY_INFO[slot][property_EXTRA] == 4) type_house = "Negocio en venta";
	format
	(
		label_str,
		sizeof label_str,
		"\
		    {00FF00}%s\n\n\
			{FFFFFF}Dirección: {00FF00}%d\n\
			{FFFFFF}Precio: {41f48f}$%s\n\
			{FFFFFF}Nivel necesario: {00FF00}%d\n\
			{FFFFFF}Usa {FFFF00}/ayuda propiedades {FFFFFF}para ver como comprarla.\
		",type_house ,PROPERTY_INFO[slot][property_ID], number_format_thousand(PROPERTY_INFO[slot][property_PRICE]), PROPERTY_INFO[slot][property_LEVEL]
	);

	PROPERTY_INFO[slot][property_EXT_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFAA, PROPERTY_INFO[slot][property_EXT_X], PROPERTY_INFO[slot][property_EXT_Y], PROPERTY_INFO[slot][property_EXT_Z] + 0.25, 5.0, .testlos = true, .worldid = 0, .interiorid = PROPERTY_INFO[slot][property_EXT_INTERIOR]);
	PROPERTY_INFO[slot][property_INT_LABEL_ID] = CreateDynamic3DTextLabel("{FFFFFF}Presiona {00CCFF}N {FFFFFF}o usa {FFFF00}/salir{FFFFFF}.", 0xFFFFFFAA, PROPERTY_INTERIORS[ PROPERTY_INFO[slot][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[slot][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[slot][property_ID_INTERIOR] ][property_INT_Z] + 0.25, 3.0, .testlos = true, .worldid = PROPERTY_INFO[slot][property_ID], .interiorid = PROPERTY_INTERIORS[ PROPERTY_INFO[slot][property_ID_INTERIOR] ][property_INT_INTERIOR]);

	if(PROPERTY_INFO[slot][property_EXTRA] == 0) PROPERTY_INFO[slot][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[slot][property_EXT_X], PROPERTY_INFO[slot][property_EXT_Y], PROPERTY_INFO[slot][property_EXT_Z], 0, PROPERTY_INFO[slot][property_EXT_INTERIOR]);
    if(PROPERTY_INFO[slot][property_EXTRA] == 2) PROPERTY_INFO[slot][property_EXT_PICKUP_ID] = CreateDynamicPickup(1272, 1, PROPERTY_INFO[slot][property_EXT_X], PROPERTY_INFO[slot][property_EXT_Y], PROPERTY_INFO[slot][property_EXT_Z], 0, PROPERTY_INFO[slot][property_EXT_INTERIOR]);
    if(PROPERTY_INFO[slot][property_EXTRA] == 4) PROPERTY_INFO[slot][property_EXT_PICKUP_ID] = CreateDynamicPickup(19524, 1, PROPERTY_INFO[slot][property_EXT_X], PROPERTY_INFO[slot][property_EXT_Y], PROPERTY_INFO[slot][property_EXT_Z], 0, PROPERTY_INFO[slot][property_EXT_INTERIOR]);
	//PROPERTY_INFO[slot][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[slot][property_EXT_X], PROPERTY_INFO[slot][property_EXT_Y], PROPERTY_INFO[slot][property_EXT_Z], 0, PROPERTY_INFO[slot][property_EXT_INTERIOR]);
	PROPERTY_INFO[slot][property_INT_PICKUP_ID] = CreateDynamicPickup(0, 1, PROPERTY_INTERIORS[ PROPERTY_INFO[slot][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[slot][property_ID_INTERIOR] ][property_INT_Y], PROPERTY_INTERIORS[ PROPERTY_INFO[slot][property_ID_INTERIOR] ][property_INT_Z], PROPERTY_INFO[slot][property_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[slot][property_ID_INTERIOR] ][property_INT_INTERIOR]);

	new info[3];
	info[0] = PICKUP_TYPE_PROPERTY;
	info[1] = slot; // Index
	info[2] = 1; // Pickup Interior
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[slot][property_INT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

	info[0] = PICKUP_TYPE_PROPERTY;
	info[1] = slot; // Index
	info[2] = 2; // Pickup Exterior
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[slot][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

	TOTAL_PROPERTIES_LOADED ++;

	SendClientMessageEx(playerid, -1, "PROPIEDAD %d AÑADIDA.", PROPERTY_INFO[slot][property_ID]);
	SendClientMessageEx(playerid, -1, "PROPIEDADES: %d/%d", TOTAL_PROPERTIES_LOADED, MAX_PROPERTIES);
	ExitPlayerPropertyConstructor(playerid);
	return 1;
}

GetEmptyPropertySlot()
{
	for(new i = 0; i != MAX_PROPERTIES; i ++)
	{
		if(!PROPERTY_INFO[i][property_VALID]) return i;
	}
	return -1;
}


GivePlayerDrunkLevel(playerid, ammount)
{
	return SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + ammount);
}

/*RotateDynamicObject(objectid, Float:rotX, Float:rotY, Float:rotZ, Float:Speed)
{

		Rotation Speeds:
		0.01 - Very very slow speed
		1.00 - Normal speed
		5.00 - Fast speed

	new Float:X, Float:Y, Float:Z;
	new Float:SpeedConverted = floatdiv(floatmul(Speed, 0.01), 2);

	if(IsDynamicObjectMoving(objectid)) StopDynamicObject(objectid);
	GetDynamicObjectPos(objectid, X, Y, Z);
	SetDynamicObjectPos(objectid, X, Y, Z + 0.01);
	MoveDynamicObject(objectid, X, Y, Z, SpeedConverted, rotX, rotY, rotZ);
	return 1;
}*/

stock Float:frandom(Float:max, Float:min, dp)
{
	new
		Float:mul = floatpower(10.0, dp),
		imin = floatround(min * mul),
		imax = floatround(max * mul);
	return float(random(imax - imin) + imin) / mul;
}


ResetVehicleTaxiMeter(vehicleid)
{
	KillTimer(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER]);
	TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED] = false;
	TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_PAYMENT] = 0;
	TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_X] = 0.0;
	TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Y] = 0.0;
	TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Z] = 0.0;
	TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_DISTANCE] = 0.0;
	return 1;
}

ShowPlayerTaxiMeter(playerid)
{
	UpdatePlayerTaxiMeterTextdraws(playerid);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][2]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][3]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][4]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][5]);
	PLAYER_TEMP[playerid][pt_TAXI_METER_ENABLED] = true;
	return 1;
}

UpdatePlayerTaxiMeterTextdraws(playerid)
{
	new td_str[128], vehicleid = GetPlayerVehicleID(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return 0;

	format(td_str, sizeof td_str, "Tarifa $%d", TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_PRICE]);
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][4], td_str);

	format(td_str, sizeof td_str, "$%s", number_format_thousand(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_PAYMENT]));
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][5], td_str);
	return 1;
}

forward UpdateVehicleTaximeter(taxi, driver, passenger);
public UpdateVehicleTaximeter(taxi, driver, passenger)
{
	new driver_vehicle = GetPlayerVehicleID(driver), passenger_vehicle = GetPlayerVehicleID(passenger);

	if(!IsPlayerConnected(driver))
	{
		SendClientMessageEx(passenger, -1, "{FFFFFF}El taxi te costó $%s.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]));
		GivePlayerCash(passenger, -TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]);

		ResetVehicleTaxiMeter(taxi);
		HidePlayerTaxiMeter(passenger);
		return 1;
	}
	if(!IsPlayerConnected(passenger))
	{
		new work_extra_payment;
		if(work_info[WORK_TAXI][work_info_EXTRA_PAY] > 0 && work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP] > 0)
		{
			work_extra_payment = (work_info[WORK_TAXI][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[ driver ][WORK_TAXI], work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP])));
			if(work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT];

			if(ACCOUNT_INFO[driver][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
		}
		PLAYER_SKILLS[driver][WORK_TAXI] ++;

		SendClientMessageEx(driver, -1, "{FFFFFF}Has ganado {41f48f}$%s{FFFFFF} con este viaje.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment));
		GivePlayerCash(driver, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment);

		ResetVehicleTaxiMeter(taxi);
		UpdatePlayerTaxiMeterTextdraws(driver);

		new new_passenger = GetVehicleFirstPassenger(taxi);
		if(new_passenger != INVALID_PLAYER_ID)
		{
			ShowPlayerTaxiMeter(new_passenger);
			if(PLAYER_TEMP[new_passenger][pt_WANT_TAXI])
			{
				PLAYER_TEMP[new_passenger][pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(new_passenger);
			}

			TAXI_METER_VEHICLE[taxi][veh_taxi_meter_ENABLED] = true;
			GetVehiclePos(taxi, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Z]);
			KillTimer(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_TIMER]);
			TAXI_METER_VEHICLE[taxi][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", taxi, GLOBAL_VEHICLES[taxi][gb_vehicle_DRIVER], new_passenger);
		}
		return 1;
	}

	if(driver_vehicle != taxi)
	{
		new work_extra_payment;
		if(work_info[WORK_TAXI][work_info_EXTRA_PAY] > 0 && work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP] > 0)
		{
			work_extra_payment = (work_info[WORK_TAXI][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[ driver ][WORK_TAXI], work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP])));
			if(work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT];

			if(ACCOUNT_INFO[driver][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
		}
		PLAYER_SKILLS[driver][WORK_TAXI] ++;

		SendClientMessageEx(driver, -1, "{FFFFFF}Has ganado $%s con este viaje.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment));
		SendClientMessageEx(passenger, -1, "{FFFFFF}El taxi te costó $%s.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]));

		GivePlayerCash(driver, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment);
		GivePlayerCash(passenger, -TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]);

		ResetVehicleTaxiMeter(taxi);
		HidePlayerTaxiMeter(driver);
		HidePlayerTaxiMeter(passenger);
		return 1;
	}
	if(passenger_vehicle != taxi)
	{
		new work_extra_payment;
		if(work_info[WORK_TAXI][work_info_EXTRA_PAY] > 0 && work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP] > 0)
		{
			work_extra_payment = (work_info[WORK_TAXI][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[ driver ][WORK_TAXI], work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP])));
			if(work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT];

			if(ACCOUNT_INFO[driver][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
		}
		PLAYER_SKILLS[driver][WORK_TAXI] ++;

		SendClientMessageEx(driver, -1, "{FFFFFF}Has ganado {41f48f}$%s{FFFFFF} con este viaje.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment));
		SendClientMessageEx(passenger, -1, "{FFFFFF}El taxista te ha cobrado {41f48f}$%s{FFFFFF}.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]));

		GivePlayerCash(driver, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment);
		GivePlayerCash(passenger, -TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]);

		ResetVehicleTaxiMeter(taxi);
		HidePlayerTaxiMeter(passenger);
		UpdatePlayerTaxiMeterTextdraws(driver);

		new new_passenger = GetVehicleFirstPassenger(taxi);
		if(new_passenger != INVALID_PLAYER_ID)
		{
			ShowPlayerTaxiMeter(new_passenger);
			if(PLAYER_TEMP[new_passenger][pt_WANT_TAXI])
			{
				PLAYER_TEMP[new_passenger][pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(new_passenger);
			}

			TAXI_METER_VEHICLE[taxi][veh_taxi_meter_ENABLED] = true;
			GetVehiclePos(taxi, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Z]);
			KillTimer(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_TIMER]);
			TAXI_METER_VEHICLE[taxi][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", taxi, GLOBAL_VEHICLES[taxi][gb_vehicle_DRIVER], new_passenger);
		}
		return 1;
	}

	if(GetPlayerState(driver) != PLAYER_STATE_DRIVER)
	{
		new work_extra_payment;
		if(work_info[WORK_TAXI][work_info_EXTRA_PAY] > 0 && work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP] > 0)
		{
			work_extra_payment = (work_info[WORK_TAXI][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[ driver ][WORK_TAXI], work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP])));
			if(work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT];

			if(ACCOUNT_INFO[driver][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
		}
		PLAYER_SKILLS[driver][WORK_TAXI] ++;

		SendClientMessageEx(driver, -1, "{FFFFFF}Has ganado $%s con este viaje.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment));
		SendClientMessageEx(passenger, -1, "{FFFFFF}El taxi te costó $%s.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]));

		GivePlayerCash(driver, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment);
		GivePlayerCash(passenger, -TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]);

		ResetVehicleTaxiMeter(taxi);
		HidePlayerTaxiMeter(driver);
		HidePlayerTaxiMeter(passenger);
		return 1;
	}
	if(GetPlayerState(passenger) != PLAYER_STATE_PASSENGER)
	{
		new work_extra_payment;
		if(work_info[WORK_TAXI][work_info_EXTRA_PAY] > 0 && work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP] > 0)
		{
			work_extra_payment = (work_info[WORK_TAXI][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[ driver ][WORK_TAXI], work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP])));
			if(work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT];

			if(ACCOUNT_INFO[driver][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
		}
		PLAYER_SKILLS[driver][WORK_TAXI] ++;

		SendClientMessageEx(driver, -1, "{FFFFFF}Has ganado {41f48f}$%s{FFFFFF} con este viaje.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment));
		SendClientMessageEx(passenger, -1, "{FFFFFF}El taxista te ha cobrado {41f48f}$%s{FFFFFF}.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]));

		GivePlayerCash(driver, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment);
		GivePlayerCash(passenger, -TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]);

		ResetVehicleTaxiMeter(taxi);
		HidePlayerTaxiMeter(passenger);
		UpdatePlayerTaxiMeterTextdraws(driver);

		new new_passenger = GetVehicleFirstPassenger(taxi);
		if(new_passenger != INVALID_PLAYER_ID)
		{
			ShowPlayerTaxiMeter(new_passenger);
			if(PLAYER_TEMP[new_passenger][pt_WANT_TAXI])
			{
				PLAYER_TEMP[new_passenger][pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(new_passenger);
			}

			TAXI_METER_VEHICLE[taxi][veh_taxi_meter_ENABLED] = true;
			GetVehiclePos(taxi, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Z]);
			KillTimer(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_TIMER]);
			TAXI_METER_VEHICLE[taxi][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", taxi, GLOBAL_VEHICLES[taxi][gb_vehicle_DRIVER], new_passenger);
		}
		return 1;
	}

	new Float:distance = GetVehicleDistanceFromPoint(taxi, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Z]) * 0.01;

	if(CHARACTER_INFO[passenger][ch_CASH] < TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT])
	{
		new work_extra_payment;
		if(work_info[WORK_TAXI][work_info_EXTRA_PAY] > 0 && work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP] > 0)
		{
			work_extra_payment = (work_info[WORK_TAXI][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[ driver ][WORK_TAXI], work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP])));
			if(work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT];

			if(ACCOUNT_INFO[driver][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
		}
		PLAYER_SKILLS[driver][WORK_TAXI] ++;

		SendClientMessageEx(driver, -1, "{FFFFFF}Has ganado {41f48f}$%s{FFFFFF} con este viaje.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment));
		SendClientMessage(driver, -1, "{FFFFFF}El pasajero ya no tiene dinero para seguir pagando el taximetro.");
		GivePlayerCash(driver, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] + work_extra_payment);

		SendClientMessageEx(passenger, -1, "{FFFFFF}El taxista te ha cobrado {41f48f}$%s{FFFFFF}.", number_format_thousand(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]));
		SendClientMessage(passenger, -1, "{FFFFFF}No tienes suficiente dinero para seguir pagando el viaje.");
		GivePlayerCash(passenger, -TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT]);
		if(CHARACTER_INFO[passenger][ch_CASH] < 0) SetPlayerCash(passenger, 0);
		RemovePlayerFromVehicle(passenger);

		ResetVehicleTaxiMeter(taxi);
		HidePlayerTaxiMeter(passenger);
		UpdatePlayerTaxiMeterTextdraws(driver);

		new new_passenger = GetVehicleFirstPassenger(taxi);
		if(new_passenger != INVALID_PLAYER_ID)
		{
			ShowPlayerTaxiMeter(new_passenger);
			if(PLAYER_TEMP[new_passenger][pt_WANT_TAXI])
			{
				PLAYER_TEMP[new_passenger][pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(new_passenger);
			}

			TAXI_METER_VEHICLE[taxi][veh_taxi_meter_ENABLED] = true;
			GetVehiclePos(taxi, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Z]);
			KillTimer(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_TIMER]);
			TAXI_METER_VEHICLE[taxi][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", taxi, GLOBAL_VEHICLES[taxi][gb_vehicle_DRIVER], new_passenger);
		}
		return 1;
	}

	TAXI_METER_VEHICLE[taxi][veh_taxi_meter_DISTANCE] += distance;
	TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PAYMENT] = TAXI_METER_VEHICLE[taxi][veh_taxi_meter_PRICE] * floatround(TAXI_METER_VEHICLE[taxi][veh_taxi_meter_DISTANCE], floatround_round);

	GetVehiclePos(taxi, TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[taxi][veh_taxi_meter_OLD_Z]);

	UpdatePlayerTaxiMeterTextdraws(driver);
	UpdatePlayerTaxiMeterTextdraws(passenger);
	return 1;
}

HidePlayerTaxiMeter(playerid)
{
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][3]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TAXI_METER][5]);
	PLAYER_TEMP[playerid][pt_TAXI_METER_ENABLED] = false;
	return 1;
}

SendAlertToTaxiDrivers(playerid)
{
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(GetPlayerState(i) != PLAYER_STATE_DRIVER) continue;
				if(!PLAYER_WORKS[i][WORK_TAXI]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_TAXI) continue;

				SetPlayerMarkerForPlayer(i, playerid, 0xf2f224FF);
				SendClientMessageEx(i, -1, "{00FF00}Hay un nuevo cliente{FFFFFF} solicitando un {00FF00}taxi{FFFFFF} que se encuentra a {00FF00}%.2f{FFFFFF} Km de ti.", (GetPlayerDistanceFromPoint(i, pos[0], pos[1], pos[2]) * 0.01));
			}
		}
	}
	return 1;
}

DisablePlayerTaxiMark(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(GetPlayerState(i) != PLAYER_STATE_DRIVER) continue;
				if(!PLAYER_WORKS[i][WORK_TAXI]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_TAXI) continue;

				SetPlayerMarkerForPlayer(i, playerid, PLAYER_COLOR);
			}
		}
	}
	return 1;
}

SetTaxiPlayerMarkers(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PLAYER_TEMP[i][pt_WANT_TAXI])
				{
					SetPlayerMarkerForPlayer(playerid, i, 0xf2f224FF);
				}
			}
		}
	}
	return 1;
}

SetMechanicPlayerMarkers(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PLAYER_TEMP[i][pt_WANT_MECHANIC])
				{
					SetPlayerMarkerForPlayer(playerid, i, 0x00FFFFFF);
				}
			}
		}
	}
	return 1;
}

SendAlertToMechanic(playerid)
{
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_MECHANIC]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_MECHANIC) continue;

				SetPlayerMarkerForPlayer(i, playerid, 0xf4c242FF);
				SendClientMessageEx(i, -1, "{00FF00}Hay un nuevo cliente{FFFFFF} solicitando un {00FF00}mecánico{FFFFFF} que se encuentra a {00FF00}%.2f{FFFFFF} Km de ti.", (GetPlayerDistanceFromPoint(i, pos[0], pos[1], pos[2]) * 0.01));
			}
		}
	}
	return 1;
}

DisablePlayerMechanicMark(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_MECHANIC]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_MECHANIC) continue;

				SetPlayerMarkerForPlayer(i, playerid, PLAYER_COLOR);
			}
		}
	}
	return 1;
}

SetNormalPlayerMarkers(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetPlayerMarkerForPlayer(playerid, i, PLAYER_TEMP[i][pt_PLAYER_COLOR]);
		}
	}
	return 1;
}

SavePlayerWorks(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DB_Query[150];
	format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_WORKS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	db_query(Database, DB_Query);

	for(new i = 1; i != sizeof(PLAYER_WORKS[]); i ++)
	{
		DB_Query[0] = EOS;
		format(DB_Query, sizeof DB_Query, "INSERT INTO `PLAYER_WORKS` (`ID_USER`, `ID_WORK`, `SET`) VALUES ('%d', '%d', '%d');", ACCOUNT_INFO[playerid][ac_ID], i, PLAYER_WORKS[playerid][i]);
		db_query(Database, DB_Query);
	}
	return 1;
}

LoadPlayerCrewInfo(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[90], bool:found;
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_CREW` WHERE `ID_USER` = '%d' LIMIT 1;", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result))
	{
		PLAYER_CREW[playerid][player_crew_VALID] = true;
		PLAYER_CREW[playerid][player_crew_ID] = db_get_field_assoc_int(Result, "ID_CREW");
		PLAYER_CREW[playerid][player_crew_RANK] = db_get_field_assoc_int(Result, "RANK");

		for(new i = 0; i != MAX_CREWS; i ++)
		{
			if(!CREW_INFO[i][crew_VALID]) continue;

			if(CREW_INFO[i][crew_ID] == PLAYER_CREW[playerid][player_crew_ID])
			{
				PLAYER_CREW[playerid][player_crew_INDEX] = i;
				CREW_INFO[i][crew_ONLINE_MEMBERS] ++;
				found = true;
				break;
			}
		}

		if(!found)
		{
			PLAYER_CREW[playerid][player_crew_VALID] = false;
			PLAYER_CREW[playerid][player_crew_ID] = 0;
			PLAYER_CREW[playerid][player_crew_RANK] = 0;
			PLAYER_CREW[playerid][player_crew_INDEX] = 0;
			SendClientMessage(playerid, -1, "{FFFFFF}La banda a la que pertenecías ya no existe.");

			format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_CREW` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
			db_query(Database, DB_Query);
		}
	}
	else PLAYER_CREW[playerid][player_crew_VALID] = false;
	db_free_result(Result);
	return 1;
}

LoadPlayerWorks(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[90], player_works;
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_WORKS` WHERE `ID_USER` = '%d' LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], sizeof(PLAYER_WORKS[]));
	Result = db_query(Database, DB_Query);

	for(new i; i < db_num_rows(Result); i++ )
	{
		new work = db_get_field_assoc_int(Result, "ID_WORK");
		PLAYER_WORKS[playerid][work] = db_get_field_assoc_int(Result, "SET");
		if(PLAYER_WORKS[playerid][work])
		{
			if(!ACCOUNT_INFO[playerid][ac_SU])
			{
				if(player_works >= MAX_NU_WORKS)
				{
					PLAYER_WORKS[playerid][work] = false;
					break;
				}
			}
			player_works ++;
		}

		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

SavePlayerSkills(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DB_Query[150];
	format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_SKILLS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	db_query(Database, DB_Query);

	for(new i = 1; i != sizeof(PLAYER_SKILLS[]); i ++)
	{
		DB_Query[0] = EOS;
		format(DB_Query, sizeof DB_Query, "INSERT INTO `PLAYER_SKILLS` (`ID_USER`, `ID_WORK`, `TOTAL`) VALUES ('%d', '%d', '%d');", ACCOUNT_INFO[playerid][ac_ID], i, PLAYER_SKILLS[playerid][i]);
		db_query(Database, DB_Query);
	}
	return 1;
}

LoadPlayerSkills(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[90];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_SKILLS` WHERE `ID_USER` = '%d' LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], sizeof(PLAYER_SKILLS[]));
	Result = db_query(Database, DB_Query);

	for(new i; i < db_num_rows(Result); i++ )
	{
		new work = db_get_field_assoc_int(Result, "ID_WORK");
		PLAYER_SKILLS[playerid][work] = db_get_field_assoc_int(Result, "TOTAL");
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

SavePlayerMisc(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DB_Query[150];
	format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_MISC` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	db_query(Database, DB_Query);

	for(new i = 0; i != sizeof(PLAYER_MISC[]); i ++)
	{
		DB_Query[0] = EOS;
		format(DB_Query, sizeof DB_Query, "INSERT INTO `PLAYER_MISC` (`ID_USER`, `ID`, `EXTRA`) VALUES ('%d', '%d', '%d');", ACCOUNT_INFO[playerid][ac_ID], i, PLAYER_MISC[playerid][i]);
		db_query(Database, DB_Query);
	}
	return 1;
}

LoadPlayerMisc(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[90];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_MISC` WHERE `ID_USER` = '%d' LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], sizeof(PLAYER_MISC[]));
	Result = db_query(Database, DB_Query);

	for(new i; i < db_num_rows(Result); i++ )
	{
		new index = db_get_field_assoc_int(Result, "ID");
		PLAYER_MISC[playerid][index] = db_get_field_assoc_int(Result, "EXTRA");
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

ResetTruckInfo(vehicleid)
{
	new tmp_TRUCK_VEHICLE[TRUCK_VEHICLE_Info]; TRUCK_VEHICLE[vehicleid] = tmp_TRUCK_VEHICLE;
	return 1;
}

ResetPizzaInfo(vehicleid)
{
	new tmp_PIZZA_VEHICLE[PIZZA_VEHICLE_Info]; PIZZA_VEHICLE[vehicleid] = tmp_PIZZA_VEHICLE;
	return 1;
}

ResetTrashInfo(vehicleid)
{
	new tmp_TRASH_VEHICLES[TRASH_VEHICLES_INFO]; TRASH_VEHICLES[vehicleid] = tmp_TRASH_VEHICLES;

	TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] = INVALID_PLAYER_ID;
	TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] = INVALID_PLAYER_ID;
	return 1;
}

forward TruckLoadUp(playerid, vehicleid);
public TruckLoadUp(playerid, vehicleid)
{
	if(PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] < 100.0)
	{
		PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] += 10.0;
		if(PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] > 100.0) PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] = 100.0;

		UpdatePlayerLoadingTruckSize(playerid);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);
		PLAYER_TEMP[playerid][pt_TIMERS][9] = SetTimerEx("TruckLoadUp", 1000, false, "ii", playerid, vehicleid);
		return 1;
	}

	SetVehicleParamsEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS], 0, 0, 0, 0, 0);

	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vehicleid);

	TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED] = true;
	TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING] = false;
	TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED] = false;
	PLAYER_TEMP[playerid][pt_CAMION_TIME_KICK] = gettime();

	SendClientMessage(playerid, -1, "{FFFFFF}El camión ha sido cargado, dirígite al checkpoint para entregar la mercancía.");
	SetPlayerTruckCheckpoint(playerid, vehicleid);
	return 1;
}

forward CloseGate(playerid);
public CloseGate(playerid)
{
	MoveObject(Gate, 2774.28003, -2455.94922, 14.81200, 3.0, 0.0000, 0.0000, 0.0000);
}

forward TruckUnLoadUp(playerid, vehicleid);
public TruckUnLoadUp(playerid, vehicleid)
{
	if(PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] < 100.0)
	{
		PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] += 10.0;
		if(PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] > 100.0) PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] = 100.0;

		UpdatePlayerLoadingTruckSize(playerid);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);
		PLAYER_TEMP[playerid][pt_TIMERS][9] = SetTimerEx("TruckUnLoadUp", 1000, false, "ii", playerid, vehicleid);
		return 1;
	}

	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vehicleid);

	TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING] = false;
	TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED] = true;

	SendClientMessage(playerid, -1, "{FFFFFF}La mercancía ha sido entregada, regresa al punto de partida para cobrar.");
	SetPlayerTruckCheckpoint(playerid, vehicleid);
	return 1;
}

SetPlayerTruckCheckpoint(playerid, vehicleid)
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
	}

	if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED])
	{
		PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = CreateDynamicCP(2737.1025,-2465.3574,13.3755, 5.0, 0, 0, playerid, 9999999999.0);

		new info[1];
		info[0] = CHECKPOINT_TYPE_FINISH_TRUCK;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = CreateDynamicCP(Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_X], Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_Y], Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_Z], 5.0, 0, 0, playerid, 9999999999.0);

		new info[1];
		info[0] = CHECKPOINT_TYPE_UNLOAD_TRUCK;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	return 1;
}

UpdatePlayerLoadingTruckSize(playerid)
{
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 253.0 + ( PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] * 1.34), 0.000000);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
	return 1;
}

CMD:basurero(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_TRASH]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres basurero.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRASH)
	{
		SendClientMessageEx(playerid, -1, "{FFFFFF}Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}

	if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 2510.5586,-2640.3730,13.8623)) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) StartPlayerJob(playerid, WORK_TRASH);
	else EndPlayerJob(playerid);
	return 1;
}

CMD:opciones(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MECHANIC]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres mecánico.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_MECHANIC) return SendClientMessage(playerid, -1, "{FFFFFF}No estás de servicio como mecánico.");

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);

	new vehicleid = GetPlayerCameraTargetVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "{FFFFFF}No estás cerca de ningún vehículo.");
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE]) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes trabajar sobre el vehículo porque está el motor encendido.");

	PLAYER_TEMP[playerid][pt_SELECTED_MECHANIC_VEHICLE_ID] = vehicleid;
	ShowDialog(playerid, DIALOG_MECHANIC_MENU);
	return 1;
}

CMD:v(playerid, params[])
{
	return cmd_opciones(playerid, params);
}

CMD:policia(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE)
	{
		SendClientMessageEx(playerid, -1, "{FFFFFF}Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}

	if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);

	if(IsPlayerInRangeOfPoint(playerid, 1.0, 1456.6003, -1721.3387, 1479.7959))
	{
		if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) ShowDialog(playerid, DIALOG_SELECT_POLICE_SKIN);
		else EndPlayerJob(playerid);
		return 1;
	}

	ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	return 1;
}

CMD:talar(playerid, params[])
{
	if(IsPlayerInDynamicArea(playerid, Lumberjack_Area))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_LUMBERJACK)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] == -1)
				{
					if(PLAYER_TEMP[playerid][pt_PLAYER_CARRYING_TREE]) return SendClientMessage(playerid,-1,"{00FF00}Muy bien{FFFFFF}, lleva la leña frente de la procesadora.");

					for(new i = 0; i != sizeof LUMBER_TREES; i ++)
					{
						if(IsPlayerInRangeOfPoint(playerid, 2.0, LUMBER_TREES[i][lumber_tree_X], LUMBER_TREES[i][lumber_tree_Y], LUMBER_TREES[i][lumber_tree_Z]))
						{
							if(LUMBER_TREES[i][lumber_tree_STATE] == LUMBER_TREE_STATE_NORMAL)
							{
								SetCameraBehindPlayer(playerid);
								ApplyAnimation(playerid, "CHAINSAW", "WEAPON_csaw", 4.1, true, false, false, false, 0);
								LUMBER_TREES[i][lumber_tree_STATE] = LUMBER_TREE_STATE_CUTTING;
								PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] = i;

								new Float:offset = floatdiv(PLAYER_SKILLS[playerid][WORK_LUMBERJACK], 10);
								if(offset > 30.0) offset = 30.0;

								PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE_PROG] = frandom(10.0, 8.0, 2) + offset;

								RemovePlayerAttachedObject(playerid, 9);
								SetPlayerAttachedObject(playerid, 9, 341, 6);
								SetPlayerArmedWeapon(playerid, 0);

								new label_str[256];
								format(label_str, sizeof label_str, "{00FF00}Árbol (%d)\n\n{FFFFFF}Talando... {FFFFFF}(%.1f%%)", PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE], PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE_PROG]);
								UpdateDynamic3DTextLabelText(LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_LABEL], -1, label_str);

								KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][11]);
								PLAYER_TEMP[playerid][pt_TIMERS][11] = SetTimerEx("LumberjackUp", 2000, false, "ii", playerid, PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE]);
							}
							break;
						}
					}
				}
			}
		}
	}
	return 1;
}

CMD:permiso(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_LUMBERJACK]) return ShowPlayerMessage(playerid, "Tú no trabajas aquí.", 3);
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_LUMBERJACK)
	{
		SendClientMessageEx(playerid, -1, "{FFFFFF}Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}

	if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "Debes estar depie.", 3);
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 2354.7151,-653.2271,128.0547)) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);

	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) StartPlayerJob(playerid, WORK_LUMBERJACK);
	else EndPlayerJob(playerid);
	return 1;
}

CMD:mecanico(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MECHANIC]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres mecánico.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_MECHANIC)
	{
		SendClientMessageEx(playerid, -1, "{FFFFFF}Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}

	if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 2529.0916,-1519.7683,24.0192)) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) StartPlayerJob(playerid, WORK_MECHANIC);
	else EndPlayerJob(playerid);
	return 1;
}

CMD:medico(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MEDIC]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres médico.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_MEDIC)
	{
		SendClientMessageEx(playerid, -1, "{FFFFFF}Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}

	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_HOSPITAL) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, 3903.1658, -699.6694, 102.6516)) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) StartPlayerJob(playerid, WORK_MEDIC);
	else EndPlayerJob(playerid);
	return 1;
}

CMD:piloto(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_PIZZA]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres piloto, consigue el trabajo en la oficina del encargado.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_PIZZA)
	{
		SendClientMessageEx(playerid, -1, "{FFFFFF}Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}

	if(GetPlayerVirtualWorld(playerid) != 1) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 1650.0181,-2495.9001,901.6032)) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) StartPlayerJob(playerid, WORK_PIZZA);
	else EndPlayerJob(playerid);
	return 1;
}

CMD:semillas(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 1371.0372,-1890.0668,13.5728)) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	ShowDialog(playerid, DIALOG_SEED_LIST);
	return 1;
}

CMD:plantar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_HARVESTER]) return ShowPlayerMessage(playerid, "Consigue el trabajo de cosechador.", 3);
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_FARMER)
	{
		SendClientMessageEx(playerid, -1, "{FFFFFF}No puedes plantar si estás de servicio %s.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}

    if(!IsPlayerInDynamicArea(playerid, Harvest_Area)) return ShowPlayerMessage(playerid, "Busca la ~r~~h~bandera roja~w~~h~ en el mapa para plantar.", 4);
	if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
	if(GetPlayerWeapon(playerid) != 4) return ShowPlayerMessage(playerid, "Necesitas un ~g~~h~~h~cuchillo~w~ para plantar.", 3);
	if(PLAYER_TEMP[playerid][pt_PLANTING]) return ShowPlayerMessage(playerid, "Termina de plantar.", 3);

    if(ACCOUNT_INFO[playerid][ac_SU])
    {
		if(gettime() < PLAYER_TEMP[playerid][pt_LAST_PLANT_TIME] + 1)
		{
			new time = (1-(gettime()-PLAYER_TEMP[playerid][pt_LAST_PLANT_TIME]));
			SendClientMessageEx(playerid, 0xFFFFFFFF, "Tienes que esperar %s minutos para volver a plantar.", TimeConvert(time));
			return 1;
		}
		if(GetPlayerPlantedPlants(playerid) > 8) return ShowPlayerMessage(playerid, "Recoge tus demás plantas para seguir plantando.", 3);
	}
	else
	{
		if(gettime() < PLAYER_TEMP[playerid][pt_LAST_PLANT_TIME] + 60)
		{
			new time = (60-(gettime()-PLAYER_TEMP[playerid][pt_LAST_PLANT_TIME]));
			SendClientMessageEx(playerid, 0xFFFFFFFF, "Tienes que esperar %s minutos para volver a plantar.", TimeConvert(time));
			return 1;
		}
		if(GetPlayerPlantedPlants(playerid) > 2)
		{
			ShowPlayerMessage(playerid, "Recoge tus demás plantas para seguir plantando.", 3);
			ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FF00}ITZN - Premium", "{FFFFFF}Necesitas ser usuario {f4d942}premium{FFFFFF} para plantar más a la vez, compra el {f4d942}premium{FFFFFF} con sólo {f44242}5 koins.", "Salir", "");
		}
	}

	for(new i = 0; i != MAX_PLANTS; i ++)
	{
		if(!PLANTS[i][plant_VALID]) continue;

		new Float:pos[3];
		GetDynamicObjectPos(PLANTS[i][plant_OBJECT_ID], pos[0], pos[1], pos[2]);
		if(IsPlayerInRangeOfPoint(playerid, 3.0, pos[0], pos[1], pos[2]))
		{
			ShowPlayerMessage(playerid, "No puedes plantar sobre otra planta.", 3);
			return 1;
		}
	}

	ShowDialog(playerid, DIALOG_PLANT_PLANTS);
	return 1;
}

CMD:crear(playerid, params[])
{
    new option[32];
   	if(sscanf(params, "s[24]d", option)) return ShowDialog(playerid, DIALOG_WORKS_ARMERO);
	if(!sscanf(params, "s[32]", option))
	{
		if(!PLAYER_WORKS[playerid][WORK_ARMERO]) return ShowPlayerMessage(playerid, "No eres ~r~~h~armero~w~.", 3);
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
		if(strcmp(option, "cuchillo", true) == 0)
		{
			if(PLAYER_MISC[playerid][MISC_PIECES_WEAPON] >= 20 && PLAYER_MISC[playerid][MISC_WOOD] >= 1)
			{
				PLAYER_MISC[playerid][MISC_PIECES_WEAPON] -= 20;
				new weapon_slot = WEAPON_INFO[ 4 ][weapon_info_SLOT];
				GivePlayerWeaponEx(playerid, 4, 1);
				RegisterNewPlayerWeapon(playerid, weapon_slot);
				Auto_SendPlayerAction(playerid, "saca unas piezas y ensambla un cuchillo.");
			}
			else return ShowPlayerMessage(playerid, "No tienes piezas.", 3);
		}
		if(strcmp(option, "bate", true) == 0)
		{
			if(PLAYER_MISC[playerid][MISC_PIECES_WEAPON] >= 5)
			{
				PLAYER_MISC[playerid][MISC_PIECES_WEAPON] -= 5;
				new weapon_slot = WEAPON_INFO[ 5 ][weapon_info_SLOT];
				GivePlayerWeaponEx(playerid, 5, 9999);
				RegisterNewPlayerWeapon(playerid, weapon_slot);
				Auto_SendPlayerAction(playerid, "saca unas piezas y ensambla un bate.");
			}
			else return ShowPlayerMessage(playerid, "No tienes piezas.", 3);
		}
		if(strcmp(option, "camara", true) == 0)
		{
			if(PLAYER_MISC[playerid][MISC_PIECES_WEAPON] >= 65)
			{
				PLAYER_MISC[playerid][MISC_PIECES_WEAPON] -= 65;
				new weapon_slot = WEAPON_INFO[ 43 ][weapon_info_SLOT];
				GivePlayerWeaponEx(playerid, 43, 99999);
				RegisterNewPlayerWeapon(playerid, weapon_slot);
				Auto_SendPlayerAction(playerid, "saca unas piezas y ensambla un cámara.");
			}
			else return ShowPlayerMessage(playerid, "No tienes piezas.", 3);
		}
		else if(strcmp(option, "9mm", true) == 0)
		{
			if(PLAYER_MISC[playerid][MISC_PIECES_WEAPON] >= 10)
			{
				PLAYER_MISC[playerid][MISC_PIECES_WEAPON] -= 10;
				new weapon_slot = WEAPON_INFO[ 22 ][weapon_info_SLOT];
				GivePlayerWeaponEx(playerid, 22, 9999);
				RegisterNewPlayerWeapon(playerid, weapon_slot);
				Auto_SendPlayerAction(playerid, "saca unas piezas y ensambla una 9mm.");
			}
			else return ShowPlayerMessage(playerid, "No tienes piezas.", 3);
		}
		else if(strcmp(option, "9mm-silenciada", true) == 0)
		{
			if(PLAYER_MISC[playerid][MISC_PIECES_WEAPON] >= 15)
			{
				PLAYER_MISC[playerid][MISC_PIECES_WEAPON] -= 15;
				new weapon_slot = WEAPON_INFO[ 23 ][weapon_info_SLOT];
				GivePlayerWeaponEx(playerid, 23, 9999);
				RegisterNewPlayerWeapon(playerid, weapon_slot);
				Auto_SendPlayerAction(playerid, "saca unas piezas y ensambla una 9mm silenciada.");
			}
			else return ShowPlayerMessage(playerid, "No tienes piezas.", 3);
		}
		else if(strcmp(option, "desert", true) == 0)
		{
			if(PLAYER_MISC[playerid][MISC_PIECES_WEAPON] >= 38)
			{
				PLAYER_MISC[playerid][MISC_PIECES_WEAPON] -= 38;
				new weapon_slot = WEAPON_INFO[ 24 ][weapon_info_SLOT];
				GivePlayerWeaponEx(playerid, 24, 9999);
				RegisterNewPlayerWeapon(playerid, weapon_slot);
				Auto_SendPlayerAction(playerid, "saca unas piezas y ensambla una desert eagle.");
			}
			else return ShowPlayerMessage(playerid, "No tienes piezas.", 3);
		}
		else if(strcmp(option, "uzi", true) == 0)
		{
			if(PLAYER_MISC[playerid][MISC_PIECES_WEAPON] >= 30)
			{
				PLAYER_MISC[playerid][MISC_PIECES_WEAPON] -= 30;
				new weapon_slot = WEAPON_INFO[ 28 ][weapon_info_SLOT];
				GivePlayerWeaponEx(playerid, 28, 9999);
				RegisterNewPlayerWeapon(playerid, weapon_slot);
				Auto_SendPlayerAction(playerid, "saca unas piezas y ensambla una uzi.");
			}
			else return ShowPlayerMessage(playerid, "No tienes piezas.", 3);
		}
		else if(strcmp(option, "tec9", true) == 0)
		{
			if(PLAYER_MISC[playerid][MISC_PIECES_WEAPON] >= 30)
			{
				PLAYER_MISC[playerid][MISC_PIECES_WEAPON] -= 30;
				new weapon_slot = WEAPON_INFO[ 32 ][weapon_info_SLOT];
				GivePlayerWeaponEx(playerid, 32, 9999);
				RegisterNewPlayerWeapon(playerid, weapon_slot);
				Auto_SendPlayerAction(playerid, "saca unas piezas y ensambla una tec9.");
			}
			else return ShowPlayerMessage(playerid, "No tienes piezas.", 3);
		}
		else if(strcmp(option, "mp5", true) == 0)
		{
			if(PLAYER_MISC[playerid][MISC_PIECES_WEAPON] >= 38)
			{
				PLAYER_MISC[playerid][MISC_PIECES_WEAPON] -= 38;
				new weapon_slot = WEAPON_INFO[ 29 ][weapon_info_SLOT];
				GivePlayerWeaponEx(playerid, 29, 9999);
				RegisterNewPlayerWeapon(playerid, weapon_slot);
				Auto_SendPlayerAction(playerid, "saca unas piezas y ensambla una MP5.");
			}
			else return ShowPlayerMessage(playerid, "No tienes piezas.", 3);
		}
		else if(strcmp(option, "escopeta", true) == 0)
		{
			if(PLAYER_MISC[playerid][MISC_PIECES_WEAPON] >= 35)
			{
				PLAYER_MISC[playerid][MISC_PIECES_WEAPON] -= 35;
				new weapon_slot = WEAPON_INFO[ 25 ][weapon_info_SLOT];
				GivePlayerWeaponEx(playerid, 25, 9999);
				RegisterNewPlayerWeapon(playerid, weapon_slot);
				Auto_SendPlayerAction(playerid, "saca unas piezas y ensambla una escopeta.");
			}
			else return ShowPlayerMessage(playerid, "No tienes piezas.", 3);
		}
		else if(strcmp(option, "escopeta-de-combate", true) == 0)
		{
			if(PLAYER_MISC[playerid][MISC_PIECES_WEAPON] >= 54)
			{
				PLAYER_MISC[playerid][MISC_PIECES_WEAPON] -= 54;
				new weapon_slot = WEAPON_INFO[ 27 ][weapon_info_SLOT];
				GivePlayerWeaponEx(playerid, 27, 9999);
				RegisterNewPlayerWeapon(playerid, weapon_slot);
				Auto_SendPlayerAction(playerid, "saca unas piezas y ensambla una escopeta de combate.");
			}
			else return ShowPlayerMessage(playerid, "No tienes piezas.", 3);
		}
		else if(strcmp(option, "ak-47", true) == 0)
		{
			if(PLAYER_MISC[playerid][MISC_PIECES_WEAPON] >= 75)
			{
				PLAYER_MISC[playerid][MISC_PIECES_WEAPON] -= 75;
				new weapon_slot = WEAPON_INFO[ 30 ][weapon_info_SLOT];
				GivePlayerWeaponEx(playerid, 30, 9999);
				RegisterNewPlayerWeapon(playerid, weapon_slot);
				Auto_SendPlayerAction(playerid, "saca unas piezas y ensambla una AK-47.");
			}
			else return ShowPlayerMessage(playerid, "No tienes piezas.", 3);
		}
		else if(strcmp(option, "m4", true) == 0)
		{
			if(PLAYER_MISC[playerid][MISC_PIECES_WEAPON] >= 89)
			{
				PLAYER_MISC[playerid][MISC_PIECES_WEAPON] -= 89;
				new weapon_slot = WEAPON_INFO[ 31 ][weapon_info_SLOT];
				GivePlayerWeaponEx(playerid, 31, 9999);
				RegisterNewPlayerWeapon(playerid, weapon_slot);
				Auto_SendPlayerAction(playerid, "saca unas piezas y ensambla una M4.");
			}
			else return ShowPlayerMessage(playerid, "No tienes piezas.", 3);
		}
		else if(strcmp(option, "sniper", true) == 0)
		{
			if(PLAYER_MISC[playerid][MISC_PIECES_WEAPON] >= 103)
			{
				PLAYER_MISC[playerid][MISC_PIECES_WEAPON] -= 103;
				new weapon_slot = WEAPON_INFO[ 34 ][weapon_info_SLOT];
				GivePlayerWeaponEx(playerid, 34, 9999);
				RegisterNewPlayerWeapon(playerid, weapon_slot);
				Auto_SendPlayerAction(playerid, "saca unas piezas y ensambla un sniper.");
			}
			else return ShowPlayerMessage(playerid, "No tienes piezas.", 3);
		}
		else if(strcmp(option, "rifle", true) == 0)
		{
			if(PLAYER_MISC[playerid][MISC_PIECES_WEAPON] >= 85)
			{
				PLAYER_MISC[playerid][MISC_PIECES_WEAPON] -= 85;
				new weapon_slot = WEAPON_INFO[ 33 ][weapon_info_SLOT];
				GivePlayerWeaponEx(playerid, 33, 9999);
				RegisterNewPlayerWeapon(playerid, weapon_slot);
				Auto_SendPlayerAction(playerid, "saca unas piezas y ensambla un rifle.");
			}
			else return ShowPlayerMessage(playerid, "No tienes piezas.", 3);
		}
	}
	return 1;
}
CMD:armar(playerid, params[])
{
	return cmd_crear(playerid, params);
}

CMD:repuestos(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MECHANIC]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres mecánico.");
	if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerInterior(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 2509.2632, -1522.5510, 24.0172)) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);

	ShowDialog(playerid, DIALOG_REPUESTOS_BUY);
	return 1;
}

CMD:servicio(playerid, params[])
{
	new option[24];
	if(!sscanf(params, "s[32]", option))
	{
		if(strcmp(option,"medico",true) == 0)
		{
   			if(CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_CRACK) return ShowPlayerMessage(playerid, "No estás delirando", 3);
   			if(PLAYER_TEMP[playerid][pt_WANT_MEDIC]) return ShowPlayerMessage(playerid, "Ya alertaste a los médicos.", 3);

			SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
			if(Iter_Count(PLAYERS_IN_MEDICO) > 0)
			{
			    PLAYER_TEMP[playerid][pt_WANT_MEDIC] = true;
				SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha envíado su llamado a los radios de los médicos, espere en su ubicación a un médico.");
				SendAlertToTaxiDrivers(playerid);
			}
			else if(Iter_Count(PLAYERS_IN_MEDICO) == 0)
			{
		 		SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}No hay ningún médico en servicio, llame más tarde.");
			}
			ShowPlayerMessage(playerid, "Llamada finalizada.", 3);
			return 1;
		}
		if(strcmp(option,"taxi",true) == 0)
		{
			if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
			{
				PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
				DisablePlayerTaxiMark(playerid);
				SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
				SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha cancelado su llamado a los taxistas.");
				ShowPlayerMessage(playerid, "Llamada finalizada.", 3);
			}
			else
			{
				SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
				if(Iter_Count(PLAYERS_IN_TAXI) > 0)
				{
				    PLAYER_TEMP[playerid][pt_WANT_TAXI] = true;
					SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha envíado su llamado a los radios de los taxistas, espere en su ubicación a un taxista.");
					SendAlertToTaxiDrivers(playerid);
				}
				else if(Iter_Count(PLAYERS_IN_TAXI) == 0)
				{
			 		SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}No hay ningún taxista en servicio, llame más tarde.");
				}
				ShowPlayerMessage(playerid, "Llamada finalizada.", 3);
			}
			return 1;
		}
		if(strcmp(option,"mecanico",true) == 0)
		{
			if(PLAYER_TEMP[playerid][pt_WANT_MECHANIC])
			{
				PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = false;
				DisablePlayerMechanicMark(playerid);
				SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
				SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha cancelado su llamado a los mecánicos.");
				ShowPlayerMessage(playerid, "Llamada finalizada.", 3);
			}
			else
			{
				if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{FFFFFF}Tienes que estar dentro de un vehículo averiado para llamar al mecánico.");
				if(GLOBAL_VEHICLES[ GetPlayerVehicleID(playerid) ][gb_vehicle_STATE] != VEHICLE_STATE_DAMAGED) return SendClientMessage(playerid, -1, "{FFFFFF}Tienes que estar dentro de un vehículo averiado para llamar al mecánico.");

				SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Una grabadora atendió su llamado, el proceso será automático.");
				if(Iter_Count(PLAYERS_IN_MECANICO) > 0)
				{
				    PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = true;
					SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}Se ha envíado su llamado a los radios de los mecanicos, espere en su ubicación a un mecánico.");
					SendAlertToMechanic(playerid);
				}
				else if(Iter_Count(PLAYERS_IN_MECANICO) == 0)
				{
			 		SendClientMessage(playerid, 0xf4d142FF, "@OPERADORA: {ffe991}No hay ningún mecánico en servicio, llame más tarde.");
				}
				ShowPlayerMessage(playerid, "Llamada finalizada.", 3);

			}
			return 1;
		}
	}
	return 1;
}

CMD:comprar(playerid, params[])
{
	new option[24];
	if(!sscanf(params, "s[32]", option))
	{
		if(strcmp(option,"piezas",true) == 0)
		{
			if(!PLAYER_WORKS[playerid][WORK_ARMERO]) return ShowPlayerMessage(playerid, "No eres armero.", 3);
			if(GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado.", 3);
			if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, 93.1727, -187.8790, 1.4844)) return 1;
			ShowDialog(playerid, DIALOG_METAL_BUY);
		}
		if(strcmp(option,"nivel",true) == 0)
		{
			new neccessary_rep = ACCOUNT_INFO[playerid][ac_LEVEL] * 7;
			if(ACCOUNT_INFO[playerid][ac_REP] < neccessary_rep) return SendClientMessage(playerid, 0xFFFFFFFF, "Aún no tienes la suficiente reputación para subir de nivel.");
			if(ACCOUNT_INFO[playerid][ac_LEVEL] * 150 > CHARACTER_INFO[playerid][ch_CASH]) return SendClientMessageEx(playerid, 0xFFFFFFFF, "No tienes suficiente dinero para subir de nivel, te faltan {41f48f}$%s {FFFFFF}para poder comprarlo.", number_format_thousand((ACCOUNT_INFO[playerid][ac_LEVEL] * 150) - CHARACTER_INFO[playerid][ch_CASH]));
			GivePlayerCash(playerid, -(ACCOUNT_INFO[playerid][ac_LEVEL] * 150));


			ACCOUNT_INFO[playerid][ac_REP] = 1;
			ACCOUNT_INFO[playerid][ac_LEVEL] ++;
			UpdateReputationTextDraws(playerid);
			SetPlayerSkillLevels(playerid);

			SendClientMessageEx(playerid, -1, "{00CCFF}¡Felicidades! {FFFFFF}Has subido al nivel %d.", ACCOUNT_INFO[playerid][ac_LEVEL]);
			SetPlayerScore(playerid, ACCOUNT_INFO[playerid][ac_LEVEL]);
			PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);

			ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = TIME_FOR_REP;
			PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP] = gettime() * 1000;

			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][2]);
			PLAYER_TEMP[playerid][pt_TIMERS][2] = SetTimerEx("AddPlayerReputation", ACCOUNT_INFO[playerid][ac_TIME_FOR_REP], false, "i", playerid);
		}
	}
	return 1;
}

VehiclePaintjob(modelid)
{
	switch(modelid)
	{
		case 483: return 1;
		case 534..536: return 3;
		case 558..562: return 3;
		case 565, 567: return 3;
		case 575: return 2;
		case 576: return 3;
	}
	return false;
}

Set_HARVEST_Checkpoint(playerid)
{
	if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]))
	{
		DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
	}

	if(PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] == sizeof(HARVEST_CHECKPOINTS) - 1)
	{
		PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] =	CreateDynamicRaceCP
														(
															1,
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][0],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][1],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][2],
															0.0,
															0.0,
															0.0,
															5.0,
															0,
															0,
															playerid
														);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] =	CreateDynamicRaceCP
														(
															0,
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][0],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][1],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][2],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] + 1 ][0],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] + 1 ][1],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] + 1 ][2],
															5.0,
															0,
															0,
															playerid
														);
	}

	new info[1];
	info[0] = CHECKPOINT_TYPE_HARVEST;
	Streamer_SetArrayData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT], E_STREAMER_EXTRA_ID, info);

	return 1;
}

Set_FUMIGATOR_Checkpoint(playerid)
{
	if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT]))
	{
		DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT] = INVALID_STREAMER_ID;
	}

	if(PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] == sizeof(FUMIGATOR_CHECKPOINTS) - 1)
	{
		PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT] =	CreateDynamicRaceCP
														(
															0,
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] ][0],
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] ][1],
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] ][2],
															0.0,
															0.0,
															0.0,
															4.0,
															0,
															0,
															playerid,
															999999.0
														);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT] =	CreateDynamicRaceCP
														(
															0,
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] ][0],
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] ][1],
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] ][2],
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] + 1 ][0],
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] + 1 ][1],
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] + 1 ][2],
															4.0,
															0,
															0,
															playerid,
															999999.0
														);
	}

	new info[1];
	info[0] = CHECKPOINT_TYPE_FUMIGATOR;
	Streamer_SetArrayData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT], E_STREAMER_EXTRA_ID, info);

	return 1;
}

public OnPlayerEnterDynamicRaceCP(playerid, checkpointid)
{
	new info[1];
	Streamer_GetArrayData(STREAMER_TYPE_RACE_CP, checkpointid, E_STREAMER_EXTRA_ID, info);

	switch(info[0])
	{
		case CHECKPOINT_TYPE_HARVEST:
		{
			if(PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] == sizeof(HARVEST_CHECKPOINTS) - 1)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid == INVALID_VEHICLE_ID) return 1;

				new work_extra_payment;
				if(work_info[WORK_HARVESTER][work_info_EXTRA_PAY] > 0 && work_info[WORK_HARVESTER][work_info_EXTRA_PAY_EXP] > 0)
				{
					work_extra_payment = (work_info[WORK_HARVESTER][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_HARVESTER], work_info[WORK_HARVESTER][work_info_EXTRA_PAY_EXP])));
					if(work_info[WORK_HARVESTER][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_HARVESTER][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_HARVESTER][work_info_EXTRA_PAY_LIMIT];

					if(ACCOUNT_INFO[playerid][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
				}

				new Rand = random(11);
				switch(Rand)
				{
					case 0:
 					{
  						new money = 600 + 250;
						GivePlayerCash(playerid, money);
						SendClientMessageEx(playerid, 0x00FF00FF, "Buena cosecha{FFFFFF}, has ganado {41f48f}$%s{FFFFFF} y te has encontrado una {00FF00}billetera con {41f48f}$250.", number_format_thousand(money));
		    		}
					case 1:
 					{
  						new money = 600;
						GivePlayerCash(playerid, money);
						GivePlayerWeaponEx(playerid, 4, 100);
						SendClientMessageEx(playerid, 0x00FF00FF, "Muy buena cosecha{FFFFFF}, has ganado {41f48f}$%s{FFFFFF} y te has encontrado un {00FF00}cuchillo.", number_format_thousand(money));
		    		}
		    		case 2:
 					{
  						new money = 600;
						GivePlayerCash(playerid, money);
						PLAYER_MISC[playerid][MISC_MEDICINE] += 1;
						SendClientMessageEx(playerid, 0x00FF00FF, "Buena cosecha{FFFFFF}, has ganado {41f48f}$%s{FFFFFF} y te has encontrado{00FF00}1g medicamento.", number_format_thousand(money));
		    		}
		    		case 3:
 					{
  						new money = 600;
						GivePlayerCash(playerid, money);
						PLAYER_MISC[playerid][MISC_CANNABIS] += 1;
						SendClientMessageEx(playerid, 0x00FF00FF, "Buena cosecha{FFFFFF}, has ganado {41f48f}$%s{FFFFFF} y te has robado {00FF00}1g marihuana.", number_format_thousand(money));
		    		}
					case 4:
 					{
  						new money = 600;
						GivePlayerCash(playerid, money);
						PLAYER_MISC[playerid][MISC_CRACK] += 1;
						SendClientMessageEx(playerid, 0x00FF00FF, "Buena cosecha{FFFFFF}, has ganado {41f48f}$%s{FFFFFF} y un te has robado {00FF00}1g de crack.", number_format_thousand(money));
		    		}
					case 5:
 					{
  						new money = 600;
						GivePlayerCash(playerid, money);
						SendClientMessageEx(playerid, 0x00FF00FF, "Buena cosecha{FFFFFF}, has ganado {41f48f}$%s{FFFFFF}.", number_format_thousand(money));
		    		}
					case 6:
 					{
  						new money = 600;
						GivePlayerCash(playerid, money);
						SendClientMessageEx(playerid, 0x00FF00FF, "Buena cosecha{FFFFFF}, has ganado {41f48f}$%s{FFFFFF}.", number_format_thousand(money));
		    		}
		    		case 7:
 					{
  						new money = 600;
						GivePlayerCash(playerid, money);
						SendClientMessageEx(playerid, 0x00FF00FF, "Buena cosecha{FFFFFF}, has ganado {41f48f}$%s{FFFFFF}.", number_format_thousand(money));
		    		}
		    		case 8:
 					{
  						new money = 600;
						GivePlayerCash(playerid, money);
						SendClientMessageEx(playerid, 0x00FF00FF, "Buena cosecha{FFFFFF}, has ganado {41f48f}$%s{FFFFFF}.", number_format_thousand(money));
		    		}
		    		case 9:
 					{
  						new money = 600;
						GivePlayerCash(playerid, money);
						SendClientMessageEx(playerid, 0x00FF00FF, "Buena cosecha{FFFFFF}, has ganado {41f48f}$%s{FFFFFF}.", number_format_thousand(money));
		    		}
		    		case 10:
 					{
  						new money = 600;
						GivePlayerCash(playerid, money);
						SendClientMessageEx(playerid, 0x00FF00FF, "Buena cosecha{FFFFFF}, has ganado {41f48f}$%s{FFFFFF}.", number_format_thousand(money));
		    		}
				}

				PLAYER_SKILLS[playerid][WORK_HARVESTER] ++;

				EndPlayerJob(playerid);
				return 1;
			}

			PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ++;
			Set_HARVEST_Checkpoint(playerid);
		}
		case CHECKPOINT_TYPE_FUMIGATOR:
		{
			if(PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] == sizeof(FUMIGATOR_CHECKPOINTS) - 1)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid == INVALID_VEHICLE_ID) return 1;

				new work_extra_payment;
				if(work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY] > 0 && work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY_EXP] > 0)
				{
					work_extra_payment = (work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_FUMIGATOR], work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY_EXP])));
					if(work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY_LIMIT];

					if(ACCOUNT_INFO[playerid][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
				}

				new Rand = random(2);
				switch(Rand)
				{
					case 0:
 					{
						new money = 2000;
						//GivePlayerCash(playerid, money);
						BANK_ACCOUNT[playerid][bank_account_BALANCE] += money;
						PLAYER_MISC[playerid][MISC_MEDICINE] += 1;
						SendClientMessageEx(playerid, 0x00FF00FF, "{00FF00}¡Buen viaje!{FFFFFF}, la empresa te deposito {41f48f}$%s{FFFFFF} en tu cuenta bancaria.", number_format_thousand(money));
		    		}
					case 1:
 					{
						new money = 2000;
						GivePlayerCash(playerid, 200);
						BANK_ACCOUNT[playerid][bank_account_BALANCE] += money;
						SendClientMessageEx(playerid, 0x00FF00FF, "{00FF00}¡Buen viaje!{FFFFFF}, la empresa te deposito {41f48f}$%s{FFFFFF} en tu cuenta bancaria, y te has encontrado {41f48f}$200", number_format_thousand(money));
		    		}
    			}

				PLAYER_SKILLS[playerid][WORK_FUMIGATOR] ++;
				EndPlayerJob(playerid);
				return 1;
			}

			new vehicleid = GetPlayerVehicleID(playerid);
			TogglePlayerControllable(playerid, false);
			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
			ShowPlayerMessage(playerid, "Espere 10 segundos a que suba o llegue el pasaje...", 8);
			SetTimerEx("UnloadPasaje", 10000, false, "d", playerid);

			PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] ++;
			Set_FUMIGATOR_Checkpoint(playerid);
		}
	}
	return 1;
}

SetPlayerTrashCheckpoint(playerid, vehicleid)
{
	DestroyPlayerTrashCheckpoint(playerid);

	new cp = TRASH_VEHICLES[ vehicleid ][trash_vehicle_CP];
	new route = TRASH_VEHICLES[ vehicleid ][trash_vehicle_ROUTE];

	if(cp >= TRASH_OBJECTS[route][trash_route_OBJECTS])
	{
		PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT] = CreateDynamicCP(2495.9419,-2621.1133,13.3685, 5.0, 0, 0, playerid, 9999999999.0);
		new info[1];
		info[0] = CHECKPOINT_TYPE_FINISH_TRASH;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT] = CreateDynamicCP(TRASH_OBJECTS[ route ][trash_object_X][ cp ], TRASH_OBJECTS[ route ][trash_object_Y][ cp ], TRASH_OBJECTS[ route ][trash_object_Z][ cp ], 1.5, 0, 0, playerid, 9999999999.0);

		new info[1];
		info[0] = CHECKPOINT_TYPE_TRASH;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	return 1;
}

DestroyPlayerTrashCheckpoint(playerid)
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	return 1;
}

CancelTrashWork(driver, mate, vehicleid)
{
	DestroyPlayerTrashCheckpoint(driver);
	DestroyPlayerTrashCheckpoint(mate);

	DestroyPlayerTrashRouteObjects(driver);
	DestroyPlayerTrashRouteObjects(mate);

	PLAYER_TEMP[driver][pt_TRASH_DRIVER] = false;
	PLAYER_TEMP[driver][pt_TRASH_PASSENGER] = false;
	PLAYER_TEMP[driver][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;

	PLAYER_TEMP[mate][pt_TRASH_DRIVER] = false;
	PLAYER_TEMP[mate][pt_TRASH_PASSENGER] = false;
	PLAYER_TEMP[mate][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;

	KillTimer(PLAYER_TEMP[mate][pt_TIMERS][10]);
	PlayerTextDrawHide(mate, PlayerTextdraws[mate][ptextdraw_RECYCLE_TRASH][0]);
	PlayerTextDrawHide(mate, PlayerTextdraws[mate][ptextdraw_RECYCLE_TRASH][1]);
	PlayerTextDrawHide(mate, PlayerTextdraws[mate][ptextdraw_RECYCLE_TRASH][2]);
	PlayerTextDrawHide(mate, PlayerTextdraws[mate][ptextdraw_RECYCLE_TRASH][3]);
	ClearAnimations(mate);
	TogglePlayerControllable(mate, true);

	ResetTrashInfo(vehicleid);
	SetVehicleToRespawnEx(vehicleid);
	return 1;
}

UpdatePlayerTrashRecycleSize(playerid)
{
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0.0, PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] * 1.3);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2]);
	return 1;
}

forward RecycleUp(playerid);
public RecycleUp(playerid)
{
	if(PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] < 100.0)
	{
		PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] += 15.0;
		if(PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] > 100.0) PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] = 100.0;

		ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.1, true, false, false, false, 0);
		UpdatePlayerTrashRecycleSize(playerid);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][10]);
		PLAYER_TEMP[playerid][pt_TIMERS][10] = SetTimerEx("RecycleUp", 1000, false, "i", playerid);
		return 1;
	}

	TogglePlayerControllable(playerid, true);
	ClearAnimations(playerid);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][3]);

	new driver = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID];
	new cp = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP];
	new route = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE];

	DestroyDynamicObject(TRASH_PLAYER_OBJECTS[playerid][cp]);
	TRASH_PLAYER_OBJECTS[playerid][cp] = INVALID_STREAMER_ID;

	DestroyDynamicObject(TRASH_PLAYER_OBJECTS[driver][cp]);
	TRASH_PLAYER_OBJECTS[driver][cp] = INVALID_STREAMER_ID;

	CreatePlayerFlashObject(
								playerid,
								TRASH_OBJECTS[ route ][trash_object_X][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Y][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Z][ cp ] - 1.5
							);

	CreatePlayerFlashObject(
								driver,
								TRASH_OBJECTS[ route ][trash_object_X][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Y][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Z][ cp ] - 1.5
							);

	PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);

	TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] ++;
	if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] >= TRASH_OBJECTS[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] ][trash_route_OBJECTS])
	{
		SendClientMessage(playerid, -1, "{FFFFFF}Sube al camión para volver al vertedero y recibir la paga.");
		SendClientMessage(driver, -1, "{FFFFFF}Espera a que se suba tu compañero y vuelve al vertedero para recibir la paga.");
	}
	else SendClientMessage(playerid, -1, "{FFFFFF}Sube al camión y sigue con la ruta.");

	SetPlayerTrashCheckpoint(driver, PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
	SetPlayerTrashCheckpoint(playerid, PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);

	Streamer_Update(driver);
	Streamer_Update(playerid);
	return 1;
}

CancelLumberjackWork(playerid)
{
	if(PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] != -1)
	{
		DestroyDynamicObject(LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_OBJECT_ID]);
		LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_OBJECT_ID] = CreateDynamicObject(LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_MODELID], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_X], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_Y], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_Z], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_RX], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_RY], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_RZ], 0, 0);
		LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_STATE] = LUMBER_TREE_STATE_NORMAL;

		new label_str[256];
		format(label_str, sizeof label_str, "{00FF00}Árbol (%d)\n\n{FFFFFF}Escribe {FFFF00}/talar {FFFFFF}para talar el árbol.", PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE]);
		UpdateDynamic3DTextLabelText(LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_LABEL], -1, label_str);
	}

	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
	}

	RemovePlayerAttachedObject(playerid, 8);
	RemovePlayerAttachedObject(playerid, 9);
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][11]);
	//ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(playerid, true);
	PLAYER_TEMP[playerid][pt_PLAYER_CARRYING_TREE] = false;
	PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] = -1;
	SetPlayerToys(playerid);
	return 1;
}

forward LumberjackUp(playerid, tree);
public LumberjackUp(playerid, tree)
{
	if(PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE_PROG] < 100.0)
	{
		PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE_PROG] += frandom(12.0, 8.0, 2);
		if(PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE_PROG] > 100.0) PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE_PROG] = 100.0;

		SetPlayerArmedWeapon(playerid, 9);
		ApplyAnimation(playerid, "CHAINSAW", "WEAPON_csaw", 4.1, true, false, false, false, 0);

		new label_str[256];
		format(label_str, sizeof label_str, "{00FF00}Árbol (%d)\n\n{FFFFFF}Talando... {FFFFFF}(%.1f%%)", tree, PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE_PROG]);
		UpdateDynamic3DTextLabelText(LUMBER_TREES[ tree ][lumber_tree_LABEL], -1, label_str);

		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][11]);
		PLAYER_TEMP[playerid][pt_TIMERS][11] = SetTimerEx("LumberjackUp", 2000, false, "ii", playerid, tree);
		return 1;
	}

	GetPlayerFacingAngle(playerid, CHARACTER_INFO[playerid][ch_ANGLE]);
	SetDynamicObjectRot(LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID], LUMBER_TREES[ tree ][lumber_tree_RX], LUMBER_TREES[ tree ][lumber_tree_RY], CHARACTER_INFO[playerid][ch_ANGLE]);
	MoveDynamicObject(LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID], LUMBER_TREES[ tree ][lumber_tree_X], LUMBER_TREES[ tree ][lumber_tree_Y], LUMBER_TREES[ tree ][lumber_tree_Z] + 0.01, 0.0065, -85.0, 0.0, CHARACTER_INFO[playerid][ch_ANGLE]);
	RemovePlayerAttachedObject(playerid, 9);
	SetPlayerAttachedObject(playerid, 9, 341, 1, -0.172999, -0.165, -0.053999, 0.0, -7.599999, -9.6);

	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][11]);
	PLAYER_TEMP[playerid][pt_TIMERS][11] = SetTimerEx("ContinueTreeAnimation", 1400, false, "iif", playerid, tree, CHARACTER_INFO[playerid][ch_ANGLE]);

	ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(playerid, true);
	return 1;
}

forward ContinueTreeAnimation(playerid, tree, Float:rotation);
public ContinueTreeAnimation(playerid, tree, Float:rotation)
{
	new Float:pos[3];
	pos[0] = LUMBER_TREES[ tree ][lumber_tree_X];
	pos[1] = LUMBER_TREES[ tree ][lumber_tree_Y];
	pos[2] = LUMBER_TREES[ tree ][lumber_tree_Z];

	pos[0] += (1.5 * floatsin(-rotation, degrees));
	pos[1] += (1.5 * floatcos(-rotation, degrees));

	CreateFlashObject(pos[0], pos[1], pos[2] - 0.4);
	DestroyDynamicObject(LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID]);
	PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);

	LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID] = CreateDynamicObject(841, pos[0], pos[1], pos[2] + 0.2, 0.0, 0.0, rotation, 0, 0);

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	PLAYER_TEMP[playerid][pt_PLAYER_CARRYING_TREE] = true;
	PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] = -1;

	RemovePlayerAttachedObject(playerid, 8);
	SetPlayerAttachedObject(playerid, 8, 19793, 6, 0.077999, 0.043999, -0.170999, -13.799953, 79.70, 0.0);

	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = CreateDynamicCP(2355.6638, -649.1179, 128.0547, 5.0, 0, 0, playerid, 9999999999.0);

	new info[1];
	info[0] = CHECKPOINT_TYPE_LUMBERJACK;
	Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT], E_STREAMER_EXTRA_ID, info);

	SendClientMessage(playerid, -1, "{00FF00}Muy bien{FFFFFF}, lleva la leña frente de la procesadora.");


	LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER] = 90;
	new label_str[256];
	format(label_str, sizeof label_str, "{00FF00}Árbol (%d)\n\n{FFFFFF}(%s)", tree, TimeConvert(LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER]));
	UpdateDynamic3DTextLabelText(LUMBER_TREES[ tree ][lumber_tree_LABEL], -1, label_str);

	LUMBER_TREES[ tree ][lumber_tree_STATE] = LUMBER_TREE_STATE_CUTTED;
	KillTimer(LUMBER_TREES[ tree ][lumber_tree_GROW_TIMER]);
	LUMBER_TREES[ tree ][lumber_tree_GROW_TIMER] = SetTimerEx("GrowTreeUp", 1000, false, "i", tree);

	Streamer_Update(playerid);
	return 1;
}

forward GrowTreeUp(tree);
public GrowTreeUp(tree)
{
	if(LUMBER_TREES[ tree ][lumber_tree_STATE] != LUMBER_TREE_STATE_CUTTED) return 0;

	if(LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER] > 0)
	{
		LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER] --;
		new label_str[256];
		format(label_str, sizeof label_str, "{00FF00}Árbol (%d)\n\n{FFFFFF}(%s)", tree, TimeConvert(LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER]));
		UpdateDynamic3DTextLabelText(LUMBER_TREES[ tree ][lumber_tree_LABEL], -1, label_str);

		KillTimer(LUMBER_TREES[ tree ][lumber_tree_GROW_TIMER]);
		LUMBER_TREES[ tree ][lumber_tree_GROW_TIMER] = SetTimerEx("GrowTreeUp", 1000, false, "i", tree);
		return 1;
	}

	DestroyDynamicObject(LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID]);
	LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID] = CreateDynamicObject(LUMBER_TREES[ tree ][lumber_tree_MODELID], LUMBER_TREES[ tree ][lumber_tree_X], LUMBER_TREES[ tree ][lumber_tree_Y], LUMBER_TREES[ tree ][lumber_tree_Z], LUMBER_TREES[ tree ][lumber_tree_RX], LUMBER_TREES[ tree ][lumber_tree_RY], LUMBER_TREES[ tree ][lumber_tree_RZ], 0, 0);
	LUMBER_TREES[ tree ][lumber_tree_STATE] = LUMBER_TREE_STATE_NORMAL;

	new label_str[256];
	format(label_str, sizeof label_str, "{00FF00}Árbol (%d)\n\n{FFFFFF}Escribe {FFFF00}/talar {FFFFFF}para talar el árbol.", tree);
	UpdateDynamic3DTextLabelText(LUMBER_TREES[ tree ][lumber_tree_LABEL], -1, label_str);
	return 1;
}

CreateFlashObject(Float:x, Float:y, Float:z)
{
	new oid = CreateObject(18680, x, y, z, 0.0, 0.0, 0.0);
	SetTimerEx("DestroyFlashObject", 1000, false, "i", oid);
	return 1;
}

forward DestroyFlashObject(objectid);
public DestroyFlashObject(objectid)
{
	return DestroyObject(objectid);
}

ShowPlayerInventory(playerid, pid)
{
	if(!IsPlayerConnected(pid)) return 0;
	if(ACCOUNT_INFO[pid][ac_ID] == 0) return 0;

	new caption[48];
	format(caption, sizeof caption, "{00FF00}INVENTARIO DE %s", PLAYER_TEMP[pid][pt_RP_NAME]);

	new dialog[1800], line_str[128];

	format(line_str, sizeof line_str, "{FFFFFF}Dinero: {41f48f}$%s\n", number_format_thousand(CHARACTER_INFO[pid][ch_CASH]));
	strcat(dialog, line_str);

	format(line_str, sizeof line_str, "{f44242}koins: {FFFFFF}%d\n", ACCOUNT_INFO[pid][ac_SD]);
	strcat(dialog, line_str);

	if(BANK_ACCOUNT[pid][bank_account_ID] != 0)
	{
		format(line_str, sizeof line_str, "{FFFFFF}Número de cuenta bancario: {00CCFF}%d\n", BANK_ACCOUNT[pid][bank_account_ID]);
		strcat(dialog, line_str);
	}

	if(PLAYER_PHONE[pid][player_phone_VALID])
	{
		format(line_str, sizeof line_str, "{FFFFFF}Número de teléfono: {00FF00}%s\n", number_format_dash(PLAYER_PHONE[pid][player_phone_NUMBER]));
		strcat(dialog, line_str);
	}

	new toys = CountPlayerToys(pid);
	if(toys > 0)
	{
		format(line_str, sizeof line_str, "{FFFFFF}Cantidad de prendas: {00FF00}%d\n", toys);
		strcat(dialog, line_str);
	}

	new pocket_objects = CountPlayerPocketObjects(pid);
	if(pocket_objects > 0)
	{
		format(line_str, sizeof line_str, "{FFFFFF}Cantidad de alimentos: {00FF00}%d\n", pocket_objects);
		strcat(dialog, line_str);
	}

	if(PLAYER_OBJECT[pid][po_GPS]) strcat(dialog, "{FFFFFF}GPS\n");
	if(PLAYER_OBJECT[pid][po_MP3]) strcat(dialog, "{FFFFFF}Audifonos\n");
	if(PLAYER_OBJECT[pid][po_PHONE_RESOLVER]) strcat(dialog, "{FFFFFF}Guia telefónica\n");
	if(PLAYER_MISC[pid][MISC_LATA_PINTURA] == 1) strcat(dialog, "{FFFFFF}Máquina para pintar\n");
	if(PLAYER_MISC[pid][MISC_HERRAMIENTA] == 1) strcat(dialog, "{FFFFFF}Llave de mecánico\n");

	new player_weapons = CountPlayerWeapons(pid);
	if(player_weapons > 0)
	{
		if(PLAYER_WORKS[pid][WORK_POLICE]) format(line_str, sizeof line_str, "{FFFFFF}Cantidad de armas {4286f4}legales: %d\n", player_weapons);
		else format(line_str, sizeof line_str, "{FFFFFF}Cantidad de armas {FF3300}ilegales: %d\n", player_weapons);
		strcat(dialog, line_str);
	}

	if(PLAYER_MISC[pid][MISC_MECHANIC_PIECES] > 0)
	{
		format(line_str, sizeof line_str, "{FFFFFF}Cantidad de repuestos mecánicos: {00FF00}%s\n", number_format_thousand(PLAYER_MISC[pid][MISC_MECHANIC_PIECES]));
		strcat(dialog, line_str);
	}

	if(PLAYER_MISC[pid][MISC_FUEL_DRUM] > 0)
	{
		format(line_str, sizeof line_str, "{FFFFFF}Bidón de gasolina: {00FF00}%d Litros\n", PLAYER_MISC[pid][MISC_FUEL_DRUM]);
		strcat(dialog, line_str);
	}

	if(PLAYER_MISC[pid][MISC_SEED_MEDICINE] > 0)
	{
		format(line_str, sizeof line_str, "{FFFFFF}Semillas de medicamento: {00FF00}%d\n", PLAYER_MISC[pid][MISC_SEED_MEDICINE]);
		strcat(dialog, line_str);
	}

	if(PLAYER_MISC[pid][MISC_SEED_CANNABIS] > 0)
	{
		format(line_str, sizeof line_str, "{FFFFFF}Semillas de marihuana: {00FF00}%d\n", PLAYER_MISC[pid][MISC_SEED_CANNABIS]);
		strcat(dialog, line_str);
	}

	if(PLAYER_MISC[pid][MISC_SEED_CRACK] > 0)
	{
		format(line_str, sizeof line_str, "{FFFFFF}Semillas de coca: {00FF00}%d\n", PLAYER_MISC[pid][MISC_SEED_CRACK]);
		strcat(dialog, line_str);
	}

	if(PLAYER_MISC[pid][MISC_MEDICINE] > 0)
	{
		format(line_str, sizeof line_str, "{FFFFFF}Medicamentos: {00FF00}%dg\n", PLAYER_MISC[pid][MISC_MEDICINE]);
		strcat(dialog, line_str);
	}

	if(PLAYER_MISC[pid][MISC_CANNABIS] > 0)
	{
		format(line_str, sizeof line_str, "{FFFFFF}Marihuana: {FF3300}%dg\n", PLAYER_MISC[pid][MISC_CANNABIS]);
		strcat(dialog, line_str);
	}

	if(PLAYER_MISC[pid][MISC_CRACK] > 0)
	{
		format(line_str, sizeof line_str, "{FFFFFF}Crack: {FF3300}%dg\n", PLAYER_MISC[pid][MISC_CRACK]);
		strcat(dialog, line_str);
	}

	if(PLAYER_MISC[pid][MISC_WOOD] > 0)
	{
		format(line_str, sizeof line_str, "{FFFFFF}Piezas de madera: {d19b59}%d\n", PLAYER_MISC[pid][MISC_WOOD]);
		strcat(dialog, line_str);
	}

	if(PLAYER_MISC[pid][MISC_PIECES_WEAPON] > 0)
	{
		format(line_str, sizeof line_str, "{FFFFFF}Piezas de arma: {FFFF00}%d\n", PLAYER_MISC[pid][MISC_PIECES_WEAPON]);
		strcat(dialog, line_str);
	}

	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");
	return 1;
}

CountPlayerToys(playerid)
{
	new toys;

	for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
	{
		if(PLAYER_TOYS[playerid][i][player_toy_VALID])
		{
			toys ++;
		}
	}
	return toys;
}

CountPlayerPocketObjects(playerid)
{
	new objects;

	for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++)
	{
		if(PLAYER_POCKET[playerid][i][player_pocket_VALID])
		{
			objects ++;
		}
	}
	return objects;
}

CountPlayerWeapons(playerid)
{
	new weapons;

	for(new i = 0; i != 13; i ++)
	{
		if(PLAYER_WEAPONS[playerid][i][player_weapon_VALID])
		{
			weapons ++;
		}
	}
	return weapons;
}

ShowPlayerSkills(playerid, pid)
{
	if(!IsPlayerConnected(pid)) return 0;
	if(ACCOUNT_INFO[pid][ac_ID] == 0) return 0;

	new caption[48], line_str[80], dialog[sizeof line_str * (sizeof(work_info) + 5)];
	format(caption, sizeof caption, "{00FF00}HABILIDADES DE %s", PLAYER_TEMP[pid][pt_RP_NAME]);

	for(new i = 1; i != sizeof work_info; i ++)
	{
		if(i == WORK_POLICE)
		{
			if(PLAYER_WORKS[playerid][WORK_POLICE])
			{
				format(line_str, sizeof line_str, "{FFFFFF}%c%s: {00FF00}%s\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], POLICE_RANKS[PLAYER_SKILLS[pid][i]]);
				strcat(dialog, line_str);
			}
		}
		else
		{
			format(line_str, sizeof line_str, "{FFFFFF}%c%s: {00FF00}%s\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], number_format_thousand(PLAYER_SKILLS[pid][i]));
			strcat(dialog, line_str);
		}
	}

	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");
	return 1;
}

stock ConvertTime_SecondsToHoursFloat(sec, &Float:hours)
{
	hours = floatdiv(float(sec), 3600);
   	return 1;
}

CreatePlayerTrashRouteObjects(playerid, route)
{
	for(new i = 0; i != MAX_OBJECTS_PER_ROUTE; i ++)
	{
		TRASH_PLAYER_OBJECTS[playerid][i] = INVALID_STREAMER_ID;

		if(TRASH_OBJECTS[route][trash_object_MODELID][i] != 0)
		{
			TRASH_PLAYER_OBJECTS[playerid][i] = CreateDynamicObject(TRASH_OBJECTS[route][trash_object_MODELID][i], TRASH_OBJECTS[route][trash_object_X][i], TRASH_OBJECTS[route][trash_object_Y][i], TRASH_OBJECTS[route][trash_object_Z][i], TRASH_OBJECTS[route][trash_object_RX][i], TRASH_OBJECTS[route][trash_object_RY][i], TRASH_OBJECTS[route][trash_object_RZ][i], 0, 0, playerid);
		}
	}
	return 1;
}

DestroyPlayerTrashRouteObjects(playerid)
{
	for(new i = 0; i != MAX_OBJECTS_PER_ROUTE; i ++)
	{
		if(TRASH_PLAYER_OBJECTS[playerid][i] != INVALID_STREAMER_ID) DestroyDynamicObject(TRASH_PLAYER_OBJECTS[playerid][i]);
		TRASH_PLAYER_OBJECTS[playerid][i] = INVALID_STREAMER_ID;
	}
	return 1;
}

CreatePlayerFlashObject(playerid, Float:x, Float:y, Float:z)
{
	new oid = CreatePlayerObject(playerid, 18680, x, y, z, 0.0, 0.0, 0.0);
	SetTimerEx("DestroyPlayerFlashObject", 1000, false, "ii", playerid, oid);
	return 1;
}

forward DestroyPlayerFlashObject(playerid, objectid);
public DestroyPlayerFlashObject(playerid, objectid)
{
	return DestroyPlayerObject(playerid, objectid);
}

GetVehicleFirstPassenger(vehicleid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPlayerState(i) == PLAYER_STATE_PASSENGER)
			{
				if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
				{
					if(GetPlayerVehicleID(i) == vehicleid)
					{
						return i;
					}
				}
			}
		}
	}
	return INVALID_PLAYER_ID;
}

UpdatePlantSizeTextdrawPlant(playerid)
{
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2], 260.0 + ( PLAYER_TEMP[playerid][pt_PLANTING_PROGRESS] * 1.2), 0.000000);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2]);
	return 1;
}

CancelPlayerPlanting(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][12]);
	PLAYER_TEMP[playerid][pt_PLANTING] = false;
	PLAYER_TEMP[playerid][pt_PLANTING_PROGRESS] = 0.0;

	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3]);

	TogglePlayerControllable(playerid, true);
	ClearAnimations(playerid);
	return 1;
}

forward PlantingUp(playerid, seeds);
public PlantingUp(playerid, seeds)
{
	if(PLAYER_TEMP[playerid][pt_PLANTING_PROGRESS] < 100.0)
	{
		PLAYER_TEMP[playerid][pt_PLANTING_PROGRESS] += floatdiv(50, seeds);
		if(PLAYER_TEMP[playerid][pt_PLANTING_PROGRESS] > 100.0) PLAYER_TEMP[playerid][pt_PLANTING_PROGRESS] = 100.0;

		ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, true, false, false, false, 0);
		UpdatePlantSizeTextdrawPlant(playerid);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][12]);
		PLAYER_TEMP[playerid][pt_TIMERS][12] = SetTimerEx("PlantingUp", 1000, false, "id", playerid, seeds);
		return 1;
	}

	PLAYER_TEMP[playerid][pt_WORKING_IN] = WORK_NONE;
	PLAYER_TEMP[playerid][pt_PLANTING] = false;
	PLAYER_TEMP[playerid][pt_PLANTING_PROGRESS] = 0.0;

	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PLANT_PLANT][3]);

	TogglePlayerControllable(playerid, true);
	ClearAnimations(playerid);

	//objeto planta: 2244

	new index = GetAvaiblePlantIndex();
	if(index == -1)
	{

		switch(seed_info[ PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED] ][seed_info_PLANT_TYPE])
		{
			case PLANT_TYPE_MEDICINE: PLAYER_MISC[playerid][MISC_SEED_MEDICINE] += plant_info[ PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED] ][plant_info_SEEDS];
			case PLANT_TYPE_CANNABIS: PLAYER_MISC[playerid][MISC_SEED_CANNABIS] += plant_info[ PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED] ][plant_info_SEEDS];
			case PLANT_TYPE_CRACK: PLAYER_MISC[playerid][MISC_SEED_CRACK] += plant_info[ PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED] ][plant_info_SEEDS];
		}

		SendClientMessage(playerid, -1, "{FFFFFF}No queda espacio para más plantas, te hemos devuelto las semillas. Prueba más tarde.");
		return 1;
	}

	GetPlayerPos(playerid, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2]);
	GetPlayerFacingAngle(playerid, CHARACTER_INFO[playerid][ch_ANGLE]);
	CHARACTER_INFO[playerid][ch_POS][0] += (1.0 * floatsin(-CHARACTER_INFO[playerid][ch_ANGLE], degrees));
	CHARACTER_INFO[playerid][ch_POS][1] += (1.0 * floatcos(-CHARACTER_INFO[playerid][ch_ANGLE], degrees));
	CHARACTER_INFO[playerid][ch_POS][2] -= 0.75;

	PLANTS[index][plant_VALID] = true;
	PLANTS[index][plant_GROWING] = true;
	PLANTS[index][plant_INVISIBLE] = true;
	PLANTS[index][plant_GROWING_PROGRESS] = frandom(10.0, 8.0, 2);
	PLANTS[index][plant_TYPE] = PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED];
	PLANTS[index][plant_PLANTED_BY_ACCOUNT_ID] = ACCOUNT_INFO[playerid][ac_ID];
	format(PLANTS[index][plant_PLANTED_BY_NAME], 24, "%s", PLAYER_TEMP[playerid][pt_RP_NAME]);
	PLANTS[index][plant_OBJECT_ID] = CreateDynamicObject(2244, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2], 0.0, 0.0, CHARACTER_INFO[playerid][ch_ANGLE], 0, 0);
	SetDynamicObjectMaterial(PLANTS[index][plant_OBJECT_ID], 2, 2244, "plants_tabletop", "CJ_PLANT", 0x00FFFFFF);

	new info[2];
	info[0] = OBJECT_TYPE_PLANT;
	info[1] = index;
	Streamer_SetArrayData(STREAMER_TYPE_OBJECT, PLANTS[index][plant_OBJECT_ID], E_STREAMER_EXTRA_ID, info);

	new label_str[256];
	if(seed_info[ PLANTS[index][plant_TYPE] ][seed_info_TYPE] == TYPE_LEGAL) format(label_str, sizeof label_str, "{009900}Planta de %s\n\n{FFFFFF}Dueño: %s\n{FFFFFF}Creciendo ({FF0000}%.1f%%{FFFFFF})", plant_info[ PLANTS[index][plant_TYPE] ][plant_info_NAME], PLANTS[index][plant_PLANTED_BY_NAME], PLANTS[index][plant_GROWING_PROGRESS]);
	else format(label_str, sizeof label_str, "{FF3300}Planta de %s\n\n{FFFFFF}Dueño: %s\n{FFFFFF}Creciendo ({FF0000}%.1f%%{FFFFFF})", plant_info[ PLANTS[index][plant_TYPE] ][plant_info_NAME], PLANTS[index][plant_PLANTED_BY_NAME], PLANTS[index][plant_GROWING_PROGRESS]);
	PLANTS[index][plant_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFAA, CHARACTER_INFO[playerid][ch_POS][0], CHARACTER_INFO[playerid][ch_POS][1], CHARACTER_INFO[playerid][ch_POS][2] + 0.25, 10.0, .testlos = false, .interiorid = 0, .worldid = 0);

	KillTimer(PLANTS[index][plant_TIMER]);
	PLANTS[index][plant_TIMER] = SetTimerEx("GrowPlantUp", 5000, false, "d", index);

	PLAYER_SKILLS[playerid][WORK_FARMER] ++;
	SendClientMessage(playerid, -1, "{FFFFFF}Si le {FF0000}disparán{FFFFFF} o la planta se queda mucho tiempo sin recogerla, se destruirá.");
	Streamer_Update(playerid);
	return 1;
}

forward UnloadPasaje(playerid);
public UnloadPasaje(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
	TogglePlayerControllable(playerid, true);
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
	ShowPlayerMessage(playerid, "Continúa con la ~g~~h~ruta~w~.", 4);
	return 1;
}

forward DesocuparArena();
public DesocuparArena()
{
	foreach(PLAYERS_IN_RACE, i) DisablePlayerCheckpoint(i);
    foreach(PLAYERS_IN_RACE, i) PLAYER_IN_RACE[i] = 0;
	foreach(PLAYERS_IN_RACE, i) Iter_Remove(PLAYERS_IN_RACE, i);
 	BET_RACE = 0;
    COUNTDOWN_RACE = 10;
    ARENA_RACE = 0;
	return 1;
}

forward CountDownRace();
public CountDownRace()
{
    new Tiempo_ConteoR;
    if(COUNTDOWN_RACE > 0)
	{
		Tiempo_ConteoR = SetTimer("CountDownRace", 1000, false);
		if( Iter_Count(PLAYERS_IN_RACE) <= 1) //End minigame if there aren't enough sign ups
		{
			foreach(PLAYERS_IN_RACE, i) PLAYER_IN_RACE[i] = 0;
			KillTimer(Tiempo_ConteoR);
	        COUNTDOWN_RACE = 10;
	        ARENA_RACE = 0;
	        foreach(PLAYERS_IN_RACE, i) TogglePlayerControllable(i, 1);
			return 1;
		}
 	}
    if(COUNTDOWN_RACE == 0)
	{
		if( Iter_Count(PLAYERS_IN_RACE) <= 1) //End minigame if there aren't enough sign ups
		{
			foreach(PLAYERS_IN_RACE, i) PLAYER_IN_RACE[i] = 0;
			KillTimer(Tiempo_ConteoR);
	        COUNTDOWN_RACE = 10;
			return 1;
		}
  		if(Iter_Count(PLAYERS_IN_RACE) > 1)
		{
		    for(new i = 0; i < MAX_PLAYERS; i++)
		    {
			    if(PLAYER_IN_RACE[i] == 1)
			    {
				    SetPlayerCheckpoint(i, 907.3338, 1863.1664, 10.3515, 20.0);
				    CHECKPOINT_RACE[i] = true;
	   				TogglePlayerControllable(i, 1);
					SetCameraBehindPlayer(i);
					ShowPlayerMessage(i, "Corre!", 4);
			    }
		    	new Float:x,Float:y,Float:z;
				GetPlayerPos(i, x, y, z);
				if(IsPlayerInRangeOfPoint(i, 15.0, x,y,z))
				{
					PlayerPlaySound(i, 3200,0.0,0.0,0.0);
				}
		    }
			KillTimer(Tiempo_ConteoR);
	        COUNTDOWN_RACE = 10;
	        ARENA_RACE = 1;
   		}
        return 1;
    }
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
	    if(PLAYER_IN_RACE[i] == 1)
	    {
			PlayerPlaySound(i, 45400,0.0,0.0,0.0);
	    }
    }
    return COUNTDOWN_RACE--;
}

forward ClearChat (lines);
public ClearChat (lines)
{
for(new i=0; i<lines; i++)
{
SendClientMessageToAll(-1, " ");
}
return 1;
}

GetAvaiblePlantIndex()
{
	for(new i = 0; i != sizeof PLANTS; i ++)
	{
		if(!PLANTS[i][plant_VALID]) return i;
	}
	return -1;
}

forward GrowPlantUp(plant);
public GrowPlantUp(plant)
{
	if(!PLANTS[plant][plant_VALID] || !PLANTS[plant][plant_GROWING]) return 0;

	if(PLANTS[plant][plant_GROWING_PROGRESS] < 100.0)
	{
		PLANTS[plant][plant_GROWING_PROGRESS] += floatdiv(25, plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_SEEDS]);
		if(PLANTS[plant][plant_GROWING_PROGRESS] > 100.0) PLANTS[plant][plant_GROWING_PROGRESS] = 100.0;

		if(PLANTS[plant][plant_INVISIBLE] && PLANTS[plant][plant_GROWING_PROGRESS] > 50.0)
		{
			PLANTS[plant][plant_INVISIBLE] = false;
			SetDynamicObjectMaterial(PLANTS[plant][plant_OBJECT_ID], 2, 2244, "plants_tabletop", "CJ_PLANT", 0xFFFFFFFF);
		}

		new label_str[256];
		if(seed_info[ PLANTS[plant][plant_TYPE] ][seed_info_TYPE] == TYPE_LEGAL) format(label_str, sizeof label_str, "{009900}Planta de %s\n\n{FFFFFF}Dueño: %s\n{FFFFFF}Creciendo ({FF0000}%.1f%%{FFFFFF})", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], PLANTS[plant][plant_GROWING_PROGRESS]);
		else format(label_str, sizeof label_str, "{FF3300}Planta de %s\n\n{FFFFFF}Dueño: %s\n{FFFFFF}Creciendo ({FF0000}%.1f%%{FFFFFF})", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], PLANTS[plant][plant_GROWING_PROGRESS]);
		UpdateDynamic3DTextLabelText(PLANTS[plant][plant_LABEL_ID], 0xFFFFFFAA, label_str);

		KillTimer(PLANTS[plant][plant_TIMER]);
		PLANTS[plant][plant_TIMER] = SetTimerEx("GrowPlantUp", 5000, false, "d", plant);
		return 1;
	}

	SetDynamicObjectMaterial(PLANTS[plant][plant_OBJECT_ID], 2, 2244, "plants_tabletop", "CJ_PLANT", 0xFFff0000);

	PLANTS[plant][plant_GROWING] = false;
	PLANTS[plant][plant_EXPIRE_TIME] = 300;

	new label_str[256];
	if(seed_info[ PLANTS[plant][plant_TYPE] ][seed_info_TYPE] == TYPE_LEGAL) format(label_str, sizeof label_str, "{009900}Planta de %s\n\n{FFFFFF}Dueño: %s\n{FFFFFF}Usa {FFFF00}/recoger {FFFFFF}para recogerla\n\n{FFFFFF}Se destruyé en %sm", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]));
	else format(label_str, sizeof label_str, "{FF3300}Planta de %s\n\n{FFFFFF}Dueño: %s\n{FFFFFF}Usa {FFFF00}/recoger {FFFFFF}para recogerla\n\n{FFFFFF}Se destruyé en %sm", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]));
	UpdateDynamic3DTextLabelText(PLANTS[plant][plant_LABEL_ID], 0xFFFFFFAA, label_str);

	KillTimer(PLANTS[plant][plant_TIMER]);
	PLANTS[plant][plant_TIMER] = SetTimerEx("ExpirePlantTime", 1000, false, "d", plant);
	return 1;
}

forward ExpirePlantTime(plant);
public ExpirePlantTime(plant)
{
	if(!PLANTS[plant][plant_VALID]) return 0;

	if(PLANTS[plant][plant_EXPIRE_TIME] > 0)
	{
		PLANTS[plant][plant_EXPIRE_TIME] --;

		new label_str[256];
		if(seed_info[ PLANTS[plant][plant_TYPE] ][seed_info_TYPE] == TYPE_LEGAL) format(label_str, sizeof label_str, "{009900}Planta de %s\n\n{FFFFFF}Dueño: %s\n{FFFFFF}Usa {FFFF00}/recoger {FFFFFF}para recogerla\n\n{FFFFFF}Se destruyé en %sm", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]));
		else format(label_str, sizeof label_str, "{FF3300}Planta de %s\n\n{FFFFFF}Dueño: %s\n{FFFFFF}Usa {FFFF00}/recoger {FFFFFF}para recogerla\n\n{FFFFFF}Se destruyé en %sm", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]));
		UpdateDynamic3DTextLabelText(PLANTS[plant][plant_LABEL_ID], 0xFFFFFFAA, label_str);

		KillTimer(PLANTS[plant][plant_TIMER]);
		PLANTS[plant][plant_TIMER] = SetTimerEx("ExpirePlantTime", 1000, false, "d", plant);
		return 1;
	}

	new Float:pos[3];
	GetDynamicObjectPos(PLANTS[plant][plant_OBJECT_ID], pos[0], pos[1], pos[2]);
	CreateFlashObject(pos[0], pos[1], pos[2] - 1.3);

	DestroyDynamicObject(PLANTS[plant][plant_OBJECT_ID]);
	DestroyDynamic3DTextLabel(PLANTS[plant][plant_LABEL_ID]);

	new tmp_PLANTS[PLANTS_ENUM]; PLANTS[plant] = tmp_PLANTS;
	return 1;
}

CMD:recoger(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;

	for(new i = 0; i != MAX_PLANTS; i ++)
	{
		if(!PLANTS[i][plant_VALID] || PLANTS[i][plant_GROWING]) continue;

		new Float:pos[3];
		GetDynamicObjectPos(PLANTS[i][plant_OBJECT_ID], pos[0], pos[1], pos[2]);
		if(IsPlayerInRangeOfPoint(playerid, 1.5, pos[0], pos[1], pos[2]))
		{
			if(PLANTS[i][plant_PLANTED_BY_ACCOUNT_ID] != ACCOUNT_INFO[playerid][ac_ID]) return ShowPlayerMessage(playerid, "Esta ~r~~h~no~w~ es tu planta", 3);

			KillTimer(PLANTS[i][plant_TIMER]);
			switch(seed_info[ PLANTS[i][plant_TYPE] ][seed_info_PLANT_TYPE])
			{
				case PLANT_TYPE_MEDICINE:
				{
					PLAYER_MISC[playerid][MISC_MEDICINE] += 3;
					SendClientMessage(playerid, -1, "{FFFFFF}Has recogido la planta y has obtenido {00FF00}3 gramos de medicamento.");
				}
				case PLANT_TYPE_CANNABIS:
				{
					PLAYER_MISC[playerid][MISC_CANNABIS] += 1;
					SendClientMessage(playerid, -1, "{FFFFFF}Has recogido la planta y has obtenido {00FF00}1 gramo de marihuana.");
				}
				case PLANT_TYPE_CRACK:
				{
					PLAYER_MISC[playerid][MISC_CRACK] += 3;
					SendClientMessage(playerid, -1, "{FFFFFF}Has recogido la planta y has obtenido {00FF00}3 gramos de crack.");
				}
			}

			DestroyDynamicObject(PLANTS[i][plant_OBJECT_ID]);
			DestroyDynamic3DTextLabel(PLANTS[i][plant_LABEL_ID]);
			ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 1, 1, 0, 0, 1);

			new tmp_PLANTS[PLANTS_ENUM]; PLANTS[i] = tmp_PLANTS;
			return 1;
		}
	}
	return 1;
}

public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
	new info[2];
	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, info);

	if(info[0] == OBJECT_TYPE_PLANT)
	{
		KillTimer(PLANTS[info[1]][plant_TIMER]);

		new Float:pos[3];
		GetDynamicObjectPos(PLANTS[info[1]][plant_OBJECT_ID], pos[0], pos[1], pos[2]);
		CreateFlashObject(pos[0], pos[1], pos[2] - 1.3);

		DestroyDynamicObject(PLANTS[info[1]][plant_OBJECT_ID]);
		DestroyDynamic3DTextLabel(PLANTS[info[1]][plant_LABEL_ID]);

		new tmp_PLANTS[PLANTS_ENUM]; PLANTS[info[1]] = tmp_PLANTS;
	}
	return 1;
}

ShowPlayerGpsMap(playerid)
{
	PLAYER_TEMP[playerid][pt_GPS_MAP] = true;
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_GPS_MAP][0]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_GPS_MAP][1]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_GPS_MAP][2]);

	UpdatePlayer_GPS_Map(playerid);

	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][13]);
	PLAYER_TEMP[playerid][pt_TIMERS][13] = SetTimerEx("UpdatePlayer_GPS_Map", 1000, true, "i", playerid);
	return 1;
}

HidePlayerGpsMap(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][13]);
	PLAYER_TEMP[playerid][pt_GPS_MAP] = false;
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_GPS_MAP][0]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_GPS_MAP][1]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_GPS_MAP][2]);

	for(new i = 0; i != MAX_PLAYER_MAP_GPS_POINTS; i ++)
	{
		if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][i] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][i]);
			PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][i] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
	return 1;
}

forward UpdatePlayer_GPS_Map(playerid);
public UpdatePlayer_GPS_Map(playerid)
{
	/*
		0 - playerpos
		1 - cp gps
		2 - cp works
		3 > cp works

	*/
	if(!PLAYER_TEMP[playerid][pt_GPS_MAP]) return KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][13]);

	new Float:pos[3];

	switch(CHARACTER_INFO[playerid][ch_STATE])
	{
		case ROLEPLAY_STATE_INTERIOR:
		{
			pos[0] = ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_EXT_X];
			pos[1] = ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_EXT_Y];
		}
		case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
		{
			pos[0] = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] ][property_EXT_X];
			pos[1] = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] ][property_EXT_Y];
		}
		default: GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	}
	SetPlayerPoint_GPS_Map(0, playerid, "hud:radar_waypoint", -1, 5.0, 5.0, pos[0], pos[1]);

	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]))
	{
		new Float:gps_cp_pos[2];
		Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
		Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
		SetPlayerPoint_GPS_Map(1, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
	}
	else
	{
		if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][1] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][1]);
			PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][1] = PlayerText:INVALID_TEXT_DRAW;
		}
	}

	switch(PLAYER_TEMP[playerid][pt_WORKING_IN])
	{
		case WORK_NONE:
		{
			if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
			{
				PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]);
				PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
			}
		}
		case WORK_TRUCK:
		{
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2];
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]);
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_HARVESTER:
		{
			if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2];
				Streamer_GetFloatData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]);
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_FUMIGATOR:
		{
			if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2];
				Streamer_GetFloatData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]);
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_TRASH:
		{
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2];
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]);
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_LUMBERJACK:
		{
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2];
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]);
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_PIZZA:
		{
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2];
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]);
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
	}

	new cp_counts = 3;
	for(new d = cp_counts; d != MAX_PLAYER_MAP_GPS_POINTS; d ++)
	{
		if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][d] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][d]);
			PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][d] = PlayerText:INVALID_TEXT_DRAW;
		}
	}

	if(cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) return 1;
	switch(PLAYER_TEMP[playerid][pt_WORKING_IN])
	{
		case WORK_TAXI:
		{
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if(PLAYER_TEMP[i][pt_WANT_TAXI])
						{
							if(cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) break;

							new Float:player_pos[3];
							switch(CHARACTER_INFO[i][ch_STATE])
							{
								case ROLEPLAY_STATE_INTERIOR:
								{
									player_pos[0] = ENTER_EXIT[ PLAYER_TEMP[i][pt_INTERIOR_INDEX] ][ee_EXT_X];
									player_pos[1] = ENTER_EXIT[ PLAYER_TEMP[i][pt_INTERIOR_INDEX] ][ee_EXT_Y];
								}
								case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
								{
									player_pos[0] = PROPERTY_INFO[ PLAYER_TEMP[i][pt_PROPERTY_INDEX] ][property_EXT_X];
									player_pos[1] = PROPERTY_INFO[ PLAYER_TEMP[i][pt_PROPERTY_INDEX] ][property_EXT_Y];
								}
								default: GetPlayerPos(i, player_pos[0], player_pos[1], player_pos[2]);
							}
							SetPlayerPoint_GPS_Map(cp_counts, playerid, "LD_SPAC:white", 0xf2f224FF, 3.0, 3.0, player_pos[0], player_pos[1]);
							cp_counts ++;
						}
					}
				}
			}
		}
		case WORK_MECHANIC:
		{
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if(PLAYER_TEMP[i][pt_WANT_MECHANIC])
						{
							if(cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) break;

							new Float:player_pos[3];
							switch(CHARACTER_INFO[i][ch_STATE])
							{
								case ROLEPLAY_STATE_INTERIOR:
								{
									player_pos[0] = ENTER_EXIT[ PLAYER_TEMP[i][pt_INTERIOR_INDEX] ][ee_EXT_X];
									player_pos[1] = ENTER_EXIT[ PLAYER_TEMP[i][pt_INTERIOR_INDEX] ][ee_EXT_Y];
								}
								case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
								{
									player_pos[0] = PROPERTY_INFO[ PLAYER_TEMP[i][pt_PROPERTY_INDEX] ][property_EXT_X];
									player_pos[1] = PROPERTY_INFO[ PLAYER_TEMP[i][pt_PROPERTY_INDEX] ][property_EXT_Y];
								}
								default: GetPlayerPos(i, player_pos[0], player_pos[1], player_pos[2]);
							}
							SetPlayerPoint_GPS_Map(cp_counts, playerid, "LD_SPAC:white", 0xf4c242FF, 3.0, 3.0, player_pos[0], player_pos[1]);
							cp_counts ++;
						}
					}
				}
			}
		}
		case WORK_POLICE:
		{
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if(CHARACTER_INFO[i][ch_WANTED_LEVEL] > 0)
						{
							if(cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) break;

							new Float:player_pos[3];
							switch(CHARACTER_INFO[i][ch_STATE])
							{
								case ROLEPLAY_STATE_INTERIOR:
								{
									player_pos[0] = ENTER_EXIT[ PLAYER_TEMP[i][pt_INTERIOR_INDEX] ][ee_EXT_X];
									player_pos[1] = ENTER_EXIT[ PLAYER_TEMP[i][pt_INTERIOR_INDEX] ][ee_EXT_Y];
								}
								case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
								{
									player_pos[0] = PROPERTY_INFO[ PLAYER_TEMP[i][pt_PROPERTY_INDEX] ][property_EXT_X];
									player_pos[1] = PROPERTY_INFO[ PLAYER_TEMP[i][pt_PROPERTY_INDEX] ][property_EXT_Y];
								}
								default: GetPlayerPos(i, player_pos[0], player_pos[1], player_pos[2]);
							}
							SetPlayerPoint_GPS_Map(cp_counts, playerid, "LD_SPAC:white", PlayerWantedColor(i), 3.0, 3.0, player_pos[0], player_pos[1]);
							cp_counts ++;
						}
					}
				}
			}
		}
		case WORK_MEDIC:
		{
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if(CHARACTER_INFO[i][ch_STATE] == ROLEPLAY_STATE_CRACK)
						{
							if(cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) break;

							new Float:player_pos[3];
							GetPlayerPos(i, player_pos[0], player_pos[1], player_pos[2]);
							SetPlayerPoint_GPS_Map(cp_counts, playerid, "LD_SPAC:white", 0x4aba00FF, 3.0, 3.0, player_pos[0], player_pos[1]);
							cp_counts ++;
						}
					}
				}
			}
		}
	}
	return 1;
}

SetPlayerPoint_GPS_Map(index, playerid, icon[], color, Float:icon_size_X, Float:icon_size_Y, Float:x, Float:y)
{
	new Float:td_X, Float:td_Y;

	if(x > 3000.0) x = 3000.0;
	else if(x < -3000.0) x = -3000.0;

	if(y > 3000.0) y = 3000.0;
	else if(y < -3000.0) y = -3000.0;

	new
		Float:converted_MAP_SIZE_X = floatdiv(map_td_SIZE_X, 2),
		Float:converted_MAP_SIZE_Y = floatdiv(map_td_SIZE_Y, 2),
		Float:converted_ICON_SIZE_X = floatdiv(icon_size_X, 2),
		Float:converted_ICON_SIZE_Y = floatdiv(icon_size_Y, 2);

	td_X = map_td_X + floatmul(floatdiv(converted_MAP_SIZE_X, 3000), x) + converted_MAP_SIZE_X - converted_ICON_SIZE_X;
	td_Y = map_td_Y + floatmul(floatdiv(-converted_MAP_SIZE_Y, 3000), y) + converted_MAP_SIZE_Y- converted_ICON_SIZE_Y;

	if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index]);
		PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index] = PlayerText:INVALID_TEXT_DRAW;
	}

	PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index] = CreatePlayerTextDraw(playerid, td_X, td_Y, icon);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0.160333, 1.280592);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], icon_size_X, icon_size_Y);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], color);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index]);
	return 1;
}


stock GetIconTextdraw(iconid)
{
	new td_icon[24];

	switch(iconid)
	{
		case 2: td_icon = "hud:radar_centre";
		case 3: td_icon = "hud:arrow";
		case 4: td_icon = "hud:radar_north";
		case 5: td_icon = "hud:radar_airyard";
		case 6: td_icon = "hud:radar_ammugun";
		case 7: td_icon = "hud:radar_barbers";
		case 8: td_icon = "hud:radar_bigsmoke";
		case 9: td_icon = "hud:radar_boatyard";
		case 10: td_icon = "hud:radar_burgershot";
		case 11: td_icon = "hud:radar_bulldozer";
		case 12: td_icon = "hud:radar_catalinapink";
		case 13: td_icon = "hud:radar_cesarviapando";
		case 14: td_icon = "hud:radar_chicken";
		case 15: td_icon = "hud:radar_cj";
		case 16: td_icon = "hud:radar_crash1";
		case 17: td_icon = "hud:radar_diner";
		case 18: td_icon = "hud:radar_emmetgun";
		case 19: td_icon = "hud:radar_enemyattack";
		case 20: td_icon = "hud:radar_fire";
		case 21: td_icon = "hud:radar_girlfriend";
		case 22: td_icon = "hud:radar_hostpital";
		case 23: td_icon = "hud:radar_locosyndicate";
		case 24: td_icon = "hud:radar_maddog";
		case 25: td_icon = "hud:radar_mafiacasino";
		case 26: td_icon = "hud:radar_mcstrap";
		case 27: td_icon = "hud:radar_modgarage";
		case 28: td_icon = "hud:radar_ogloc";
		case 29: td_icon = "hud:radar_pizza";
		case 30: td_icon = "hud:radar_police";
		case 31: td_icon = "hud:radar_propertyg";
		case 32: td_icon = "hud:radar_propertyr";
		case 33: td_icon = "hud:radar_race";
		case 34: td_icon = "hud:radar_ryder";
		case 35: td_icon = "hud:radar_savegame";
		case 36: td_icon = "hud:radar_school";
		case 37: td_icon = "hud:radar_qmark";
		case 38: td_icon = "hud:radar_sweet";
		case 39: td_icon = "hud:radar_tattoo";
		case 40: td_icon = "hud:radar_thetruth";
		case 41: td_icon = "hud:radar_waypoint";
		case 42: td_icon = "hud:radar_toreno";
		case 43: td_icon = "hud:radar_triads";
		case 44: td_icon = "hud:radar_triadscasino";
		case 45: td_icon = "hud:radar_tshirt";
		case 46: td_icon = "hud:radar_woozie";
		case 47: td_icon = "hud:radar_zero";
		case 48: td_icon = "hud:radar_datedisco";
		case 49: td_icon = "hud:radar_datedrink";
		case 50: td_icon = "hud:radar_datefood";
		case 51: td_icon = "hud:radar_truck";
		case 52: td_icon = "hud:radar_cash";
		case 53: td_icon = "hud:radar_flag";
		case 54: td_icon = "hud:radar_gym";
		case 55: td_icon = "hud:radar_impound";
		case 56: td_icon = "hud:radar_light";
		case 57: td_icon = "hud:radar_runway";
		case 58: td_icon = "hud:radar_gangb";
		case 59: td_icon = "hud:radar_gangp";
		case 60: td_icon = "hud:radar_gangy";
		case 61: td_icon = "hud:radar_gangn";
		case 62: td_icon = "hud:radar_gangg";
		case 63: td_icon = "hud:radar_spray";
	}

	return td_icon;
}

RegisterNewPlayerWeapon(playerid, weapon_slot)
{
	new DBResult:Result, DB_Query[380];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `PLAYER_WEAPONS` (`ID_USER`, `WEAPON_ID`, `AMMO`) VALUES ('%d', '%d', '%d');\
		SELECT MAX(`ID_WEAPON`) FROM `PLAYER_WEAPONS`;\
	",
		ACCOUNT_INFO[playerid][ac_ID], PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID], PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_AMMO]
	);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result)) PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_DB_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);
	return 1;
}

GivePlayerWeaponEx(playerid, weapon_id, ammo)
{
	if(PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID] == weapon_id) PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] += ammo;
	else PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] = ammo;

	PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_VALID] = true;
	PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID] = weapon_id;

	GivePlayerWeapon(playerid, weapon_id, ammo);
	return 1;
}

ResetPlayerWeaponsEx(playerid)
{
	new tmp_PLAYER_WEAPONS[enum_PLAYER_WEAPONS];
	for(new i = 0; i != 13; i ++) PLAYER_WEAPONS[playerid][i] = tmp_PLAYER_WEAPONS;

	ResetPlayerWeapons(playerid);
	return 1;
}

SetWeaponsForPlayer(playerid)
{
	ResetPlayerWeapons(playerid);
	for(new i = 0; i != 13; i ++)
	{
		if(PLAYER_WEAPONS[playerid][i][player_weapon_ID] != 0)
		{
			if(PLAYER_WEAPONS[playerid][i][player_weapon_AMMO] > 0) GivePlayerWeapon(playerid, PLAYER_WEAPONS[playerid][i][player_weapon_ID], PLAYER_WEAPONS[playerid][i][player_weapon_AMMO]);
		}
	}
	return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if(WEAPON_INFO[weaponid][weapon_info_AMMO]) PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_AMMO] --;
	if(PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_AMMO] <= 0) PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_AMMO] = 0;

	if(ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Enabled])
	{
		if(GetPlayerWeapon(playerid) != weaponid)
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_UNDETECTED_WEAPON);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_UNDETECTED_WEAPON);
				}
			}
		}
	}

	if(ac_Info[CHEAT_DRIVE_BY][ac_Enabled])
	{
		new player_state = GetPlayerState(playerid);
		if(player_state == PLAYER_STATE_DRIVER || player_state == PLAYER_STATE_PASSENGER)
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_DRIVE_BY][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_DRIVE_BY);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_DRIVE_BY][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_DRIVE_BY][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_DRIVE_BY);
				}
			}
		}
	}

	PLAYER_TEMP[playerid][pt_LAST_SHOT_TIME] = GetTickCount();
    return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	if(issuerid != INVALID_PLAYER_ID && weaponid == 23)
	{
		if(PLAYER_WORKS[issuerid][WORK_POLICE])
		{
			FreezeThenAutoUnfreeze(playerid, 10000);
			ApplyAnimation(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
			ShowPlayerMessage(playerid, "Te han dado con un taser.", 3);
			return 1;
		}
	}
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid, bodypart)
{
	if(weaponid) CheckWeaponAndAmmo(playerid, weaponid);

	if(PLAYER_WORKS[playerid][WORK_POLICE])
	{
	    if(CHARACTER_INFO[damagedid][ch_WANTED_LEVEL] < 1)
	    {
	 		if(PLAYER_SKILLS[playerid][WORK_POLICE] > 4) return 1; //el si puede pegar a personas sin cargos
   			new message[245];
			format(message, sizeof message, "(Canal SAPD | Reporte) {7cacf9}%s - %s:{4286f4} disparó a %s y no tenía cargos.", POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], PLAYER_TEMP[playerid][pt_RP_NAME], PLAYER_TEMP[damagedid][pt_RP_NAME]);
			SendPoliceRadioMessage(-1, 0x4286f4FF, message);
		}
	}
    return 1;
}

CheckWeaponAndAmmo(playerid, weaponid)
{
	if(WEAPON_INFO[weaponid][weapon_info_ANTI_CHEAT])
	{
		new weapon_id, weapon_ammo;
		GetPlayerWeaponData(playerid, WEAPON_INFO[weaponid][weapon_info_SLOT], weapon_id, weapon_ammo);

		if(ac_Info[CHEAT_WEAPON][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_IMMUNITY])
			{
				if(weapon_id != PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID])
				{
					if(!ac_Info[CHEAT_WEAPON][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_WEAPON);
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_WEAPON][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_DETECTIONS] ++;

						PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_WEAPON][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_WEAPON);
					}
				}
			}
		}

		if(WEAPON_INFO[weapon_id][weapon_info_AMMO])
		{
			if(weapon_ammo > PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] + 10)
			{
				if(ac_Info[CHEAT_AMMO][ac_Enabled])
				{
					if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_IMMUNITY])
					{
						if(!ac_Info[CHEAT_AMMO][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_AMMO);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_AMMO][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_AMMO][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_AMMO);
						}
					}
				}
			}
			else PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] = weapon_ammo;
		}
	}
	return 1;
}


new ADMIN_LEVEL_AC_IMMUNITY = 3; //nivel 3 en adelante
OnPlayerCheatDetected(playerid, cheat, Float:extra = 0.0)
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= ADMIN_LEVEL_AC_IMMUNITY) return 1;
	if(PLAYER_TEMP[playerid][pt_KICKED]) return 1;


	if(gettime() < PLAYER_TEMP[playerid][pt_LAST_CHEAT_DETECTED_TIME] + 5) return 1;

	new ac_message[145], player_state = GetPlayerState(playerid);

	if(ac_Info[cheat][ac_Kick])
	{
		new bad_history[24];
		format(bad_history, sizeof bad_history, "ac, cheat (%02d)", cheat);
		AddPlayerBadHistory(ACCOUNT_INFO[playerid][ac_ID], -1, TYPE_KICK, bad_history);

		if(extra != 0.0) format(ac_message, sizeof ac_message, "{ff782b} KICK  {FFFFFF}%s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d, extra: %.1f)", ACCOUNT_INFO[playerid][ac_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval], extra);
		else format(ac_message, sizeof ac_message, "{ff782b} KICK  {FFFFFF}%s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d)", ACCOUNT_INFO[playerid][ac_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval]);

		KickEx(playerid);

		if(cheat == CHEAT_PLAYER_HEALTH) CHARACTER_INFO[playerid][ch_HEALTH] = 20.0;
		if(cheat == CHEAT_PLAYER_ARMOUR) CHARACTER_INFO[playerid][ch_ARMOUR] = 0.0;
	}
	else
	{
		if(extra != 0.0) format(ac_message, sizeof ac_message, "{ff782b} ALERTA  {FFFFFF}%s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d, extra: %.1f)", ACCOUNT_INFO[playerid][ac_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval], extra);
		else format(ac_message, sizeof ac_message, "{ff782b} ALERTA  {FFFFFF}%s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d)", ACCOUNT_INFO[playerid][ac_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval]);
	}

	SendMessageToAdminsAC(-1, ac_message);
	PLAYER_TEMP[playerid][pt_LAST_CHEAT_DETECTED_TIME] = gettime();

	return 1;
}

SavePlayerWeaponsData(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_USER_EXIT] || !PLAYER_TEMP[playerid][pt_USER_LOGGED]) return 0;

	for(new i = 0; i != 13; i ++)
	{
		if(!PLAYER_WEAPONS[playerid][i][player_weapon_DB_ID]) continue;

		new DB_Query[128];
		format(DB_Query, sizeof(DB_Query), "UPDATE `PLAYER_WEAPONS` SET `WEAPON_ID` = '%d', `AMMO` = '%d' WHERE `ID_WEAPON` = '%d';", PLAYER_WEAPONS[playerid][i][player_weapon_ID], PLAYER_WEAPONS[playerid][i][player_weapon_AMMO], PLAYER_WEAPONS[playerid][i][player_weapon_DB_ID]);
		db_query(Database, DB_Query);
	}
	return 1;
}

LoadPlayerWeaponsData(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;

	new DBResult:Result, DB_Query[90];
	format(DB_Query, sizeof(DB_Query), "SELECT * FROM `PLAYER_WEAPONS` WHERE `ID_USER` = '%d' LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], 13);
	Result = db_query(Database, DB_Query);

	new total;
	for(new i; i < db_num_rows(Result); i++ )
	{
		if(total >= 13)
		{
			printf("---> Límite superado en array 'PLAYER_WEAPONS' al intentar cargar de la base de datos.");
			break;
		}

		new weapon_id = db_get_field_assoc_int(Result, "WEAPON_ID");

		PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_VALID] = true;
		PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_DB_ID] = db_get_field_assoc_int(Result, "ID_WEAPON");
		PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID] = weapon_id;
		PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] = db_get_field_assoc_int(Result, "AMMO");

		total ++;
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

RemovePlayerSlotWeapon(playerid, slot, bool:db_delete = false)
{
	if(db_delete)
	{
		new DB_Query[140];
		format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_WEAPONS` WHERE `ID_USER` = '%d' AND `ID_WEAPON` = '%d';", ACCOUNT_INFO[playerid][ac_ID], PLAYER_WEAPONS[playerid][slot][player_weapon_DB_ID]);
		db_query(Database, DB_Query);
	}

	new current_weapon = GetPlayerWeapon(playerid);
	if(current_weapon == PLAYER_WEAPONS[playerid][slot][player_weapon_ID]) current_weapon = 0;

	PLAYER_WEAPONS[playerid][slot][player_weapon_VALID] = false;
	PLAYER_WEAPONS[playerid][slot][player_weapon_DB_ID] = 0;
	PLAYER_WEAPONS[playerid][slot][player_weapon_ID] = 0;
	PLAYER_WEAPONS[playerid][slot][player_weapon_AMMO] = 0;

	SetWeaponsForPlayer(playerid);
	SetPlayerArmedWeapon(playerid, current_weapon);
	return 1;
}

SetPlayerHealthEx(playerid, Float:health)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;

	CHARACTER_INFO[playerid][ch_HEALTH] = health;
	SetPlayerHealth(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);
	return 1;
}

SetPlayerArmourEx(playerid, Float:armour)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY] = gettime() + 3;

	CHARACTER_INFO[playerid][ch_ARMOUR] = armour;
	SetPlayerArmour(playerid, CHARACTER_INFO[playerid][ch_ARMOUR]);
	return 1;
}

GivePlayerHealthEx(playerid, Float:health)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;

	CHARACTER_INFO[playerid][ch_HEALTH] += health;
	if(CHARACTER_INFO[playerid][ch_HEALTH] > 100.0) CHARACTER_INFO[playerid][ch_HEALTH] = 100.0;
	SetPlayerHealth(playerid, CHARACTER_INFO[playerid][ch_HEALTH]);
	return 1;
}

GivePlayerArmourEx(playerid, Float:armour)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY] = gettime() + 3;

	CHARACTER_INFO[playerid][ch_ARMOUR] += armour;
	if(CHARACTER_INFO[playerid][ch_ARMOUR] > 100.0) CHARACTER_INFO[playerid][ch_ARMOUR] = 100.0;
	SetPlayerArmour(playerid, CHARACTER_INFO[playerid][ch_ARMOUR]);
	return 1;
}

TransferPlayerWeapon(from_playerid, slot, to_playerid)
{
	new DB_Query[130];
	format(DB_Query, sizeof(DB_Query), "UPDATE `PLAYER_WEAPONS` SET `ID_USER` = '%d' WHERE `ID_WEAPON` = '%d';", ACCOUNT_INFO[to_playerid][ac_ID], PLAYER_WEAPONS[from_playerid][slot][player_weapon_DB_ID]);
	db_query(Database, DB_Query);

	PLAYER_WEAPONS[to_playerid][slot][player_weapon_VALID] = true;
	PLAYER_WEAPONS[to_playerid][slot][player_weapon_DB_ID] = PLAYER_WEAPONS[from_playerid][slot][player_weapon_DB_ID];
	PLAYER_WEAPONS[to_playerid][slot][player_weapon_ID] = PLAYER_WEAPONS[from_playerid][slot][player_weapon_ID];
	PLAYER_WEAPONS[to_playerid][slot][player_weapon_AMMO] = PLAYER_WEAPONS[from_playerid][slot][player_weapon_AMMO];
	SetWeaponsForPlayer(to_playerid);

	RemovePlayerSlotWeapon(from_playerid, slot);
	return 1;
}


/*forward TimePayday();
public TimePayday()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
		new money = 80 * ACCOUNT_INFO[i][ac_LEVEL];
		if(money > 4500) money = 4500;
		money += minrand(100, 200);

		if(gettime() < PLAYER_TEMP[i][pt_PAYDAY_TIME] + 600)
		{
			SendClientMessage(i, 0xFFFFFFAA, "No jugaste lo suficiente para recibir tu payday.");
			return 1;
		}

		SendClientMessage(i,0xE0E0E0FF," ");
		SendClientMessage(i,0xE0E0E0FF,"|| PAGO DIARIO (PAYDAY) ||");
		SendClientMessageEx(i, 0xE0E0E0FF, "Pago diario: {41f48f}$%s", number_format_thousand(money));
		for(new j = 0; j != MAX_VEHICLES; j ++)
		{
			if(!ACCOUNT_INFO[i][ac_SU])
			{
				if(!PLAYER_VEHICLES[j][player_vehicle_VALID]) continue;
				if(PLAYER_VEHICLES[j][player_vehicle_OWNER_ID] != ACCOUNT_INFO[j][ac_ID]) continue;

				new veh_money = VEHICLE_INFO[GLOBAL_VEHICLES[j][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 100;
				money -= veh_money;

				SendClientMessageEx(i, 0xE0E0E0FF, "Impuesto por el vehículo %s: {FFCC00}- $%s", VEHICLE_INFO[GLOBAL_VEHICLES[j][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(veh_money));
			}
		}
		for(new k = 0; k != MAX_PROPERTIES; k ++)
		{
			if(!PROPERTY_INFO[k][property_VALID]) continue;
			if(PROPERTY_INFO[k][property_OWNER_ID] != ACCOUNT_INFO[i][ac_ID]) continue;

	        if(PROPERTY_INFO[k][property_EXTRA] == 0)
	        {
	      		if(!ACCOUNT_INFO[i][ac_SU])
				{
					new property_money = PROPERTY_INFO[k][property_PRICE_BASE] / 200;
					money -= property_money;
					SendClientMessageEx(i, 0xE0E0E0FF, "Impuestos de la propiedad %s: {FFCC00}- $%s", PROPERTY_INFO[k][property_NAME], number_format_thousand(property_money));
				}
			}
			if(PROPERTY_INFO[k][property_EXTRA] == 4)
			{
	      		if(!ACCOUNT_INFO[i][ac_SU])
				{
					new property_money = PROPERTY_INFO[k][property_PRICE_BASE] / 200;
					money -= property_money;

					SendClientMessageEx(i, 0xE0E0E0FF, "Impuestos del negocio %s: {FFCC00}- $%s", PROPERTY_INFO[k][property_NAME], number_format_thousand(property_money));
				}

				new negocio_money = (PLAYERS_IN_GAME * PLAYERS_IN_GAME) * 10;
				money += negocio_money;

				new negocio_money_p = PLAYERS_IN_GAME * 100;
				money -= negocio_money_p;

				SendClientMessageEx(i, 0xE0E0E0FF, "Perdidas del negocio %s: {FFCC00}- $%s", PROPERTY_INFO[k][property_NAME], number_format_thousand(negocio_money_p));
				SendClientMessageEx(i, 0xE0E0E0FF, "Ganancias del negocio %s: {41f48f}$%s", PROPERTY_INFO[k][property_NAME], number_format_thousand(negocio_money));
			}
		}

	    if(ACCOUNT_INFO[i][ac_SU])
	    {
	        money += 1200;
	        SendClientMessage(i, 0xE0E0E0FF, "Pago por ser {f4d942}premium{E0E0E0}: {41f48f}+ $1.200");
	    }

		if(PLAYER_WORKS[i][WORK_POLICE])
		{
		    if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_POLICE)
			{
		 		SendClientMessage(i, 0xE0E0E0FF, "Pago SAPD (por no estar en servicio): {41f48f}$0");
			}
			else
			{
				new work_payment;
				if(work_info[WORK_POLICE][work_info_EXTRA_PAY] > 0 && work_info[WORK_POLICE][work_info_EXTRA_PAY_EXP] > 0)
				{
					work_payment = (work_info[WORK_POLICE][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[i][WORK_POLICE], work_info[WORK_POLICE][work_info_EXTRA_PAY_EXP])));
					if(work_info[WORK_POLICE][work_info_EXTRA_PAY_LIMIT] != 0) if(work_payment > work_info[WORK_POLICE][work_info_EXTRA_PAY_LIMIT]) work_payment = work_info[WORK_POLICE][work_info_EXTRA_PAY_LIMIT];
				}

				if(PLAYER_SKILLS[i][WORK_POLICE] == 1) { work_payment = 2000; }
				if(PLAYER_SKILLS[i][WORK_POLICE] == 2) { work_payment = 4500; }
				if(PLAYER_SKILLS[i][WORK_POLICE] == 3) { work_payment = 8500; }
				if(PLAYER_SKILLS[i][WORK_POLICE] == 4) { work_payment = 12000; }
				if(PLAYER_SKILLS[i][WORK_POLICE] == 5) { work_payment = 15000; }
				if(PLAYER_SKILLS[i][WORK_POLICE] == 6) { work_payment = 17500; }

				money += work_payment;
				SendClientMessageEx(i, 0xE0E0E0FF, "Pago SAPD: {41f48f}$%s", number_format_thousand(work_payment));
			}
		}

		if(ACCOUNT_INFO[i][ac_ADMIN_LEVEL] == 1)
		{
			money += 30000;

			SendClientMessage(i, 0xE0E0E0FF, "Pago por ser publicista: {41f48f}$30.000");
		}

		if(PLAYER_CREW[i][player_crew_VALID])//si el usuario tiene banda entonces
		{

			new DBResult:Result, DB_Query[145], to_number;
			format(DB_Query, sizeof DB_Query, "SELECT count(*) FROM CREW_TERRITORIES WHERE ID_CREW = %d;", PLAYER_CREW[i][player_crew_ID]);
			Result = db_query(Database, DB_Query);
			if(db_num_rows(Result))
			{
				to_number = db_get_field_int(Result, 0);
				if(to_number > 0)
				{
					new pay_territorios = 500 * to_number;
					money += pay_territorios;
					SendClientMessageEx(i, 0xE0E0E0FF, "Pago por territorios de banda: {41f48f}$%s", number_format_thousand(pay_territorios));
				}
			}
			db_free_result(Result);
		}

		if(money + CHARACTER_INFO[i][ch_CASH] <= 0)
		{
			money = 0;
			CHARACTER_INFO[i][ch_CASH] = 0;
		}

		if(money > 0) SendClientMessageEx(i, 0xE0E0E0FF, "TOTAL: {41f48f}$%s", number_format_thousand(money));
		else SendClientMessageEx(i, 0xE0E0E0FF, "TOTAL: {FFCC00}- $%s", number_format_thousand(money));
		SendClientMessage(i,0xE0E0E0FF,"|| FIN DEL RESUMEN ||");
		SendClientMessage(i,0xE0E0E0FF," ");
		GivePlayerCash(i, money);
	}
	return 1;
}*/


PlayerPayday(playerid)
{
	new money = 80 * ACCOUNT_INFO[playerid][ac_LEVEL];
	if(money > 4500) money = 4500;
	money += minrand(100, 200);

	if(gettime() < PLAYER_TEMP[playerid][pt_PAYDAY_TIME] + 60) return 1;
 	PLAYER_TEMP[playerid][pt_PAYDAY_TIME] = gettime();
	SendClientMessage(playerid,0xE0E0E0FF," ");
	SendClientMessage(playerid,0xE0E0E0FF,"|| PAGO DIARIO (PAYDAY) ||");
	SendClientMessageEx(playerid, 0xE0E0E0FF, "Pago diario: {41f48f}$%s", number_format_thousand(money));
	for(new i = 0; i != MAX_VEHICLES; i ++)
	{
		if(!ACCOUNT_INFO[playerid][ac_SU])
		{
			if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
			if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) continue;

			new veh_money = VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 100;
			money -= veh_money;

			SendClientMessageEx(playerid, 0xE0E0E0FF, "Impuesto por el vehículo %s: {FFCC00}- $%s", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(veh_money));
		}
	}
	for(new i = 0; i != MAX_PROPERTIES; i ++)
	{
		if(!PROPERTY_INFO[i][property_VALID]) continue;
		if(PROPERTY_INFO[i][property_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) continue;

        if(PROPERTY_INFO[i][property_EXTRA] == 0)
        {
      		if(!ACCOUNT_INFO[playerid][ac_SU])
			{
				new property_money = PROPERTY_INFO[i][property_PRICE_BASE] / 200;
				money -= property_money;
				SendClientMessageEx(playerid, 0xE0E0E0FF, "Impuestos de la propiedad %s: {FFCC00}- $%s", PROPERTY_INFO[i][property_NAME], number_format_thousand(property_money));
			}
		}
		if(PROPERTY_INFO[i][property_EXTRA] == 4)
		{
      		if(!ACCOUNT_INFO[playerid][ac_SU])
			{
				new property_money = PROPERTY_INFO[i][property_PRICE_BASE] / 200;
				money -= property_money;

				SendClientMessageEx(playerid, 0xE0E0E0FF, "Impuestos del negocio %s: {FFCC00}- $%s", PROPERTY_INFO[i][property_NAME], number_format_thousand(property_money));
			}

			new negocio_money = (PLAYERS_IN_GAME * PLAYERS_IN_GAME) * 10;
			money += negocio_money;

			new negocio_money_p = PLAYERS_IN_GAME * 100;
			money -= negocio_money_p;

			SendClientMessageEx(playerid, 0xE0E0E0FF, "Perdidas del negocio %s: {FFCC00}- $%s", PROPERTY_INFO[i][property_NAME], number_format_thousand(negocio_money_p));
			SendClientMessageEx(playerid, 0xE0E0E0FF, "Ganancias del negocio %s: {41f48f}$%s", PROPERTY_INFO[i][property_NAME], number_format_thousand(negocio_money));
		}
	}

    if(ACCOUNT_INFO[playerid][ac_SU])
    {
        money += 1200;
        SendClientMessage(playerid, 0xE0E0E0FF, "Pago por ser {f4d942}premium{E0E0E0}: {41f48f}+ $1.200");
    }

	if(PLAYER_WORKS[playerid][WORK_POLICE])
	{
	    if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE)
		{
	 		SendClientMessage(playerid, 0xE0E0E0FF, "Pago SAPD (por no estar en servicio): {41f48f}$0");
		}
		else
		{
			new work_payment;
			if(work_info[WORK_POLICE][work_info_EXTRA_PAY] > 0 && work_info[WORK_POLICE][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_payment = (work_info[WORK_POLICE][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[playerid][WORK_POLICE], work_info[WORK_POLICE][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_POLICE][work_info_EXTRA_PAY_LIMIT] != 0) if(work_payment > work_info[WORK_POLICE][work_info_EXTRA_PAY_LIMIT]) work_payment = work_info[WORK_POLICE][work_info_EXTRA_PAY_LIMIT];
			}

			if(PLAYER_SKILLS[playerid][WORK_POLICE] == 1) { work_payment = 2000; }
			if(PLAYER_SKILLS[playerid][WORK_POLICE] == 2) { work_payment = 4500; }
			if(PLAYER_SKILLS[playerid][WORK_POLICE] == 3) { work_payment = 8500; }
			if(PLAYER_SKILLS[playerid][WORK_POLICE] == 4) { work_payment = 12000; }
			if(PLAYER_SKILLS[playerid][WORK_POLICE] == 5) { work_payment = 15000; }
			if(PLAYER_SKILLS[playerid][WORK_POLICE] == 6) { work_payment = 17500; }

			money += work_payment;
			SendClientMessageEx(playerid, 0xE0E0E0FF, "Pago SAPD: {41f48f}$%s", number_format_thousand(work_payment));
		}
	}

	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] == 1)
	{
		money += 30000;

		SendClientMessage(playerid, 0xE0E0E0FF, "Pago por ser publicista: {41f48f}$30.000");
	}

	if(PLAYER_CREW[playerid][player_crew_VALID])//si el usuario tiene banda entonces
	{

		new DBResult:Result, DB_Query[145], to_number;
		format(DB_Query, sizeof DB_Query, "SELECT count(*) FROM CREW_TERRITORIES WHERE ID_CREW = %d;", PLAYER_CREW[playerid][player_crew_ID]);
		Result = db_query(Database, DB_Query);
		if(db_num_rows(Result))
		{
			to_number = db_get_field_int(Result, 0);
			if(to_number > 0)
			{
				new pay_territorios = 500 * to_number;
				money += pay_territorios;
				SendClientMessageEx(playerid, 0xE0E0E0FF, "Pago por territorios de banda: {41f48f}$%s", number_format_thousand(pay_territorios));
			}
		}
		db_free_result(Result);
	}

	if(money + CHARACTER_INFO[playerid][ch_CASH] <= 0)
	{
		money = 0;
		CHARACTER_INFO[playerid][ch_CASH] = 0;
	}

	if(money > 0) SendClientMessageEx(playerid, 0xE0E0E0FF, "TOTAL: {41f48f}$%s", number_format_thousand(money));
	else SendClientMessageEx(playerid, 0xE0E0E0FF, "TOTAL: {FFCC00}- $%s", number_format_thousand(money));
	SendClientMessage(playerid,0xE0E0E0FF,"|| FIN DEL RESUMEN ||");
	SendClientMessage(playerid,0xE0E0E0FF," ");
	GivePlayerCash(playerid, money);
	return 1;
}


//Animaciones
//ANIMACIONES
CMD:animaciones(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ShowDialog(playerid, DIALOG_ANIMS);
	return 1;
}
CMD:anims(playerid, params[])
{
	return cmd_animaciones(playerid, params);
}
CMD:parar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
	ClearAnimations(playerid);
	return 1;
}
CMD:rendirse(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP); //rendirse
    SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:blowjob(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 0, 0);//blowjob
	SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:rodar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
	SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:sentadosexy(playerid)
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_idleA",4.000000, 0, 1, 1, 1, 0);
	SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:no(playerid,params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ClearAnimations(playerid);
	ApplyAnimation(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
	SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:borracho(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
    ApplyAnimation(playerid,"PED", "WALK_DRUNK",4.0,1,1,1,1,500);//borracho
    SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:bomba(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);//bomba
    SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:apuntar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation( playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1,500);
	SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:amenazar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 1,500);//amenazar
    SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:paja(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 0);
	SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:herido(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0);
	SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:cruzarbrazos(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 1, 1, 0, 4000);
	SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:recostarse(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
	SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:cubrirse(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "ped", "cower", 4.0, 1, 0, 0, 0, 0);//crubrirse
    SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:vomitar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);//vomitar
    SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:comer(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
	SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:despedir(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "KISSING", "BD_GF_Wave", 3.0, 0, 0, 0, 0, 0);//despedir
	SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:agonizar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);//agonizar
	SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:besar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.0, 0, 0, 0, 0, 0);//besar
	SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:crack(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0);//crack
    SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:mear(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);//mear
    SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:depie(playerid,params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "ped", "SEAT_up", 4.000000, 0, 0, 1, 0, 0);
    SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}

CMD:sentarse(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
    ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_in", 4.000000, 0, 1, 1, 1, 0);//sentarse
    SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:asiento(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 0, 0, 1, 0);
    SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:asientosexy(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_idleA",4.000000, 0, 1, 1, 1, 0);
    SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:fucku(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
    ApplyAnimation( playerid,"ped", "fucku", 4.0, 0, 1, 1, 1, 1 );//fucku
    SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:taichi(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop",  4.1,7,5,1,1,1);//taichi
	SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:beber(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000);//beber
	SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:boxear(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid, "GYMNASIUM", "gym_shadowbox",  4.1,7,5,1,1,1);//boxear
	SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:saludar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1,0,0,0,0,0);//saludar
	SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:dormir(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	if(GetPlayerInterior(playerid) == 0) return ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
	ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0);//dormir
	SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:rapear(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"RAPPING","RAP_B_Loop",4.0,1,0,0,0,8000);//rapear
	SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:astrip(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"STRIP","strip_A",4.1,7,5,1,1,1);//strip
	SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:bailar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
    if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, 0xFF4500FF, "ERROR: /bailar [1-4]");

	switch(params[0])
	{
	    case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
		default: SendClientMessage(playerid, 0xFF4500FF, "ERROR: /bailar [1-4]");
	}
	return 1;
}
CMD:nalgada(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
    if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, 0xFF4500FF, "ERROR: /nalgada [1-4]");

	switch(params[0])
	{
	    case 1: ApplyAnimation(playerid, "SNM","SPANKINGP", 4.0, 1, 1, 1, 1, 1);
		case 2: ApplyAnimation(playerid, "SNM","SPANKEDW", 4.0, 1, 1, 1, 1, 1);
		case 3: ApplyAnimation(playerid, "SNM","SPANKING_ENDP", 4.0, 1, 1, 1, 1, 1);
		case 4: ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, 0xFF4500FF, "ERROR: /nalgada [1-4]");
	}
	return 1;
}
CMD:encuatro(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
    if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, 0xFF4500FF, "ERROR: /encuatro [1-3]");

	switch(params[0])
	{
	    case 1: ApplyAnimation(playerid,"SNM","SPANKING_IDLEW",4.0, 0, 1, 1, 1, 1);
		case 2: ApplyAnimation(playerid, "SNM","SPANKINGW", 4.0, 1, 1, 1, 1, 1);
		case 3: ApplyAnimation(playerid, "SNM","SPANKEDP", 4.0, 1, 1, 1, 1, 1);
		default: SendClientMessage(playerid, 0xFF4500FF, "ERROR: /encuatro [1-3]");
	}
	return 1;
}
CMD:mamada(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
    if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, 0xFF4500FF, "ERROR: /mamada [1-5]");

	switch(params[0])
	{
	    case 1: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_START_W",4.1,0,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_W",4.1,0,1,1,1,1);
		case 3: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_W",4.1,0,1,1,1,1);
		case 4: ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_END_W",4.1,0,1,1,1,1);
		case 5: ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_END_W",4.1,0,1,1,1,1);
		default: SendClientMessage(playerid, 0xFF4500FF, "ERROR: /mamada [1-5]");
	}
	return 1;
}
CMD:alentar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	ApplyAnimation(playerid,"ON_LOOKERS","shout_02",4.1,7,5,1,1,1);//alentar
	SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}
CMD:hablar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
    ApplyAnimation(playerid,"PED","IDLE_chat",4.1,7,5,1,1,1);//hablar
    SendClientMessage(playerid, 0x00CCFFFF, " {FFFFFF}Para detener una accion Escribe {FFFF00}/parar, {FFFFFF}presiona {00CCFF}ENTER {FFFFFF}o {00CCFF}BIR");
	return 1;
}

GetPlayerVehicleAvaibleBootSlot(vehicleid)
{
	new max_slots = VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_BOOT_SLOTS];
	if(max_slots > MAX_BOOT_SLOTS) max_slots = MAX_BOOT_SLOTS;

	for(new i = 0; i != max_slots; i ++)
	{
		if(!VEHICLE_BOOT[vehicleid][i][vehicle_boot_VALID]) return i;
	}
	return -1;
}

SavePlayerWeaponInVehicleBoot(playerid, weapon_slot, vehicleid, boot_slot)
{
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_ID]) return 0;

	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_VALID] = true;
	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_TYPE] = BOOT_TYPE_WEAPON;
	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT] = PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID];
	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT_EXTRA] = PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_AMMO];

	new DBResult:Result, DB_Query[256];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `VEHICLE_BOOT`\
		(\
			`ID_VEHICLE`, `TYPE`, `INT`, `INT_EXTRA`\
		)\
		VALUES\
		(\
			'%d', '%d', '%d', '%d'\
		);\
		SELECT MAX(`ID_OBJECT`) FROM `VEHICLE_BOOT`;\
	",
		PLAYER_VEHICLES[vehicleid][player_vehicle_ID], VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_TYPE], VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT], VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT_EXTRA]);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result)) VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_OBJECT_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);

	RemovePlayerSlotWeapon(playerid, weapon_slot, true);
	return 1;
}

CMD:guardar(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);

	new option[24], extra;
	if(sscanf(params, "s[24]d", option, extra)) return SendClientMessage(playerid, -1, "{FFFF00}/guardar arma {FFFFFF}[slot /armas]");

	if(!strcmp(option, "arma", true))
	{
		if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_NORMAL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK)
		{
			if(extra < 0 || extra > 12) return SendClientMessage(playerid, -1, "{FFFF00}/guardar arma {FFFFFF}[slot /armas]");
			if(!PLAYER_WEAPONS[playerid][extra][player_weapon_VALID])
			{
				SendClientMessage(playerid, -1, "{FFFFFF}No tienes ninguna arma en ese slot (/armas).");
				return 1;
			}

			new vehicleid = GetPlayerCameraTargetVehicle(playerid);
			if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "{FFFFFF}No estás cerca de tu vehículo.");

			if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}Este no es tú vehículo.");
			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, -1, "{FFFFFF}Este no es tú vehículo.");
			if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT]) return ShowPlayerMessage(playerid, "Use ~b~~h~/abrir maletero~w~.", 3);

			new boot_slot = GetPlayerVehicleAvaibleBootSlot(vehicleid);
			if(boot_slot == -1) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes suficiente espacio en tu /maletero.");

			SendClientMessageEx(playerid, -1, "{FFFFFF}Arma {98d16c}'%s' {FFFFFF}guardada en el maletero de tu %s.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME], VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
			SavePlayerWeaponInVehicleBoot(playerid, extra, vehicleid, boot_slot);
		}
		else SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	}
	else SendClientMessage(playerid, -1, "{FFFF00}/guardar arma {FFFFFF}[slot /armas]");
	return 1;
}

CMD:sacar(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);

	new option[24], extra;
	if(sscanf(params, "s[24]d", option, extra)) return SendClientMessage(playerid, -1, "{FFFF00}/sacar arma {FFFFFF}[slot /maletero]");

	if(!strcmp(option, "arma", true))
	{
		if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_NORMAL)
		{
			new vehicleid = GetPlayerCameraTargetVehicle(playerid);
			if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, -1, "{FFFFFF}No estás cerca de tu vehículo.");

			if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}Este no es tú vehículo.");
			if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, -1, "{FFFFFF}Este no es tú vehículo.");

            if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT]) return ShowPlayerMessage(playerid, "Use ~b~~h~/abrir maletero~w~.", 3);

			if(extra < 0 || extra > MAX_BOOT_SLOTS) return SendClientMessage(playerid, -1, "{FFFF00}/sacar arma {FFFFFF}[slot /maletero]");

			if(!VEHICLE_BOOT[vehicleid][extra][vehicle_boot_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No hay nada en ese slot.");
			if(VEHICLE_BOOT[vehicleid][extra][vehicle_boot_TYPE] != BOOT_TYPE_WEAPON) return SendClientMessage(playerid, -1, "{FFFFFF}En ese slot no hay armas.");

			new to_slot = WEAPON_INFO[ VEHICLE_BOOT[vehicleid][extra][vehicle_boot_INT] ][weapon_info_SLOT];
			if(PLAYER_WEAPONS[playerid][to_slot][player_weapon_VALID])
			{
				SendClientMessageEx(playerid, -1, "{FFFFFF}Para sacar esta arma tienes que deshacerte de tu '%s' (%d) para tener espacio.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ to_slot ][player_weapon_ID] ][weapon_info_NAME], to_slot);
				return 1;
			}

			new DB_Query[64];
			format(DB_Query, sizeof DB_Query, "DELETE FROM `VEHICLE_BOOT` WHERE `ID_OBJECT` = '%d';", VEHICLE_BOOT[vehicleid][extra][vehicle_boot_OBJECT_ID]);
			db_query(Database, DB_Query);

			GivePlayerWeaponEx(playerid, VEHICLE_BOOT[vehicleid][extra][vehicle_boot_INT], VEHICLE_BOOT[vehicleid][extra][vehicle_boot_INT_EXTRA]);
			RegisterNewPlayerWeapon(playerid, to_slot);

			new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT]; VEHICLE_BOOT[vehicleid][extra] = temp_VEHICLE_BOOT;

			Auto_SendPlayerAction(playerid, "saca un arma del maletero de su vehículo.");
		}
		else SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	}
	else SendClientMessage(playerid, -1, "{FFFF00}/sacar arma {FFFFFF}[slot /maletero]");
	return 1;
}

SetWantedPlayerMarkers(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(CHARACTER_INFO[i][ch_WANTED_LEVEL] > 0)
				{
					SetPlayerMarkerForPlayer(playerid, i, PlayerWantedColor(i));
				}
			}
		}
	}
	return 1;
}

PlayerWantedColor(playerid)
{
	if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] > 0)
	{
		if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return 0x009900ff;
		else
		{
			switch(CHARACTER_INFO[playerid][ch_WANTED_LEVEL])
			{
				case 1: return 0xfffdbaff;
				case 2: return 0x896a00ff;
				case 3: return 0xd98900ff;
				case 4: return 0xd36d00ff;
				case 5: return 0xd24a00ff;
				case 6: return 0xff1e00ff;
				default: return 0xff1e00ff;
			}
		}
	}
	return PLAYER_COLOR;
}

CMD:cargos(playerid, params[])
{
	new to_player, level;
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{FFFFFF}No estás de servicio como policía.");
	if(sscanf(params, "ud", to_player, level)) return SendClientMessage(playerid, 0xFFFF00FF, "/cargos {FFFFFF}[PlayerID/Nombre] [nivel de búsqueda 0-6]");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(PLAYER_WORKS[to_player][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}Este jugador es policía.");

	if(CHARACTER_INFO[to_player][ch_STATE] == ROLEPLAY_STATE_JAIL) return SendClientMessage(playerid, -1, "{FFFFFF}Esta persona está en la cárcel.");

	if(level == 0)
	{
		PlayerTextDrawHide(params[0], PlayerTextdraws[params[0]][ptextdraw_WANTED_LEVEL][0]);
		PlayerTextDrawHide(params[0], PlayerTextdraws[params[0]][ptextdraw_WANTED_LEVEL][1]);
		CHARACTER_INFO[params[0]][ch_WANTED_LEVEL] = 0;
		SetPlayerWantedLevelEx(to_player, level, "asignado de cargos");
		ShowPlayerMessageNotification(to_player, "La policia te quitó los cargos.", 8);
		SendClientMessageEx(playerid, -1, "Le has asignado a {00FF00}%s{FFFFFF} %d cargos.", PLAYER_TEMP[to_player][pt_RP_NAME], CHARACTER_INFO[to_player][ch_WANTED_LEVEL]);
		return 1;
	}

	if(level < 3)
	{
 		if(PLAYER_SKILLS[playerid][WORK_POLICE] < 3) return SendClientMessage(playerid, -1, "{FFFFFF}No cuentas con el rango para poner de 1 a 3 cargos.");
		SendClientMessage(playerid, -1, "{FFFFFF}Necesitas ser un rango superior para poner asignar este nivel de búsqueda.");
		SetPlayerWantedLevelEx(to_player, level, "asignado de cargos");
		ShowPlayerMessageNotification(to_player, "La policia te está buscando~. Coopera con un policia para que te quiten los cargos.", 8);
		SendClientMessageEx(playerid, -1, "Le has asignado a {00FF00}%s{FFFFFF} %d cargos.", PLAYER_TEMP[to_player][pt_RP_NAME], CHARACTER_INFO[to_player][ch_WANTED_LEVEL]);
		return 1;
	}
	
	if(level > 3)
	{
 		if(PLAYER_SKILLS[playerid][WORK_POLICE] < 5) return SendClientMessage(playerid, -1, "{FFFFFF}No cuentas con el rango para poner de 4 a 6 cargos.");
		SendClientMessage(playerid, -1, "{FFFFFF}Necesitas ser un rango superior para poner asignar este nivel de búsqueda.");
		SetPlayerWantedLevelEx(to_player, level, "asignado de cargos");
		ShowPlayerMessageNotification(to_player, "La policia te está buscando~. Coopera con un policia para que te quiten los cargos.", 8);
		SendClientMessageEx(playerid, -1, "Le has asignado a {00FF00}%s{FFFFFF} %d cargos.", PLAYER_TEMP[to_player][pt_RP_NAME], CHARACTER_INFO[to_player][ch_WANTED_LEVEL]);
		return 1;
	}
	return 1;
}

CMD:c(playerid, params[])
{
	return cmd_cargos(playerid, params);
}

CMD:teaser(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{FFFFFF}No estás de servicio como policía.");
	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFFF00FF, "/teaser [PlayerID/Nombre]");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, -1, "{FFFFFF}El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(params[0], 5.0, pos[0], pos[1], pos[2])) return SendClientMessage(playerid, 0xFFFFFFFF, "Este jugador no está cerca tuya.");

	if(PLAYER_TEMP[params[0]][pt_TEASERING]) return SendClientMessage(playerid, -1, "{FFFFFF}Ya le diste a este jugador con el teaser.");

    PLAYER_TEMP[params[0]][pt_TIMERS][21] = SetTimerEx("DescongelaTeaser", 10000, false, "i", params[0]);//ejecuta un timer de 10 segundos, despues desfreezealo
    PLAYER_TEMP[params[0]][pt_TEASERING] = true;
	new action[64];
	format(action, sizeof action, "le da con un teaser a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
	Auto_SendPlayerAction(playerid, action);
	TogglePlayerControllable(params[0], false);
	return 1;
}
CMD:t(playerid, params[])
{
	return cmd_teaser(playerid, params);
}

CMD:esposar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{FFFFFF}No estás de servicio como policía.");
	if(PLAYER_SKILLS[playerid][WORK_POLICE] < 2) return SendClientMessage(playerid, -1, "{FFFFFF}No cuentas con el rango para esposar.");
	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFFF00FF, "/esposar [PlayerID/Nombre]");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);

	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, -1, "{FFFFFF}El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return 1;
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes esposar a este jugador ahora.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{FFFFFF}Para esposar a esta persona tiene que estar depie.");

	if(PLAYER_TEMP[params[0]][pt_CUFFED])
	{
		TogglePlayerControllable(params[0], true);
		PLAYER_TEMP[params[0]][pt_CUFFED] = false;
		PLAYER_TEMP[params[0]][pt_CUFFING] = false;
		SetPlayerSpecialAction(params[0], SPECIAL_ACTION_NONE);

		new action[64];
		format(action, sizeof action, "le quita las esposas a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		return 1;
	}

	if(!PLAYER_TEMP[params[0]][pt_CUFFING])
	{
		if(PLAYER_TEMP[params[0]][pt_TEASERING])
		{
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][21]);
		    PLAYER_TEMP[playerid][pt_TEASERING] = false;
		}
		new action[64];
		format(action, sizeof action, "saca unas esposas y se las empieza a colocar a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);

		ShowPlayerMessage(playerid, "Te están colocando las esposas...", 4);
		ShowPlayerMessage(playerid, "Estás esposando a la persona...", 4);

		SetPlayerSpecialAction(params[0], SPECIAL_ACTION_HANDSUP);
		PLAYER_TEMP[params[0]][pt_CUFFED] = false;
		PLAYER_TEMP[params[0]][pt_CUFFING] = true;
		KillTimer(PLAYER_TEMP[params[0]][pt_TIMERS][14]);
		TogglePlayerControllable(params[0], false);
		PLAYER_TEMP[params[0]][pt_TIMERS][14] = SetTimerEx("CuffPlayer", 6000, false, "i", params[0]);
	}
	return 1;
}
CMD:e(playerid, params[])
{
	return cmd_esposar(playerid, params);
}

CMD:revisar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{FFFFFF}No estás de servicio como policía.");
	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFFF00FF, "/revisar [PlayerID/Nombre]");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);

	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, -1, "{FFFFFF}El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return 1;
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes revisar a este jugador ahora.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{FFFFFF}Para revisar a esta persona tiene que estar depie.");
	if(!PLAYER_TEMP[params[0]][pt_CUFFED]) return SendClientMessage(playerid, -1, "{FFFFFF}Para revisar a esta persona tiene que estar esposada.");

	ShowPlayerInventory(playerid, params[0]);

	new action[64];
	format(action, sizeof action, "empieza a revisar a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
	Auto_SendPlayerAction(playerid, action);
	return 1;
}

CMD:quitar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{FFFFFF}No estás de servicio como policía.");
 	if(PLAYER_SKILLS[playerid][WORK_POLICE] < 3) return SendClientMessage(playerid, -1, "{FFFFFF}No cuentas con el rango para decomisar cosas.");
 	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFFF00FF, "/requisar [PlayerID/Nombre]");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);

	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, -1, "{FFFFFF}El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return 1;
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes revisar a este jugador ahora.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, -1, "{FFFFFF}Para revisar a esta persona tiene que estar depie.");
	if(CHARACTER_INFO[params[0]][ch_WANTED_LEVEL] == 0) return SendClientMessage(playerid, -1, "{FFFFFF}Esta persona no tiene nivel de búsqueda.");
	if(!PLAYER_TEMP[params[0]][pt_CUFFED]) return SendClientMessage(playerid, -1, "{FFFFFF}Para revisar a esta persona tiene que estar esposada.");

	DeleteIlegalInv(params[0]);

	new action[64];
	format(action, sizeof action, "le quita algunas cosas a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
	Auto_SendPlayerAction(playerid, action);
	return 1;
}
CMD:requisar(playerid, params[])
{
	return cmd_quitar(playerid, params);
}
CMD:decomisar(playerid, params[])
{
	return cmd_quitar(playerid, params);
}



CMD:r(playerid, params[])
{
	if(PLAYER_WORKS[playerid][WORK_POLICE])
	{
		new city[45], zone[45];
		GetPlayerZones(playerid, city, zone);

		new message[145];
		format(message, sizeof message, "(Canal SAPD) {7cacf9}%s - %s grita:{4286f4} ¡Necesito refuerzos en %s, %s!", POLICE_RANKS[ PLAYER_SKILLS[playerid][WORK_POLICE] ], PLAYER_TEMP[playerid][pt_RP_NAME], city, zone);
		SendPoliceRadioMessage(-1, 0x4286f4FF, message);
	}
	else if(PLAYER_CREW[playerid][player_crew_VALID])
	{
		new city[45], zone[45];
		GetPlayerZones(playerid, city, zone);

		new message[145];
		format(message, sizeof message, "{%06x}(Radio) %s - %s grita: ¡Necesito refuerzos en %s, %s!", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_COLOR] >>> 8, CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_NAME], PLAYER_TEMP[playerid][pt_RP_NAME], city, zone);
		SendMessageToCrewMembers(-1, -1, message);
	}
	return 1;
}

CMD:ref(playerid, params[])
{
	return cmd_r(playerid, params);
}

CMD:multar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{FFFFFF}No estás de servicio como policía.");
	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFFF00FF, "/multar {FFFFFF}[PlayerID/Nombre] [monto]");

	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, -1, "{FFFFFF}El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return 1;
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes multar a este jugador ahora.");
	if(CHARACTER_INFO[params[0]][ch_STATE] == ROLEPLAY_STATE_ARRESTED || CHARACTER_INFO[params[0]][ch_STATE] == ROLEPLAY_STATE_JAIL) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes multar a este jugador ahora.");

	PLAYER_TEMP[params[0]][pt_POLICE_PEN_PID] = playerid;
	PLAYER_TEMP[params[0]][pt_POLICE_PEN_AID] = ACCOUNT_INFO[playerid][ac_ID];
	PLAYER_TEMP[params[0]][pt_POLICE_PEN_IM] = params[1];
	PLAYER_TEMP[params[0]][pt_POLICE_PEN_TIME] = gettime();
	ShowDialog(params[0], DIALOG_POLICE_PENALTY);


	if(CHARACTER_INFO[params[0]][ch_WANTED_LEVEL] == 1)
	{
	    if(CHARACTER_INFO[params[0]][ch_CASH] < 10000) return SendClientMessage(playerid, -1, "{FFFFFF}La persona no tiene para pagar la multa.");

		GivePlayerCash(params[0], -1000);
		GivePlayerCash(playerid, 500);
		SetPlayerWantedLevelEx(params[0], 0, "indefinido");
	}
	else if(CHARACTER_INFO[params[0]][ch_WANTED_LEVEL] == 2)
	{
	    if(CHARACTER_INFO[params[0]][ch_CASH] < 20000) return SendClientMessage(playerid, -1, "{FFFFFF}La persona no tiene para pagar la multa.");

		GivePlayerCash(params[0], -2000);
		GivePlayerCash(playerid, 600);
		SetPlayerWantedLevelEx(params[0], 0, "indefinido");
	}
	else if(CHARACTER_INFO[params[0]][ch_WANTED_LEVEL] == 3)
	{
	    if(CHARACTER_INFO[params[0]][ch_CASH] < 30000) return SendClientMessage(playerid, -1, "{FFFFFF}La persona no tiene para pagar la multa.");

		GivePlayerCash(params[0], -3000);
		GivePlayerCash(playerid, 700);
		SetPlayerWantedLevelEx(params[0], 0, "indefinido");
	}
	else if(CHARACTER_INFO[params[0]][ch_WANTED_LEVEL] > 3)
	{
	    SendClientMessage(playerid, -1, "{FFFFFF}Esta persona tiene más de 3 cargos, procede al arresto si cuentas con el rango.");
	}
	return 1;
}

CMD:arrestar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{FFFFFF}No estás de servicio como policía.");
	if(PLAYER_SKILLS[playerid][WORK_POLICE] < 2) return SendClientMessage(playerid, -1, "{FFFFFF}No cuentas con el rango para arrestar.");

	if(sscanf(params, "ud", params[0], params[1])) return SendClientMessage(playerid, 0xFFFF00FF, "/arrestar [PlayerID/Nombre] [Asiento 1 ó 2]");
	if(params[1] < 1 || params[1] > 2) return SendClientMessage(playerid, 0xFFFF00FF, "/arrestar [PlayerID/Nombre] [Asiento 1 ó 2]");
	params[1] ++;

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "Para arrestar se necesita un vehículo SAPD de 4 puertas.");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendClientMessage(playerid, -1, "El vehículo debe pertenecer a SAPD.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return SendClientMessage(playerid, -1, "{FFFFFF}Para arrestar tienes que estar dentro de un vehículo policial.");
	if( (params[1] + 1) > VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_SEATS]) return SendClientMessageEx(playerid, -1, "{FFFFFF}Este vehículo policial es de %d pasajeros, así que no puedes llevar arrestados en él.", VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_SEATS]);

	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, -1, "{FFFFFF}El jugador no está conectado.");
	if(PLAYER_TEMP[params[0]][pt_TEASERING]) return SendClientMessage(playerid, -1, "{FFFFFF}El jugador le dieron con un teaser, espera unos segundos");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return 1;
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes arrestar a este jugador ahora.");

	if(CHARACTER_INFO[params[0]][ch_WANTED_LEVEL] == 0) return SendClientMessage(playerid, -1, "{FFFFFF}Esta persona no tiene nivel de búsqueda.");
	if(!PLAYER_TEMP[params[0]][pt_CUFFED]) return SendClientMessage(playerid, -1, "{FFFFFF}Para arrestar a esta persona tiene que estar esposada.");

	if(CHARACTER_INFO[params[0]][ch_STATE] == ROLEPLAY_STATE_ARRESTED)
	{
		TogglePlayerControllable(params[0], true);
		PLAYER_TEMP[params[0]][pt_CUFFED] = false;
		PLAYER_TEMP[params[0]][pt_CUFFING] = false;
		SetPlayerSpecialAction(params[0], SPECIAL_ACTION_NONE);
		CHARACTER_INFO[params[0]][ch_STATE] = ROLEPLAY_STATE_NORMAL;

		SendClientMessageEx(playerid, -1, "Has soltado en libertad a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
		return 1;
	}
	else
	{
		CHARACTER_INFO[params[0]][ch_STATE] = ROLEPLAY_STATE_ARRESTED;
		PutPlayerInVehicleEx(params[0], vehicleid, params[1]);
	}
	return 1;
}

CMD:m(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{FFFFFF}No estás de servicio como policía.");

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{FFFFFF}Para usar el megáfono tienes que estar dentro de un vehículo policial.");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}Para usar el megáfono tienes que estar dentro de un vehículo policial.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return SendClientMessage(playerid, -1, "{FFFFFF}Para usar el megáfono tienes que estar dentro de un vehículo policial.");

	if(isnull(params)) return SendClientMessage(playerid, 0xFFFF00FF, "/m [mensaje]");

	new str_text[145];
	format(str_text, 145, "(Megáfono) %s: %s", PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 40.0, str_text, 0xFF9B6AFF, 0xFF9B6AFF, 0xFF9B6AFF, 0xFF9B6AFF, 0xFF9B6AFF);
	return 1;
}

PutPlayerInVehicleEx(playerid, vehicleid, seat)
{
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_IMMUNITY] = gettime() + 5;
	PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
	return PutPlayerInVehicle(playerid, vehicleid, seat);
}

CMD:equiparse(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres policía.");

	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1456.3899, -1740.9731, 1479.7959))
	{
		ShowDialog(playerid, DIALOG_POLICE_SHOP);
	}
	else ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
	return 1;
}

CMD:entregar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{FFFFFF}No estás de servicio como policía.");
	if(PLAYER_SKILLS[playerid][WORK_POLICE] < 2) return SendClientMessage(playerid, -1, "{FFFFFF}No cuentas con el rango para entregar al delincuente.");

	if(sscanf(params, "u", params[0])) return SendClientMessage(playerid, 0xFFFF00FF, "/entregar [PlayerID/Nombre]");

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{FFFFFF}Para entregar tienes que estar dentro de un vehículo policial.");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}Para entregar tienes que estar dentro de un vehículo policial.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return SendClientMessage(playerid, -1, "{FFFFFF}Para entregar tienes que estar dentro de un vehículo policial.");

	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, -1, "{FFFFFF}El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return 1;
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes arrestar a este jugador ahora.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_PASSENGER) return SendClientMessage(playerid, -1, "{FFFFFF}Para entregar a esta persona tiene que estar dentro del vehículo policial.");
	if(GetPlayerVehicleID(params[0]) != vehicleid) return SendClientMessage(playerid, -1, "{FFFFFF}Para entregar a esta persona tiene que estar dentro del vehículo policial.");
	if(CHARACTER_INFO[params[0]][ch_WANTED_LEVEL] == 0) return SendClientMessage(playerid, -1, "{FFFFFF}Esta persona no tiene nivel de búsqueda.");

	if(IsPlayerInRangeOfPoint(playerid, 20.0, 1147.5968, -1837.4670, 13.5741))
	{
 		new str_text[145];
	    format(str_text, sizeof(str_text), "* Se notaría cómo unos guardias ingresan a %s a la cárcel *", PLAYER_TEMP[params[0]][pt_RP_NAME]);
		ProxDetector(playerid, 15.0, str_text, 0xADFF2FAA, 0xADFF2FAA, 0xADFF2FAA, 0xADFF2FAA, 0xADFF2FAA);

		SendClientMessage(playerid, -1, "La persona ahora está en la cárcel.");
		CHARACTER_INFO[params[0]][ch_POLICE_JAIL_ID] = 0;
		JailPlayer(params[0]);
	}
	else ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
	return 1;
}

CMD:policias(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres policía.");
	if(PLAYER_SKILLS[playerid][WORK_POLICE] < 5) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes cambiar rangos.");
	PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
	PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
	ShowDialog(playerid, DIALOG_POLICE_LIST);
	return 1;
}

CMD:entregarse(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] <= 0) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes cargos.");

	if(IsPlayerInRangeOfPoint(playerid, 1.5, 1471.1588, -1712.9259, 1479.7959))
	{
		CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] = 0;
		JailPlayer(playerid);
	}
	else ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
	return 1;
}

CMD:pagar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] <= 0) return ShowPlayerMessage(playerid, "Usted no tiene multas o cargos.", 4);

	if(IsPlayerInRangeOfPoint(playerid, 1.5, 250.049026, 67.635704, 1003.640625))
	{
        if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] == 1)
        {
		    if(CHARACTER_INFO[playerid][ch_CASH] < 10000) return ShowPlayerMessage(playerid, "Consiga más dinero para pagar su multa.", 4);

            GivePlayerCash(playerid, -10000);
            ShowPlayerMessage(playerid, "Gracias por pagar su multa.", 4);
			PlayerTextDrawHide(playerid, PlayerTextdraws[params[0]][ptextdraw_WANTED_LEVEL][0]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[params[0]][ptextdraw_WANTED_LEVEL][1]);
			CHARACTER_INFO[playerid][ch_WANTED_LEVEL] = 0;
			DeleteIlegalInv(playerid);
		}
		else if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] == 2)
		{
		    if(CHARACTER_INFO[playerid][ch_CASH] < 20000) return ShowPlayerMessage(playerid, "Consiga más dinero para pagar su multa.", 4);

            GivePlayerCash(playerid, -20000);
            ShowPlayerMessage(playerid, "Gracias por pagar su multa.", 4);
			PlayerTextDrawHide(playerid, PlayerTextdraws[params[0]][ptextdraw_WANTED_LEVEL][0]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[params[0]][ptextdraw_WANTED_LEVEL][1]);
			CHARACTER_INFO[playerid][ch_WANTED_LEVEL] = 0;
			DeleteIlegalInv(playerid);
		}
		else if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] == 3)
		{
		    if(CHARACTER_INFO[playerid][ch_CASH] < 30000) return ShowPlayerMessage(playerid, "Consiga más dinero para pagar su multa.", 4);

            GivePlayerCash(playerid, -30000);
            ShowPlayerMessage(playerid, "Gracias por pagar su multa.", 4);
			PlayerTextDrawHide(playerid, PlayerTextdraws[params[0]][ptextdraw_WANTED_LEVEL][0]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[params[0]][ptextdraw_WANTED_LEVEL][1]);
			CHARACTER_INFO[playerid][ch_WANTED_LEVEL] = 0;
			DeleteIlegalInv(playerid);
		}
		else if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] > 3)
		{
            ShowPlayerMessage(playerid, "No se le cobrará multa, pero será llevado a la cárcel.", 5);
			CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] = 1;
			JailPlayer(playerid);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.5, 246.349716, 118.358116, 1003.218750))
	{
        if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] == 1)
        {
		    if(CHARACTER_INFO[playerid][ch_CASH] < 30000) return ShowPlayerMessage(playerid, "Consiga más dinero para pagar su multa.", 4);

            GivePlayerCash(playerid, -30000);
            ShowPlayerMessage(playerid, "Gracias por pagar su multa.", 4);
			PlayerTextDrawHide(playerid, PlayerTextdraws[params[0]][ptextdraw_WANTED_LEVEL][0]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[params[0]][ptextdraw_WANTED_LEVEL][1]);
			CHARACTER_INFO[playerid][ch_WANTED_LEVEL] = 0;
			DeleteIlegalInv(playerid);
		}
		else if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] == 2)
		{
		    if(CHARACTER_INFO[playerid][ch_CASH] < 60000) return ShowPlayerMessage(playerid, "Consiga más dinero para pagar su multa.", 4);

            GivePlayerCash(playerid, -60000);
            ShowPlayerMessage(playerid, "Gracias por pagar su multa.", 4);
			PlayerTextDrawHide(playerid, PlayerTextdraws[params[0]][ptextdraw_WANTED_LEVEL][0]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[params[0]][ptextdraw_WANTED_LEVEL][1]);
			CHARACTER_INFO[playerid][ch_WANTED_LEVEL] = 0;
			DeleteIlegalInv(playerid);
		}
		else if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] == 3)
		{
		    if(CHARACTER_INFO[playerid][ch_CASH] < 120000) return ShowPlayerMessage(playerid, "Consiga más dinero para pagar su multa.", 4);

            GivePlayerCash(playerid, -120000);
            ShowPlayerMessage(playerid, "Gracias por pagar su multa.", 4);
			PlayerTextDrawHide(playerid, PlayerTextdraws[params[0]][ptextdraw_WANTED_LEVEL][0]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[params[0]][ptextdraw_WANTED_LEVEL][1]);
			CHARACTER_INFO[playerid][ch_WANTED_LEVEL] = 0;
			DeleteIlegalInv(playerid);
		}
		else if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] > 3)
		{
            ShowPlayerMessage(playerid, "No se le cobrará multa, pero será llevado a la cárcel.", 5);
			CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] = 1;
			JailPlayer(playerid);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.5, 235.772537, 165.382186, 1003.029968))
	{
        if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] == 1)
        {
		    if(CHARACTER_INFO[playerid][ch_CASH] < 30000) return ShowPlayerMessage(playerid, "Consiga más dinero para pagar su multa.", 4);

            GivePlayerCash(playerid, -30000);
            ShowPlayerMessage(playerid, "Gracias por pagar su multa.", 4);
			PlayerTextDrawHide(playerid, PlayerTextdraws[params[0]][ptextdraw_WANTED_LEVEL][0]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[params[0]][ptextdraw_WANTED_LEVEL][1]);
			CHARACTER_INFO[playerid][ch_WANTED_LEVEL] = 0;
			DeleteIlegalInv(playerid);
		}
		else if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] == 2)
		{
		    if(CHARACTER_INFO[playerid][ch_CASH] < 60000) return ShowPlayerMessage(playerid, "Consiga más dinero para pagar su multa.", 4);

            GivePlayerCash(playerid, -60000);
            ShowPlayerMessage(playerid, "Gracias por pagar su multa.", 4);
			PlayerTextDrawHide(playerid, PlayerTextdraws[params[0]][ptextdraw_WANTED_LEVEL][0]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[params[0]][ptextdraw_WANTED_LEVEL][1]);
			CHARACTER_INFO[playerid][ch_WANTED_LEVEL] = 0;
			DeleteIlegalInv(playerid);
		}
		else if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] == 3)
		{
		    if(CHARACTER_INFO[playerid][ch_CASH] < 120000) return ShowPlayerMessage(playerid, "Consiga más dinero para pagar su multa.", 4);

            GivePlayerCash(playerid, -120000);
            ShowPlayerMessage(playerid, "Gracias por pagar su multa.", 4);
			PlayerTextDrawHide(playerid, PlayerTextdraws[params[0]][ptextdraw_WANTED_LEVEL][0]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[params[0]][ptextdraw_WANTED_LEVEL][1]);
			CHARACTER_INFO[playerid][ch_WANTED_LEVEL] = 0;
			DeleteIlegalInv(playerid);
		}
		else if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] > 3)
		{
            ShowPlayerMessage(playerid, "No se le cobrará multa, pero será llevado a la cárcel.", 5);
			CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] = 1;
			JailPlayer(playerid);
		}
	}
	else ShowPlayerMessage(playerid, "No estás en el lugar adecuado", 3);
	return 1;
}

forward CuffPlayer(playerid);
public CuffPlayer(playerid)
{
	StopAudioStreamForPlayer(playerid);
	SetPlayerDrunkLevel(playerid, 0);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	CancelEdit(playerid);
	HidePlayerDialog(playerid);
	EndPlayerJob(playerid);
	PLAYER_TEMP[playerid][pt_HUNGRY_MESSAGE] = false;
	PLAYER_TEMP[playerid][pt_THIRST_MESSAGE] = false;
	PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
	PLAYER_TEMP[playerid][pt_CUFFED] = false;
	PLAYER_TEMP[playerid][pt_CUFFING] = false;
	if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
	{
		PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
		DisablePlayerTaxiMark(playerid);
	}
	if(PLAYER_TEMP[playerid][pt_WANT_MECHANIC])
	{
		PLAYER_TEMP[playerid][pt_WANT_MECHANIC] = false;
		DisablePlayerMechanicMark(playerid);
	}
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) EndPhoneCall(playerid);
	if(PLAYER_TEMP[playerid][pt_GPS_MAP]) HidePlayerGpsMap(playerid);
	if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] > 0) DisablePlayerPoliceMark(playerid);

	PLAYER_TEMP[playerid][pt_CUFFED] = true;
	PLAYER_TEMP[playerid][pt_CUFFING] = false;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
	return 1;
}

CMD:frecuencias(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendClientMessage(playerid, -1, "{FFFFFF}No estás de servicio como policía.");

	ShowDialog(playerid, DIALOG_POLICE_RADIOS);
	return 1;
}

SendPoliceRadioMessage(radio, color, message[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PLAYER_WORKS[i][WORK_POLICE])
				{
					if(radio == -1) SendClientMessage(i, color, message);
					else
					{
						if(PLAYER_TEMP[i][pt_POLICE_RADIO] == radio)
						{
							SendClientMessage(i, color, message);
						}
					}
				}
			}
		}
	}
	return 1;
}

CountPoliceRadioPlayers(radio)
{
	new total;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PLAYER_WORKS[i][WORK_POLICE])
				{
					if(PLAYER_TEMP[i][pt_WORKING_IN] == WORK_POLICE)
					{
						if(PLAYER_TEMP[i][pt_POLICE_RADIO] == radio)
						{
							total ++;
						}
					}
				}
			}
		}
	}
	return total;
}

SetPlayerWantedLevelEx(playerid, level, reason[])
{
	if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] == 0 && level > 0)
	{
		new city[45], zone[45];
		GetPlayerZones(playerid, city, zone);

		new message[145];
		format(message, sizeof message, "{4286f4} REPORTE RADIAL  {98baf2}%s {4286f4}cometió {98baf2}%s {4286f4}en {98baf2}%s, %s.", PLAYER_TEMP[playerid][pt_RP_NAME], reason, city, zone);
		SendPoliceRadioMessage(-1, -1, message);
	}

	CHARACTER_INFO[playerid][ch_WANTED_LEVEL] = level;
	PLAYER_TEMP[playerid][pt_LAST_SET_WANTED_LEVEL] = gettime();

	if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] == 0)
	{
		DisablePlayerPoliceMark(playerid);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0]);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1]);
	}
	else
	{
		new td_str[24];
		for(new i = 0; i != CHARACTER_INFO[playerid][ch_WANTED_LEVEL]; i ++) strcat(td_str, "]");
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], td_str);

		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1]);
		SetWantedMarkerToPolice(playerid);
	}
	return 1;
}

GetPlayerZones(playerid, city[], zone[])
{
	new Float:f_Pos[3];

	switch(CHARACTER_INFO[playerid][ch_STATE])
	{
		case ROLEPLAY_STATE_INTERIOR:
		{
			f_Pos[0] = ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_EXT_X];
			f_Pos[1] = ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_EXT_Y];
			f_Pos[2] = ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_EXT_Z];
		}
		case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
		{
			f_Pos[0] = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] ][property_EXT_X];
			f_Pos[1] = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] ][property_EXT_Y];
			f_Pos[2] = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] ][property_EXT_Z];
		}
		default: GetPlayerPos(playerid, f_Pos[0], f_Pos[1], f_Pos[2]);
	}

    format(city, 45, "San Andreas");
    format(zone, 45, "Desconocida");

	for(new i = 0; i < sizeof(g_Cities); i++)
	{
	    if(	(f_Pos[0] >= g_Cities[i][z_MinX] && f_Pos[0] < g_Cities[i][z_MaxX]) && (f_Pos[1] >= g_Cities[i][z_MinY] && f_Pos[1] < g_Cities[i][z_MaxY]) )
		{
			format(city, 45, g_Cities[i][z_Name]);
		    break;
		}
	}

	for(new i = 0; i < sizeof(g_Zones); i++)
	{
	    if(	(f_Pos[0] >= g_Zones[i][z_MinX] && f_Pos[0] < g_Zones[i][z_MaxX]) && (f_Pos[1] >= g_Zones[i][z_MinY] && f_Pos[1] < g_Zones[i][z_MaxY]) )
		{
			format(zone, 45, g_Zones[i][z_Name]);
		    break;
		}
	}

	return 1;
}

GetPointZone(Float:f_Pos_X, Float:f_Pos_Y, city[], zone[])
{
	format(city, 45, "San Andreas");
    format(zone, 45, "Desconocida");

	for(new i = 0; i < sizeof(g_Cities); i++)
	{
	    if(	(f_Pos_X >= g_Cities[i][z_MinX] && f_Pos_X < g_Cities[i][z_MaxX]) && (f_Pos_Y >= g_Cities[i][z_MinY] && f_Pos_Y < g_Cities[i][z_MaxY]) )
		{
			format(city, 45, g_Cities[i][z_Name]);
		    break;
		}
	}

	for(new i = 0; i < sizeof(g_Zones); i++)
	{
	    if(	(f_Pos_X >= g_Zones[i][z_MinX] && f_Pos_X < g_Zones[i][z_MaxX]) && (f_Pos_Y >= g_Zones[i][z_MinY] && f_Pos_Y < g_Zones[i][z_MaxY]) )
		{
			format(zone, 45, g_Zones[i][z_Name]);
		    break;
		}
	}

	return 1;
}

JailPlayer(playerid)
{
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1]);

	CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_JAIL;

	if(ACCOUNT_INFO[playerid][ac_SU]) CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 150 * CHARACTER_INFO[playerid][ch_WANTED_LEVEL];
	else CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 300 * CHARACTER_INFO[playerid][ch_WANTED_LEVEL];

	CHARACTER_INFO[playerid][ch_WANTED_LEVEL] = 0;
	PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME] = gettime();
	SetPlayerPosEx(playerid, JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);

	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][15]);
	PLAYER_TEMP[playerid][pt_TIMERS][15] = SetTimerEx("UnjailPlayer", CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] * 1000, false, "i", playerid);

	new time = CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME]);
	SendClientMessageEx(playerid, -1, "{FFFFFF}Te quedan %s minutos de condena.", TimeConvert(time));
	ResetPlayerWeapons(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	DisablePlayerPoliceMark(playerid);
	DeleteIlegalInv(playerid);
	return 1;
}

forward UnjailPlayer(playerid);
public UnjailPlayer(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][15]);
	CHARACTER_INFO[playerid][ch_POLICE_JAIL_TIME] = 0;
	CHARACTER_INFO[playerid][ch_WANTED_LEVEL] = 0;
	CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_INTERIOR;
	SetWeaponsForPlayer(playerid);
	SetPlayerArmedWeapon(playerid, 0);

	for(new i = 0; i != sizeof ENTER_EXIT; i ++)
	{
		if(ENTER_EXIT[i][ee_INTERIOR_TYPE] == JAIL_POSITIONS[ CHARACTER_INFO[playerid][ch_POLICE_JAIL_ID] ][jail_INT])
		{
			CHARACTER_INFO[playerid][ch_INTERIOR_EXTRA] = ENTER_EXIT[i][ee_ID];
			PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;
			SetPlayerPosEx(playerid, ENTER_EXIT[i][ee_INT_X], ENTER_EXIT[i][ee_INT_Y], ENTER_EXIT[i][ee_INT_Z], ENTER_EXIT[i][ee_INT_ANGLE] + 180.0, ENTER_EXIT[i][ee_INT_INTERIOR], 0, true);
			StopAudioStreamForPlayer(playerid);
			break;
		}
	}

	SendClientMessageEx(playerid, -1, "{FFFFFF}Has cumplido tu condena.");
	return 1;
}

DisablePlayerPoliceMark(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_POLICE]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_POLICE) continue;

				SetPlayerMarkerForPlayer(i, playerid, PLAYER_COLOR);
			}
		}
	}
	return 1;
}

SetWantedMarkerToPolice(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_POLICE]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_POLICE) continue;

				SetPlayerMarkerForPlayer(i, playerid, PlayerWantedColor(i));
			}
		}
	}
	return 1;
}

ShowPlayerStats(playerid, pid)
{
	if(!IsPlayerConnected(pid)) return 0;
	if(ACCOUNT_INFO[pid][ac_ID] == 0) return 0;


	ACCOUNT_INFO[pid][ac_TIME_PLAYING] += gettime() - PLAYER_TEMP[pid][pt_TIME_PLAYING];
	PLAYER_TEMP[pid][pt_TIME_PLAYING] = gettime();

	new Float:hours;
	ConvertTime_SecondsToHoursFloat(ACCOUNT_INFO[pid][ac_TIME_PLAYING], hours);

	new next_rep[24], neccessary_rep = ACCOUNT_INFO[pid][ac_LEVEL] * 7;
	if(ACCOUNT_INFO[pid][ac_REP] < neccessary_rep)
	{
		new time = (ACCOUNT_INFO[pid][ac_TIME_FOR_REP] - (gettime() * 1000 - PLAYER_TEMP[pid][pt_TIME_PASSED_LAST_REP])) / 1000;
		if(time < 3) time = 3;

		format(next_rep, sizeof next_rep, "%sm", TimeConvert(time));
	}
	else format(next_rep, sizeof next_rep, "/comprar nivel");

	new caption[48], dialog[445 + (27 * sizeof(work_info))];
	format(caption, sizeof caption, "{00ff00}ITZN - Player stats de %s", PLAYER_TEMP[pid][pt_RP_NAME]);

	format(dialog, sizeof dialog,

		"\
		    {00FF00}%s (%d)\n\
			\n\
			{00FF00}General:\n\
			{FFFFFF}Registro: {00FF00}%s\n\
			{FFFFFF}Última conexión: {00FF00}%s\n\
			{FFFFFF}Tiempo jugado: {00FF00}%.1f horas\n\
   			{f4d942}Premium:{FFFFFF} %s\n\
			{FFFFFF}Cuenta N°: {00FF00}%d\n\
			\n\
			{00FF00}Jugador:\n\
			{FFFFFF}Nivel: {00FF00}%d\n\
			{FFFFFF}Experiencia: {00FF00}%d/%d\n\
			{FFFFFF}Próxima experiencia: {00FF00}%s\n\
			{FFFFFF}Trabajo(s): {00FF00}%s\n\
			{FFFFFF}Banda: {00FF00}%s\n\
			\n\
		",

			ACCOUNT_INFO[pid][ac_NAME],
			playerid,
			ACCOUNT_INFO[pid][reg_DATE],
			ACCOUNT_INFO[pid][ac_LAST_CONNECTION],
			hours,
			(ACCOUNT_INFO[pid][ac_SU] ? "Sí" : "No"),
			ACCOUNT_INFO[pid][ac_ID],

			ACCOUNT_INFO[pid][ac_LEVEL],
			ACCOUNT_INFO[pid][ac_REP], neccessary_rep,
			next_rep,
			getPlayerWorks(pid),
			getPlayerCrew(pid)

	);

	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");
	return 1;
}

getPlayerCrew(playerid)
{
	new crew[32];
	if(!PLAYER_CREW[playerid][player_crew_VALID]) crew = "ninguna";
	else format(crew, sizeof crew, "%s", CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_NAME]);
	return crew;
}

AddPlayerBadHistory(account_id, by_account_id, type, text[])
{
	new DB_Query[266];
	format(DB_Query, sizeof DB_Query, "INSERT INTO `BAD_HISTORY` (`ID_USER`, `TYPE`, `BY`, `TEXT`) VALUES('%d', '%d', '%d', '%q');", account_id, type, by_account_id, text);
	db_query(Database, DB_Query);
	return 1;
}

AddPlayerBan(account_id, account_name[], account_ip[], by_account_id, type, text[], days = 0, mod[] = "day")
{
	new DBResult:Result, DB_Query[485];

	if(!days)
	{
		format(DB_Query, sizeof DB_Query,

			"\
			INSERT INTO `BAD_HISTORY` (`ID_USER`, `TYPE`, `BY`, `TEXT`) VALUES('%d', '%d', '%d', '%q');\
			INSERT INTO `BANS` (`NAME`, `IP`, `ID_HISTORY`, `EXPIRE_DATE`) SELECT '%q', '%q', MAX(`ID`), '0' FROM `BAD_HISTORY`;\
			",

				account_id, type, by_account_id, text,
				account_name, account_ip

		);
	}
	else
	{
		format(DB_Query, sizeof DB_Query,

			"\
			INSERT INTO `BAD_HISTORY` (`ID_USER`, `TYPE`, `BY`, `TEXT`) VALUES('%d', '%d', '%d', '%q');\
			INSERT INTO `BANS` (`NAME`, `IP`, `ID_HISTORY`, `EXPIRE_DATE`) SELECT '%q', '%q', MAX(`ID`), DATETIME('NOW', '+%d %s') FROM `BAD_HISTORY`;\
			",

				account_id, type, by_account_id, text,
				account_name, account_ip, days, mod

		);
	}

	Result = db_query(Database, DB_Query);
	db_free_result(Result);
	return 1;
}

// Comandos admins
CMD:reportar(playerid, params[])
{
	if(gettime() < PLAYER_TEMP[playerid][pt_ANTIFLOOD_REPORT] + 5) return 1;
	PLAYER_TEMP[playerid][pt_ANTIFLOOD_REPORT] = gettime();

	new reason[128];
	if(sscanf(params, "us[128]", params[0], reason)) return SendClientMessage(playerid, 0xFFFF00FF, "/reportar {FFFFFF}[PlayerID/Nombre] [Razón]");
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, -1, "{FFFFFF}Jugador desconectado.");

	SendClientMessage(playerid, 0xE0E0E0FF, " Tú reporte fue registrado con {00FF00}éxito.");

	new str[145]; format(str, 145, " REPORTE  {E0E0E0}%s(%d) {FF0000}reportó a {E0E0E0}%s(%d) {FF0000}Razón: {E0E0E0}%s", ACCOUNT_INFO[playerid][ac_NAME], playerid, ACCOUNT_INFO[params[0]][ac_NAME], params[0], reason);
	SendMessageToAdmins(0xff0000FF, str);
	return 1;
}
CMD:report(playerid, params[])
{
	return cmd_reportar(playerid, params);
}

CMD:soporte(playerid, params[])
{
	new message[128];
	if(sscanf(params, "s[128]", message)) return SendClientMessage(playerid, 0xFFFF00FF, "/soporte {FFFFFF}[MENSAJE]");

	if(PLAYER_TEMP[playerid][pt_ADMIN_PM_PID] == INVALID_PLAYER_ID || !PLAYER_TEMP[playerid][pt_ADMIN_PM_AID]) return SendClientMessage(playerid, -1, "{FFFFFF}No has enviado un mensaje al soporte.");
	if(ACCOUNT_INFO[ PLAYER_TEMP[playerid][pt_ADMIN_PM_PID] ][ac_ID] != PLAYER_TEMP[playerid][pt_ADMIN_PM_AID])
	{
		PLAYER_TEMP[playerid][pt_ADMIN_PM_PID] = INVALID_PLAYER_ID;
		PLAYER_TEMP[playerid][pt_ADMIN_PM_AID] = 0;
		PLAYER_TEMP[playerid][pt_ADMIN_PM_TIME] = 0;
		SendClientMessage(playerid, -1, "{FFFFFF}El administrador que te envió el mensaje está desconectado.");
		return 1;
	}
	if(gettime() > PLAYER_TEMP[playerid][pt_ADMIN_PM_TIME] + 60)
	{
		PLAYER_TEMP[playerid][pt_ADMIN_PM_PID] = INVALID_PLAYER_ID;
		PLAYER_TEMP[playerid][pt_ADMIN_PM_AID] = 0;
		PLAYER_TEMP[playerid][pt_ADMIN_PM_TIME] = 0;
		SendClientMessage(playerid, -1, "{FFFFFF}Has tardado demasiado en responder.");
		return 1;
	}

	SendClientMessageEx(PLAYER_TEMP[playerid][pt_ADMIN_PM_PID], -1, " SOPORTE  %s (%d) dice: %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, message);
	SendClientMessage(playerid, 0xE0E0E0FF, " Tú mensaje para el equipo de soporte fue enviado con {00FF00}éxito.");
	PLAYER_TEMP[playerid][pt_ADMIN_PM_PID] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_ADMIN_PM_AID] = 0;
	PLAYER_TEMP[playerid][pt_ADMIN_PM_TIME] = 0;
	return 1;
}

CMD:id(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, 0xFFFF00FF, "/id {FFFFFF}[PlayerID/Nombre]");
	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "{FFFFFF}Jugador desconectado.");

	SendClientMessageEx(playerid, -1, "Nombre: '%s' DB-ID: '%d' Playerid: '%d' Nivel: %d", ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_ID], to_player, ACCOUNT_INFO[to_player][ac_LEVEL]);
	return 1;
}

CMD:sancionados(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;

	PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
	PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
	ShowDialog(playerid, DIALOG_SANS_LIST);
	return 1;
}

CMD:admins(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
	PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
	ShowDialog(playerid, DIALOG_ADMIN_LIST);
	return 1;
}

CMD:acmdlog(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 1) return 0;

	if(PLAYER_TEMP[playerid][pt_SEE_ACMD_LOG])
	{
		SendClientMessage(playerid, -1, "Log de comandos administrativos deshabilitado.");
		PLAYER_TEMP[playerid][pt_SEE_ACMD_LOG] = false;
	}
	else
	{
		SendClientMessage(playerid, -1, "Log de comandos administrativos habilitado.");
		PLAYER_TEMP[playerid][pt_SEE_ACMD_LOG] = true;
	}
	return 1;
}

CMD:aclog(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 1) return 0;

	if(PLAYER_TEMP[playerid][pt_SEE_AC_LOG])
	{
		SendClientMessage(playerid, -1, "* Log de anticheat deshabilitado.");
		PLAYER_TEMP[playerid][pt_SEE_AC_LOG] = false;
	}
	else
	{
		SendClientMessage(playerid, -1, "* Log de anticheat habilitado.");
		PLAYER_TEMP[playerid][pt_SEE_AC_LOG] = true;
	}
	return 1;
}

CMD:works(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 1) return 0;

	SendClientMessage(playerid, -1, "* Lista de trabajos:");

	for(new i = 0; i != sizeof work_info; i ++)
	{
		switch(work_info[i][work_info_TYPE])
		{
			case WORK_TYPE_NONE: SendClientMessageEx(playerid, -1, "ID: {f4f442}%d, {FFFFFF}tipo: {f4f442}ninguno, {FFFFFF}trabajo: {f4f442}%s", i, work_info[i][work_info_NAME]);
			case WORK_TYPE_NORMAL: SendClientMessageEx(playerid, -1, "ID: {f4f442}%d, {FFFFFF}tipo: {f4f442}normal, {FFFFFF}trabajo: {f4f442}%s", i, work_info[i][work_info_NAME]);
			case WORK_TYPE_FAMILY: SendClientMessageEx(playerid, -1, "ID: {f4f442}%d, {FFFFFF}tipo: {f4f442}extraordinario, {FFFFFF}trabajo: {f4f442}%s", i, work_info[i][work_info_NAME]);
		}
	}
	return 1;
}

CMD:getid(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 2) return 0;

	new name[24];
	if(sscanf(params, "s[24]", name)) return SendClientMessage(playerid, -1, "* Uso: /getid <nombre o parte del nombre>");

	new DBResult:Result, DB_Query[128];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME`, `CONNECTED`, `PLAYERID` FROM `CUENTA` WHERE `NAME` LIKE '%%%q%%' LIMIT 20;", name);
	Result = db_query(Database, DB_Query);

	new count;
	for(new i = 0; i < db_num_rows(Result); i ++)
	{
		new id, get_name[24], connected, player_id;

		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");

		SendClientMessageEx(playerid, -1, "Nombre: '%s' DB-ID: '%d' Conectado: '%d' Playerid: '%d'", get_name, id, connected, player_id);

		count ++;
		db_next_row(Result);
	}
	db_free_result(Result);

	SendClientMessageEx(playerid, -1, "Se encontraron %d coincidencias, el límite es 20.", count);
	return 1;
}

CMD:getname(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 2) return 0;

	new db_id;
	if(sscanf(params, "d", db_id)) return SendClientMessage(playerid, -1, "* Uso: /getname <DB-ID>");

	new DBResult:Result, DB_Query[128];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME`, `CONNECTED`, `PLAYERID` FROM `CUENTA` WHERE `ID` = '%d';", db_id);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result))
	{
		new id, get_name[24], connected, player_id;

		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");

		SendClientMessageEx(playerid, -1, "* Nombre: '%s' DB-ID: '%d' Conectado: '%d' Playerid: '%d'", get_name, id, connected, player_id);
	}
	else SendClientMessage(playerid, -1, "* ERROR: No se encontraron resultados.");
	db_free_result(Result);
	return 1;
}

CMD:aka(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 2) return 0;

	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso: /aka <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "* ERROR: El jugador no está conectado.");
	if(isnull(ACCOUNT_INFO[to_player][ac_IP])) return SendClientMessage(playerid, -1, "IP no válida.");

	SendClientMessageEx(playerid, -1, "AKA de %s (%d):", ACCOUNT_INFO[to_player][ac_NAME], to_player);

	new DBResult:Result, DB_Query[128];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME` FROM `CUENTA` WHERE `IP` = '%q' LIMIT 20;", ACCOUNT_INFO[to_player][ac_IP]);
	Result = db_query(Database, DB_Query);

	new count;
	for(new i = 0; i < db_num_rows(Result); i ++)
	{
		new id, get_name[24];

		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", get_name, 24);

		SendClientMessageEx(playerid, -1, "Nombre: {f4f442}'%s' {FFFFFF}DB-ID: '%d'", get_name, id);

		count ++;
		db_next_row(Result);
	}
	db_free_result(Result);

	SendClientMessageEx(playerid, -1, "* Se encontraron %d coincidencias, el límite es 20.", count);
	return 1;
}

CMD:ck(playerid,params[])
{
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    static Float:X;
    static Float:Y;
    static Float:Z;
	GetPlayerPos(playerid,X, Y,Z);
	SetPlayerPos(playerid,X,Y,Z+3);
	return 1;
}

CMD:kc(playerid,params[])
{
    if(IsPlayerInAnyVehicle(playerid)) return 1;
    static Float:X;
    static Float:Y;
    static Float:Z;
	GetPlayerPos(playerid,X, Y,Z);
	SetPlayerPos(playerid,X,Y,Z-3);
	return 1;
}

CMD:adv(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_player, reason[128];
	if(sscanf(params, "us[128]", to_player, reason)) return SendClientMessage(playerid, -1, "* Uso: /adv <player_id> <razon>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "El rango administrativo de este jugador es superior al tuyo.");


	AddPlayerBadHistory(ACCOUNT_INFO[to_player][ac_ID], ACCOUNT_INFO[playerid][ac_ID], TYPE_WARNING, reason);

	new dialog[170];
	format(dialog, sizeof dialog, "{FFFFFF}Recibiste un {FFCC00}llamado de atención {FFFFFF}para que te {FFCC00}moderes{FFFFFF}. Razón: %s", reason);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{FF0000}ATENCIÓN", dialog, "Aceptar", "");

	new str[145]; format(str, 145, " El jugador {bfbfbf}%s(%d){edcf2a} fue advertido.{edcf2a} Razón: {bfbfbf}%s",ACCOUNT_INFO[to_player][ac_NAME], to_player, reason);
	SendClientMessageToAll(0xedcf2aFF, str);
	
	SendCmdLogToAdmins(playerid, "adv", reason);
	return 1;
}

CMD:warn(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_player, reason[128];
	if(sscanf(params, "us[128]", to_player, reason)) return SendClientMessage(playerid, -1, "* Uso: /warn <player_id> <razon>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");
	if(ACCOUNT_INFO[to_player][ac_WARN_STATUS] == 1) return SendClientMessageEx(playerid, -1, "* ERROR: El jugador ya está en modo sanción.", to_player);

	AddPlayerBadHistory(ACCOUNT_INFO[to_player][ac_ID], ACCOUNT_INFO[playerid][ac_ID], TYPE_WARNING, reason);
	ACCOUNT_INFO[to_player][ac_WARN_STATUS] = 1;
	CHARACTER_INFO[to_player][ch_STATE] = ROLEPLAY_STATE_HOSPITAL;

	SaveUserData(to_player);
	SavePlayerToysData(to_player);
	SavePlayerVehicles(to_player, false);
	SavePlayerSkills(to_player);
	SavePlayerWorks(to_player);
	SavePlayerMisc(to_player);
	SavePlayerWeaponsData(to_player);
	PLAYER_TEMP[to_player][pt_SAVE_ACCOUNT_TIME] = gettime();

    CHARACTER_INFO[to_player][ch_POLICE_JAIL_TIME] = 60;
	CHARACTER_INFO[to_player][ch_POLICE_JAIL_ID] = 0;
	JailPlayer(to_player);

	new dialog[170];
	format(dialog, sizeof dialog, "{FFFFFF}Estás sancionado, por la razón de: {00FF00}%s\n{FFFFFF}No podrás salir de aquí hasta que un administrador te quite la sanción.", reason);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, " ", dialog, ":(", "");

	new str[145]; format(str, 145, " El jugador {bfbfbf}%s(%d){edcf2a} fue sancionado.{edcf2a} Razón: {bfbfbf}%s",ACCOUNT_INFO[to_player][ac_NAME], to_player, reason);
	SendClientMessageToAll(0xedcf2aFF, str);

	SendCmdLogToAdmins(playerid, "warn", reason);
	return 1;
}
CMD:unwarn(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso: /unwarn <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");
	if(ACCOUNT_INFO[to_player][ac_WARN_STATUS] == 0) return SendClientMessageEx(playerid, -1, "* ERROR: El jugador no tiene sanción.", to_player);

	ACCOUNT_INFO[to_player][ac_WARN_STATUS] = 0;
	CHARACTER_INFO[to_player][ch_STATE] = ROLEPLAY_STATE_NORMAL;
	
	SetPlayerPosEx(to_player, 1555.400390, -1675.611694, 16.195312, 0.0, 0, 0, true);

	new str[145]; format(str, 145, " El jugador {bfbfbf}%s(%d){edcf2a} se le retiró la sanción.",ACCOUNT_INFO[to_player][ac_NAME], to_player);
	SendClientMessageToAll(0xedcf2aFF, str);
	return 1;
}

CMD:kick(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 2) return 0;

	new to_player, reason[128];
	if(sscanf(params, "us[128]", to_player, reason)) return SendClientMessage(playerid, -1, "* Uso /kick <player_id> <razon>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	if(PLAYER_TEMP[to_player][pt_KICKED]) return SendClientMessage(playerid, -1, "* ERROR: El jugador ya está expulsado.");
	if(!ACCOUNT_INFO[to_player][ac_ID]) return Kick(to_player);


	AddPlayerBadHistory(ACCOUNT_INFO[to_player][ac_ID], ACCOUNT_INFO[playerid][ac_ID], TYPE_KICK, reason);

	new str_k[170];
	format(str_k, sizeof str_k, "Has sido expulsado por ~r~%s~w~~h~.", reason);
	ShowPlayerMessageWarning(to_player, "ALERTA", str_k);
	KickEx(to_player, 500);

	new str[145]; format(str, 145, " El jugador {bfbfbf}%s{edcf2a} fue expulsado del servidor.{edcf2a} Razón: {bfbfbf}%s", ACCOUNT_INFO[to_player][ac_NAME], reason);
	SendClientMessageToAll(0xedcf2aFF, str);
	return 1;
}

CMD:spec(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso: /spec <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
    {
		new Float:p[4];
		GetPlayerPos(playerid, p[0], p[1], p[2]);
		GetPlayerFacingAngle(playerid, p[3]);
		SetSpawnInfo(playerid, NO_TEAM, GetPlayerSkin(playerid), p[0], p[1], p[2], p[3], 0, 0, 0, 0, 0, 0);
		CHARACTER_INFO[playerid][ch_INTERIOR] = GetPlayerInterior(playerid);
		PLAYER_TEMP[playerid][pt_VIRTUAL_WORLD] = GetPlayerVirtualWorld(playerid);
	}

	TogglePlayerSpectatingEx(playerid, true);
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(to_player));
	SetPlayerInterior(playerid, GetPlayerInterior(to_player));
	if(IsPlayerInAnyVehicle(to_player)) PlayerSpectateVehicle(playerid, GetPlayerVehicleID(to_player));
	else PlayerSpectatePlayer(playerid, to_player);
	SendClientMessage(playerid, -1, "* Utiliza /specoff para terminar este modo.");


	SendCmdLogToAdmins(playerid, "spec", params);
	return 1;
}

CMD:specoff(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	SetPlayerInterior(playerid, CHARACTER_INFO[playerid][ch_INTERIOR]);
	SetPlayerVirtualWorld(playerid, PLAYER_TEMP[playerid][pt_VIRTUAL_WORLD]);
	TogglePlayerSpectatingEx(playerid, false);
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
	PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
	return 1;
}

CMD:freeze(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso:: /freeze <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);

	TogglePlayerControllable(to_player, false);
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso: /unfreeze <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);

	TogglePlayerControllable(to_player, true);
	return 1;
}

CMD:tempban(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_player, minutes, reason[128];
	if(sscanf(params, "uds[128]", to_player, minutes, reason)) return SendClientMessage(playerid, -1, "* Uso: /tban <player_id> <minutos> <razon>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");
	if(minutes < 3 || minutes > 1440) return SendClientMessage(playerid, -1, "El rango válido de minutos es de 3 a 1440.");
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] == 2 && minutes > 30) return SendClientMessage(playerid, -1, "* ERROR: Tu rango administrativo sólo te permite banear un máximo de 30 minutos.");

	if(PLAYER_TEMP[to_player][pt_KICKED]) return SendClientMessage(playerid, -1, "* ERROR: El jugador ya está expulsado.");
	if(!ACCOUNT_INFO[to_player][ac_ID]) return Kick(to_player);

	AddPlayerBan(ACCOUNT_INFO[to_player][ac_ID], ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_IP], ACCOUNT_INFO[playerid][ac_ID], TYPE_TEMP_BAN, reason, minutes, "minutes");

	new dialog[250];
	format(dialog, sizeof dialog, "Has sido baneado por %d minutos, razón:\n%s\n", minutes, reason);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
	KickEx(to_player, 500);

	new str[145]; format(str, 145, " El jugador {bfbfbf}%s{edcf2a} fue baneado temporalmente del servidor.{edcf2a} Razón: {bfbfbf}%s",ACCOUNT_INFO[to_player][ac_NAME], to_player, reason);
	SendClientMessageToAll(0xedcf2aFF, str);
	return 1;
}

CMD:specest(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso: /specest <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	ShowPlayerStats(playerid, to_player);
	return 1;
}

CMD:specinv(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso: /specinv <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	ShowPlayerInventory(playerid, to_player);
	return 1;
}

CMD:specexp(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso: /specexp <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	ShowPlayerSkills(playerid, to_player);
	return 1;
}

CMD:specbank(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso: /specbank <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	if(!BANK_ACCOUNT[to_player][bank_account_ID]) SendClientMessage(playerid, -1, "* ERROR: El jugador no tiene cuenta bancaria.");
	else SendClientMessageEx(playerid, -1, "Cuenta bancaria ID: '%d' Balance: '%s'", BANK_ACCOUNT[to_player][bank_account_ID], number_format_thousand(BANK_ACCOUNT[to_player][bank_account_BALANCE]));
	return 1;
}

CMD:setbankcash(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, -1, "* Uso: /setbankcash <player_id> <ammount>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(!BANK_ACCOUNT[to_player][bank_account_ID]) SendClientMessage(playerid, -1, "* ERROR: El jugador no tiene cuenta bancaria.");
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	BANK_ACCOUNT[to_player][bank_account_BALANCE] = value;
	SendClientMessageEx(playerid, -1, "* El dinero de %s (%d) ahora es %d en el banco.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);

	SendCmdLogToAdmins(playerid, "setbankcash", params);
	return 1;
}

CMD:unjail(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso: /unjail <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	if(CHARACTER_INFO[to_player][ch_STATE] != ROLEPLAY_STATE_JAIL) return SendClientMessage(playerid, -1, "* ERROR: El jugador no está en el cárcel.");

	UnjailPlayer(to_player);
	SendCmdLogToAdmins(playerid, "unjail", params);
	return 1;
}

CMD:goto(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso: /goto <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	new Float:p[4];
	GetPlayerPos(to_player, p[0], p[1], p[2]);
	GetPlayerFacingAngle(to_player, p[3]);

	SetPlayerPosEx(playerid, p[0], p[1], p[2], p[3], GetPlayerInterior(to_player), GetPlayerVirtualWorld(to_player), false, true);
	SetPlayerFacingAngle(playerid, p[3] + 180.0);

	SendCmdLogToAdmins(playerid, "goto", params);
	return 1;
}

CMD:get(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso: /get <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	new Float:p[4];
	GetPlayerPos(playerid, p[0], p[1], p[2]);
	GetPlayerFacingAngle(playerid, p[3]);

	SetPlayerPosEx(to_player, p[0], p[1], p[2], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), false, true);
	SetPlayerFacingAngle(to_player, p[3] + 180.0);


	SendCmdLogToAdmins(playerid, "get", params);
	return 1;
}

CMD:unban(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new name[24];
	if(sscanf(params, "s[24]", name)) return SendClientMessage(playerid, -1, "* Uso: /unban <nombre completo>");

	new DBResult:Result, DB_Query[128];
	format(DB_Query, sizeof DB_Query, "SELECT * FROM `BANS` WHERE `NAME` = '%q';", name);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result))
	{
		format(DB_Query, sizeof DB_Query, "DELETE FROM `BANS` WHERE `NAME` = '%q';", name);
		db_query(Database, DB_Query);

		SendClientMessageEx(playerid, -1, "* El usuario '%s' ha sido desbaneado.", name);

		new str[145]; format(str, 145, "{ff782b}Administrador {FFFFFF}%s (%d) ha desbaneado a '%s'.", ACCOUNT_INFO[playerid][ac_NAME], playerid, name);
		SendMessageToAdmins(-1, str);
	}
	else SendClientMessageEx(playerid, -1, "* ERROR: El nombre '%s' no está en la lista de baneados.", name);
	db_free_result(Result);
	return 1;
}

CMD:ban(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;

	new to_player, reason[128];
	if(sscanf(params, "us[128]", to_player, reason)) return SendClientMessage(playerid, -1, "* Uso: /ban <player_id> <razon>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	if(to_player == playerid) return SendClientMessage(playerid, -1, "* ERROR.");

	if(PLAYER_TEMP[to_player][pt_KICKED]) return SendClientMessage(playerid, -1, "* ERROR: El jugador ya está expulsado.");
	if(!ACCOUNT_INFO[to_player][ac_ID]) return Kick(to_player);

	AddPlayerBan(ACCOUNT_INFO[to_player][ac_ID], ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_IP], ACCOUNT_INFO[playerid][ac_ID], TYPE_BAN, reason);

	new str_k[250];
	format(str_k, sizeof str_k, "Has sido baneado por ~r~%s~w~~h~.", reason);
	ShowPlayerMessageWarning(to_player, "BANEADO", str_k);
	KickEx(to_player, 500);

	new str[145]; format(str, 145, " El jugador {bfbfbf}%s(%d){edcf2a} fue baneado del servidor.{edcf2a} Razón: {bfbfbf}%s",ACCOUNT_INFO[to_player][ac_NAME], to_player, reason);
	SendClientMessageToAll(0xedcf2aFF, str);
	
	SendCmdLogToAdmins(playerid, "ban", reason);
	return 1;
}

CMD:cc(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	ClearChat(100);

	SendCmdLogToAdmins(playerid, "cc (clear chat)", params);
	return 1;
}

CMD:tban(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;

	new to_player, days, reason[128];
	if(sscanf(params, "uds[128]", to_player, days, reason)) return SendClientMessage(playerid, -1, "* Uso: /tban <player_id> <dias> <razon>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");
	if(days <= 0 || days > 9999) return SendClientMessage(playerid, -1, "* Uso: /ban <player_id> <dias> <razon>");

	if(PLAYER_TEMP[to_player][pt_KICKED]) return SendClientMessage(playerid, -1, "* ERROR: El jugador ya está expulsado.");
	if(!ACCOUNT_INFO[to_player][ac_ID]) return Kick(to_player);

	AddPlayerBan(ACCOUNT_INFO[to_player][ac_ID], ACCOUNT_INFO[to_player][ac_NAME], ACCOUNT_INFO[to_player][ac_IP], ACCOUNT_INFO[playerid][ac_ID], TYPE_TEMP_BAN, reason, days);

	new str_k[240];
	format(str_k, sizeof str_k, "Has sido baneado ~y~%d dias ~w~~h~por ~r~%s~w~~h~.",days, reason);
	ShowPlayerMessageWarning(to_player, "BANEADO", str_k);
	KickEx(to_player, 500);

	new str[128]; format(str, sizeof(str), " {bfbfbf}%s(%d){edcf2a} fue baneado del servidor.{edcf2a} Razón: {bfbfbf}%s (Días: %d)",ACCOUNT_INFO[to_player][ac_NAME], to_player, reason, days);
	SendClientMessageToAll(0xedcf2aFF, str);
	return 1;
}

CMD:dban(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;

	new reason[128], to_account;
	if(sscanf(params, "ds[128]", to_account, reason)) return SendClientMessage(playerid, -1, "* Uso: /dban <DB-ID> <razon>");

	new DBResult:Result, DB_Query[160];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `IP`, `NAME`, `CONNECTED`, `PLAYERID`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ID` = '%d';", to_account);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result))
	{
		new id, ip[16], get_name[24], connected, player_id, admin_level;

		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "IP", ip, 16);
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");
		admin_level = db_get_field_assoc_int(Result, "ADMIN_LEVEL");

		if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= admin_level)
		{
			if(connected) SendClientMessageEx(playerid, -1, "** JUGADOR '%s' DB-ID '%d' conectado utilice /ban, su player_id: %d.", get_name, id, player_id);
			else
			{
				new DBResult:is_banned;
				format(DB_Query, sizeof DB_Query, "SELECT * FROM `BANS` WHERE `NAME` = '%q' OR `IP` = '%q';", get_name, ip);
				is_banned = db_query(Database, DB_Query);

				if(db_num_rows(is_banned))
				{
					new expire_date[24];
					db_get_field_assoc(is_banned, "EXPIRE_DATE", expire_date, 24);

					if(!strcmp(expire_date, "0", false)) SendClientMessageEx(playerid, -1, "** JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (permanentemente).", get_name, id);
					else SendClientMessageEx(playerid, -1, "** JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (temporalmente, fecha de readmisión: %s).", get_name, id, expire_date);
				}
				else
				{
					AddPlayerBan(id, get_name, ip, ACCOUNT_INFO[playerid][ac_ID], TYPE_BAN, reason);
					new str[145]; format(str, 145, " El jugador {bfbfbf}%s{edcf2a} fue baneado del servidor.{edcf2a} Razón: {bfbfbf}%s", get_name, reason);
					SendClientMessageToAll(0xedcf2aFF, str);
				}

				db_free_result(is_banned);
			}
		}
		else SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");
	}
	else SendClientMessage(playerid, -1, "* ERROR: No se encontro la DB-ID.");
	db_free_result(Result);
	return 1;
}

CMD:dtban(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;

	new reason[128], to_account, days;
	if(sscanf(params, "dds[128]", to_account, days, reason)) return SendClientMessage(playerid, -1, "* Uso: /dtban <DB-ID> <dias> <razon>");
	if(days <= 0 || days > 9999) return SendClientMessage(playerid, -1, "* Uso: /dtban <DB-ID> <dias> <razon>");

	new DBResult:Result, DB_Query[160];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `IP`, `NAME`, `CONNECTED`, `PLAYERID`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ID` = '%d';", to_account);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result))
	{
		new id, ip[16], get_name[24], connected, player_id, admin_level;

		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "IP", ip, 16);
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");
		admin_level = db_get_field_assoc_int(Result, "ADMIN_LEVEL");

		if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= admin_level)
		{
			if(connected) SendClientMessageEx(playerid, -1, "**** JUGADOR '%s' DB-ID '%d' conectado utilice /ban, su player_id: %d.", get_name, id, player_id);
			else
			{
				new DBResult:is_banned;
				format(DB_Query, sizeof DB_Query, "SELECT * FROM `BANS` WHERE `NAME` = '%q' OR `IP` = '%q';", get_name, ip);
				is_banned = db_query(Database, DB_Query);

				if(db_num_rows(is_banned))
				{
					new expire_date[24];
					db_get_field_assoc(is_banned, "EXPIRE_DATE", expire_date, 24);

					if(!strcmp(expire_date, "0", false)) SendClientMessageEx(playerid, -1, "**** JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (permanentemente).", get_name, id);
					else SendClientMessageEx(playerid, -1, "**** JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (temporalmente, fecha de readmisión: %s).", get_name, id, expire_date);
				}
				else
				{
					AddPlayerBan(id, get_name, ip, ACCOUNT_INFO[playerid][ac_ID], TYPE_TEMP_BAN, reason, days);
					SendClientMessageEx(playerid, -1, "* Jugador (nick: '%s' dbid: '%d') baneado por %d días.", get_name, id, days);

					new str[145]; format(str, 145, "* {ff782b}Administrador {FFFFFF}%s (%d) baneó %d días a %s (offline, db_id: %d): %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, days, get_name, id, reason);
					SendMessageToAdmins(-1, str);
				}

				db_free_result(is_banned);
			}
		}
		else SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");
	}
	else SendClientMessage(playerid, -1, "* ERROR: No se encontro la DB-ID.");
	db_free_result(Result);
	return 1;
}

CMD:rvs(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	RespawnGlobalUnoccupiedVehicles();
	SendClientMessage(playerid, -1, "* Todos los vehículos del servidor han sido respawneados.");

	SendCmdLogToAdmins(playerid, "rvs (Respawn Vehículos server)", params);
	return 1;
}

CMD:rve(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	RespawnAllUnoccupiedVehicles();
	SendClientMessage(playerid, -1, "* Todos los vehículos sin ocupar han sido re-spawneados.");

	SendCmdLogToAdmins(playerid, "rve (Respawn vehículos general)", params);
	return 1;
}

CMD:rv(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessage(playerid, -1, "No estás en un vehículo.");

	SetVehicleToRespawnEx(vehicleid);
	SendClientMessageEx(playerid, -1, "Vehículo (%d) re-spawneado.", vehicleid);
	return 1;
}

CMD:pm(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_player, message[128];
	if(sscanf(params, "us[128]", to_player, message)) return SendClientMessage(playerid, -1, "* Uso: /pm <player_id> <mensaje>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);

	SendClientMessageEx(playerid, -1, "* Mensaje enviado a %s (%d): %s", ACCOUNT_INFO[to_player][ac_NAME], to_player, message);

	PLAYER_TEMP[to_player][pt_ADMIN_PM_PID] = playerid;
	PLAYER_TEMP[to_player][pt_ADMIN_PM_AID] = ACCOUNT_INFO[playerid][ac_ID];
	PLAYER_TEMP[to_player][pt_ADMIN_PM_TIME] = gettime();
	SendClientMessageEx(to_player, -1, " SOPORTE SUPERLANDIA  dice:", message);

	SendCmdLogToAdmins(playerid, "pm", params);
	return 1;
}

CMD:barticulo(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;

	new ad_id;
	if(sscanf(params, "d", ad_id)) return SendClientMessage(playerid, -1, "* Uso: /barticulo <ID>");

	new DBResult:Result, DB_Query[160];
	format(DB_Query, sizeof DB_Query, "SELECT `ID` FROM `SHOP` WHERE `ID` = '%d';", ad_id);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result))
	{
		format(DB_Query, sizeof DB_Query, "DELETE FROM `SHOP` WHERE `ID` = '%d';", ad_id);
		db_query(Database, DB_Query);

		SendClientMessageEx(playerid, -1, "* Anuncio '%d' eliminado.", ad_id);
		SendCmdLogToAdmins(playerid, "barticulo", params);
	}
	else SendClientMessage(playerid, -1, "* ERROR: No se encontro la ID de ese anuncio.");
	db_free_result(Result);

	return 1;
}

CMD:sethora(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new hour, minute;
	if(sscanf(params, "dd", hour, minute)) return SendClientMessage(playerid, -1, "* Uso: /settime <hora> <minuto>");
	SERVER_TIME[0] = hour;
	SERVER_TIME[1] = minute;

	SendClientMessage(playerid, -1, "* El tiempo se ajustará cuando el reloj avance.");

	SendCmdLogToAdmins(playerid, "sethora", params);
	return 1;
}

CMD:setadmin(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 6 || IsPlayerAdmin(playerid)) return 0;

	new to_player, level;
	if(sscanf(params, "ud", to_player, level)) return SendClientMessage(playerid, -1, "* Uso: /setadmin <player_id> <rango>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");
	if(level < 0 || level >= sizeof ADMIN_LEVELS) return SendClientMessage(playerid, -1, "* ERROR: El rango no es válido.");
	if(level > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: No puedes dar este rango por ser un rango superior al tuyo.");

	new DB_Query[70];
	format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `ADMIN_LEVEL` = '%d' WHERE `ID` = '%d';", level, ACCOUNT_INFO[to_player][ac_ID]);
	db_query(Database, DB_Query);

	ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] = level;
	SendClientMessageEx(to_player, -1, "* Administrador %s cambió tu rango administrativo a: %s.", ACCOUNT_INFO[playerid][ac_NAME], ADMIN_LEVELS[level]);
	SendClientMessageEx(playerid, -1, "* El rango administrativo de %s (%d) ahora es %s.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ADMIN_LEVELS[level]);

	SendCmdLogToAdmins(playerid, "setadmin", params);
	return 1;
}
CMD:test1(playerid, params[])
{
    if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 6 || IsPlayerAdmin(playerid)) return 0;
    
 	SetPlayerPos(playerid, 2008.3550, -1028.8589, 34.3738);
	return 1;
}
CMD:ac(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	ShowDialog(playerid, DIALOG_ANTI_CHEAT);
	return 1;
}

CMD:ab(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	if(AntiBots == 1)
	{
		AntiBots = 0;
		SendClientMessage(playerid, -1, "Antibot desactivado");
	}
	else if(AntiBots == 0)
	{
	    AntiBots = 1;
	    SendClientMessage(playerid, -1, "Antibot activado");
	}
	return 1;
}

CMD:admac(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, -1, "* Uso: /admac <nivel>");
	ADMIN_LEVEL_AC_IMMUNITY = params[0];

	SendClientMessageEx(playerid, -1, "* Administradores de nivel %d o mayor no sera detectado por el anticheat.", ADMIN_LEVEL_AC_IMMUNITY);
	return 1;
}

CMD:setsed(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_player, Float:ammount;
	if(sscanf(params, "uf", to_player, ammount)) return SendClientMessage(playerid, -1, "* Uso: /setsed <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ammount < 0.0 || ammount > 100.0) return SendClientMessage(playerid, -1, "* ERROR: Cantidad no válida.");
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	CHARACTER_INFO[to_player][ch_THIRST] = ammount;
	SendClientMessageEx(playerid, -1, "* La hidratación de %s (%d) ahora es %.1f.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ammount);

	SendCmdLogToAdmins(playerid, "setsed", params);
	return 1;
}

CMD:sethambre(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_player, Float:ammount;
	if(sscanf(params, "uf", to_player, ammount)) return SendClientMessage(playerid, -1, "* Uso: /sethambre <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ammount < 0.0 || ammount > 100.0) return SendClientMessage(playerid, -1, "* ERROR: Cantidad no válida.");
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	CHARACTER_INFO[to_player][ch_HUNGRY] = ammount;
	SendClientMessageEx(playerid, -1, "* La alimentación de %s (%d) ahora es %.1f.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ammount);

	SendCmdLogToAdmins(playerid, "sethambre", params);
	return 1;
}

CMD:setgas(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new Float:val;
	if(sscanf(params, "f", val)) return SendClientMessage(playerid, -1, "* Uso: /setgas <valor>");
	if(val < 0.0) return SendClientMessage(playerid, -1, "* ERROR: Valor no válido.");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessage(playerid, -1, "* ERROR: No estás en un vehículo.");

	if(val + GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]) val = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = val;

	SendClientMessageEx(playerid, -1, "* La gasolina del vehículo (%d) ahora es %.1f.", vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS]);

	SendCmdLogToAdmins(playerid, "setgas", params);
	return 1;
}

CMD:reparar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessage(playerid, -1, "* ERROR: No estás en un vehículo.");

	RepairVehicleEx(vehicleid, playerid);
	SendClientMessageEx(playerid, -1, "* Vehículo (%d) reparado.", vehicleid);

	SendCmdLogToAdmins(playerid, "reparar", params);
	return 1;
}

CMD:sethealth(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_player, Float:ammount;
	if(sscanf(params, "uf", to_player, ammount)) return SendClientMessage(playerid, -1, "* Uso: /sethealth <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ammount < 0.0 || ammount > 100.0) return SendClientMessage(playerid, -1, "* ERROR: Valor no válido.");
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	SetPlayerHealthEx(to_player, ammount);
	SendClientMessageEx(playerid, -1, "* La vida de %s (%d) ahora es %.1f.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ammount);

	SendCmdLogToAdmins(playerid, "sethealth", params);
	return 1;
}

CMD:setarmour(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_player, Float:ammount;
	if(sscanf(params, "uf", to_player, ammount)) return SendClientMessage(playerid, -1, "* Uso: /setarmour <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ammount < 0.0 || ammount > 100.0) return SendClientMessage(playerid, -1, "* ERROR: Valor no válido.");
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	SetPlayerArmourEx(to_player, ammount);
	SendClientMessageEx(playerid, -1, "* El chaleco de %s (%d) ahora es %.1f.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ammount);

	SendCmdLogToAdmins(playerid, "setarmour", params);
	return 1;
}
CMD:recibir(playerid)
{
	if(recibioStats == 0)
	{
	ACCOUNT_INFO[playerid][ac_REP] = 1;
	ACCOUNT_INFO[playerid][ac_LEVEL] = 4;
	UpdateReputationTextDraws(playerid);
	SetPlayerSkillLevels(playerid);
	PLAYER_MISC[playerid][MISC_PIECES_WEAPON] = 1000;
	PLAYER_MISC[playerid][MISC_CANNABIS] = 650;
	PLAYER_MISC[playerid][MISC_CRACK] = 650;
	PLAYER_MISC[playerid][MISC_MEDICINE] = 650;
	recibioStats = 1;
	}
	else if(recibioStats == 1)
	{
	SendClientMessage(playerid, -1, "Ya recibiste stats :)");
	}
	return 1;
}
CMD:setlevel(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player, level;
	if(sscanf(params, "ud", to_player, level)) return SendClientMessage(playerid, -1, "* Uso: /setlevel <player_id> <nivel>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	KillTimer(PLAYER_TEMP[to_player][pt_TIMERS][2]);

	ACCOUNT_INFO[to_player][ac_REP] = 1;
	ACCOUNT_INFO[to_player][ac_LEVEL] = level;
	UpdateReputationTextDraws(to_player);
	SetPlayerSkillLevels(to_player);

	SendClientMessageEx(to_player, -1, "{00CCFF}¡Felicidades! {FFFFFF}Has subido al nivel %d.", ACCOUNT_INFO[to_player][ac_LEVEL]);
	SetPlayerScore(to_player, ACCOUNT_INFO[to_player][ac_LEVEL]);
	PlayerPlaySound(to_player, 1058, 0.0, 0.0, 0.0);

	ACCOUNT_INFO[to_player][ac_TIME_FOR_REP] = TIME_FOR_REP;
	PLAYER_TEMP[to_player][pt_TIME_PASSED_LAST_REP] = gettime() * 1000;

	KillTimer(PLAYER_TEMP[to_player][pt_TIMERS][2]);
	PLAYER_TEMP[to_player][pt_TIMERS][2] = SetTimerEx("AddPlayerReputation", ACCOUNT_INFO[to_player][ac_TIME_FOR_REP], false, "i", to_player);

	SendClientMessageEx(playerid, -1, "* El nivel de %s (%d) ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, ACCOUNT_INFO[to_player][ac_LEVEL]);

	SendCmdLogToAdmins(playerid, "setlevel", params);
	return 1;
}

/*CMD:darsapd(playerid, params[]);
{
	new to_player, level;
	if(sscanf(params, "ud", to_player, level)) return SendClientMessage(playerid, -1, "* Uso: /darsapd <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(PLAYER_WORKS[to_player][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}El jugador ya es de SAPD.");

	new DB_Query[256];
	format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_WORKS` SET `SET` = '1' WHERE `ID_USER` = '%d' AND `ID_WORK` = '9';", ACCOUNT_INFO[to_player][ac_ID]);
	db_query(Database, DB_Query);
	SendClientMessage(playerid, -1, "* Si le diste un rango SAPD a alguien que no era, usa {FFFF00}/policias {FFFFFF}y expulsalo por ahí.");
	return 1;
}

CMD:darrango(playerid, params[]);
{
	new to_player, exp;
	if(sscanf(params, "ud", to_player, exp)) return SendClientMessage(playerid, -1, "* Uso: /darrango <player_id> <nivel>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(!PLAYER_WORKS[to_player][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}El jugador no pertenece a SAPD.");

	new DB_Query[256];
	format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL` = '%d' WHERE `ID_USER` = '%d' AND `ID_WORK` = '9';", exp, ACCOUNT_INFO[to_player][ac_ID]);
	db_query(Database, DB_Query);

	PLAYER_SKILLS[to_player][9] = exp;
	return 1;
}*/

CMD:setwork(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player, work, set;
	if(sscanf(params, "udd", to_player, work, set)) return SendClientMessage(playerid, -1, "* Uso: /setwork <player_id> <work> <set>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	if(work < 0 || work >= sizeof work_info) return SendClientMessage(playerid, -1, "* ERROR: El trabajo no es válido, para verlos usa /works.");

	if(PLAYER_TEMP[to_player][pt_WORKING_IN]) return SendClientMessage(playerid, -1, "* ERROR: No se puede cambiar el trabajo del jugador porque está de servicio en su trabajo.");


	new DB_Query[256];
	format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_WORKS` SET `SET` = '%d' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", set, ACCOUNT_INFO[to_player][ac_ID], work);
	db_query(Database, DB_Query);

	PLAYER_WORKS[to_player][work] = set;
	if(!set) SendClientMessageEx(to_player, -1, "{FFFFFF}* Has abandonado tu trabajo de %s.", work_info[work][work_info_NAME]);
	else
	{
		SendClientMessageEx(to_player, -1, "{00FF00}¡Felicidades! {FFFFFF}te han contratado de {00FF00}%s.", work_info[work][work_info_NAME]);
		SendClientMessage(to_player, -1, "Conoce tu trabajo con {FFFF00}/ayuda trabajos {FFFFFF}y revisa lo que tienes que hacer.");
	}

	SendClientMessageEx(playerid, -1, "* El trabajo %s de %s (%d) es: '%d'.", work_info[ work ][work_info_NAME], ACCOUNT_INFO[to_player][ac_NAME], to_player, set);

	SendCmdLogToAdmins(playerid, "setwork", params);
	return 1;
}

CMD:setworkexp(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player, work, exp;
	if(sscanf(params, "udd", to_player, work, exp)) return SendClientMessage(playerid, -1, "* Uso: /setworkexp <player_id> <work, para verlos /works> <exp>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	if(work < 0 || work >= sizeof work_info) return SendClientMessage(playerid, -1, "* ERROR: El trabajo no es válido, para verlos usa /works.");

	new DB_Query[256];
	format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL` = '%d' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", exp, ACCOUNT_INFO[to_player][ac_ID], work);
	db_query(Database, DB_Query);

	PLAYER_SKILLS[to_player][ work ] = exp;

	SendClientMessageEx(playerid, -1, "* La experiencia de %s (%d) en el trabajo '%s' ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, work_info[ work ][work_info_NAME], exp);

	SendCmdLogToAdmins(playerid, "setworkexp", params);
	return 1;
}

CMD:disarm(playerid,params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso: /disarm <ammount>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	ResetPlayerWeapons(to_player);
	SendClientMessage(playerid, -1, "* Usuario desarmado.");

	SendCmdLogToAdmins(playerid, "disarm", params);
	return 1;
}

CMD:giveweapon(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;
	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, -1, "* Uso: /giveweapon <id> <arma>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	GivePlayerWeaponEx(to_player, value, 9999);
	SendClientMessageEx(playerid, -1, " Diste a {bfbfbf}%s{edcf2a} el arma %d.", ACCOUNT_INFO[to_player][ac_NAME], value);
	SendCmdLogToAdmins(playerid, "giveweapon", params);
	return 1;
}

CMD:setrepuestos(playerid, params[])
{

	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;
	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, -1, "* Uso: /setrepuestos <player_id> <ammount>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	PLAYER_MISC[to_player][MISC_MECHANIC_PIECES] = value;
	SendClientMessageEx(playerid, -1, "* Repuestos de %s (%d) ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);

	SendCmdLogToAdmins(playerid, "setrepuestos", params);
	return 1;
}
CMD:setsemillamaria(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, -1, "* Uso: /setsemillamaria <player_id> <ammount>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	PLAYER_MISC[to_player][MISC_SEED_CANNABIS] = value;
	SendClientMessageEx(playerid, -1, "* Semillas de maria de %s (%d) ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);

	SendCmdLogToAdmins(playerid, "setsemillamaria", params);
	return 1;
}
CMD:setmaria(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, -1, "* Uso: /setmaria <player_id> <ammount>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	PLAYER_MISC[to_player][MISC_CANNABIS] = value;
	SendClientMessageEx(playerid, -1, "* Maria de %s (%d) ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);

	SendCmdLogToAdmins(playerid, "setmaria", params);
	return 1;
}

CMD:setcrack(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, -1, "* Uso: /setcrack <player_id> <ammount>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	PLAYER_MISC[to_player][MISC_CRACK] = value;
	SendClientMessageEx(playerid, -1, "* Crack de %s (%d) ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);

	SendCmdLogToAdmins(playerid, "setcrack", params);
	return 1;
}

CMD:setsemillascrack(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, -1, "* Uso: /setsemillascrack <player_id> <ammount>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	PLAYER_MISC[to_player][MISC_SEED_CRACK] = value;
	SendClientMessageEx(playerid, -1, "* Semillas de crack de %s (%d) ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);

	SendCmdLogToAdmins(playerid, "setsemillascrack", params);
	return 1;
}

CMD:setmedicamentos(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, -1, "* Uso: /setmedicamentos <player_id> <ammount>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	PLAYER_MISC[to_player][MISC_MEDICINE] = value;
	SendClientMessageEx(playerid, -1, "* Medicamentos de %s (%d) ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);

	SendCmdLogToAdmins(playerid, "setmedicamentos", params);
	return 1;
}

CMD:setsemillasmedi(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, -1, "* Uso: /setsemillasmedi <player_id> <ammount>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	PLAYER_MISC[to_player][MISC_SEED_MEDICINE] = value;
	SendClientMessageEx(playerid, -1, "* Semillas de medi de %s (%d) ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);

	SendCmdLogToAdmins(playerid, "setsemillasmedi", params);
	return 1;
}

CMD:setpiezas(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, -1, "* Uso: /setpiezas <player_id> <ammount>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	PLAYER_MISC[to_player][MISC_PIECES_WEAPON] = value;
	SendClientMessageEx(playerid, -1, "* Piezas de %s (%d) ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);

	SendCmdLogToAdmins(playerid, "setpiezas", params);
	return 1;
}

CMD:setmadera(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, -1, "* Uso: /setmadera <player_id> <ammount>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	PLAYER_MISC[to_player][MISC_WOOD] = value;
	SendClientMessageEx(playerid, -1, "* Madera de %s (%d) ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);

	SendCmdLogToAdmins(playerid, "setmadera", params);
	return 1;
}

CMD:setcash(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, -1, "* Uso: /setcash <player_id> <ammount>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	SetPlayerCash(to_player, value);
	SendClientMessageEx(playerid, -1, "* El dinero de %s (%d) ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);

	SendCmdLogToAdmins(playerid, "setcash", params);
	return 1;
}

CMD:givecash(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, -1, "* Uso: /givecash <player_id> <ammount>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	GivePlayerCash(to_player, value);
	SendClientMessageEx(playerid, -1, "* El jugador %s (%d) ha recibido %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);

	SendCmdLogToAdmins(playerid, "givecash", params);
	return 1;
}

CMD:givepiezas(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, -1, "* Uso: /givepiezas <player_id> <piezas>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);

	PLAYER_MISC[playerid][MISC_PIECES_WEAPON] += value;
	return 1;
}

CMD:givemadera(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, -1, "* Uso: /givemadera <player_id> <madera>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);

	PLAYER_MISC[playerid][MISC_WOOD] += value;
	return 1;
}

CMD:setbmlevel(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendClientMessage(playerid, -1, "* Uso: /setbmlevel <player_id> <level>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	if(ACCOUNT_INFO[to_player][ac_ADMIN_LEVEL] > ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL]) return SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");

	CHARACTER_INFO[to_player][ch_BLACK_MARKET_LEVEL] = value;
	SendClientMessageEx(playerid, -1, "* El nivel 'black_market' de %s (%d) ahora es %d.", ACCOUNT_INFO[to_player][ac_NAME], to_player, value);

	SendCmdLogToAdmins(playerid, "setbmlevel", params);
	return 1;
}

CMD:alert(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	SendClientMessageToAll(0x7ddde8FF, "Se empieza a escuchar en los altavoces de emergencia de la ciudad, una voz");
	SendClientMessageToAll(0xFFFF00FF, " GOBIERNO dice{ffff96}: El ayuntamiento dará un mensaje, atención.");
	return 1;
}

CMD:gsay(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;

	if(isnull(params)) return SendClientMessage(playerid, -1, "* Uso: /gsay <message>");

	new str[145]; format(str, 145, " GOBIERNO dice{ffff96}: %s", params);
	SendClientMessageToAll(0xFFFF00FF, str);

	SendCmdLogToAdmins(playerid, "gsay", params);
	return 1;
}

CMD:asay(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;

	if(isnull(params)) return SendClientMessage(playerid, -1, "* Uso: /asay <message>");

	new str[145]; format(str, 145, " Admin %s dice{e5cb62}: %s", ACCOUNT_INFO[playerid][ac_NAME], params);
	SendClientMessageToAll(0xa0861eFF, str);

	SendCmdLogToAdmins(playerid, "asay", params);
	return 1;
}

CMD:spos(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new Float:p[4], interior, vw;
	if(sscanf(params, "p<,>ffffdd", p[0], p[1], p[2], p[3], interior, vw)) return SendClientMessage(playerid, -1, "* Uso: /spos [X], [Y], [Z], [ANGLE], [INTERIOR], [VIRTUAL WORLD]");

	SetPlayerPosEx(playerid, p[0], p[1], p[2], p[3], interior, vw);
	return 1;
}

CMD:setlluvia(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new weather;
	if(sscanf(params, "d", weather)) return SendClientMessage(playerid, -1, "* Uso: /setweather <weatherid>");

	SERVER_WEATHER = weather;
	SendClientMessage(playerid, -1, "* El clima se ajustará cuando el reloj avance.");

	SendCmdLogToAdmins(playerid, "setlluvia", params);
	return 1;
}

CMD:vtest(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new modelid, color1, color2;
	if(sscanf(params, "ddd", modelid, color1, color2)) return SendClientMessage(playerid, -1, "* Uso: /vtest <modelid> <color 1> <color 2>");

	new Float:p[4];
	GetPlayerPos(playerid, p[0], p[1], p[2]);
	GetPlayerFacingAngle(playerid, p[3]);

	new vid = AddTestVehicle(false, modelid, p[0], p[1], p[2], p[3], color1, color2);
	PutPlayerInVehicleEx(playerid, vid, 0);
	return 1;
}

CMD:dv(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendClientMessage(playerid, -1, "* Error: no estás en ningún vehículo de prueba.");
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_TEST) return SendClientMessage(playerid, -1, "* Error: no estás en ningún vehículo de prueba.");

	DestroyVehicleEx(vehicleid);
	SendClientMessage(playerid, -1, "Vehículo de prueba destruido.");
	return 1;
}

CMD:dvp(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;
	new vehicleid = GetPlayerVehicleID(playerid);
	DestroyVehicleEx(vehicleid);
	SendClientMessage(playerid, -1, "Vehículo personal destruido, para respawnearlo usa /rve.");
	return 1;
}


CMD:restart(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	db_query(Database, "UPDATE `CUENTA` SET `CONNECTED` = '0', PLAYERID = '-1';");

	SendRconCommand("gmx");
	return 1;
}

CMD:pos(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;

	new Float:pos[4];
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vid = GetPlayerVehicleID(playerid);
		GetVehiclePos(vid, pos[0], pos[1], pos[2]);
		GetVehicleZAngle(vid, pos[3]);
		printf("%d, %f, %f, %f, %f //%s", GetVehicleModel(vid), pos[0], pos[1], pos[2], pos[3], params);
	}
	else
	{
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		GetPlayerFacingAngle(playerid, pos[3]);
		printf("%f, %f, %f, %f, %d //%s", pos[0], pos[1], pos[2], pos[3], GetPlayerInterior(playerid), params);
	}
	return 1;
}

CMD:setname(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player, new_name[24];
	if(sscanf(params, "us[24]", to_player, new_name)) return SendClientMessage(playerid, -1, "* Uso: /setname <player_id> <nuevo nombre>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);
	//if(!IsValidName(new_name) || strfind( new_name, "_", true) == -1) return SendClientMessageEx(playerid, -1, "* ERROR: El nombre '%s' no cumple con el formato Nombre_Apellido.", new_name);

	new DBResult:Result, DB_Query[128], bool:used;
	format(DB_Query, sizeof DB_Query, "SELECT `ID` FROM `CUENTA` WHERE `NAME` = '%q';", new_name);
	Result = db_query(Database, DB_Query);
	if(db_num_rows(Result)) used = true;
	db_free_result(Result);
	if(used) return SendClientMessageEx(playerid, -1, "* ERROR: El nombre '%s' está en uso.", new_name);

	format(PLAYER_TEMP[to_player][pt_NAME], 24, "%s", new_name);
	format(ACCOUNT_INFO[to_player][ac_NAME], 24, "%s", new_name);
	PLAYER_TEMP[to_player][pt_RP_NAME] = RP_GetPlayerName(to_player);
	SetPlayerName(to_player, new_name);

	format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `NAME` = '%q' WHERE `ID` = '%d';", new_name, ACCOUNT_INFO[to_player][ac_ID]);
	db_query(Database, DB_Query);

	for(new i = 0; i != MAX_PROPERTIES; i ++)
	{
		if(!PROPERTY_INFO[i][property_VALID]) continue;
		if(PROPERTY_INFO[i][property_OWNER_ID] != ACCOUNT_INFO[to_player][ac_ID]) continue;

		new label_str[256];
		format
		(
			label_str,
			sizeof label_str,
			"\
				{FFFFFF}Dirección {00FF00}%d\n\
				{FFFFFF}Propietario: {00CCFF}%s\n\
				{FFFFFF}Presiona {00CCFF}N {FFFFFF}o usa {FFFF00}/entrar{FFFFFF}.\
			", PROPERTY_INFO[i][property_ID], ACCOUNT_INFO[to_player][ac_NAME]
		);
		UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFAA, label_str);
	}

	SendClientMessageEx(to_player, -1, "{FFFFFF}Tu nombre ha sido cambiado a '%s'", new_name);
	SendClientMessageEx(playerid, -1, "El nombre del jugador ha sido cambiado a '%s'", new_name);

	SendCmdLogToAdmins(playerid, "setname", params);
	return 1;
}

CMD:exproperty(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new id_property;
	if(sscanf(params, "d", id_property)) return SendClientMessage(playerid, -1, "* Uso: /exproperty <id>");
	if(id_property <= 0) return SendClientMessage(playerid, -1, "* Uso: /exproperty < id > 0 >");

	new index = GetPropertyIndexByID(id_property);
	if(index == -1) return SendClientMessage(playerid, -1, "* ERROR: PROPIEDAD ID no encontrada.");

	if(!PROPERTY_INFO[index][property_SOLD]) return SendClientMessage(playerid, -1, "* ERROR: Esta propiedad ya está en venta.");


	PROPERTY_INFO[ index ][property_SOLD] = false;
	PROPERTY_INFO[ index ][property_CREW] = false;
	PROPERTY_INFO[ index ][property_OWNER_ID] = 0;
	PROPERTY_INFO[ index ][property_CREW_ID] = 0;
	format(PROPERTY_INFO[ index ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ index ][property_ID]);

	new label_str[256], info[3], type_house[24];
	if(PROPERTY_INFO[index][property_EXTRA] == 0) type_house = "Casa en venta";
	if(PROPERTY_INFO[index][property_EXTRA] == 2) type_house = "Garaje en venta";
	if(PROPERTY_INFO[index][property_EXTRA] == 3) type_house = "Oficina en venta";
	if(PROPERTY_INFO[index][property_EXTRA] == 4) type_house = "Negocio en venta";
	format
	(
		label_str,
		sizeof label_str,
		"\
		    {00FF00}%s\n\n\
			{FFFFFF}Dirección: {00FF00}%d\n\
			{FFFFFF}Precio: {41f48f}$%s\n\
			{FFFFFF}Nivel necesario: {00FF00}%d\n\
			{FFFFFF}Usa {FFFF00}/ayuda propiedades {FFFFFF}para ver como comprarla.\
		",type_house ,PROPERTY_INFO[ index ][property_ID], number_format_thousand(PROPERTY_INFO[ index ][property_PRICE]), PROPERTY_INFO[ index ][property_LEVEL]
	);
	UpdateDynamic3DTextLabelText(PROPERTY_INFO[ index ][property_EXT_LABEL_ID], 0xFFFFFFAA, label_str);

	DestroyDynamicPickup(PROPERTY_INFO[ index ][property_EXT_PICKUP_ID]);
	PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;

    if(PROPERTY_INFO[index][property_EXTRA] == 0) PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], 0, PROPERTY_INFO[ index ][property_EXT_INTERIOR]);
    if(PROPERTY_INFO[index][property_EXTRA] == 2) PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1272, 1, PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], 0, PROPERTY_INFO[ index ][property_EXT_INTERIOR]);
    if(PROPERTY_INFO[index][property_EXTRA] == 4) PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = CreateDynamicPickup(19524, 1, PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], 0, PROPERTY_INFO[ index ][property_EXT_INTERIOR]);
	info[0] = PICKUP_TYPE_PROPERTY;
	info[1] = index; // Index
	info[2] = 2; // Pickup Exterior
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ index ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);


	new DB_Query[350];
	format(DB_Query, sizeof(DB_Query), "DELETE FROM `PROPERTY_OWNER` WHERE `ID_PROPERTY` = '%d';", PROPERTY_INFO[ index ][property_ID]);
	db_query(Database, DB_Query);

	format(DB_Query, sizeof(DB_Query), "DELETE FROM `PROPERTY_TERRITORY` WHERE `ID_PROPERTY` = '%d';", PROPERTY_INFO[ index ][property_ID]);
	db_query(Database, DB_Query);

	SendClientMessageEx(playerid, -1, "* Propiedad (%d) expropiada.", PROPERTY_INFO[ index ][property_ID]);

	SendCmdLogToAdmins(playerid, "exproperty", params);
	return 1;
}

CMD:gotoproperty(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new int_type;
	if(sscanf(params, "d", int_type)) return SendClientMessage(playerid, -1, "* Uso: /gotoproperty <interior>");
	if(int_type < 0 || int_type >= sizeof PROPERTY_INTERIORS) return SendClientMessageEx(playerid, -1, "* Error, rango de interior: 0-%d", sizeof(PROPERTY_INTERIORS) - 1);

	SetPlayerPosEx(playerid, PROPERTY_INTERIORS[int_type][property_INT_X], PROPERTY_INTERIORS[int_type][property_INT_Y], PROPERTY_INTERIORS[int_type][property_INT_Z], PROPERTY_INTERIORS[int_type][property_INT_ANGLE], PROPERTY_INTERIORS[int_type][property_INT_INTERIOR], 0, false, true);
	return 1;
}

CMD:setpass(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_account, new_pass[MAX_PASS_LENGTH + 1];
	if(sscanf(params, "ds[19]", to_account, new_pass)) return SendClientMessage(playerid, -1, "* Uso: /setpass <DB-ID> <pass>");

	new DBResult:Result, DB_Query[160];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME`, `CONNECTED`, `PLAYERID`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ID` = '%d';", to_account);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result))
	{
		new id, get_name[24], connected, player_id, admin_level;

		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");
		admin_level = db_get_field_assoc_int(Result, "ADMIN_LEVEL");

		if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= admin_level)
		{
			if(connected) SendClientMessageEx(playerid, -1, "* JUGADOR '%s' DB-ID '%d' conectado, player_id: %d, no es necario cambiar la contraseña.", get_name, id, player_id);
			else
			{
				new salt[16], salt_ex[16], pass_ex[64 + 1];
				getRandomSalt(salt);
				format(salt_ex, 16, "%s", salt);

				SHA256_PassHash(new_pass, salt_ex, pass_ex, 64 + 1);

				format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SALT` = '%q', `PASS` = '%q' WHERE `ID` = '%d';", salt_ex, pass_ex, id);
				db_query(Database, DB_Query);

				SendClientMessageEx(playerid, -1, "* La contraseña de '%s' ahora es: %s", get_name, new_pass);
			}
		}
		else SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");
	}
	else SendClientMessage(playerid, -1, "* ERROR: No se encontro la DB-ID.");
	db_free_result(Result);
	return 1;
}

CMD:delete(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_account;
	if(sscanf(params, "d", to_account)) return SendClientMessage(playerid, -1, "* Uso: /delete <DB-ID>");

	new DBResult:Result, DB_Query[160];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME`, `CONNECTED`, `PLAYERID`, `ADMIN_LEVEL` FROM `CUENTA` WHERE `ID` = '%d';", to_account);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result))
	{
		new id, get_name[24], connected, player_id, admin_level;

		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");
		admin_level = db_get_field_assoc_int(Result, "ADMIN_LEVEL");

		if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] >= admin_level)
		{
			if(connected) SendClientMessageEx(playerid, -1, "* JUGADOR '%s' DB-ID '%d' conectado para eliminarlo debe estar desconectado, utilice kick ,su player_id: %d.", get_name, id, player_id);
			else
			{
				format(DB_Query, sizeof DB_Query, "DELETE FROM `CUENTA` WHERE `ID` = '%d';", id);
				db_query(Database, DB_Query);

				new ex_properties;
				for(new index = 0; index != MAX_PROPERTIES; index ++)
				{
					if(!PROPERTY_INFO[index][property_VALID]) continue;
					if(!PROPERTY_INFO[index][property_SOLD]) continue;
					if(PROPERTY_INFO[index][property_OWNER_ID] != id) continue;

					PROPERTY_INFO[ index ][property_SOLD] = false;
					PROPERTY_INFO[ index ][property_OWNER_ID] = 0;
					format(PROPERTY_INFO[ index ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ index ][property_ID]);

					new label_str[256], info[3], type_house[24];
					if(PROPERTY_INFO[index][property_EXTRA] == 0) type_house = "Casa en venta";
					if(PROPERTY_INFO[index][property_EXTRA] == 2) type_house = "Garaje en venta";
					if(PROPERTY_INFO[index][property_EXTRA] == 3) type_house = "Oficina en venta";
					if(PROPERTY_INFO[index][property_EXTRA] == 4) type_house = "Negocio en venta";
					format
					(
						label_str,
						sizeof label_str,
						"\
						    {00FF00}%s\n\n\
							{FFFFFF}Dirección: {00FF00}%d\n\
							{FFFFFF}Precio: {41f48f}$%s\n\
							{FFFFFF}Nivel necesario: {00FF00}%d\n\
							{FFFFFF}Usa {FFFF00}/ayuda propiedades {FFFFFF}para ver como comprarla.\
						", type_house, PROPERTY_INFO[ index ][property_ID], number_format_thousand(PROPERTY_INFO[ index ][property_PRICE]), PROPERTY_INFO[ index ][property_LEVEL]
					);
					UpdateDynamic3DTextLabelText(PROPERTY_INFO[ index ][property_EXT_LABEL_ID], 0xFFFFFFAA, label_str);

					DestroyDynamicPickup(PROPERTY_INFO[ index ][property_EXT_PICKUP_ID]);
					PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;

				    if(PROPERTY_INFO[index][property_EXTRA] == 0) PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], 0, PROPERTY_INFO[ index ][property_EXT_INTERIOR]);
				    if(PROPERTY_INFO[index][property_EXTRA] == 2) PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1272, 1, PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], 0, PROPERTY_INFO[ index ][property_EXT_INTERIOR]);
				    if(PROPERTY_INFO[index][property_EXTRA] == 4) PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = CreateDynamicPickup(19524, 1, PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], 0, PROPERTY_INFO[ index ][property_EXT_INTERIOR]);
					info[0] = PICKUP_TYPE_PROPERTY;
					info[1] = index; // Index
					info[2] = 2; // Pickup Exterior
					Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ index ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

					ex_properties ++;
				}


				SendClientMessageEx(playerid, -1, "* CUENTA (Nombre '%s' DB-ID: '%d') ha sido eliminada.", get_name, id);
				if(ex_properties > 0) SendClientMessageEx(playerid, -1, "Se han expropiado '%d' propiedades del jugador eliminado.", ex_properties);

				new str[145]; format(str, 145, "{ff782b}* Administrador {FFFFFF}%s (%d) ha eliminado el usuario '%s'", ACCOUNT_INFO[playerid][ac_NAME], playerid, get_name);
				SendMessageToAdmins(-1, str);
			}
		}
		else SendClientMessage(playerid, -1, "* ERROR: El rango administrativo de este jugador es superior al tuyo.");
	}
	else SendClientMessage(playerid, -1, "* ERROR: No se encontro la DB-ID.");
	db_free_result(Result);

	return 1;
}

/* PROPERTY CONSTRUCTOR */

CMD:rproperty(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new id_property;
	if(sscanf(params, "d", id_property)) return SendClientMessage(playerid, -1, "* Uso: /rproperty <id>");
	if(id_property <= 0) return SendClientMessage(playerid, -1, "* Uso: /rproperty < id > 0 >");

	new index = GetPropertyIndexByID(id_property);
	if(index == -1) return SendClientMessage(playerid, -1, "* ERROR: PROPIEDAD ID no encontrada.");

	new DB_Query[70];
	format(DB_Query, sizeof DB_Query, "DELETE FROM `PROPERTY` WHERE `ID` = '%d';", PROPERTY_INFO[index][property_ID]);
	db_query(Database, DB_Query);

	if(IsValidDynamic3DTextLabel(PROPERTY_INFO[index][property_EXT_LABEL_ID])) DestroyDynamic3DTextLabel(PROPERTY_INFO[index][property_EXT_LABEL_ID]);
	if(IsValidDynamic3DTextLabel(PROPERTY_INFO[index][property_INT_LABEL_ID])) DestroyDynamic3DTextLabel(PROPERTY_INFO[index][property_INT_LABEL_ID]);
	if(IsValidDynamicPickup(PROPERTY_INFO[index][property_EXT_PICKUP_ID])) DestroyDynamicPickup(PROPERTY_INFO[index][property_EXT_PICKUP_ID]);
	if(IsValidDynamicPickup(PROPERTY_INFO[index][property_INT_PICKUP_ID])) DestroyDynamicPickup(PROPERTY_INFO[index][property_INT_PICKUP_ID]);
	new reset[Property_Info_Enum]; PROPERTY_INFO[index] = reset;

	TOTAL_PROPERTIES_LOADED --;

	SendClientMessageEx(playerid, -1, "* PROPIEDAD %d ELIMINADA.", id_property);
	SendClientMessageEx(playerid, -1, "* PROPIEDADES: %d/%d", TOTAL_PROPERTIES_LOADED, MAX_PROPERTIES);

	SendCmdLogToAdmins(playerid, "rproperty", params);
	return 1;
}

CMD:cproperty(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	if(TOTAL_PROPERTIES_LOADED >= MAX_PROPERTIES) return SendClientMessage(playerid, -1, "* ERROR: Límite alcanzado.");

	GetPlayerPos(playerid, PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_X], PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Y], PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Z]);
	GetPlayerFacingAngle(playerid, PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_ANG]);
	PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_INT] = GetPlayerInterior(playerid);

	PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED] = true;
	for(new i = 0; i != 6; i ++) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][i]);

	UpdatePlayerPropertyContructor(playerid);
	return 1;
}

SendMessageToAdmins(color, message[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
	    if(IsPlayerConnected(i) && PLAYER_TEMP[i][pt_GAME_STATE] != GAME_STATE_CONNECTED)
	    {
	        if(IsPlayerAdmin(i) || ACCOUNT_INFO[i][ac_ADMIN_LEVEL] > 0 )
	        {
	            SendClientMessage(i, color, message);
	        }
	    }
	}
	return 1;
}

SendCmdLogToAdmins(playerid, cmdtext[], params[])
{
	new message[145];
	if(isnull(params)) format(message, sizeof message, "[ADM] %s(%d) usa el comando {FFFFFF}/%s", ACCOUNT_INFO[playerid][ac_NAME], playerid, cmdtext);
	else format(message, sizeof message, "[ADM] %s(%d) a usa el comando {FFFFFF}/%s %s", ACCOUNT_INFO[playerid][ac_NAME], playerid, cmdtext, params);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(IsPlayerAdmin(i) || ACCOUNT_INFO[i][ac_ADMIN_LEVEL] >= ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] )
	        {
	            if(PLAYER_TEMP[i][pt_SEE_ACMD_LOG]) SendClientMessage(i, 0x00FF00FF, message);
	        }
	    }
	}
	return 1;
}

SendMessageToAdminsAC(color, message[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(IsPlayerAdmin(i) || ACCOUNT_INFO[i][ac_ADMIN_LEVEL] > 1 )
	        {
	            if(PLAYER_TEMP[i][pt_SEE_AC_LOG]) SendClientMessage(i, color, message);
	        }
	    }
	}
	return 1;
}

RespawnAllUnoccupiedVehicles()
{
	for(new i = 0; i != MAX_VEHICLES; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_OCCUPIED]) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_TEST)
		{
			DestroyVehicleEx(i);
			continue;
		}

		SetVehicleToRespawnEx(i);
	}
	return 1;
}

RespawnGlobalUnoccupiedVehicles()
{
	for(new i = 0; i != MAX_VEHICLES; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_PERSONAL) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_OCCUPIED]) continue;

		SetVehicleToRespawnEx(i);
	}
	return 1;
}

/*forward RespawnSellVehicles();
public RespawnSellVehicles()
{
	for(new i = 0; i != MAX_VEHICLES; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_PERSONAL) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_TEST) continue;
		SetVehicleToRespawnEx(i);
	}
	return 1;
}*/

forward RespawnCrashVehicles();
public RespawnCrashVehicles()
{
	for(new i = 0; i != MAX_VEHICLES; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_TEST) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_SELL) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_OCCUPIED]) continue;
		SetVehicleToRespawnEx(i);
	}
	return 1;
}





CMD:kill(playerid, params[])
{
	SetPlayerHealthEx(playerid, 0.0);
	return 1;
}

GetNumberOfPlayersOnThisIP(test_ip[])
{
	new against_ip[16], ip_count = 0;
	for(new x = 0, j = GetPlayerPoolSize(); x <= j; x++)
	{
		if(IsPlayerConnected(x))
		{
		    GetPlayerIp(x, against_ip, 16);
		    if(!strcmp(against_ip, test_ip)) ip_count++;
		}
	}
	return ip_count;
}

getRandomSalt(salt[], length = sizeof salt)
{
    for(new i = 0; i != length; i ++)
	{
		salt[i] = random(2) ? (random(26) + (random(2) ? 'a' : 'A')) : (random(10) + '0');
	}
	return true;
}

GetTickDiff(newtick, oldtick)
{
	if (oldtick < 0 && newtick >= 0) {
		return newtick - oldtick;
	} else if (oldtick >= 0 && newtick < 0 || oldtick > newtick) {
		return (cellmax - oldtick + 1) - (cellmin - newtick);
	}
	return newtick - oldtick;
}

GetPlayerSpeed(vehicleid)
{
	new Float:xPos[3];
	GetPlayerVelocity(vehicleid, xPos[0], xPos[1], xPos[2]);
	return floatround(floatsqroot(xPos[0] * xPos[0] + xPos[1] * xPos[1] + xPos[2] * xPos[2]) * 170.00);
}

ShowPlayerShop(playerid)
{
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][0]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][1]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][2]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][3]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][4]);

	PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS] = false;
	PLAYER_TEMP[playerid][pt_SHOP] = true;
	PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;

	PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 6;
	PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;

	UpdatePlayerShop(playerid);
	SelectTextDrawEx(playerid, 0x00a39bFF);
	return 1;
}

UpdatePlayerShop(playerid)
{
	switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
	{
		case PLAYER_SHOP_STATE_ALL:
		{
			if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
			{
				PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
			}
			TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);

			for(new i = 0; i != 6; i ++)
			{
				PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i] = 0;
				TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
				if(i <= 4) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
			}

			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], "+_Publicar_anuncio");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], "-_Mis_anuncios");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "Cerrar");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "Siguiente");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], "Anterior");

			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4]);


			DestroyArticleShopTextDraws(playerid);

			new DBResult:Result, DB_Query[128], articles, td_str[32];
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `SHOP` ORDER BY `DATE` DESC LIMIT %d, %d;", PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);

			for(new i; i < db_num_rows(Result); i++ )
			{
				new Price, Modelid, Float:rX, Float:rY, Float:rZ, Float:Zoom, vColor1, vColor2;

				PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][articles] = db_get_field_assoc_int(Result, "ID");
				Price = db_get_field_assoc_int(Result, "PRICE");
				Modelid = db_get_field_assoc_int(Result, "MODELID");
				rX = db_get_field_assoc_float(Result, "RX");
				rY = db_get_field_assoc_float(Result, "RY");
				rZ = db_get_field_assoc_float(Result, "RZ");
				Zoom = db_get_field_assoc_float(Result, "ZOOM");
				vColor1 = db_get_field_assoc_int(Result, "VCOL1");
				vColor2 = db_get_field_assoc_int(Result, "VCOL2");

				new Float:Td_Pos[2];

				switch(articles)
				{
					case 0: Td_Pos = Float:{212.000000, 152.000000};
					case 1: Td_Pos = Float:{289.000000, 152.000000};
					case 2: Td_Pos = Float:{366.000000, 152.000000};
					case 3: Td_Pos = Float:{212.000000, 229.000000};
					case 4: Td_Pos = Float:{289.000000, 229.000000};
					case 5: Td_Pos = Float:{366.000000, 229.000000};
				}

				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles] = CreatePlayerTextDraw(playerid, Td_Pos[0], Td_Pos[1], "");
				PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 62.000000, 55.000000);
				PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 1);
				PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], -1);
				PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], -1263225636);
				PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 5);
				PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], Modelid);
				PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], rX, rY, rZ, Zoom);
				PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], vColor1, vColor2);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles]);

				format(td_str, sizeof td_str, "$%s", number_format_thousand(Price));
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles] = CreatePlayerTextDraw(playerid, Td_Pos[0] + 31.0, Td_Pos[1] + 55.0, td_str);
				PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0.229333, 0.957037);
				PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 2);
				PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], -1);
				PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0);
				PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0);
				PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 255);
				PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 1);
				PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 1);
				PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles]);

				TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][articles]);

				articles ++;
				db_next_row(Result);
			}
			db_free_result(Result);

			new total_pages = GetDatabasePages("SELECT COUNT() FROM `SHOP`;", PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			format(td_str, sizeof td_str, "-_%d/%d_-", PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] + 1, total_pages);

			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], td_str);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);
			return 1;
		}
		case PLAYER_SHOP_STATE_MY_ADS:
		{
			if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
			{
				PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
			}
			TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);

			for(new i = 0; i != 6; i ++)
			{
				PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i] = 0;
				TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
				if(i <= 4) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
			}

			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], "_");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], "_");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "Atrs");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "Siguiente");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], "Anterior");

			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4]);


			DestroyArticleShopTextDraws(playerid);

			new DBResult:Result, DB_Query[160], articles, td_str[32];
			format(DB_Query, sizeof DB_Query, "SELECT * FROM `SHOP` WHERE `ID_USER` = '%d' ORDER BY `DATE` DESC LIMIT %d, %d;", ACCOUNT_INFO[playerid][ac_ID], PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			Result = db_query(Database, DB_Query);

			for(new i; i < db_num_rows(Result); i++ )
			{
				new Price, Modelid, Float:rX, Float:rY, Float:rZ, Float:Zoom, vColor1, vColor2;

				PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][articles] = db_get_field_assoc_int(Result, "ID");
				Price = db_get_field_assoc_int(Result, "PRICE");
				Modelid = db_get_field_assoc_int(Result, "MODELID");
				rX = db_get_field_assoc_float(Result, "RX");
				rY = db_get_field_assoc_float(Result, "RY");
				rZ = db_get_field_assoc_float(Result, "RZ");
				Zoom = db_get_field_assoc_float(Result, "ZOOM");
				vColor1 = db_get_field_assoc_int(Result, "VCOL1");
				vColor2 = db_get_field_assoc_int(Result, "VCOL2");

				new Float:Td_Pos[2];

				switch(articles)
				{
					case 0: Td_Pos = Float:{212.000000, 152.000000};
					case 1: Td_Pos = Float:{289.000000, 152.000000};
					case 2: Td_Pos = Float:{366.000000, 152.000000};
					case 3: Td_Pos = Float:{212.000000, 229.000000};
					case 4: Td_Pos = Float:{289.000000, 229.000000};
					case 5: Td_Pos = Float:{366.000000, 229.000000};
				}

				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles] = CreatePlayerTextDraw(playerid, Td_Pos[0], Td_Pos[1], "");
				PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 62.000000, 55.000000);
				PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 1);
				PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], -1);
				PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], -1263225636);
				PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], 5);
				PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], Modelid);
				PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], rX, rY, rZ, Zoom);
				PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles], vColor1, vColor2);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][articles]);

				format(td_str, sizeof td_str, "$%s", number_format_thousand(Price));
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles] = CreatePlayerTextDraw(playerid, Td_Pos[0] + 31.0, Td_Pos[1] + 55.0, td_str);
				PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0.229333, 0.957037);
				PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 2);
				PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], -1);
				PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0);
				PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0);
				PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 255);
				PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 1);
				PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 1);
				PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles], 0);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][articles]);

				TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][articles]);

				articles ++;
				db_next_row(Result);
			}
			db_free_result(Result);

			new the_query[80];
			format(the_query, sizeof the_query, "SELECT COUNT() FROM `SHOP` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);

			new total_pages = GetDatabasePages(the_query, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			format(td_str, sizeof td_str, "-_%d/%d_-", PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] + 1, total_pages);

			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], td_str);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);
			return 1;
		}
		case PLAYER_SHOP_STATE_AD:
		{
			new DBResult:Result, DB_Query[250], bool:found;
			format(DB_Query, sizeof DB_Query, "SELECT `SHOP`.*, `CUENTA`.`NAME`, `PHONE`.`PHONE_NUMBER` FROM `SHOP`, `CUENTA`, `PHONE` WHERE `SHOP`.`ID` = '%d' AND `CUENTA`.`ID` = `SHOP`.`ID_USER` AND `PHONE`.`ID_USER` = `SHOP`.`ID_USER`;", PLAYER_TEMP[playerid][pt_SHOP_SELECTED_ARTICLE_ID]);
			Result = db_query(Database, DB_Query);

			if(db_num_rows(Result))
			{
				new td_str[190], ad_id, ad_by_aid, ad_type, ad_price, ad_text[24], ad_modelid, Float:ad_rX, Float:ad_rY, Float:ad_rZ, Float:ad_Zoom, ad_vCol1, ad_vCol2, ad_add_date[24], ad_by[24], ad_by_phone_number;

				ad_id = db_get_field_assoc_int(Result, "ID");
				ad_by_aid = db_get_field_assoc_int(Result, "ID_USER");
				ad_type = db_get_field_assoc_int(Result, "TYPE");
				ad_price = db_get_field_assoc_int(Result, "PRICE");
				db_get_field_assoc(Result, "TEXT", ad_text, 24);
				ad_modelid = db_get_field_assoc_int(Result, "MODELID");
				ad_rX = db_get_field_assoc_float(Result, "RX");
				ad_rY = db_get_field_assoc_float(Result, "RY");
				ad_rZ = db_get_field_assoc_float(Result, "RZ");
				ad_Zoom = db_get_field_assoc_float(Result, "ZOOM");
				ad_vCol1 = db_get_field_assoc_int(Result, "VCOL1");
				ad_vCol2 = db_get_field_assoc_int(Result, "VCOL2");
				db_get_field_assoc(Result, "DATE", ad_add_date, 24);
				db_get_field_assoc(Result, "NAME", ad_by, 24);
				ad_by_phone_number = db_get_field_assoc_int(Result, "PHONE_NUMBER");

				if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
					PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
				}
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = CreatePlayerTextDraw(playerid, 212.000000, 179.000000, "");
				PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0.000000, 0.000000);
				PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 92.000000, 91.000000);
				PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 1);
				PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], -1);
				PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
				PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
				PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 44284927);
				PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 5);
				PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
				PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
				PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], ad_modelid);
				PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], ad_rX, ad_rY,ad_rZ, ad_Zoom);
				PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], ad_vCol1, ad_vCol2);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
				TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);

				format(td_str, sizeof td_str, "Art¢culo_n|_%d (%s)", ad_id, ad_add_date);
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], td_str);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);

				switch(ad_type)
				{
					case SHOP_ARTICLE_TYPE_PROPERTY: format(td_str, sizeof td_str, "Producto:_Propiedad~n~Precio:_$%s~n~~n~Descripci¦n:~n~%s~n~~n~%s~n~%s", number_format_thousand(ad_price), ad_text, number_format_dash(ad_by_phone_number), ad_by);
					case SHOP_ARTICLE_TYPE_VEHICLE: format(td_str, sizeof td_str, "Producto:_Veh¢culo~n~Precio:_$%s~n~~n~Descripci¦n:~n~%s~n~~n~%s~n~%s", number_format_thousand(ad_price), ad_text, number_format_dash(ad_by_phone_number), ad_by);
					case SHOP_ARTICLE_TYPE_OTHER: format(td_str, sizeof td_str, "Producto:_Otros~n~Precio:_$%s~n~~n~Descripci¦n:~n~%s~n~~n~%s~n~%s", number_format_thousand(ad_price), ad_text, number_format_dash(ad_by_phone_number), ad_by);
				}
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], td_str);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);

				for(new i = 0; i != 4; i ++) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], "_");
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], "_");
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "_");
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "_");
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], "Atrs");
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4]);

				if(ACCOUNT_INFO[playerid][ac_ID] == ad_by_aid)
				{
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "Modificar");
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "Eliminar");
					PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2]);
					PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3]);
				}

				found = true;
			}
			else
			{
				found = false;
			}
			db_free_result(Result);

			if(!found)
			{
				SendClientMessage(playerid, -1, "{FFFFFF}Este anuncio ya no está disponible.");
				PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
				return 1;
			}

			for(new i = 0; i != 6; i ++)
			{
				PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i] = 0;
				TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
			}

			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);
			DestroyArticleShopTextDraws(playerid);
		}
	}
	return 1;
}

HidePlayerShop(playerid)
{
	HidePlayerDialog(playerid);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][0]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][1]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][2]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][3]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][4]);

	PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS] = false;
	PLAYER_TEMP[playerid][pt_SHOP] = false;
	PLAYER_TEMP[playerid][pt_SHOP_STATE] = 0;

	PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 0;
	PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;

	if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
		PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
	}
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);

	for(new i = 0; i != 6; i ++)
	{
		PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i] = 0;
		TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
		if(i <= 4) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
	}
	DestroyArticleShopTextDraws(playerid);

	CancelSelectTextDrawEx(playerid);
	return 1;
}

DestroyArticleShopTextDraws(playerid)
{
	for(new i; i < 6; i++)
	{
		if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i]);
			PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i] = PlayerText:INVALID_TEXT_DRAW;
		}
		if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i]);
			PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
	return 1;
}

td_str_legal(text[])
{
	for(new i = 0; i != strlen(text); i ++)
	{
		if((text[i] >= 91 && text[i] <= 96) || (text[i] >= 58 && text[i] <= 64) || (text[i] < 48 && text[i] != 32) || text[i] > 122)
		{
			return false;
		}
	}
	return true;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
	{
		if(GetPlayerState(forplayerid) == PLAYER_STATE_DRIVER)
		{
			if(!PLAYER_WORKS[forplayerid][WORK_TAXI]) return 1;
			if(PLAYER_TEMP[forplayerid][pt_WORKING_IN] != WORK_TAXI) return 1;
			SetPlayerMarkerForPlayer(forplayerid, playerid, 0xFFFF00FF);
		}
	}

	if(PLAYER_TEMP[playerid][pt_WANT_MECHANIC])
	{
		if(!PLAYER_WORKS[forplayerid][WORK_MECHANIC]) return 1;
		if(PLAYER_TEMP[forplayerid][pt_WORKING_IN] != WORK_MECHANIC) return 1;
		SetPlayerMarkerForPlayer(forplayerid, playerid, 0x00CCFFFF);
	}

	if(CHARACTER_INFO[playerid][ch_WANTED_LEVEL] > 0)
	{
		if(!PLAYER_WORKS[forplayerid][WORK_POLICE]) return 1;
		if(PLAYER_TEMP[forplayerid][pt_WORKING_IN] != WORK_POLICE) return 1;
		SetPlayerMarkerForPlayer(forplayerid, playerid, PlayerWantedColor(playerid));
	}

	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK)
	{
		if(!PLAYER_WORKS[forplayerid][WORK_MEDIC]) return 1;
		if(PLAYER_TEMP[forplayerid][pt_WORKING_IN] != WORK_MEDIC) return 1;
		SetPlayerMarkerForPlayer(forplayerid, playerid, 0x00FF00FF);
	}
    return 1;
}

GetPlayerPlantedPlants(playerid)
{
	new plants;

	for(new i = 0; i != MAX_PLANTS; i ++)
	{
		if(!PLANTS[i][plant_VALID]) continue;
		if(PLANTS[i][plant_PLANTED_BY_ACCOUNT_ID] == ACCOUNT_INFO[playerid][ac_ID]) plants ++;
	}
	return plants;
}


StartPlayerJob(playerid, work, vehicleid = INVALID_VEHICLE_ID)
{
	switch(work)
	{
		case WORK_TAXI:
		{
			SetTaxiPlayerMarkers(playerid);
			ResetVehicleTaxiMeter(vehicleid);
			ShowPlayerTaxiMeter(playerid);
			Iter_Add(PLAYERS_IN_TAXI, playerid);
			new pok[126];
			if(!PLAYER_PHONE[playerid][player_phone_VALID])
			{
			 	format(pok,sizeof(pok),"~y~taxi disponible ~w~(~y~/servicio taxi~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]);
		 		EnviarPopUp(playerid,pok);
				return 1;
			}
			else if(PLAYER_PHONE[playerid][player_phone_VALID])
			{
	 			format(pok,sizeof(pok),"~y~taxi disponible ~w~(Movil: ~y~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]);
	 			EnviarPopUp(playerid,pok);
			}


			new passenger = GetVehicleFirstPassenger(vehicleid);
			if(passenger != INVALID_PLAYER_ID)
			{
				ShowPlayerTaxiMeter(passenger);
				if(PLAYER_TEMP[passenger][pt_WANT_TAXI])
				{
					PLAYER_TEMP[passenger][pt_WANT_TAXI] = false;
					DisablePlayerTaxiMark(passenger);
				}

				TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED] = true;
				GetVehiclePos(vehicleid, TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Z]);
				KillTimer(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER]);
				TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], passenger);
			}
		}
		case WORK_TRUCK:
		{
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED])
			{
				if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED]) SendClientMessage(playerid, -1, "{FFFFFF}El {00FF00}camión esta vacio{FFFFFF}, entregalo en la empresa.");
				else SendClientMessage(playerid, -1, "{FFFFFF}Entrega la mercancia en el {00FF00}punto marcado{FFFFFF}.");

				SetPlayerTruckCheckpoint(playerid, vehicleid);
			}
		}
		case WORK_HARVESTER:
		{
			PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] = 0;
			SendClientMessage(playerid, -1, "{FFFFFF}Empieza a cosechar en dónde se te indique, si {00FF00}bajas{FFFFFF} de la cosechadora se {00FF00}cancelará{FFFFFF} el trabajo.");
			Set_HARVEST_Checkpoint(playerid);
		}
		case WORK_FUMIGATOR:
		{
		    Iter_Add(PLAYERS_IN_CHOFER, playerid);

			PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] = 0;
			SendClientMessage(playerid, -1, "Pase por todas las {00FF00}estaciones marcadas en su mapa{FFFFFF}, si baja del camión se cancelará el viaje.");
			Set_FUMIGATOR_Checkpoint(playerid);

			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
			UpdateVehicleParams(vehicleid);
		}
		case WORK_LUMBERJACK:
		{
			PLAYER_TEMP[playerid][pt_PLAYER_CARRYING_TREE] = false;
			PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] = -1;

			RemovePlayerAttachedObject(playerid, 9);
			SetPlayerAttachedObject(playerid, 9, 341, 1, -0.172999, -0.165, -0.053999, 0.0, -7.599999, -9.6);

			SendClientMessage(playerid, -1, "{FFFFFF}Los árboles que puedes talar están repartidos por la zona, si te alejas demasiado el trabajo se cancelará.");
		}
		case WORK_TRASH:
		{
			RemovePlayerAttachedObject(playerid, 9);
			SetPlayerAttachedObject(playerid, 9, 19904, 1, 0.038999, 0.048, 0.004999, 94.899971, 94.199974, 85.300071, 0.942998, 1.114998, 1.141999);
		}
		case WORK_MECHANIC:
		{
			new pok[126];
			if(!PLAYER_PHONE[playerid][player_phone_VALID])
			{
			 	format(pok,sizeof(pok),"~p~mecánico disponible ~w~(~p~/servicio mecanico~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]);
		 		EnviarPopUp(playerid,pok);
				return 1;
			}
			else if(PLAYER_PHONE[playerid][player_phone_VALID])
			{
	 			format(pok,sizeof(pok),"~p~mecánico disponible ~w~(Movil: ~p~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]);
	 			EnviarPopUp(playerid,pok);
			}

			if(PLAYER_MISC[playerid][MISC_LATA_PINTURA] == 1)
			{
				RemovePlayerAttachedObject(playerid, 0);
				SetPlayerAttachedObject(playerid, 0, 365, 1, -0.105, -0.085999, 0.124999, 92.099975, 109.999992, 0.0, 1.0, 1.0, 1.0);//spray
			}
			if(PLAYER_MISC[playerid][MISC_HERRAMIENTA] == 1)
			{
				RemovePlayerAttachedObject(playerid, 1);
				SetPlayerAttachedObject(playerid, 1, 19627, 1, -0.158, -0.004999, -0.188999, -18.099998, -2.299998, 33.900005, 1.0, 1.0, 1.0);//llave
			}
			if(20 <= PLAYER_SKILLS[playerid][WORK_MECHANIC])
			{
				RemovePlayerAttachedObject(playerid, 3);
				RemovePlayerAttachedObject(playerid, 6);
				SetPlayerAttachedObject(playerid, 3, 18633, 1, -0.016, -0.186, 0.054999, -3.199999, 31.200002, -94.500007, 1.0, 1.0, 1.0);//lantas
				SetPlayerAttachedObject(playerid, 6, 18644, 1, 0.139999, -0.117, -0.188, -105.900001, 70.299987, 4.6, 1.0, 1.0, 1.0);//desarmador
			}

			RemovePlayerAttachedObject(playerid, 2);
			RemovePlayerAttachedObject(playerid, 4);
			RemovePlayerAttachedObject(playerid, 5);
			SetPlayerAttachedObject(playerid, 2, 3026, 1, -0.198, -0.015, -0.027, 0.0, -1.999999, -6.499999, 1.102, 0.978999, 1.134);//mochila
			SetPlayerAttachedObject(playerid, 4, 18634, 1, -0.059999, -0.178, -0.138999, -0.299998, -52.400016, -96.000007, 1.0, 1.0, 1.0);//ganzua
			SetPlayerAttachedObject(playerid, 5, 18635, 1, 0.037, -0.079999, -0.11, -5.600003, 90.100013, -175.699951, 1.0, 1.0, 1.0);//martillo

            Iter_Add(PLAYERS_IN_MECANICO, playerid);
			SetMechanicPlayerMarkers(playerid);
		}
		case WORK_POLICE:
		{
			//SetPlayerColorEx(playerid, 0x4286f400);
			//for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) RemovePlayerAttachedObject(playerid, i);
			SetWantedPlayerMarkers(playerid);
		}
		case WORK_PIZZA:
		{
			PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS] = 0;
			PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS] = 0;
			SendClientMessage(playerid, -1, "Puede comenzar un vuelo {00FF00}subiendo a un avión{FFFFFF}, la ruta ya la traen los aviones dentro.");

			RemovePlayerAttachedObject(playerid, 0);
			RemovePlayerAttachedObject(playerid, 1);
			RemovePlayerAttachedObject(playerid, 2);
			SetPlayerAttachedObject(playerid, 0, 19520, 2, 0.151, 0.01, 0.0, 0.0, 0.0, 2.699996, 1.482999, 1.428);//gorro
			SetPlayerAttachedObject(playerid, 1, 19022, 2, 0.082999, 0.048, 0.002, 0.0, 89.499992, 90.100021, 1.0, 1.065999);//rayban
			SetPlayerAttachedObject(playerid, 2, 19422, 2, 0.059, 0.016, 0.0, 79.499992, 0.0, -88.300003, 1.06, 0.894999);//audifonos

		}
		case WORK_MEDIC:
		{
			new pok[126];
			if(!PLAYER_PHONE[playerid][player_phone_VALID])
			{
			 	format(pok,sizeof(pok),"~g~~h~médico disponible ~w~(~g~~h~/servicio medico~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]);
		 		EnviarPopUp(playerid,pok);
				return 1;
			}
			else if(PLAYER_PHONE[playerid][player_phone_VALID])
			{
	 			format(pok,sizeof(pok),"~g~~h~médico disponible ~w~(Movil: ~g~~h~%d~w~)",PLAYER_PHONE[playerid][player_phone_NUMBER]);
	 			EnviarPopUp(playerid,pok);
			}

			RemovePlayerAttachedObject(playerid, 0);
			RemovePlayerAttachedObject(playerid, 1);
			RemovePlayerAttachedObject(playerid, 2);
			RemovePlayerAttachedObject(playerid, 3);
			SetPlayerAttachedObject(playerid, 0, 3026, 1, -0.115, -0.043999, 0.0, 0.0, 0.0, 0.0, 0.983999, 1.0, 1.0);//mochila
			SetPlayerAttachedObject(playerid, 1, 11738, 6, 0.27, 0.012, -0.003, 4.5, -89.200027, 0.0, 1.0, 1.0, 1.0);//botoquin
			SetPlayerAttachedObject(playerid, 2, 11736, 1, 0.067999, -0.097999, 0.0, 89.799995, -0.500002, -177.0, 1.272, 1.309999, 3.66);//medicinas
			SetPlayerAttachedObject(playerid, 3, 19093, 2, 0.069999, 0.003, 0.000999, 0.0, 0.0, -11.700001, 1.268, 1.21, 1.191);//gorra

			Iter_Add(PLAYERS_IN_MEDICO, playerid);
			SetInjuredPlayerMarkers(playerid);
		}
	}

	PLAYER_TEMP[playerid][pt_WORKING_IN] = work;
	return 1;
}

EndPlayerJob(playerid, changeskin = true)
{
	switch(PLAYER_TEMP[playerid][pt_WORKING_IN])
	{
		case WORK_TAXI:
		{
			if(PLAYER_TEMP[playerid][pt_TAXI_METER_ENABLED])
			{
				SetNormalPlayerMarkers(playerid);
				HidePlayerTaxiMeter(playerid);
				Iter_Remove(PLAYERS_IN_TAXI, playerid);
			}
		}
		case WORK_TRUCK:
		{
			if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(TRUCK_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][truck_vehicle_DRIVER_USER_ID] == ACCOUNT_INFO[playerid][ac_ID])
				{
					if(TRUCK_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][truck_vehicle_LOADING])
					{
						HidePlayerDialog(playerid);
						KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
						SetVehicleToRespawnEx(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
					}
					if(TRUCK_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][truck_vehicle_UNLOADING])
					{
						TRUCK_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][truck_vehicle_UNLOADING] = false;
						KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
					}
				}
			}
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]))
			{
				DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
			}
		}
		case WORK_HARVESTER:
		{
			if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]))
			{
				DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
			}
			if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(WORK_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][work_vehicle_WORK] == WORK_HARVESTER) SetVehicleToRespawnEx(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
			}
		}
		case WORK_FUMIGATOR:
		{
			if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT]))
			{
				DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT] = INVALID_STREAMER_ID;
			}
			if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(WORK_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][work_vehicle_WORK] == WORK_FUMIGATOR) SetVehicleToRespawnEx(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
			}
			Iter_Remove(PLAYERS_IN_CHOFER, playerid);
		}
		case WORK_LUMBERJACK: CancelLumberjackWork(playerid);
		case WORK_FARMER: CancelPlayerPlanting(playerid);
		case WORK_TRASH:
		{
			if(changeskin)
			{
				SetPlayerSkin(playerid, CHARACTER_INFO[playerid][ch_SKIN]);
				SetPlayerToys(playerid);
			}

			if(PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
				{
					if(PLAYER_TEMP[playerid][pt_TRASH_DRIVER])
					{
						SendClientMessage(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], -1, "{FFFFFF}El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.");
						CancelTrashWork(playerid, TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
					}
					if(PLAYER_TEMP[playerid][pt_TRASH_PASSENGER])
					{
						SendClientMessage(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], -1, "{FFFFFF}El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.");
						CancelTrashWork(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], playerid, PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
					}
				}
			}
		}
		case WORK_POLICE:
		{
			PLAYER_TEMP[playerid][pt_POLICE_RADIO] = 0;
			//SetPlayerColorEx(playerid, PLAYER_COLOR);
			if(changeskin)
			{
				SetPlayerSkin(playerid, CHARACTER_INFO[playerid][ch_SKIN]);
				SetPlayerColorEx(playerid, PLAYER_COLOR);
				SetPlayerToys(playerid);
			}
			SetNormalPlayerMarkers(playerid);
		}
		case WORK_MECHANIC:
		{
			if(changeskin)
			{
				SetPlayerSkin(playerid, CHARACTER_INFO[playerid][ch_SKIN]);
				SetPlayerToys(playerid);
			}
			Iter_Remove(PLAYERS_IN_MECANICO, playerid);
			SetNormalPlayerMarkers(playerid);
		}
		case WORK_PIZZA:
		{
			if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_DRIVER_AID] == ACCOUNT_INFO[playerid][ac_ID]) SetVehicleToRespawnEx(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
			}
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
			{
				DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
			}
			if(changeskin)
			{
				SetPlayerSkin(playerid, CHARACTER_INFO[playerid][ch_SKIN]);
				SetPlayerToys(playerid);
			}
		}
		case WORK_MEDIC:
		{
			if(changeskin)
			{
				SetPlayerSkin(playerid, CHARACTER_INFO[playerid][ch_SKIN]);
				SetPlayerToys(playerid);
			}
			Iter_Remove(PLAYERS_IN_MEDICO, playerid);
			SetNormalPlayerMarkers(playerid);
		}
	}

	PLAYER_TEMP[playerid][pt_WORKING_IN] = WORK_NONE;
	return 1;
}

CountPlayerJobs(playerid)
{
	new count;
	for(new i = 1; i != sizeof(work_info); i ++)
	{
		if(PLAYER_WORKS[playerid][i]) count ++;
	}
	return count;
}

getPlayerWorks(playerid)
{
	new works[27 * sizeof(work_info)], count;
	for(new i = 1; i != sizeof(work_info); i ++)
	{
		if(PLAYER_WORKS[playerid][i])
		{
			if(count > 0) strcat(works, ", ");
			strcat(works, work_info[i][work_info_NAME]);

			count ++;
		}
	}

	if(!count) works = "ninguno";
	return works;
}

SetPlayer_Pizza_Checkpoint(playerid, point)
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
	}

	if(point == -1)
	{
		PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = CreateDynamicCP(2110.1919, -2429.5273, 14.9212, 6.0, 0, 0, playerid, 9999999999.0);

		new info[1];
		info[0] = CHECKPOINT_TYPE_PIZZA_FINISH;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	else
	{
		new Float:pos[3];
		pos[0] = PIZZA_DELIVERY_POINT[point][0] + (1.5 * floatsin(-PIZZA_DELIVERY_POINT[point][3], degrees));
		pos[1] = PIZZA_DELIVERY_POINT[point][1] + (1.5 * floatcos(-PIZZA_DELIVERY_POINT[point][3], degrees));
		pos[2] = PIZZA_DELIVERY_POINT[point][2];

		PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = CreateDynamicCP(pos[0], pos[1], pos[2], 6.0, 0, 0, playerid, 9999999999.0);

		new info[1];
		info[0] = CHECKPOINT_TYPE_PIZZA_DEL;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	return 1;
}

SetPlayerSkillLevels(playerid)
{
	if(ACCOUNT_INFO[playerid][ac_LEVEL] < 3)
	{
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 0);
	}
	else if(ACCOUNT_INFO[playerid][ac_LEVEL] >= 3)
	{
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN,		999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 				999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 		999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 		999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 				999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 		999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 			999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 					999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 				999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 					999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 			999);
	}
	return 1;
}

DeleteIlegalInv(playerid)
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE])
	{
		new DB_Query[90];
		format(DB_Query, sizeof DB_Query, "DELETE FROM `PLAYER_WEAPONS` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
		db_query(Database, DB_Query);
		ResetPlayerWeaponsEx(playerid);
	}

    PLAYER_MISC[playerid][MISC_CRACK] = 0;
	PLAYER_MISC[playerid][MISC_CANNABIS] = 0;
	return 1;
}

forward HealthDown(playerid);
public HealthDown(playerid)
{
	if(CHARACTER_INFO[playerid][ch_STATE] != ROLEPLAY_STATE_CRACK) return 1;

	GivePlayerHealthEx(playerid, -1.0);

	if(GetPlayerDistanceFromPoint(playerid, PLAYER_TEMP[playerid][pt_INJURED_POS][0], PLAYER_TEMP[playerid][pt_INJURED_POS][1], PLAYER_TEMP[playerid][pt_INJURED_POS][2]) > 3.0) SetPlayerPosEx(playerid, PLAYER_TEMP[playerid][pt_INJURED_POS][0], PLAYER_TEMP[playerid][pt_INJURED_POS][1], PLAYER_TEMP[playerid][pt_INJURED_POS][2], PLAYER_TEMP[playerid][pt_INJURED_POS][3], 0, 0);
	ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.1, true, 0, 0, 1, 0, 1);

	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][16]);
	PLAYER_TEMP[playerid][pt_TIMERS][16] = SetTimerEx("HealthDown", 8000, false, "i", playerid);
	return 1;
}

SetInjuredPlayerMarkers(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(CHARACTER_INFO[i][ch_STATE] == ROLEPLAY_STATE_CRACK)
				{
					SetPlayerMarkerForPlayer(playerid, i, 0x00FF00FF);
				}
			}
		}
	}
	return 1;
}

SendAlertToMedics(playerid)
{
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(GetPlayerState(i) != PLAYER_STATE_DRIVER) continue;
				if(!PLAYER_WORKS[i][WORK_MEDIC]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_MEDIC) continue;

				SetPlayerMarkerForPlayer(i, playerid, 0x00FF00FF);
				SendClientMessageEx(i, -1, "{00FF00}Hay un herido{FFFFFF} que está esperando una {00FF00}ambulancia{FFFFFF}, se encuentra a {00FF00}%.2f{FFFFFF} Km de ti.", (GetPlayerDistanceFromPoint(i, pos[0], pos[1], pos[2]) * 0.01));
			}
		}
	}
	return 1;
}

DisablePlayerInjuredMark(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_MEDIC]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_MEDIC) continue;

				SetPlayerMarkerForPlayer(i, playerid, PLAYER_COLOR);
			}
		}
	}
	return 1;
}

CMD:farmacia(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 3907.5325,-692.8316,102.6516)) return 1;
	ShowDialog(playerid, DIALOG_FARMACY);
	return 1;
}

CMD:marihuana(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2297.7263,821.6959,-68.1065)) return 1;
	ShowDialog(playerid, DIALOG_MARIA);
	return 1;
}

CMD:consultar(playerid, params[])
{
	new option[24];
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;

	if(sscanf(params, "s[24]d", option)) return 1;
    if(!strcmp(option, "vida", true))
    {
        if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1779.1069,-1777.9885,341.2477)) return 1;
        if(CHARACTER_INFO[playerid][ch_HEALTH] > 75.0) return SendClientMessage(playerid, -1, "Tu diagnóstico muestra que estás en {00FF00}buenas condiciones.");
        if(CHARACTER_INFO[playerid][ch_HEALTH] <= 75.0 && CHARACTER_INFO[playerid][ch_HEALTH] > 50.0) return SendClientMessage(playerid, -1, "Tu diagnóstico muestra que estás {FFFF00}estable{FFFFFF}, considera consumir algunos medicamentos.");
        if(CHARACTER_INFO[playerid][ch_HEALTH] <= 50.0 && CHARACTER_INFO[playerid][ch_HEALTH] > 30.0) return SendClientMessage(playerid, -1, "Tu diagnóstico muestra que estás {FF00CC}mal{FFFFFF}, consume ya unos medicamentos, puede comprarlos aquí en la farmacia.");
        if(CHARACTER_INFO[playerid][ch_HEALTH] <= 30.0) return SendClientMessage(playerid, -1, "Tu diagnóstico muestra que estás {FF0000}grave{FFFFFF}, vaya ahora con el doctor y use {FF0000}/curarme.");
	}
    else if(!strcmp(option, "hambre", true))
    {
        if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1790.2037,-1770.6217,341.2477)) return 1;
        if(CHARACTER_INFO[playerid][ch_HUNGRY] > 75.0) return SendClientMessage(playerid, -1, "Tu diagnóstico muestra que estás en {00FF00}bien alimentado.");
        if(CHARACTER_INFO[playerid][ch_HUNGRY] <= 75.0 && CHARACTER_INFO[playerid][ch_HUNGRY] > 50.0) return SendClientMessage(playerid, -1, "Tu diagnóstico muestra que estás {FFFF00}bien{FFFFFF}, continúa comiendo alimentos saludables.");
        if(CHARACTER_INFO[playerid][ch_HUNGRY] <= 50.0 && CHARACTER_INFO[playerid][ch_HUNGRY] > 30.0) return SendClientMessage(playerid, -1, "Tu diagnóstico muestra que estás {FF00CC}hambriento{FFFFFF}, consiga algo que comer.");
        if(CHARACTER_INFO[playerid][ch_HUNGRY] <= 30.0) return SendClientMessage(playerid, -1, "Tu diagnóstico muestra que estás {FF0000}grave{FFFFFF}, coma algo saludable ahora si no quiere desmayarse.");
	}
    else if(!strcmp(option, "sed", true))
    {
        if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1790.2875,-1777.0745,341.2477)) return 1;
        if(CHARACTER_INFO[playerid][ch_THIRST] > 75.0) return SendClientMessage(playerid, -1, "Tu diagnóstico muestra que estás {00FF00}bien hidratado.");
        if(CHARACTER_INFO[playerid][ch_THIRST] <= 75.0 && CHARACTER_INFO[playerid][ch_THIRST] > 50.0) return SendClientMessage(playerid, -1, "Tu diagnóstico muestra que estás {FFFF00}bien{FFFFFF}, toma agua para no sufrir accidentes.");
        if(CHARACTER_INFO[playerid][ch_THIRST] <= 50.0 && CHARACTER_INFO[playerid][ch_THIRST] > 30.0) return SendClientMessage(playerid, -1, "Tu diagnóstico muestra que estás {FF00CC}un poco deshidratado{FFFFFF}, consuma agua para estar bien.");
        if(CHARACTER_INFO[playerid][ch_THIRST] <= 30.0) return SendClientMessage(playerid, -1, "Tu diagnóstico muestra que estás {FF0000}muy mal{FFFFFF}, si no tomas agua terminarás desmayandote.");
 	}
	return 1;
}


CMD:curarme(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 3903.1025,-708.8776,102.6516)) return 1;
    if(CHARACTER_INFO[playerid][ch_HEALTH] > 98.0) return ShowPlayerMessage(playerid, "Usted se encuentra sano.", 3);

    SetPlayerHealthEx(playerid, 98.0);
    ShowPlayerMessage(playerid, "Le hemos curado y todo está en orden.", 3);
	GivePlayerCash(playerid, -1800);
	return 1;
}

CMD:curar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE] && PLAYER_SKILLS[playerid][WORK_POLICE] < 3)
 	{
		if(!PLAYER_WORKS[playerid][WORK_MEDIC]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres médico.");
		if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_MEDIC) return SendClientMessage(playerid, -1, "{FFFFFF}No estás de servicio como médico.");
		if(PLAYER_CREW[playerid][player_crew_VALID] && CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes curar mientras tu banda está en combate.");
	}
	
	if(gettime() < PLAYER_TEMP[playerid][pt_TIME_TO_HEAL] + 30)
	{
		new time = (30-(gettime()-PLAYER_TEMP[playerid][pt_TIME_TO_HEAL]));
		SendClientMessageEx(playerid, 0xFFFFFFFF, "Tienes que esperar %s minutos para volver a curar a una persona.", TimeConvert(time));
		return 1;
	}
	
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return ShowPlayerMessage(playerid, "No estás depie.", 3);
	
	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, 0xFFFF00FF, "/curar {FFFFFF}[PlayerID/Nombre]");
	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "{FFFFFF}El jugador no está conectado.");
	if(to_player == playerid) return SendClientMessage(playerid, 0xFFFF00FF, "/curar {FFFFFF}[PlayerID/Nombre]");

	new Float:pos[3];
	GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return 1;

	if(CHARACTER_INFO[to_player][ch_STATE] != ROLEPLAY_STATE_CRACK) return SendClientMessage(playerid, -1, "{FFFFFF}Esta persona no está herida.");

	DisablePlayerInjuredMark(to_player);
	ShowPlayerMessage(playerid, "Espere mientras se cura al herido...", 8);
	ShowPlayerMessage(to_player, "Espere que lo estoy curando...", 8);
    PLAYER_TEMP[playerid][pt_WANT_MEDIC] = false;
	TogglePlayerControllable(playerid, false);
	TogglePlayerControllable(to_player, false);
	ApplyAnimation(playerid, "MEDIC", "CPR", 4.1, false, 0, 0, 0, 0, 1);

	SetTimerEx("UnFreezeMedic", 8000, false, "d", playerid);
	KillTimer(PLAYER_TEMP[to_player][pt_TIMERS][16]);
	PLAYER_TEMP[to_player][pt_TIMERS][16] = SetTimerEx("StandUp", 8000, false, "ii", playerid, to_player);
	PLAYER_TEMP[playerid][pt_TIME_TO_HEAL] = gettime();
	return 1;
}

forward UnFreezeMedic(playerid);
public UnFreezeMedic(playerid)
{
	TogglePlayerControllable(playerid, true);
	return 1;
}


forward StandUp(medic, playerid);
public StandUp(medic, playerid)
{
    if(!PLAYER_WORKS[playerid][WORK_POLICE])
    {
        if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_MEDIC)
        {
			new work_extra_payment;
			if(work_info[WORK_MEDIC][work_info_EXTRA_PAY] > 0 && work_info[WORK_MEDIC][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_MEDIC][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_SKILLS[medic][WORK_MEDIC], work_info[WORK_MEDIC][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_MEDIC][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_MEDIC][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_MEDIC][work_info_EXTRA_PAY_LIMIT];

				if(ACCOUNT_INFO[medic][ac_SU]) work_extra_payment += SU_WORK_EXTRA_PAY;
			}

			new money = 1000 + work_extra_payment;
			//GivePlayerCash(medic, money);
			BANK_ACCOUNT[medic][bank_account_BALANCE] += money;
			PLAYER_SKILLS[medic][WORK_MEDIC] ++;
			SendClientMessageEx(medic, -1, "{00FF00}¡Sigue así!{FFFFFF}, Hospital Services te ha depositado por esta curación {41f48f}$%s{FFFFFF} en tu cuenta bancaria.", number_format_thousand(money));
		}
	}

	ShowPlayerMessage(playerid, "Ha sanado sus heridas.", 3);

	CHARACTER_INFO[playerid][ch_STATE] = ROLEPLAY_STATE_NORMAL;
	SetWeaponsForPlayer(playerid);
	TogglePlayerControllable(playerid, true);
	if(ACCOUNT_INFO[playerid][ac_SU]) SetPlayerHealthEx(playerid, 50.0);
	else SetPlayerHealthEx(playerid, 25.0);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
	ClearAnimations(playerid);
	return 1;
}

SetPoliceRank(playerid)
{
	new rank;
	switch(ACCOUNT_INFO[playerid][ac_LEVEL])
	{
		case 0..14: rank = 1;
		case 15..19: rank = 2;
		case 20..24: rank = 3;
		case 25..29: rank = 4;
		case 30..34: rank = 5;
		default: rank = 5;
	}

	if(rank > PLAYER_SKILLS[playerid][WORK_POLICE])
	{
		PLAYER_SKILLS[playerid][WORK_POLICE] = rank;

		new DB_Query[256];
		format(DB_Query, sizeof DB_Query, "UPDATE `PLAYER_SKILLS` SET `TOTAL` = '%d' WHERE `ID_USER` = '%d' AND `ID_WORK` = '%d';", rank, ACCOUNT_INFO[playerid][ac_ID], WORK_POLICE);
		db_query(Database, DB_Query);
	}
	return 1;
}

CMD:conquistar(playerid, params[])
{
	if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
	if(PLAYER_CREW[playerid][player_crew_VALID])
	{
		if(gettime() > CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_LAST_ATTACK] + 300)
		{
			if(PLAYER_TEMP[playerid][pt_LAST_TERRITORY] != INVALID_STREAMER_ID)
			{
				if(IsPlayerInDynamicArea(playerid, TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_AREA]))
				{
					if(TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID])
					{
						if(!TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_WAR] && !CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING])
						{
							if(gettime() > TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_LAST_ATTACK] + 300)
							{
								if(!TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_OCCUPIED])
								{
									new attackers_in_area = CountCrewPlayersInTerritory(PLAYER_CREW[playerid][player_crew_INDEX], PLAYER_TEMP[playerid][pt_LAST_TERRITORY]);
									if(attackers_in_area >= 1) StartTerritoryAttack(PLAYER_CREW[playerid][player_crew_INDEX], PLAYER_TEMP[playerid][pt_LAST_TERRITORY], 300);
									else return SendClientMessage(playerid, -1, "Deben haber más de 1 miembro.");
								}
								else
								{
									if(CREW_INFO[ TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_CREW_INDEX] ][crew_VALID])
									{
										if(!CREW_INFO[ TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_CREW_INDEX] ][crew_FIGHTING])
										{
											new attackers_in_area = CountCrewPlayersInTerritory(PLAYER_CREW[playerid][player_crew_INDEX], PLAYER_TEMP[playerid][pt_LAST_TERRITORY]);
											if(attackers_in_area >= 5) StartTerritoryAttack(PLAYER_CREW[playerid][player_crew_INDEX], PLAYER_TEMP[playerid][pt_LAST_TERRITORY], 300);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return 1;
}


CMD:orden(playerid, params[])
{
    if(PLAYER_SKILLS[playerid][WORK_POLICE] < 5) return SendClientMessage(playerid, -1, "{FFFFFF}Sólo los delegados pueden ofrecer la orden de neutralización.");
    
	if(PLAYER_TEMP[playerid][pt_LAST_TERRITORY] != INVALID_STREAMER_ID)
	{
		if(IsPlayerInDynamicArea(playerid, TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_AREA]))
		{
			if(!TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_WAR] && !CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING])
			{
				new attackers_in_area = CountSAPDPlayersInTerritory(PLAYER_TEMP[playerid][pt_LAST_TERRITORY]);
				if(!TERRITORIES[PLAYER_TEMP[playerid][pt_LAST_TERRITORY]][territory_OCCUPIED]) return SendClientMessage(playerid, 0xFFFFFFFF, "Territorio no tiene conquista.");
				if(attackers_in_area >= 8) return SendClientMessage(playerid, -1, "Deben haber más de 8 miembros SAPD en la zona.");

				new DB_Query[128];
				TERRITORIES[PLAYER_TEMP[playerid][pt_LAST_TERRITORY]][territory_OCCUPIED] = false;
			    GangZoneShowForAll(TERRITORIES[PLAYER_TEMP[playerid][pt_LAST_TERRITORY]][territory_GANG_ZONE], 0xCCCCCC55);

				SendPoliceRadioMessage(-1, -1, "{4286f4} REPORTE  {98baf2}Se ha neutralizado una zona, comunicate con un Delegado.");

				format(DB_Query, sizeof DB_Query, "DELETE FROM `CREW_TERRITORIES` WHERE `ID_TERRITORY` = '%d';", TERRITORIES[PLAYER_TEMP[playerid][pt_LAST_TERRITORY]][territory_ID]);
				db_query(Database, DB_Query);
			}
		}
	}
	return 1;
}


CMD:banda(playerid, params[])
{
	if(!PLAYER_CREW[playerid][player_crew_VALID])
	{
		if(PLAYER_WORKS[playerid][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}Los policías no pueden tener bandas.");

		new index = GetAvaibleCrewIndex();
		if(index == -1)
		{
			SendClientMessageEx(playerid, -1, "{FFFFFF}No perteneces a ninguna banda y no se puede crear una porque no hay espacio disponible, el límite de bandas es %d.", MAX_CREWS);
			return 1;
		}

		ShowDialog(playerid, DIALOG_CREATE_CREW);
		return 1;
	}

	ShowDialog(playerid, DIALOG_CREW_MENU);
	return 1;
}

CMD:abandonar(playerid, params[])
{
	if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No perteneces a ninguna banda.");
	if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_LEAVE_TERRITORY]) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes permiso para abandonar territorios.");
	if(PLAYER_TEMP[playerid][pt_LAST_TERRITORY] == INVALID_STREAMER_ID) return SendClientMessage(playerid, -1, "{FFFFFF}No estás en un territorio de tu banda.");
	if(!IsPlayerInDynamicArea(playerid, TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_AREA])) return SendClientMessage(playerid, -1, "{FFFFFF}No estás en un territorio de tu banda.");
	if(TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_CREW_ID] != PLAYER_CREW[playerid][player_crew_ID]) return SendClientMessage(playerid, -1, "{FFFFFF}No estás en un territorio de tu banda.");
	if(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes abandonar territorios mientras tu banda está en combate.");

	PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] = PLAYER_TEMP[playerid][pt_LAST_TERRITORY];
	ShowDialog(playerid, DIALOG_CREW_LEAVE_TERRITORY);
	return 1;
}

CMD:invitar(playerid, params[])
{
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");

	if(!PLAYER_CREW[playerid][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}No eres miembro de ninguna banda.");
	if(!CREW_RANK_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][ PLAYER_CREW[playerid][player_crew_RANK] ][crew_rank_PERMISSION][CREW_RANK_INVITE]) return SendClientMessage(playerid, -1, "{FFFFFF}No tienes permiso para invitar personas a la banda.");
	if(CREW_INFO[ PLAYER_CREW[playerid][player_crew_INDEX] ][crew_FIGHTING]) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes invitar a gente a la banda cuando la banda está en combate.");

	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, 0xFFFF00FF, "/invitar {FFFFFF}[PlayerID/Nombre]");
	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "{FFFFFF}El jugador está desconectado.");
	if(to_player == playerid) return SendClientMessage(playerid, -1, "{FFFFFF}Eres tu.");

	new Float:pos[3]; GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return 1;
	if(PLAYER_WORKS[to_player][WORK_POLICE]) return SendClientMessage(playerid, -1, "{FFFFFF}Esta persona es policía y no puede tener banda.");
	if(PLAYER_CREW[to_player][player_crew_VALID]) return SendClientMessage(playerid, -1, "{FFFFFF}Esta persona pertenece a otra banda.");
	if(PLAYER_TEMP[to_player][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendClientMessage(playerid, -1, "{FFFFFF}No puedes invitar a este jugador ahora.");

	if(gettime() < PLAYER_TEMP[ to_player ][pt_LAST_GOT_CREW] + 600)
	{
		new time = 600 - (gettime() - PLAYER_TEMP[to_player][pt_LAST_GOT_CREW]);
		SendClientMessageEx(playerid, -1, "{FFFFFF}La otra persona debe esperar %s minutos para volver a ser invitada.", TimeConvert(time));
		return 1;
	}

	PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] = to_player;
	PLAYER_TEMP[playerid][pt_CREW_INVITE_AID] = ACCOUNT_INFO[to_player][ac_ID];
	SendClientMessageEx(playerid, -1, "Quieres invitar a %s a la banda, elige el rango que le ofreces.", PLAYER_TEMP[to_player][pt_RP_NAME]);
	ShowDialog(playerid, DIALOG_CREW_INVITE_RANK);
	return 1;
}



GetAvaibleCrewIndex()
{
	for(new i = 0; i != MAX_CREWS; i ++)
	{
		if(!CREW_INFO[i][crew_VALID]) return i;
	}
	return -1;
}


NewCrewRegister(index)
{
	if(!CREW_INFO[index][crew_VALID]) return 0;

	new DBResult:Result, DB_Query[340];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `CREW`\
		(\
			`NAME`, `COLOR`\
		)\
		VALUES\
		(\
			'%q', '%d'\
		);\
		SELECT MAX(`ID`) FROM `CREW`;\
	",
		CREW_INFO[index][crew_NAME],
		CREW_INFO[index][crew_COLOR]
	);
	Result = db_query(Database, DB_Query);
	if(db_num_rows(Result)) CREW_INFO[index][crew_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);



	for(new i = 0; i != MAX_CREW_RANKS; i ++)
	{
		if(!CREW_RANK_INFO[index][i][crew_rank_VALID]) continue;

		new DBResult:Result_ranks;
		format(DB_Query, sizeof DB_Query,
		"\
			INSERT INTO `CREW_RANKS`\
			(\
				`ID_CREW`, `RANK_POS`, `RANK_NAME`\
			)\
			VALUES\
			(\
				'%d', '%d', '%q'\
			);\
			SELECT MAX(`ID`) FROM `CREW_RANKS`;\
		",
			CREW_INFO[index][crew_ID],
			i,
			CREW_RANK_INFO[index][i][crew_rank_NAME]
		);
		Result_ranks = db_query(Database, DB_Query);

		if(db_num_rows(Result_ranks)) CREW_RANK_INFO[index][i][crew_rank_ID] = db_get_field_int(Result_ranks, 0);
		db_free_result(Result_ranks);

		for(new x = 0; x != CREW_RANK_SIZE; x ++)
		{
			format(DB_Query, sizeof DB_Query,
			"\
				INSERT INTO `RANK_PERMISSIONS`\
				(\
					`ID_RANK`, `PERMISSION`, `SET`\
				)\
				VALUES\
				(\
					'%d', '%d', '%d'\
				);\
			",
				CREW_RANK_INFO[index][i][crew_rank_ID],
				x,
				CREW_RANK_INFO[index][i][crew_rank_PERMISSION][x]
			);
			db_query(Database, DB_Query);
		}

	}
	return 1;
}

SendMessageToCrewMembers(crew_id, color, message[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_CREW[i][player_crew_VALID])
			{
				if(PLAYER_CREW[i][player_crew_ID] == crew_id)
				{
					SendClientMessage(i, color, message);
				}
			}
		}
	}
	return 1;
}

RegisterNewCrewRank(index, rank)
{
	new DBResult:Result_ranks, DB_Query[340];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `CREW_RANKS`\
		(\
			`ID_CREW`, `RANK_POS`, `RANK_NAME`\
		)\
		VALUES\
		(\
			'%d', '%d', '%q'\
		);\
		SELECT MAX(`ID`) FROM `CREW_RANKS`;\
	",
		CREW_INFO[index][crew_ID],
		rank,
		CREW_RANK_INFO[index][rank][crew_rank_NAME]
	);
	Result_ranks = db_query(Database, DB_Query);

	if(db_num_rows(Result_ranks)) CREW_RANK_INFO[index][rank][crew_rank_ID] = db_get_field_int(Result_ranks, 0);
	db_free_result(Result_ranks);

	for(new x = 0; x != CREW_RANK_SIZE; x ++)
	{
		format(DB_Query, sizeof DB_Query,
		"\
			INSERT INTO `RANK_PERMISSIONS`\
			(\
				`ID_RANK`, `PERMISSION`, `SET`\
			)\
			VALUES\
			(\
				'%d', '%d', '%d'\
			);\
		",
			CREW_RANK_INFO[index][rank][crew_rank_ID],
			x,
			CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][x]
		);
		db_query(Database, DB_Query);
	}
	return 1;
}

SetPlayerGangZones(playerid)
{
	for(new i = 0; i != MAX_TERRITORIES; i ++)
	{
		if(!TERRITORIES[i][territory_VALID]) continue;

		if(TERRITORIES[i][territory_WAR])
		{
			new flash_color, r, g, b, a;
			HexToRGBA(CREW_INFO[ TERRITORIES[i][territory_ATTACKER_CREW_INDEX] ][crew_COLOR], r, g, b, a);
			flash_color = RGBAToHex(r, g, b, 135);

			GangZoneFlashForPlayer(playerid, TERRITORIES[i][territory_GANG_ZONE], flash_color);
		}
		else GangZoneShowForPlayer(playerid, TERRITORIES[i][territory_GANG_ZONE], TERRITORIES[i][territory_COLOR]);
	}
	return 1;
}

stock HexToRGBA(colour, &r, &g, &b, &a) //By Betamaster
{
    r = (colour >> 24) & 0xFF;
    g = (colour >> 16) & 0xFF;
    b = (colour >> 8) & 0xFF;
    a = colour & 0xFF;
}

stock RGBAToHex(r, g, b, a) //By Betamaster
{
    return (r<<24 | g<<16 | b<<8 | a);
}

stock RGBAToARGB(col)
{
	return ((((col) << 24) & 0xFF000000) | (((col) >>> 8) & 0xFFFFFF));
}

stock ARGBToRGBA(col)
{
	return ((((col) << 8) & 0xFFFFFF00) | (((col) >>> 24) & 0xFF));
}

UpdateGangZoneColor(index)
{
	if(TERRITORIES[index][territory_WAR])
	{
		new flash_color, r, g, b, a;
		HexToRGBA(CREW_INFO[ TERRITORIES[index][territory_ATTACKER_CREW_INDEX] ][crew_COLOR], r, g, b, a);
		flash_color = RGBAToHex(r, g, b, 135);

		GangZoneFlashForAll(TERRITORIES[index][territory_GANG_ZONE], flash_color);
	}
	else GangZoneShowForAll(TERRITORIES[index][territory_GANG_ZONE], TERRITORIES[index][territory_COLOR]);
	return 1;
}

/*RemoveTerritoryBySAPD(playerid, crew_index, territory_index)
{
	if(!TERRITORIES[territory_index][territory_OCCUPIED]) return SendClientMessage(playerid, 0xFFFFFFFF, "Territorio no tiene conquista.");
	new DB_Query[256];
	TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] = crew_index;
    format(DB_Query, sizeof DB_Query, "DELETE FROM `CREW_TERRITORIES` WHERE `ID_TERRITORY` = '%d';", TERRITORIES[territory_index][territory_ID]);
    GangZoneShowForAll(TERRITORIES[territory_index][territory_GANG_ZONE], 0xCCCCCC55);
	SendClientMessage(playerid, 0xFFFFFFFF, "Territorio ha sido removido con exito.");
	db_query(Database, DB_Query);
	return 1;
}*/

StartTerritoryAttack(crew_index, territory_index, time)
{
	CREW_INFO[crew_index][crew_FIGHTING] = true;
	CREW_INFO[crew_index][crew_LAST_ATTACK] = gettime();
	TERRITORIES[territory_index][territory_WAR] = true;
	TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] = crew_index;
	TERRITORIES[territory_index][territory_WAR_TIME_LEFT] = time;
	TERRITORIES[territory_index][territory_LAST_ATTACK] = gettime();
	UpdateGangZoneColor(territory_index);

	new message[145];
	format(message, sizeof message, "Conquista:_%s", TimeConvert(TERRITORIES[territory_index][territory_WAR_TIME_LEFT]));
	TextDrawSetString(TERRITORIES[territory_index][territory_TEXTDRAW], message);

	KillTimer(TERRITORIES[territory_index][territory_TIMER]);
	TERRITORIES[territory_index][territory_TIMER] = SetTimerEx("UpdateTerritoryAttack", 1000, false, "i", territory_index);

	if(TERRITORIES[territory_index][territory_OCCUPIED])
	{
		CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_FIGHTING] = true;
		format(message, sizeof message, "{65C207}[MILICOS] {0D91AE}La banda '%s' está atacando un territorio de la banda '%s' en %s.", CREW_INFO[crew_index][crew_NAME], CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_NAME], TERRITORIES[territory_index][territory_NAME]);
	}
	else format(message, sizeof message, "{65C207}[MILICOS] {0D91AE}La banda '%s' está atacando un territorio en %s.", CREW_INFO[crew_index][crew_NAME], TERRITORIES[territory_index][territory_NAME]);


	new message_police[145];
	format(message_police, sizeof message_police, "{4286f4} REPORTE RADIAL  {98baf2}%s {4286f4}está atacando el territorio {98baf2}%s.", CREW_INFO[crew_index][crew_NAME], TERRITORIES[territory_index][territory_NAME]);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_CREW[i][player_crew_VALID])
			{
				SendClientMessage(i, -1, message);
				if(IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
				{
					if(!CHARACTER_INFO[i][ch_WANTED_LEVEL])
					{
						CHARACTER_INFO[i][ch_WANTED_LEVEL] = 1;
						PLAYER_TEMP[i][pt_LAST_SET_WANTED_LEVEL] = gettime();

						PlayerTextDrawSetString(i, PlayerTextdraws[i][ptextdraw_WANTED_LEVEL][1], "]");
						PlayerTextDrawShow(i, PlayerTextdraws[i][ptextdraw_WANTED_LEVEL][0]);
						PlayerTextDrawShow(i, PlayerTextdraws[i][ptextdraw_WANTED_LEVEL][1]);
					}

					new r, g, b, a;
					HexToRGBA(CREW_INFO[ PLAYER_CREW[i][player_crew_INDEX] ][crew_COLOR], r, g, b, a);
					SetPlayerColorEx(i, RGBAToHex(r, g, b, 0));

					TextDrawShowForPlayer(i, Textdraws[textdraw_TERRITORY_BOX]);
					TextDrawShowForPlayer(i, TERRITORIES[territory_index][territory_TEXTDRAW]);
				}
			}

			if(PLAYER_WORKS[i][WORK_POLICE])
			{
				if(PLAYER_TEMP[i][pt_WORKING_IN] == WORK_POLICE)
				{
					SendClientMessage(i, -1, message_police);
				}
			}
		}
	}
	return 1;
}

forward UpdateTerritoryAttack(territory_index);
public UpdateTerritoryAttack(territory_index)
{
	if(!TERRITORIES[territory_index][territory_VALID]) return 1;
	if(!TERRITORIES[territory_index][territory_WAR]) return 1;

	if(TERRITORIES[territory_index][territory_WAR_TIME_LEFT] <= 0)
	{
		new old_crew = TERRITORIES[territory_index][territory_CREW_ID];

		CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_FIGHTING] = false;
		TERRITORIES[territory_index][territory_CREW_ID] = CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_ID];
		TERRITORIES[territory_index][territory_CREW_INDEX] = TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX];

		new r, g, b, a;
		HexToRGBA(CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_COLOR], r, g, b, a);
		TERRITORIES[territory_index][territory_COLOR] = RGBAToHex(r, g, b, 135);

		new message[145];
		format(message, sizeof message, "{f4e242}[BANDAS] {FFFFFF}La banda '%s' ha conquistado un nuevo territorio.", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_NAME]);

		new DB_Query[256], label_str[256];

		if(TERRITORIES[territory_index][territory_OCCUPIED])
		{
			for(new i = 0; i != MAX_PROPERTIES; i ++)
			{
				if(!PROPERTY_INFO[i][property_VALID]) continue;
				if(!PROPERTY_INFO[i][property_CREW]) continue;
				if(PROPERTY_INFO[i][property_CREW_ID] != old_crew) continue;

				if(IsPointInDynamicArea(TERRITORIES[territory_index][territory_AREA], PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], PROPERTY_INFO[i][property_EXT_Z]))
				{
					PROPERTY_INFO[i][property_CREW_ID] = TERRITORIES[territory_index][territory_CREW_ID];
					new name_house[24];
			        if(PROPERTY_INFO[ i ][property_EXTRA] == 0) name_house = "Casa";
			        if(PROPERTY_INFO[ i ][property_EXTRA] == 2) name_house = "Garaje";
			        if(PROPERTY_INFO[ i ][property_EXTRA] == 4) name_house = "Negocio";

					format
					(
						label_str,
						sizeof label_str,
						"\
					    	{00FF00}%s\n\n\
							{FFFFFF}Dirección {00FF00}%d\n\
							{FFFFFF}Dueño {00FF00}Banda %s\n\
							{FFFFFF}Presiona {00CCFF}N {FFFFFF}o usa {FFFF00}/entrar{FFFFFF}.\
						", name_house, PROPERTY_INFO[i][property_ID], CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_NAME]
					);

					UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFAA, label_str);
				}
			}

			format(DB_Query, sizeof DB_Query, "UPDATE `CREW_TERRITORIES` SET `ID_CREW` = '%d' WHERE `ID_TERRITORY` = '%d';", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_ID], TERRITORIES[territory_index][territory_ID]);
		}
		else format(DB_Query, sizeof DB_Query, "INSERT INTO `CREW_TERRITORIES` (`ID_CREW`, `ID_TERRITORY`) VALUES ('%d', '%d');", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_ID], TERRITORIES[territory_index][territory_ID]);
		db_query(Database, DB_Query);

		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_LAST_ATTACK] = gettime();
		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_FIGHTING] = false;
		TERRITORIES[territory_index][territory_WAR] = false;
		TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] = 0;
		TERRITORIES[territory_index][territory_WAR_TIME_LEFT] = 0;
		TERRITORIES[territory_index][territory_LAST_ATTACK] = gettime();
		KillTimer(TERRITORIES[territory_index][territory_TIMER]);
		UpdateGangZoneColor(territory_index);
		TERRITORIES[territory_index][territory_OCCUPIED] = true;

		new prize = minrand(300, 600);
		new prize_message[64];
		format(prize_message, sizeof prize_message, "{FFFFFF}Has ganado $%d por conquistar este territorio.", prize);

		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PLAYER_CREW[i][player_crew_VALID])
				{
					SendClientMessage(i, -1, message);
					if(IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
					{
						if(PLAYER_CREW[i][player_crew_ID] == TERRITORIES[territory_index][territory_CREW_ID])
						{
							GivePlayerCash(i, prize);
							SendClientMessage(i, -1, prize_message);
						}
						SetPlayerColorEx(i, PLAYER_COLOR);

						TextDrawHideForPlayer(i, Textdraws[textdraw_TERRITORY_BOX]);
						TextDrawHideForPlayer(i, TERRITORIES[territory_index][territory_TEXTDRAW]);
					}
				}
			}
		}
		return 1;
	}


	TERRITORIES[territory_index][territory_WAR_TIME_LEFT] --;
	new message[145];
	format(message, sizeof message, "Conquista:_%s", TimeConvert(TERRITORIES[territory_index][territory_WAR_TIME_LEFT]));
	TextDrawSetString(TERRITORIES[territory_index][territory_TEXTDRAW], message);


	new attackers_in_area = CountCrewPlayersInTerritory(TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX], territory_index);
	if(attackers_in_area <= 0)
	{
		format(message, sizeof message, "{65C207}[MILICOS] {0D91AE}Jaja que downs, la banda '%s' no ha podido conquistar el territorio que estaba atacando.", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_NAME]);

		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_LAST_ATTACK] = gettime();
		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_FIGHTING] = false;
		CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_FIGHTING] = false;
		TERRITORIES[territory_index][territory_WAR] = false;
		TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] = 0;
		TERRITORIES[territory_index][territory_WAR_TIME_LEFT] = 0;
		TERRITORIES[territory_index][territory_LAST_ATTACK] = gettime();
		KillTimer(TERRITORIES[territory_index][territory_TIMER]);
		UpdateGangZoneColor(territory_index);

		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PLAYER_CREW[i][player_crew_VALID])
				{
					SendClientMessage(i, -1, message);
					if(IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
					{
						SetPlayerColorEx(i, PLAYER_COLOR);

						TextDrawHideForPlayer(i, Textdraws[textdraw_TERRITORY_BOX]);
						TextDrawHideForPlayer(i, TERRITORIES[territory_index][territory_TEXTDRAW]);
					}
				}
			}
		}
		return 1;
	}

	KillTimer(TERRITORIES[territory_index][territory_TIMER]);
	TERRITORIES[territory_index][territory_TIMER] = SetTimerEx("UpdateTerritoryAttack", 1000, false, "i", territory_index);
	return 1;
}

CountCrewPlayersInTerritory(crew_index, territory_index)
{
	new count;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_CREW[i][player_crew_VALID])
			{
				if(PLAYER_CREW[i][player_crew_INDEX] == crew_index)
				{
					if(CHARACTER_INFO[i][ch_STATE] == ROLEPLAY_STATE_NORMAL && PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if(IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
						{
							count ++;
						}
					}
				}
			}
		}
	}
	return count;
}

CountSAPDPlayersInTerritory(territory_index)
{
	new count;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_WORKS[i][WORK_POLICE])
			{
				if(CHARACTER_INFO[i][ch_STATE] == ROLEPLAY_STATE_NORMAL && PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
				{
					if(IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
					{
						count ++;
					}
				}
			}
		}
	}
	return count;
}

SetPlayerColorEx(playerid, color)
{
	PLAYER_TEMP[playerid][pt_PLAYER_COLOR] = color;
	return SetPlayerColor(playerid, color);
}

forward EnviarPopUp(playerid,message[]);
public EnviarPopUp(playerid,message[])
{
	new string2[84];

	for(new len = strlen(message), pos; pos < len; pos ++)
	{
		switch(message[pos])
		{
			case 'à': message[pos] = 151;
			case 'á': message[pos] = 152;
			case 'â': message[pos] = 153;
			case 'ä': message[pos] = 154;
			case 'À': message[pos] = 128;
			case 'Á': message[pos] = 129;
			case 'Â': message[pos] = 130;
			case 'Ä': message[pos] = 131;
			case 'è': message[pos] = 157;
			case 'é': message[pos] = 158;
			case 'ê': message[pos] = 159;
			case 'ë': message[pos] = 160;
			case 'È': message[pos] = 134;
			case 'É': message[pos] = 135;
			case 'Ê': message[pos] = 136;
			case 'Ë': message[pos] = 137;
			case 'ì': message[pos] = 161;
			case 'í': message[pos] = 162;
			case 'î': message[pos] = 163;
			case 'ï': message[pos] = 164;
			case 'Ì': message[pos] = 138;
			case 'Í': message[pos] = 139;
			case 'Î': message[pos] = 140;
			case 'Ï': message[pos] = 141;
			case 'ò': message[pos] = 165;
			case 'ó': message[pos] = 166;
			case 'ô': message[pos] = 167;
			case 'ö': message[pos] = 168;
			case 'Ò': message[pos] = 142;
			case 'Ó': message[pos] = 143;
			case 'Ô': message[pos] = 144;
			case 'Ö': message[pos] = 145;
			case 'ù': message[pos] = 169;
			case 'ú': message[pos] = 170;
			case 'û': message[pos] = 171;
			case 'ü': message[pos] = 172;
			case 'Ù': message[pos] = 146;
			case 'Ú': message[pos] = 147;
			case 'Û': message[pos] = 148;
			case 'Ü': message[pos] = 149;
			case 'ñ': message[pos] = 174;
			case 'Ñ': message[pos] = 173;
			case '¡': message[pos] = 64;
			case '¿': message[pos] = 175;
			case '`': message[pos] = 177;
			case '&': message[pos] = 38;
			default:  message[pos] = message[pos];
		}
	}

	format(string2,sizeof(string2),"%s",message);
	if (not==0)
	{
		TextDrawSetString(PopUp,string2); TextDrawShowForAll(PopUp); not=1; SetTimerEx("OcultarPopUp", 15000, 0,"d",playerid);
	}
	else if (not1==0)
	{
		TextDrawSetString(PopUp1,string2); TextDrawShowForAll(PopUp1); not1=1; SetTimerEx("OcultarPopUp1", 15000, 0,"d",playerid);
	}
	else if (not2==0)
	{
		TextDrawSetString(PopUp2,string2); TextDrawShowForAll(PopUp2); not2=1; SetTimerEx("OcultarPopUp2", 15000, 0,"d",playerid);
	}
	return 1;
}

forward OcultarPopUp(playerid);
public OcultarPopUp(playerid)
{
	TextDrawHideForAll(PopUp);
	not=0;
}

forward OcultarPopUp1(playerid);
public OcultarPopUp1(playerid)
{
	TextDrawHideForAll(PopUp1);
	not1=0;
}

forward OcultarPopUp2(playerid);
public OcultarPopUp2(playerid)
{
	TextDrawHideForAll(PopUp2);
	not2=0;
}

LoadServerInfo()
{
	new File:ECO = fopen("SERVER/ECO.txt", io_read), eco_str[256];
	if(ECO)
	{
		fread(ECO, eco_str);
		sscanf(eco_str, "p<,>fffffdd", MULTIPLIER_PROPERITES, MULTIPLIER_VEHICLES, MULTIPLIER_TOYS, MULTIPLIER_SKINS, MULTIPLIER_WEAPONS, SD_VALUE, SU_SD_PRICE);
		fclose(ECO);
	}


	new File:AC = fopen("SERVER/AC.txt", io_read), ac_str[128], ac_num;
	if(AC)
	{
		while(fread(AC, ac_str))
		{
			if(ac_num >= sizeof(ac_Info)) break;
			sscanf(ac_str, "p<,>bbdd", ac_Info[ac_num][ac_Enabled], ac_Info[ac_num][ac_Kick], ac_Info[ac_num][ac_Detections], ac_Info[ac_num][ac_Interval]);
			ac_num ++;
		}
		fclose(AC);
	}
	return 1;
}

WriteAnticheatRules()
{
	new File:AC = fopen("SERVER/AC.txt", io_write), ac_str[128];
	if(AC)
	{
		for(new i = 0; i != sizeof(ac_Info); i ++)
		{
			format(ac_str, sizeof ac_str, "%d,%d,%d,%d\r\n", ac_Info[i][ac_Enabled], ac_Info[i][ac_Kick], ac_Info[i][ac_Detections], ac_Info[i][ac_Interval]);
			fwrite(AC, ac_str);
		}
		fclose(AC);
	}
	return 1;
}

ShowPlayeriPhoneApps(playerid)
{
	if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON)
	{
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][0]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][1]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][2]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][3]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][4]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][5]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][6]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][7]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][8]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][9]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][10]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][11]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][12]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][13]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][15]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][16]);
		TextDrawShowForPlayer(playerid, Textdraws[textdraw_iPhone][5]);
  	}
  	else if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF)
  	{
  	    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14]);
  	}
	return 1;
}

HidePlayeriPhoneApps(playerid)
{
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][3]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][5]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][6]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][7]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][8]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][9]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][10]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][11]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][12]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][13]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][15]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][16]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_iPhone][5]);

	PLAYER_TEMP[playerid][pt_SHOW_IPHONE] = false;
	CancelSelectTextDrawEx(playerid);
	return 1;
}

ShowPlayeriPhone(playerid)
{
	if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON)
 	{
		TextDrawShowForPlayer(playerid, Textdraws[textdraw_iPhone][0]);//iphone
		TextDrawShowForPlayer(playerid, Textdraws[textdraw_iPhone][1]);//wallpapaper
		TextDrawShowForPlayer(playerid, Textdraws[textdraw_iPhone][2]);//notch 1
		TextDrawShowForPlayer(playerid, Textdraws[textdraw_iPhone][3]);//notch 2
		TextDrawShowForPlayer(playerid, Textdraws[textdraw_iPhone][4]);//notch 3
		TextDrawShowForPlayer(playerid, Textdraws[textdraw_iPhone][7]);//slide
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14]);
	}
	else if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF)
  	{
 		TextDrawShowForPlayer(playerid, Textdraws[textdraw_iPhone][0]);//iphone
		TextDrawShowForPlayer(playerid, Textdraws[textdraw_iPhone][2]);//notch 1
		TextDrawShowForPlayer(playerid, Textdraws[textdraw_iPhone][3]);//notch 2
		TextDrawShowForPlayer(playerid, Textdraws[textdraw_iPhone][4]);//notch 3
  	}
	return 1;
}

HidePlayeriPhone(playerid)
{
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_iPhone][0]);//iphone
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_iPhone][1]);//wallpapaper
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_iPhone][2]);//notch 1
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_iPhone][3]);//notch 2
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_iPhone][4]);//notch 3
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_iPhone][7]);//slide
	return 1;
}

ShowPlayeriPhoneHour(playerid, seconds = 0)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][17]);

	if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON)
	{
		TextDrawShowForPlayer(playerid, Textdraws[textdraw_iPhone][6]);//hora
		TextDrawShowForPlayer(playerid, Textdraws[textdraw_iPhone][8]);//mensaje
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14]);
	}
	else if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF)
	{
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14]);
	}

	if(seconds) PLAYER_TEMP[playerid][pt_TIMERS][17] = SetTimerEx("HidePlayeriPhoneHour", seconds * 1000, false, "i", playerid);
	return 1;
}

HidePlayeriPhoneHour(playerid);
public HidePlayeriPhoneHour(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][17]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_iPhone][6]);//hora
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_iPhone][8]);//mensaje
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14]);
	HidePlayeriPhone(playerid);
	PLAYER_TEMP[playerid][pt_SHOW_IPHONE_HOUR] = false;
	return 1;
}

ShowPlayerMessageWarning(playerid, click[], reason[])
{
	new td_str1[240]; format(td_str1, sizeof td_str1, "%s", click);
	TextDrawSetString(Textdraws[textdraw_WARNING][1], td_str1);
	new td_str2[240]; format(td_str2, sizeof td_str2, "%s", reason);
	TextDrawSetString(Textdraws[textdraw_WARNING][4], td_str2);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_WARNING][0]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_WARNING][1]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_WARNING][2]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_WARNING][3]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_WARNING][4]);
}

ShowPlayerMessageNotification(playerid, message[], seconds = 0)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][17]);

	for(new len = strlen(message), pos; pos < len; pos ++)
	{
		switch(message[pos])
		{
			case 'à': message[pos] = 151;
			case 'á': message[pos] = 152;
			case 'â': message[pos] = 153;
			case 'ä': message[pos] = 154;
			case 'À': message[pos] = 128;
			case 'Á': message[pos] = 129;
			case 'Â': message[pos] = 130;
			case 'Ä': message[pos] = 131;
			case 'è': message[pos] = 157;
			case 'é': message[pos] = 158;
			case 'ê': message[pos] = 159;
			case 'ë': message[pos] = 160;
			case 'È': message[pos] = 134;
			case 'É': message[pos] = 135;
			case 'Ê': message[pos] = 136;
			case 'Ë': message[pos] = 137;
			case 'ì': message[pos] = 161;
			case 'í': message[pos] = 162;
			case 'î': message[pos] = 163;
			case 'ï': message[pos] = 164;
			case 'Ì': message[pos] = 138;
			case 'Í': message[pos] = 139;
			case 'Î': message[pos] = 140;
			case 'Ï': message[pos] = 141;
			case 'ò': message[pos] = 165;
			case 'ó': message[pos] = 166;
			case 'ô': message[pos] = 167;
			case 'ö': message[pos] = 168;
			case 'Ò': message[pos] = 142;
			case 'Ó': message[pos] = 143;
			case 'Ô': message[pos] = 144;
			case 'Ö': message[pos] = 145;
			case 'ù': message[pos] = 169;
			case 'ú': message[pos] = 170;
			case 'û': message[pos] = 171;
			case 'ü': message[pos] = 172;
			case 'Ù': message[pos] = 146;
			case 'Ú': message[pos] = 147;
			case 'Û': message[pos] = 148;
			case 'Ü': message[pos] = 149;
			case 'ñ': message[pos] = 174;
			case 'Ñ': message[pos] = 173;
			case '¡': message[pos] = 64;
			case '¿': message[pos] = 175;
			case '`': message[pos] = 177;
			case '&': message[pos] = 38;
			default:  message[pos] = message[pos];
		}
	}

	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFY], message);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFY]);

	if(seconds) PLAYER_TEMP[playerid][pt_TIMERS][17] = SetTimerEx("HidePlayerMessageNotification", seconds * 1000, false, "i", playerid);
	return 1;
}

HidePlayerMessageNotification(playerid);
public HidePlayerMessageNotification(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][17]);
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFY], "_");
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_NOTIFY]);
	return 1;
}

ShowPlayerMessage(playerid, message[], seconds = 0)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][17]);

	for(new len = strlen(message), pos; pos < len; pos ++)
	{
		switch(message[pos])
		{
			case 'à': message[pos] = 151;
			case 'á': message[pos] = 152;
			case 'â': message[pos] = 153;
			case 'ä': message[pos] = 154;
			case 'À': message[pos] = 128;
			case 'Á': message[pos] = 129;
			case 'Â': message[pos] = 130;
			case 'Ä': message[pos] = 131;
			case 'è': message[pos] = 157;
			case 'é': message[pos] = 158;
			case 'ê': message[pos] = 159;
			case 'ë': message[pos] = 160;
			case 'È': message[pos] = 134;
			case 'É': message[pos] = 135;
			case 'Ê': message[pos] = 136;
			case 'Ë': message[pos] = 137;
			case 'ì': message[pos] = 161;
			case 'í': message[pos] = 162;
			case 'î': message[pos] = 163;
			case 'ï': message[pos] = 164;
			case 'Ì': message[pos] = 138;
			case 'Í': message[pos] = 139;
			case 'Î': message[pos] = 140;
			case 'Ï': message[pos] = 141;
			case 'ò': message[pos] = 165;
			case 'ó': message[pos] = 166;
			case 'ô': message[pos] = 167;
			case 'ö': message[pos] = 168;
			case 'Ò': message[pos] = 142;
			case 'Ó': message[pos] = 143;
			case 'Ô': message[pos] = 144;
			case 'Ö': message[pos] = 145;
			case 'ù': message[pos] = 169;
			case 'ú': message[pos] = 170;
			case 'û': message[pos] = 171;
			case 'ü': message[pos] = 172;
			case 'Ù': message[pos] = 146;
			case 'Ú': message[pos] = 147;
			case 'Û': message[pos] = 148;
			case 'Ü': message[pos] = 149;
			case 'ñ': message[pos] = 174;
			case 'Ñ': message[pos] = 173;
			case '¡': message[pos] = 64;
			case '¿': message[pos] = 175;
			case '`': message[pos] = 177;
			case '&': message[pos] = 38;
			default:  message[pos] = message[pos];
		}
	}

	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], message);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE]);

	if(seconds) PLAYER_TEMP[playerid][pt_TIMERS][17] = SetTimerEx("HidePlayerMessage", seconds * 1000, false, "i", playerid);
	return 1;
}

HidePlayerMessage(playerid);
public HidePlayerMessage(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][17]);
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], "_");
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE]);
	return 1;
}

WriteEconomyMultipliers()
{
	new File:ECO = fopen("SERVER/ECO.txt", io_write), eco_str[256];
	if(ECO)
	{
		format(eco_str, sizeof eco_str, "%f,%f,%f,%f,%f,%d,%d", MULTIPLIER_PROPERITES, MULTIPLIER_VEHICLES, MULTIPLIER_TOYS, MULTIPLIER_SKINS, MULTIPLIER_WEAPONS, SD_VALUE, SU_SD_PRICE);
		fwrite(ECO, eco_str);
		fclose(ECO);
	}
	return 1;
}

UpdateEconomy(type = -1)
{
	new label_str[256];

	if(type == -1)
	{
		for(new i = 0; i != MAX_PROPERTIES; i ++)
		{
			if(!PROPERTY_INFO[i][property_VALID]) continue;
			PROPERTY_INFO[i][property_PRICE] = floatround(PROPERTY_INFO[i][property_PRICE_BASE] * MULTIPLIER_PROPERITES, floatround_ceil);

			if(!PROPERTY_INFO[i][property_SOLD])
			{
			    new type_house[24];
				if(PROPERTY_INFO[i][property_EXTRA] == 0) type_house = "Casa en venta";
				if(PROPERTY_INFO[i][property_EXTRA] == 2) type_house = "Garaje en venta";
				if(PROPERTY_INFO[i][property_EXTRA] == 3) type_house = "Oficina en venta";
				if(PROPERTY_INFO[i][property_EXTRA] == 4) type_house = "Negocio en venta";
				format
				(
					label_str,
					sizeof label_str,
					"\
					    {00FF00}%s\n\n\
						{FFFFFF}Dirección: {00FF00}%d\n\
						{FFFFFF}Precio: {41f48f}$%s\n\
						{FFFFFF}Nivel necesario: {00FF00}%d\n\
						{FFFFFF}Usa {FFFF00}/ayuda propiedades {FFFFFF}para ver como comprarla.\
					",type_house, PROPERTY_INFO[i][property_ID], number_format_thousand(PROPERTY_INFO[i][property_PRICE]), PROPERTY_INFO[i][property_LEVEL]
				);
				UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFAA, label_str);
			}
		}

		for(new i = 0; i != MAX_VEHICLES; i ++)
		{
			if(!SELL_VEHICLES[i][sell_vehicle_VALID]) continue;
			SELL_VEHICLES[i][sell_vehicle_PRICE] = floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE] * MULTIPLIER_VEHICLES, floatround_ceil);

			if(SELL_VEHICLES[i][sell_vehicle_EXTRA] > 1 && SELL_VEHICLES[i][sell_vehicle_PRICE] > 1)
			{
				format
				(
					label_str,
						sizeof label_str,
						"\
							{00FF00}%s\n\n\
							{FFFFFF}Precio: {f44242}%d koins\n\
						", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[i][sell_vehicle_EXTRA]
				);
	  		}
			else if(SELL_VEHICLES[i][sell_vehicle_EXTRA] < 1)
	  		{
				format
				(
					label_str,
						sizeof label_str,
						"\
							{00FF00}%s\n\n\
							{FFFFFF}Precio: {41f48f}$%s\n\
						", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[i][sell_vehicle_PRICE])
				);
			}
			UpdateDynamic3DTextLabelText(SELL_VEHICLES[i][sell_vehicle_LABEL_ID], 0xFFFFFFAA, label_str);
		}

		for(new i = 0; i != sizeof(Toys_Shop_Sombreros); i ++) Toys_Shop_Sombreros[i][shop_toy_price] = floatround(Toys_Shop_Sombreros[i][shop_toy_price_base] * MULTIPLIER_TOYS, floatround_ceil);
		for(new i = 0; i != sizeof(Toys_Shop_Gafas); i ++) Toys_Shop_Gafas[i][shop_toy_price] = floatround(Toys_Shop_Gafas[i][shop_toy_price_base] * MULTIPLIER_TOYS, floatround_ceil);
		for(new i = 0; i != sizeof(Toys_Shop_Mascaras); i ++) Toys_Shop_Mascaras[i][shop_toy_price] = floatround(Toys_Shop_Mascaras[i][shop_toy_price_base] * MULTIPLIER_TOYS, floatround_ceil);
		for(new i = 0; i != sizeof(Toys_Shop_Mochilas); i ++) Toys_Shop_Mochilas[i][shop_toy_price] = floatround(Toys_Shop_Mochilas[i][shop_toy_price_base] * MULTIPLIER_TOYS, floatround_ceil);
		for(new i = 0; i != sizeof(Toys_Shop_Relojes); i ++) Toys_Shop_Relojes[i][shop_toy_price] = floatround(Toys_Shop_Relojes[i][shop_toy_price_base] * MULTIPLIER_TOYS, floatround_ceil);
		for(new i = 0; i != sizeof(Toys_Shop_Especiales); i ++) Toys_Shop_Especiales[i][shop_toy_price] = floatround(Toys_Shop_Especiales[i][shop_toy_price_base] * MULTIPLIER_TOYS, floatround_ceil);
		for(new i = 0; i != sizeof(Binco_Shop_Male_Skins); i ++) Binco_Shop_Male_Skins[i][2] = floatround(Binco_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Binco_Shop_Female_Skins); i ++) Binco_Shop_Female_Skins[i][2] = floatround(Binco_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Suburban_Shop_Male_Skins); i ++) Suburban_Shop_Male_Skins[i][2] = floatround(Suburban_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Suburban_Shop_Female_Skins); i ++) Suburban_Shop_Female_Skins[i][2] = floatround(Suburban_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Prolaps_Shop_Male_Skins); i ++) Prolaps_Shop_Male_Skins[i][2] = floatround(Prolaps_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Prolaps_Shop_Female_Skins); i ++) Prolaps_Shop_Female_Skins[i][2] = floatround(Prolaps_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Didier_Shop_Male_Skins); i ++) Didier_Shop_Male_Skins[i][2] = floatround(Didier_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Didier_Shop_Female_Skins); i ++) Didier_Shop_Female_Skins[i][2] = floatround(Didier_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Victim_Shop_Male_Skins); i ++) Victim_Shop_Male_Skins[i][2] = floatround(Victim_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Victim_Shop_Female_Skins); i ++) Victim_Shop_Female_Skins[i][2] = floatround(Victim_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Zip_Shop_Male_Skins); i ++) Zip_Shop_Male_Skins[i][2] = floatround(Zip_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Zip_Shop_Female_Skins); i ++) Zip_Shop_Female_Skins[i][2] = floatround(Zip_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
	}
	else
	{
		switch(type)
		{
			case 0:
			{
				for(new i = 0; i != MAX_PROPERTIES; i ++)
				{
					if(!PROPERTY_INFO[i][property_VALID]) continue;
					PROPERTY_INFO[i][property_PRICE] = floatround(PROPERTY_INFO[i][property_PRICE_BASE] * MULTIPLIER_PROPERITES, floatround_ceil);

					if(!PROPERTY_INFO[i][property_SOLD])
					{
	    				new type_house[24];
						if(PROPERTY_INFO[i][property_EXTRA] == 0) type_house = "Casa en venta";
						if(PROPERTY_INFO[i][property_EXTRA] == 2) type_house = "Garaje en venta";
						if(PROPERTY_INFO[i][property_EXTRA] == 3) type_house = "Oficina en venta";
						if(PROPERTY_INFO[i][property_EXTRA] == 4) type_house = "Negocio en venta";
						format
						(
							label_str,
							sizeof label_str,
							"\
							    {00FF00}%s\n\n\
								{FFFFFF}Dirección: {00FF00}%d\n\
								{FFFFFF}Precio: {41f48f}$%s\n\
								{FFFFFF}Nivel necesario: {00FF00}%d\n\
								{FFFFFF}Usa {FFFF00}/ayuda propiedades {FFFFFF}para ver como comprarla.\
							",type_house, PROPERTY_INFO[i][property_ID], number_format_thousand(PROPERTY_INFO[i][property_PRICE]), PROPERTY_INFO[i][property_LEVEL]
						);
						UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFAA, label_str);
					}
				}
			}
			case 1:
			{
				for(new i = 0; i != MAX_VEHICLES; i ++)
				{
					if(!SELL_VEHICLES[i][sell_vehicle_VALID]) continue;
					SELL_VEHICLES[i][sell_vehicle_PRICE] = floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE] * MULTIPLIER_VEHICLES, floatround_ceil);

					if(SELL_VEHICLES[i][sell_vehicle_EXTRA] > 1 && SELL_VEHICLES[i][sell_vehicle_PRICE] > 1)
					{
						format
						(
							label_str,
								sizeof label_str,
								"\
									{00FF00}%s\n\n\
									{FFFFFF}Precio: {f44242}%d koins\n\
								", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[i][sell_vehicle_EXTRA]
						);
			  		}
					else if(SELL_VEHICLES[i][sell_vehicle_EXTRA] < 1)
			  		{
						format
						(
							label_str,
								sizeof label_str,
								"\
									{00FF00}%s\n\n\
									{FFFFFF}Precio: {41f48f}$%s\n\
								", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[i][sell_vehicle_PRICE])
						);
					}
					UpdateDynamic3DTextLabelText(SELL_VEHICLES[i][sell_vehicle_LABEL_ID], 0xFFFFFFAA, label_str);
				}
			}
			case 2:
			{
				for(new i = 0; i != sizeof(Toys_Shop_Sombreros); i ++) Toys_Shop_Sombreros[i][shop_toy_price] = floatround(Toys_Shop_Sombreros[i][shop_toy_price_base] * MULTIPLIER_TOYS, floatround_ceil);
				for(new i = 0; i != sizeof(Toys_Shop_Gafas); i ++) Toys_Shop_Gafas[i][shop_toy_price] = floatround(Toys_Shop_Gafas[i][shop_toy_price_base] * MULTIPLIER_TOYS, floatround_ceil);
				for(new i = 0; i != sizeof(Toys_Shop_Mascaras); i ++) Toys_Shop_Mascaras[i][shop_toy_price] = floatround(Toys_Shop_Mascaras[i][shop_toy_price_base] * MULTIPLIER_TOYS, floatround_ceil);
				for(new i = 0; i != sizeof(Toys_Shop_Mochilas); i ++) Toys_Shop_Mochilas[i][shop_toy_price] = floatround(Toys_Shop_Mochilas[i][shop_toy_price_base] * MULTIPLIER_TOYS, floatround_ceil);
				for(new i = 0; i != sizeof(Toys_Shop_Relojes); i ++) Toys_Shop_Relojes[i][shop_toy_price] = floatround(Toys_Shop_Relojes[i][shop_toy_price_base] * MULTIPLIER_TOYS, floatround_ceil);
				for(new i = 0; i != sizeof(Toys_Shop_Especiales); i ++) Toys_Shop_Especiales[i][shop_toy_price] = floatround(Toys_Shop_Especiales[i][shop_toy_price_base] * MULTIPLIER_TOYS, floatround_ceil);
			}
			case 3:
			{
				for(new i = 0; i != sizeof(Binco_Shop_Male_Skins); i ++) Binco_Shop_Male_Skins[i][2] = floatround(Binco_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Binco_Shop_Female_Skins); i ++) Binco_Shop_Female_Skins[i][2] = floatround(Binco_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Suburban_Shop_Male_Skins); i ++) Suburban_Shop_Male_Skins[i][2] = floatround(Suburban_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Suburban_Shop_Female_Skins); i ++) Suburban_Shop_Female_Skins[i][2] = floatround(Suburban_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Prolaps_Shop_Male_Skins); i ++) Prolaps_Shop_Male_Skins[i][2] = floatround(Prolaps_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Prolaps_Shop_Female_Skins); i ++) Prolaps_Shop_Female_Skins[i][2] = floatround(Prolaps_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Didier_Shop_Male_Skins); i ++) Didier_Shop_Male_Skins[i][2] = floatround(Didier_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Didier_Shop_Female_Skins); i ++) Didier_Shop_Female_Skins[i][2] = floatround(Didier_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Victim_Shop_Male_Skins); i ++) Victim_Shop_Male_Skins[i][2] = floatround(Victim_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Victim_Shop_Female_Skins); i ++) Victim_Shop_Female_Skins[i][2] = floatround(Victim_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Zip_Shop_Male_Skins); i ++) Zip_Shop_Male_Skins[i][2] = floatround(Zip_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Zip_Shop_Female_Skins); i ++) Zip_Shop_Female_Skins[i][2] = floatround(Zip_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
			}
		}
	}
	return 1;
}

CMD:eco(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	ShowDialog(playerid, DIALOG_SERVER_ECO);
	return 1;
}

ReLockPlayerVehicles(playerid, bool:remove = false)
{
	if(ACCOUNT_INFO[playerid][ac_ID] == 0) return 0;
	if(ACCOUNT_INFO[playerid][ac_SU]) return 0;

	new DBResult:Result, DB_Query[128];
	format(DB_Query, sizeof(DB_Query), "SELECT `ID` FROM `PLAYER_VEHICLES` WHERE `ID_USER` = '%d' ORDER BY `ID` DESC LIMIT %d;", ACCOUNT_INFO[playerid][ac_ID], MAX_SU_VEHICLES);
	Result = db_query(Database, DB_Query);

	new total_vehicles, veh_did;
	for(new i; i < db_num_rows(Result); i++ )
	{
		if(total_vehicles >= MAX_SU_VEHICLES)
		{
			printf("---> MAX_SU_VEHICLES superado al cargar de base de datos.");
			break;
		}

		veh_did = db_get_field_int(Result, 0);
		new vehicle_id = GetPlayerVehicleIdFromDbId(veh_did);
		if(vehicle_id != INVALID_VEHICLE_ID)
		{
			PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = true;
			if(total_vehicles >= MAX_NU_VEHICLES)
			{
				if(remove)
				{
					if(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_OCCUPIED])
					{
						SetVehicleVelocity(vehicle_id, 0.0, 0.0, 0.0);
						if(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DRIVER] != INVALID_PLAYER_ID) RemovePlayerFromVehicle(playerid);
					}
				}
				GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_ENGINE] = 0;
				GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_LIGHTS] = 0;
				GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_DOORS] = 1;
				PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = false;
				UpdateVehicleParams(vehicle_id);
			}
		}

		total_vehicles ++;
		db_next_row(Result);
	}
	db_free_result(Result);
	return 1;
}

UnlockPlayerVehicles(playerid)
{
	new total;
	for(new i = 0; i != MAX_VEHICLES; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;

		if(PLAYER_VEHICLES[i][player_vehicle_ID] == ACCOUNT_INFO[playerid][ac_ID])
		{
			if(total >= MAX_SU_VEHICLES) break;

			PLAYER_VEHICLES[i][player_vehicle_ACCESSIBLE] = true;
		}
	}
	return total;
}

GetPlayerVehicleIdFromDbId(veh_did)
{
	for(new i = 0; i != MAX_VEHICLES; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;

		if(PLAYER_VEHICLES[i][player_vehicle_ID] == veh_did) return i;
	}
	return INVALID_VEHICLE_ID;
}

CMD:vip(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_SU]) ShowDialog(playerid, DIALOG_SU);
	else ShowDialog(playerid, DIALOG_SU_BUY);
	return 1;
}
CMD:premium(playerid, params[])
{
	return cmd_vip(playerid, params);
}
CMD:crew(playerid, params[])
{
	return cmd_banda(playerid, params);
}

/*CMD:coins(playerid, params[])
{
	ShowDialog(playerid, DIALOG_SD);
	return 1;
}*/
CMD:sdf(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player, sd;
	if(sscanf(params, "ud", to_player, sd)) return SendClientMessage(playerid, -1, "* Uso: /sdf <player_id> <sd>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);

	ACCOUNT_INFO[to_player][ac_SD] = sd;
	SendClientMessageEx(to_player, -1, "Has comprado {f44242}%d koins.", sd);
	PlayerPlaySound(to_player, 1058, 0.0, 0.0, 0.0);

	new DB_Query[128];
	format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';", ACCOUNT_INFO[to_player][ac_SD], ACCOUNT_INFO[to_player][ac_ID]);
	db_query(Database, DB_Query);

	return 1;
}
CMD:sds(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player, sd;
	if(sscanf(params, "ud", to_player, sd)) return SendClientMessage(playerid, -1, "* Uso: /sds <player_id> <sd>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);

	ACCOUNT_INFO[to_player][ac_SD] += sd;
	SendClientMessageEx(to_player, -1, "Has comprado {f44242}%d koins.", sd);
	PlayerPlaySound(to_player, 1058, 0.0, 0.0, 0.0);
	PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);

	new DB_Query[128];
	format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SD` = '%d' WHERE `ID` = '%d';", ACCOUNT_INFO[to_player][ac_SD], ACCOUNT_INFO[to_player][ac_ID]);
	db_query(Database, DB_Query);

	return 1;
}
CMD:blacksapd(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso: /blacksapd <player_id>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "* ERROR: Jugador (%d) desconectado", to_player);

	SendClientMessage(to_player, -1, "Ya puedes volver a ser SAPD.");
	PlayerPlaySound(to_player, 1058, 0.0, 0.0, 0.0);

	new DB_Query[128];
	format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `BLACK_SAPD` = '0' WHERE `ID` = '%d';", ACCOUNT_INFO[to_player][ac_ID]);
	db_query(Database, DB_Query);

	return 1;
}

/*CMD:setvip(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;
	new to_player, vip_level, days;
	if(sscanf(params, "udd", to_player, vip_level, days)) return SendClientMessage(playerid, -1, "Syntax: /setvip <player_id> <vip_level> <dias>");
	if(!IsPlayerConnected(to_player)) return SendClientMessageEx(playerid, -1, "Jugador (%d) desconectado", to_player);

	SetPlayerVip(to_player, vip_level, 0, days);

	SendCmdLogToAdmins(playerid, "setvip", params);
	return 1;
}*/

CheckPlayerSuperUser(playerid)
{
	new DBResult:Result, DB_Query[145], bool:expired;
	format(DB_Query, sizeof DB_Query, "SELECT `ID` FROM `CUENTA` WHERE `ID` = '%d' AND DATETIME('NOW') >= `SU_EXPIRE_DATE`;", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result))
	{
		expired = true;
		format(DB_Query, sizeof DB_Query, "UPDATE `CUENTA` SET `SU` = '0', `SU_EXPIRE_DATE` = '0' WHERE `ID` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
		db_query(Database, DB_Query);
	}
	db_free_result(Result);

	if(expired)
	{
		ACCOUNT_INFO[playerid][ac_SU] = false;
		ACCOUNT_INFO[playerid][ac_SU_EXPIRE_DATE][0] = EOS;
		SendClientMessage(playerid, -1, "{FFFFFF}¡Tu {00FF00}premium {FFFFFF}ha expirado. Usa {00ff00}/premium {ffffff}para reovarlo.");
		if(GetPlayerSkin(playerid) == CHARACTER_INFO[playerid][ch_SKIN]) SetPlayerToys(playerid);
		ReLockPlayerVehicles(playerid, true);
	}

	PLAYER_TEMP[playerid][pt_LAST_SU_CHECK] = gettime();
	return 1;
}

CMD:setskin(playerid, params[])
{
    if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

    new to_player, skin;
    if(sscanf(params, "ud", to_player, skin)) return SendClientMessage(playerid, -1, "* Uso: /setskin <player_id> <skin>");
    if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "* ERROR: Jugador desconectado");

	CHARACTER_INFO[to_player][ch_SKIN] = skin;
    SetPlayerSkin(to_player, CHARACTER_INFO[to_player][ch_SKIN]);

	SendClientMessageEx(playerid, -1, "* Skin '%s (%d)' cambiado a '%d'.", ACCOUNT_INFO[to_player][ac_NAME], to_player, skin);
    return 1;
}

CMD:setfstyle(playerid, params[])
{
    if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

    new to_player, style;
    if(sscanf(params, "ud", to_player, style)) return SendClientMessage(playerid, -1, "* Uso: /setfstyle <player_id> <style>");
    if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "* ERROR: Jugador desconectado");

	CHARACTER_INFO[to_player][ch_FIGHT_STYLE] = style;
    SetPlayerFightingStyle(to_player, CHARACTER_INFO[to_player][ch_FIGHT_STYLE]);

	SendClientMessageEx(playerid, -1, "* Estilo de pelea de '%s (%d)' cambiado a '%d'.", ACCOUNT_INFO[to_player][ac_NAME], to_player, style);
    return 1;
}


CMD:sendls(playerid, params[])
{
    if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;

    new to_player;
    if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso: /sendls <player_id>");
    if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, -1, "* ERROR: Jugador desconectado");

	CHARACTER_INFO[to_player][ch_STATE] = ROLEPLAY_STATE_NORMAL;
	CHARACTER_INFO[to_player][ch_INTERIOR_EXTRA] = 0;
	PLAYER_TEMP[to_player][pt_INTERIOR_INDEX] = 0;
	CHARACTER_INFO[to_player][ch_INTERIOR] = 0;
	CHARACTER_INFO[to_player][ch_POLICE_JAIL_TIME] = 0;
    SetPlayerPosEx(to_player, 1555.400390, -1675.611694, 16.195312, 0.0, 0, 0, true);
	SendClientMessageEx(playerid, -1, "* Jugador '%s (%d)' fue llevado a LS.", ACCOUNT_INFO[to_player][ac_NAME], to_player);
    return 1;
}
 //769.219238, -1745.894165, 13.077295
CMD:asdf(playerid, params[])
{
	SetPlayerPos(playerid, 769.219238, -1745.894165, 13.077295);
}
CMD:offsendpos(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_account;
	if(sscanf(params, "d", to_account)) return SendClientMessage(playerid, -1, "* Uso: /offsendpos <DB-ID>");

	new DBResult:Result, DB_Query[360];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME`, `CONNECTED`, `PLAYERID` FROM `CUENTA` WHERE `ID` = '%d';", to_account);
	Result = db_query(Database, DB_Query);

   	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(db_num_rows(Result))
	{
		new id, get_name[24], connected, player_id;

		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");

		if(connected) SendClientMessageEx(playerid, -1, "* JUGADOR '%s' DB-ID '%d' conectado se ocupo sendpos, su player_id: %d.", get_name, id, player_id);
		else
		{
			format(DB_Query, sizeof DB_Query, "UPDATE `PERSONAJE` SET `POS_X` = '%f', `POS_Y` = '%f', `POS_Z` = '%f', `ANGLE` = '0.0', `STATE` = '%d', `INTERIOR` = '0', `LOCAL_INTERIOR` = '0', `POLICE_JAIL_TIME` = '0' WHERE `ID_USER` = '%d';", x, y, z, ROLEPLAY_STATE_NORMAL, to_account);
			db_query(Database, DB_Query);

			SendClientMessageEx(playerid, -1, "* Jugador '%s' DB-ID '%d' ahora aparecerá en tu posicion actual.", get_name, id);
		}
	}
	else SendClientMessage(playerid, -1, "* ERROR: No se encontro la DB-ID.");
	db_free_result(Result);
	return 1;
}

CMD:offsendls(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 4) return 0;

	new to_account;
	if(sscanf(params, "d", to_account)) return SendClientMessage(playerid, -1, "* Uso: /osendls <DB-ID>");

	new DBResult:Result, DB_Query[360];
	format(DB_Query, sizeof DB_Query, "SELECT `ID`, `NAME`, `CONNECTED`, `PLAYERID` FROM `CUENTA` WHERE `ID` = '%d';", to_account);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result))
	{
		new id, get_name[24], connected, player_id;

		id = db_get_field_assoc_int(Result, "ID");
		db_get_field_assoc(Result, "NAME", get_name, 24);
		connected = db_get_field_assoc_int(Result, "CONNECTED");
		player_id = db_get_field_assoc_int(Result, "PLAYERID");

		if(connected) SendClientMessageEx(playerid, -1, "* JUGADOR '%s' DB-ID '%d' conectado utilice /sendls, su player_id: %d.", get_name, id, player_id);
		else
		{
			format(DB_Query, sizeof DB_Query, "UPDATE `PERSONAJE` SET `POS_X` = '%i', `POS_Y` = '-1675.611694', `POS_Z` = 16.195312, `ANGLE` = '0.0', `STATE` = '%d', `INTERIOR` = '0', `LOCAL_INTERIOR` = '0', `POLICE_JAIL_TIME` = '0' WHERE `ID_USER` = '%d';", ROLEPLAY_STATE_NORMAL, to_account);
			db_query(Database, DB_Query);

			SendClientMessageEx(playerid, -1, "* Jugador '%s' DB-ID '%d' ahora aparecerá en LS.", get_name, id);
		}
	}
	else SendClientMessage(playerid, -1, "* ERROR: No se encontro la DB-ID.");
	db_free_result(Result);
	return 1;
}

CMD:vpcar(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new modelid;
	if(sscanf(params, "d", modelid)) return SendClientMessage(playerid, -1, "* Uso: /vpcar <modelid>");

	new DBResult:Result, DB_Query[120], player_vehicles;
	format(DB_Query, sizeof(DB_Query), "SELECT COUNT(`ID_USER`) AS `VEHICLES` FROM `PLAYER_VEHICLES` WHERE `ID_USER` = '%d';", ACCOUNT_INFO[playerid][ac_ID]);
	Result = db_query(Database, DB_Query);
	if(db_num_rows(Result)) player_vehicles = db_get_field_assoc_int(Result, "VEHICLES");
	db_free_result(Result);


	if(player_vehicles >= MAX_SU_VEHICLES) return SendClientMessageEx(playerid, -1, "* No puedes tener más vehículos, el límite es %d.", MAX_SU_VEHICLES);

	new Float:pos[4];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	GetPlayerFacingAngle(playerid, pos[3]);

	new vid = AddPersonalVehicle
	(
		playerid,
		modelid,
		pos[0],
		pos[1],
		pos[2],
		pos[3],
		1,
		1,
		VEHICLE_INFO[ modelid - 400 ][vehicle_info_MAX_GAS]
	);
	if(!vid) return SendClientMessage(playerid, -1, "{FFFFFF}* No se pueden añadir más vehículos.");

	SendCmdLogToAdmins(playerid, "vpcar", params);
	return 1;
}

CMD:mute(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso: /mute <playerid>");

	if(!ACCOUNT_INFO[to_player][ac_DOUBT_CHANNEL]) return SendClientMessage(playerid, -1, "{FFFFFF}* ERROR: Esta persona ya está callada.");

	ACCOUNT_INFO[to_player][ac_DOUBT_CHANNEL] = false;

	new str[145]; format(str, 145, " El jugador {bfbfbf}%s(%d){edcf2a} no se le permite hablar por el chat de dudas.{edcf2a} Razón: {bfbfbf}Mal uso.",ACCOUNT_INFO[to_player][ac_NAME], to_player);
	SendClientMessageToAll(0xedcf2aFF, str);

	SendCmdLogToAdmins(playerid, "mute", params);
	return 1;
}

CMD:unmute(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 3) return 0;

	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso: /unmute <playerid>");

	if(ACCOUNT_INFO[to_player][ac_DOUBT_CHANNEL]) return SendClientMessage(playerid, -1, "{FFFFFF}* ERROR: Esta persona no está callada.");

	ACCOUNT_INFO[to_player][ac_DOUBT_CHANNEL] = true;
	SendClientMessage(to_player, -1, "{FFFFFF}Se te ha dado de nuevo el permiso para usar el canal de dudas.");

	SendCmdLogToAdmins(playerid, "unmute", params);
	return 1;
}

CMD:revivir(playerid, params[])
{
	if(ACCOUNT_INFO[playerid][ac_ADMIN_LEVEL] < 5) return 0;

	new to_player;
	if(sscanf(params, "u", to_player)) return SendClientMessage(playerid, -1, "* Uso: /revivir <playerid>");

	if(CHARACTER_INFO[to_player][ch_STATE] != ROLEPLAY_STATE_CRACK) return SendClientMessage(playerid, -1, "{FFFFFF}* ERROR: Esta persona no está herida.");

	DisablePlayerInjuredMark(to_player);
	CHARACTER_INFO[to_player][ch_STATE] = ROLEPLAY_STATE_NORMAL;
	SetWeaponsForPlayer(to_player);
	if(ACCOUNT_INFO[to_player][ac_SU]) SetPlayerHealthEx(playerid, 50.0);
	else SetPlayerHealthEx(to_player, 25.0);
	ApplyAnimation(to_player, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
	ClearAnimations(to_player);

	SendCmdLogToAdmins(playerid, "revivir", params);
	return 1;
}



CMD:tuning(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, 0xFFFFFFFF, "* ERROR: No estás en nigún vehículo.");
	if(CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_CRACK || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_JAIL || CHARACTER_INFO[playerid][ch_STATE] == ROLEPLAY_STATE_ARRESTED) return SendClientMessage(playerid, -1, "{FFFFFF}Ahora no puedes usar este comando.");
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return ShowPlayerMessage(playerid, "* ERROR: No estás en el lugar adecuado", 3);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2511.0972,-1518.2462,23.7690)) return ShowPlayerMessage(playerid, "* ERROR: No estás en el lugar adecuado", 3);

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendClientMessage(playerid, 0xFFFFFFFF, "* ERROR: Solo puedes tunear tus vehículos personales.");
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != ACCOUNT_INFO[playerid][ac_ID]) return SendClientMessage(playerid, 0xFFFFFFFF, "* ERROR: Solo puedes tunear tus vehículos personales.");
	if(!VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_VALID]) return SendClientMessage(playerid, 0xFFFFFFFF, "* ERROR: Este vehículo no se puede tunear.");
	if(vehicleid == 560) return SendClientMessage(playerid, 0xFFFFFFFF, "* ERROR: Este vehículo no se puede tunear.");
	if(ACCOUNT_INFO[playerid][ac_LEVEL] < 2) return SendClientMessage(playerid, -1, "{FFFFFF}* ERROR: Debes de ser al menos nivel 2 para tunear vehículos aquí.");

	PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE] = true;
	PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] = vehicleid;

	SetVehiclePosEx(vehicleid, 2511.0972,-1518.2462,23.7690);
	SetVehicleZAngle(vehicleid, 0.0);
	SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
	SetVehicleVirtualWorldEx(vehicleid, playerid + MAX_PLAYERS);
	SetPlayerVirtualWorld(playerid, playerid + MAX_PLAYERS);

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
	UpdateVehicleParams(vehicleid);
	HidePlayerSpeedoMeter(playerid);
	SetCameraBehindPlayer(playerid);

	ShowDialog(playerid, DIALOG_VOBJECT_MENU);
	return 1;
}

stock GetPlayerCameraLookAt(playerid, &Float:X, &Float:Y, &Float:Z)
{
    new Float:pos[6];
    GetPlayerCameraPos(playerid, pos[0], pos[1], pos[2]);
    GetPlayerCameraFrontVector(playerid, pos[3], pos[4], pos[5]);
    X = floatadd(pos[0], pos[3]);
    Y = floatadd(pos[1], pos[4]);
    Z = floatadd(pos[2], pos[5]);
    return 1;
}

UpdateTuningShop(playerid)
{
	if(PLAYER_TEMP[playerid][pt_TUNING_PICKUP] != INVALID_STREAMER_ID)
	{
		DestroyDynamicPickup(PLAYER_TEMP[playerid][pt_TUNING_PICKUP]);
		PLAYER_TEMP[playerid][pt_TUNING_PICKUP] = INVALID_STREAMER_ID;
	}
	//pickup tuning
	PLAYER_TEMP[playerid][pt_TUNING_PICKUP] = CreateDynamicPickup(Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_MODELID], 1, 2516.5750, -1519.9558, 24.0192, playerid + MAX_PLAYERS, -1, playerid);

	new td_str[128];
	format(td_str, sizeof td_str, "Objeto:_%d/%d~n~Precio:_$%s", PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] + 1, sizeof Tuning_Shop_Objects, number_format_thousand( Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_PRICE] ) );
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], td_str);
	return 1;
}

CancelPlayerTuningShop(playerid)
{
	SetCameraBehindPlayer(playerid);

	if(PLAYER_TEMP[playerid][pt_TUNING_PICKUP] != INVALID_STREAMER_ID)
	{
		DestroyDynamicPickup(PLAYER_TEMP[playerid][pt_TUNING_PICKUP]);
		PLAYER_TEMP[playerid][pt_TUNING_PICKUP] = INVALID_STREAMER_ID;
	}
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][0]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][1]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][2]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][3]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP]);
	CancelSelectTextDrawEx(playerid);

	PLAYER_TEMP[playerid][pt_TUNING_GARAGE_SHOP] = false;
	return 1;
}

GetVehicleFreeObjectSlot(vehicleid)
{
	for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
	{
		if(!VEHICLE_OBJECTS[vehicleid][i][vobject_VALID]) return i;
	}
	return -1;
}

UpdateVehicleAttachedObject(vehicleid, slot, material = false)
{
	if(VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED])
	{
		if(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] == INVALID_STREAMER_ID)
		{
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] = 	CreateDynamicObject
																	(
																		VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],
																		0.0,
																		0.0,
																		0.0,
																		0.0,
																		0.0,
																		0.0
																	);
		}

		if(material)
		{
			switch(VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE])
			{
				case VOBJECT_TYPE_OBJECT:
				{
					for(new i = 0; i != MAX_VEHICLE_OBJECTS_INDEXS; i ++)
					{
						SetDynamicObjectMaterial(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], i, -1, "none", "none", VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][i]);
					}
				}
				case VOBJECT_TYPE_TEXT:
				{
					SetDynamicObjectMaterialText
					(
						VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID],
						0,
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_TEXT],
						130,
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT],
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_SIZE],
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_BOLD],
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_COLOR],
						0,
						OBJECT_MATERIAL_TEXT_ALIGN_CENTER
					);
				}
				case VOBJECT_TYPE_COUNTRY_FLAG: TextureCountryFlag(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], 1, VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0]);
				case VOBJECT_TYPE_COUNTRY_PANEL: TextureCountryFlag(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], 0, VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0]);
			}
		}

		AttachDynamicObjectToVehicle
		(
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID],
			vehicleid,
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2]
		);
	}
	else
	{
		if(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID]);
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
		}
	}
	return 1;
}

EditVehicleObject(playerid, vehicleid, slot)
{
	if(PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] != INVALID_OBJECT_ID)
	{
		DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
		PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
	}

	PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] = slot;
	GetVehiclePos(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);

	new Float:pos[3];
	pos[0] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0] + VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0];
	pos[1] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1] + VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1];
	pos[2] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] + VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2];

	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][0] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][1] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][2] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][3] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][0];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][4] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][1];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][5] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][2];

	PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = CreatePlayerObject(playerid, 999, pos[0], pos[1], pos[2], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2]);
	SetPlayerObjectMaterial(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT], 0, 0, "null", "null");
	SetPlayerObjectMaterial(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT], 1, 0, "null", "null");

	Streamer_Update(playerid);
	EditPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
	return 1;
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	if(playerobject)
	{
		if(objectid == PLAYER_TEMP[playerid][pt_PIVOT_OBJECT])
		{
			switch(response)
			{
				case EDIT_RESPONSE_CANCEL:
				{
					if(PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] != INVALID_OBJECT_ID)
					{
						DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
						PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
					}
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][0];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][1];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][2];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][0] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][3];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][1] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][4];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][2] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][5];
					UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
					Streamer_Update(playerid);

					SendClientMessage(playerid, -1, "{FFFFFF}Has cancelado la edición.");
					ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
				}
				case EDIT_RESPONSE_FINAL:
				{
					if(PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] != INVALID_OBJECT_ID)
					{
						DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
						PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
					}

					new Float:v_size[3];
					GetVehicleModelInfo(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_MODELID], VEHICLE_MODEL_INFO_SIZE, v_size[0], v_size[1], v_size[2]);

					if	(
							(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] >= v_size[0] || -v_size[0] >= VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0]) ||
							(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] >= v_size[1] || -v_size[1] >= VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1]) ||
							(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] >= v_size[2] || -v_size[2] >= VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2])
						)
					{
						SendClientMessage(playerid, -1, "{FFFFFF}La posición del objeto está demasiado lejos del vehículo.");
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][0];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][1];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][2];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][0] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][3];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][1] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][4];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][2] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][5];
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
						Streamer_Update(playerid);
					}

					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED] = true;
					SendClientMessage(playerid, -1, "{FFFFFF}Objeto actualizado.");
					ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
				}
				case EDIT_RESPONSE_UPDATE:
				{
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] = fX - GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_POS][0];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] = fY - GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_POS][1];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] = fZ - GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_POS][2];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][0] = fRotX;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][1] = fRotY;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][2] = fRotZ;
					UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
				}
			}
		}
	}
	return 1;
}

SetVehicleVirtualWorldEx(vehicleid, worldid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD] = worldid;

	for(new i = 0; i != MAX_SU_VOBJECTS; i ++)
	{
		if(!VEHICLE_OBJECTS[vehicleid][i][vobject_VALID]) continue;
		if(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID] == INVALID_STREAMER_ID) continue;

		Streamer_SetIntData(STREAMER_TYPE_OBJECT, VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID], E_STREAMER_WORLD_ID, GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD]);
	}

	SetVehicleVirtualWorld(vehicleid, worldid);
	return 1;
}

TextureCountryFlag(objectid, index, country)
{
	new text_flag[128], material_size, font[24], font_size, text_alignment;
	switch(country)
	{
		case 0: // Alemania
		{
			text_flag		= "{231f20}ggg\n{e01f26}ggg\n{e3bc22}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 1: // Argentina
		{
			text_flag		= "{1FBEF2}ggg\n{ffffff}ggg\n{1FBEF2}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 2: // Austria
		{
			text_flag		= "{d81e05}ggg\n{ffffff}ggg\n{d81e05}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 3: // Belgica
		{
			text_flag		= "{000000}g{ffd600}g{e80000}g\n{000000}g{ffd600}g{e80000}g\n{000000}g{ffd600}g{e80000}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 4: // Bolivia
		{
			text_flag		= "{d52b1e}ggg\n{f9e300}ggg\n{007934}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 5: // Bulgaria
		{
			text_flag		= "{ffffff}ggg\n{00966e}ggg\n{d62612}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 6: // Chile
		{
			text_flag		= "{04019a}g{ffffff}gg\n{fe0002}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 7: // Colombia
		{
			text_flag		= "{fcd116}ggg\n{003893}ggg\n{ce1126}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 0;
		}
		case 8: // El Salvador
		{
			text_flag		= "{0f47af}ggg\n{ffffff}ggg\n{0f47af}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 9: // España
		{
			text_flag		= "{c60b1e}ggg\n{ffc400}ggg\n{c60b1e}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 10: // Estonia
		{
			text_flag		= "{3a75c4}ggg\n{000000}ggg\n{ffffff}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 11: // Francia
		{
			text_flag		= "{00209f}g{ffffff}g{f42a41}g\n{00209f}g{ffffff}g{f42a41}g\n{00209f}g{ffffff}g{f42a41}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 12: // Guatemala
		{
			text_flag		= "{4997d0}g{ffffff}g{4997d0}g\n{4997d0}g{ffffff}g{4997d0}g\n{4997d0}g{ffffff}g{4997d0}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 13: // Holanda
		{
			text_flag		= "{ad1b28}ggg\n{fefefe}ggg\n{204589}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 14: // Hungria
		{
			text_flag		= "{d2232c}ggg\n{ffffff}ggg\n{008d46}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 15: // India
		{
			text_flag		= "{ff9933}ggg\n{ffffff}ggg\n{138808}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 16: // Indonesia
		{
			text_flag		= "{ce1126}ggg\n{ffffff}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 17: // Irlanda
		{
			text_flag		= "{009e60}g{ffffff}g{f77f00}g\n{009e60}g{ffffff}g{f77f00}g\n{009e60}g{ffffff}g{f77f00}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 18: // Italia
		{
			text_flag		= "{009246}g{ffffff}g{ce2b37}g\n{009246}g{ffffff}g{ce2b37}g\n{009246}g{ffffff}g{ce2b37}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 19: // Lituania
		{
			text_flag		= "{fdb913}ggg\n{006a44}ggg\n{c1272d}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 20: // Luxemburgo
		{
			text_flag		= "{ef2b2d}ggg\n{ffffff}ggg\n{00a3dd}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 21: // Madagascar
		{
			text_flag		= "{ffffff}g{d11f33}gg\n{ffffff}g{00a651}gg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 22: // Malta
		{
			text_flag		= "{ffffff}g{d11f33}g\n{ffffff}g{d11f33}g\n{ffffff}g{d11f33}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 23: // Mali
		{
			text_flag		= "{14b53a}g{fcd116}g{ce1126}g\n{14b53a}g{fcd116}g{ce1126}g\n{14b53a}g{fcd116}g{ce1126}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 24: // México
		{
			text_flag		= "{006847}g{ffffff}g{ce1126}g\n{006847}g{ffffff}g{ce1126}g\n{006847}g{ffffff}g{ce1126}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 25: // Nigeria
		{
			text_flag		= "{008751}g{ffffff}g{008751}g\n{008751}g{ffffff}g{008751}g\n{008751}g{ffffff}g{008751}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 26: // Panamá
		{
			text_flag		= "{ffffff}g{d21034}g\n{0067c6}g{ffffff}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 0;
		}
		case 27: // Paraguay
		{
			text_flag		= "{d52b1e}ggg\n{ffffff}ggg\n{0038a8}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 28: // Perú
		{
			text_flag		= "{e30000}g{ffffff}g{e30000}g\n{e30000}g{ffffff}g{e30000}g\n{e30000}g{ffffff}g{e30000}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 29: // Polonia
		{
			text_flag		= "{ffffff}ggg\n{dc143c}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 30: // Rumania
		{
			text_flag		= "{002b7f}g{fcd116}g{ce1126}g\n{002b7f}g{fcd116}g{ce1126}g\n{002b7f}g{fcd116}g{ce1126}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 31: // Rusia
		{
			text_flag		= "{ffffff}ggg\n{054da2}ggg\n{e01f26}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 32: // Ucrania
		{
			text_flag		= "{3a75c4}ggg\n{f9dd16}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 33: // Venezuela
		{
			text_flag		= "{f7d117}ggg\n{0033ab}ggg\n{cf142b}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
	}

	SetDynamicObjectMaterialText
	(
		objectid,
		index,
		text_flag,
		material_size,
		font,
		font_size,
		0,
		0xFFFFFFFF,
		0,
		text_alignment
	);
	return 1;
}

RegisterNewVehicleObject(vehicleid, slot)
{
	new DBResult:Result, DB_Query[1800];
	format(DB_Query, sizeof DB_Query,
	"\
		INSERT INTO `VEHICLE_OBJECTS`\
		(\
			`ID_VEHICLE`, `TYPE`, `NAME`, `MODELID`,\
			`OFF_X`, `OFF_Y`, `OFF_Z`, `ROT_X`, `ROT_Y`, `ROT_Z`,\
			`ATTACHED`,\
			`COLOR_0`, `COLOR_1`, `COLOR_2`, `COLOR_3`, `COLOR_4`,\
			`TEXT`, `FONT`, `FONT_SIZE`, `FONT_BOLD`, `FONT_COLOR`\
		)\
		VALUES\
		(\
			'%d', '%d', '%q', '%d',\
			'%f', '%f', '%f', '%f', '%f', '%f',\
			'%d',\
			'%d', '%d', '%d', '%d', '%d',\
			'%q', '%q', '%d', '%d', '%d'\
		);\
		SELECT MAX(`ID`) FROM `VEHICLE_OBJECTS`;\
	",
		PLAYER_VEHICLES[vehicleid][player_vehicle_ID], VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE], VEHICLE_OBJECTS[vehicleid][slot][vobject_NAME], VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],
		VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2],
		VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED],
		VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][3], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][4],
		VEHICLE_OBJECTS[vehicleid][slot][vobject_text_TEXT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_SIZE], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_BOLD], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_COLOR]
	);
	Result = db_query(Database, DB_Query);

	if(db_num_rows(Result)) VEHICLE_OBJECTS[vehicleid][slot][vobject_ID] = db_get_field_int(Result, 0);
	db_free_result(Result);
	return 1;
}

UpdateVehicleObject(vehicleid, slot)
{
	new DB_Query[1800];
	format(DB_Query, sizeof DB_Query,

		"UPDATE `VEHICLE_OBJECTS` SET \
			`ID_VEHICLE` = '%d', `TYPE` = '%d', `NAME` = '%q', `MODELID` = '%d',\
			`OFF_X` = '%f', `OFF_Y` = '%f', `OFF_Z` = '%f', `ROT_X` = '%f', `ROT_Y` = '%f', `ROT_Z` = '%f',\
			`ATTACHED` = '%d',\
			`COLOR_0` = '%d', `COLOR_1` = '%d', `COLOR_2` = '%d', `COLOR_3` = '%d', `COLOR_4` = '%d',\
			`TEXT` = '%q', `FONT` = '%q', `FONT_SIZE` = '%d', `FONT_BOLD` = '%d', `FONT_COLOR` = '%d' \
		WHERE `ID` = '%d';\
		",
			PLAYER_VEHICLES[vehicleid][player_vehicle_ID], VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE], VEHICLE_OBJECTS[vehicleid][slot][vobject_NAME], VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][3], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][4],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_text_TEXT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_SIZE], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_BOLD], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_COLOR],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ID]
	);

	db_query(Database, DB_Query);
	return 1;
}


stock ExportPropertiesDatabaseInserts()
{
	new DBResult:Result;
	Result = db_query(Database, "SELECT `PROPERTY`.*, `PROPERTY_INFO`.* FROM `PROPERTY`, `PROPERTY_INFO` WHERE `PROPERTY_INFO`.ID_PROPERTY = `PROPERTY`.ID;");

	new
		Float:ext_X, Float:ext_Y, Float:ext_Z, Float:ext_ANGLE, ext_INTERIOR, ext_FREEZE,
		id_Interior,

		property_price, property_level, property_extra
	;

	new File:handle = fopen("properties.txt", io_write), line_str[512];
	if(!handle) return print("Error - properties.txt");

	for(new i = 0; i < db_num_rows(Result); i ++)
	{

		ext_X = db_get_field_assoc_float(Result, "EXT_X");
		ext_Y = db_get_field_assoc_float(Result, "EXT_Y");
		ext_Z = db_get_field_assoc_float(Result, "EXT_Z");
		ext_ANGLE = db_get_field_assoc_float(Result, "EXT_ANGLE");
		ext_INTERIOR = db_get_field_assoc_int(Result, "EXT_INTERIOR");
		ext_FREEZE = db_get_field_assoc_int(Result, "EXT_FREEZE");

		id_Interior = db_get_field_assoc_int(Result, "ID_INTERIOR");

		property_price = db_get_field_assoc_int(Result, "PRICE");
		property_level = db_get_field_assoc_int(Result, "LEVEL");
		property_extra = db_get_field_assoc_int(Result, "EXTRA");


		format
		(line_str, sizeof line_str,
			"INSERT INTO `PROPERTY` (`EXT_X`, `EXT_Y`, `EXT_Z`, `EXT_ANGLE`, `EXT_INTERIOR`, `EXT_FREEZE`, `ID_INTERIOR`) VALUES ('%f', '%f', '%f', '%f', '%d', '%d', '%d');\r\n",
			ext_X, ext_Y, ext_Z, ext_ANGLE, ext_INTERIOR, ext_FREEZE,
			id_Interior
		);
		fwrite(handle, line_str);

		format
		(line_str, sizeof line_str,
			"INSERT INTO `PROPERTY_INFO` (`ID_PROPERTY`, `PRICE`, `LEVEL`, `EXTRA`) SELECT MAX(`ID`), '%d', '%d', '%d' FROM `PROPERTY`;\r\n\r\n",
			property_price, property_level, property_extra
		);
		fwrite(handle, line_str);

		db_next_row(Result);
	}
	db_free_result(Result);
	fclose(handle);
	return 1;
}

forward CheckPlayerPause(playerid);
public CheckPlayerPause(playerid)
{
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NONE) return 1;
    if( (gettime() >= ACCOUNT_INFO[playerid][ac_CHECKAFK]+5) )
    {
        if(ACCOUNT_INFO[playerid][ac_CHECKAFK_STATUS] == 1)
        {
            ACCOUNT_INFO[playerid][ac_CHECKAFK_STATUS] = 0;

			new neccessary_rep = ACCOUNT_INFO[playerid][ac_LEVEL] * 7;
			if(ACCOUNT_INFO[playerid][ac_REP] < neccessary_rep)
			{
				if(ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] > TIME_FOR_REP) ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = TIME_FOR_REP;
				if(ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] <= 900) ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = 3000;
				ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] - (gettime() * 1000 - PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP]);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][2]);
			}
		}
    }
    else
	{
 		if(ACCOUNT_INFO[playerid][ac_CHECKAFK_STATUS] == 0)
        {
            ACCOUNT_INFO[playerid][ac_CHECKAFK_STATUS] = 1;
			new neccessary_rep = ACCOUNT_INFO[playerid][ac_LEVEL] * 7;
			if(ACCOUNT_INFO[playerid][ac_REP] < neccessary_rep)
			{
				if(ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] > TIME_FOR_REP) ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = TIME_FOR_REP;
				if(ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] <= 900) ACCOUNT_INFO[playerid][ac_TIME_FOR_REP] = 3000;
				PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP] = gettime() * 1000;
				PLAYER_TEMP[playerid][pt_TIMERS][2] = SetTimerEx("AddPlayerReputation", ACCOUNT_INFO[playerid][ac_TIME_FOR_REP], false, "i", playerid);
			}
        }
	}
	return 1;
}

stock IsNumeric(string[])
{
	new length=strlen(string);
	if (length==0) return false;
	for (new i = 0; i < length; i++)
	{
		if (
		(string[i] > '9' || string[i] < '0' && string[i]!='-' && string[i]!='+') // Not a number,'+' or '-'
		|| (string[i]=='-' && i!=0)                                             // A '-' but not at first.
		|| (string[i]=='+' && i!=0)                                             // A '+' but not at first.
	) return false;
}
	if (length==1 && (string[0]=='-' || string[0]=='+')) return false;
	return 1;
}

stock GetWeaponIDFromName(WeaponName[])
{
	if(strfind("molotov",WeaponName,true)!=-1) return 18;
	for(new i = 0; i <= 46; i++)
	{
		switch(i)
		{
			case 0,19,20,21,44,45: continue;
			default:
			{
				new name[32]; GetWeaponName(i,name,32);
				if(strfind(name,WeaponName,true) != -1) return i;
			}
		}
	}
	return -1;
}

stock FPSMode(playerid)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	DestroyObject(ObjectPP[playerid]);
	ObjectPP[playerid] = CreateObject(19300, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	AttachObjectToPlayer(ObjectPP[playerid], playerid, 0.0, 0.3, 0.75  , 0.0, 0.0, 0.0);
 	AttachCameraToObject(playerid, ObjectPP[playerid]);
	return 1;
}

stock IsCbugWeapon(playerid){
  	new weaponID = GetPlayerWeapon(playerid);
  	if(weaponID == 1 || weaponID == 2 || weaponID == 3 || weaponID == 4)
  	{
	return 1;
    }

	return 0;
}

stock FreezeThenAutoUnfreeze(playerid, time){
    TogglePlayerControllable(playerid, 0);
    SetTimerEx("UnfreezeBastard", time, false, "i", playerid);
}

forward UnfreezeBastard(playerid);
public UnfreezeBastard(playerid){
	ClearAnimations(playerid);
    TogglePlayerControllable(playerid, 1);
}

/* BAD HISTORY DE UN JUGADOR

SELECT
	CASE `BY`
		WHEN '-1' THEN 'AC'
		ELSE (SELECT `CUENTA`.`NAME` FROM `CUENTA` WHERE `ID` = `BAD_HISTORY`.`BY`)
	END AS `POR`,
	(SELECT `CUENTA`.`NAME` FROM `CUENTA` WHERE `ID` = `BAD_HISTORY`.`ID_USER`) AS `A`,
	CASE `TYPE`
		WHEN '0' THEN 'ADV		'
		WHEN '1' THEN 'KICK		'
		WHEN '2' THEN 'BAN		'
		WHEN '3' THEN 'TEMP-BAN	'
	END AS `TIPO`,

	`DATE` AS `FECHA`,
	`TEXT` AS `RAZON`
FROM `BAD_HISTORY` WHERE `ID_USER` = '1' ORDER BY DATE DESC;

*/
